{
    "common_7z": {
        "Category": "common",
        "Command": "7z",
        "P-Summary": "file archiv high compress ratio",
        "P-Tasks": "archiv file directori archiv use specif archiv type encrypt exist archiv includ header extract archiv stdout extract archiv user-defin output path extract exist 7z file origin directori structur list avail archiv type list content archiv file",
        "Summary": "A file archiver with high compression ratio.",
        "Task-Script": {
            "Archive a file or directory": "7z a {{archived.7z}} {{path/to/file_or_directory}}",
            "Archive using a specific archive type": "7z a -t{{zip|gzip|bzip2|tar}} {{archived.7z}} {{path/to/file_or_directory}}",
            "Encrypt an existing archive (including headers)": "7z a {{encrypted.7z}} -p{{password}} -mhe=on {{archived.7z}}",
            "Extract an archive to stdout": "7z x {{archived.7z}} -so",
            "Extract an archive with user-defined output path": "7z x {{archived.7z}} -o{{path/to/output}}",
            "Extract an existing 7z file with original directory structure": "7z x {{archived.7z}}",
            "List available archive types": "7z i",
            "List the contents of an archive file": "7z l {{archived.7z}}"
        }
    },
    "common_7za": {
        "Category": "common",
        "Command": "7za",
        "P-Summary": "file archiv high compress ratio\nstandalon version 7z support fewer archiv type",
        "P-Tasks": "archiv file directori archiv use specif archiv type extract exist 7z file origin directori structur list avail archiv type list content archiv file",
        "Summary": "A file archiver with high compression ratio.\nA standalone version of `7z` with support for fewer archive types.",
        "Task-Script": {
            "Archive a file or directory": "7za a {{archived.7z}} {{path/to/file_or_directory}}",
            "Archive using a specific archive type": "7za a -t{{zip|gzip|bzip2|tar}} {{archived}} {{path/to/file_or_directory}}",
            "Extract an existing 7z file with original directory structure": "7za x {{archived}}",
            "List available archive types": "7za i",
            "List the contents of an archive file": "7za l {{archived}}"
        }
    },
    "common_7zr": {
        "Category": "common",
        "Command": "7zr",
        "P-Summary": "file archiv high compress ratio\nstandalon version 7z support 7z file",
        "P-Tasks": "archiv file directori extract exist 7z file origin directori structur list content archiv file",
        "Summary": "A file archiver with high compression ratio.\nA standalone version of `7z` that only supports .7z files.",
        "Task-Script": {
            "Archive a file or directory": "7zr a {{archived.7z}} {{path/to/file_or_directory}}",
            "Extract an existing 7z file with original directory structure": "7zr x {{archived.7z}}",
            "List the contents of an archive file": "7zr l {{archived.7z}}"
        }
    },
    "common_AdGuardHome": {
        "Category": "common",
        "Command": "AdGuardHome",
        "P-Summary": "network-wid softwar block ad track",
        "P-Tasks": "instal uninstal adguard home servic reload configur adguard home servic run adguard home run adguard home specif config set work directori data store start adguard home servic stop restart adguard home servic",
        "Summary": "A network-wide software for blocking ads & tracking.",
        "Task-Script": {
            "Install or uninstall AdGuard Home as a service": "AdGuardHome --service {{install|uninstall}}",
            "Reload the configuration for the AdGuard Home service": "AdGuardHome --service reload",
            "Run AdGuard Home": "AdGuardHome",
            "Run AdGuard Home with a specific config": "AdGuardHome --config {{path/to/AdGuardHome.yaml}}",
            "Set the work directory for data to be stored in": "AdGuardHome --work-dir {{path/to/directory}}",
            "Start the AdGuard Home service": "AdGuardHome --service start",
            "Stop or restart the AdGuard Home service": "AdGuardHome --service {{stop|restart}}"
        }
    },
    "common_Chezmoi": {
        "Category": "common",
        "Command": "Chezmoi",
        "P-Summary": "multi-machin dotfil manag written go",
        "P-Tasks": "appli chang edit sourc state track dotfil fetch latest chang remot repositori initi chezmoi machin see chang chezmoi would make set chezmoi anoth machin download exist dotfil git repo tell chezmoi manag dotfil",
        "Summary": "A multi-machine dotfile manager, written in Go.",
        "Task-Script": {
            "Apply the changes": "chezmoi -v apply",
            "Edit the source state of a tracked dotfile": "chezmoi edit {{path/to/file}}",
            "Fetch the latest changes from a remote repository": "chezmoi update",
            "Initialize chezmoi on your machine": "chezmoi init",
            "See changes chezmoi would make": "chezmoi diff",
            "Set chezmoi up on another machine by downloading existing dotfiles from a git repo": "chezmoi init {{https://example.com/path/to/repository.git}}",
            "Tell chezmoi to manage a dotfile": "chezmoi add {{path/to/file}}"
        }
    },
    "common_IPython": {
        "Category": "common",
        "Command": "IPython",
        "P-Summary": "python shell automat histori dynam object introspect easier configur command complet access system shell",
        "P-Tasks": "clear ipython histori databas delet entri creat default ipython profil enter interact ipython session run python script print path directori default ipython profil start interact ipython session",
        "Summary": "A Python shell with automatic history, dynamic object introspection, easier configuration, command completion, access to the system shell and more.",
        "Task-Script": {
            "Clear the IPython history database, deleting all entries": "ipython history clear",
            "Create default IPython profile": "ipython profile create",
            "Enter an interactive IPython session after running a Python script": "ipython -i {{script.py}}",
            "Print the path to the directory for the default IPython profile": "ipython locate profile",
            "Start an interactive IPython session": "ipython"
        }
    },
    "common_SC-IM": {
        "Category": "common",
        "Command": "SC-IM",
        "P-Summary": "curs base vim-lik spreadsheet calcul\nuse hjkl arrow key navig",
        "P-Tasks": "center align current cell edit number current cell edit string current cell enter numer constant current cell enter string current cell start sc-im",
        "Summary": "A curses based, vim-like spreadsheet calculator.\nUse hjkl or arrow keys to navigate.",
        "Task-Script": {
            "Center align the current cell": "|",
            "Edit number in the current cell": "e",
            "Edit string in the current cell": "E",
            "Enter a numeric constant into the current cell": "=",
            "Enter a string into the current cell": "< or >",
            "Start SC-IM": "scim {{filename}}.csv"
        }
    },
    "common_Stolon": {
        "Category": "common",
        "Command": "Stolon",
        "P-Summary": "cloud nativ postgresql manag postgresql high avail",
        "P-Tasks": "get cluster data get cluster specif get cluster statu updat cluster specif patch json format",
        "Summary": "A cloud native PostgreSQL manager for PostgreSQL high availability.",
        "Task-Script": {
            "Get cluster data": "stolonctl --cluster-name {{cluster_name}} --store-backend {{store_backend}} --store-endpoints {{store_endpoints}} clusterdata",
            "Get cluster specification": "stolonctl --cluster-name {{cluster_name}} --store-backend {{store_backend}} --store-endpoints {{store_endpoints}} spec",
            "Get cluster status": "stolonctl --cluster-name {{cluster_name}} --store-backend {{store_backend}} --store-endpoints {{store_endpoints}} status",
            "Update cluster specification with a patch in json format": "stolonctl --cluster-name {{cluster_name}} --store-backend {{store_backend}} --store-endpoints {{store_endpoints}} update --patch '{{cluster_spec}}'"
        }
    },
    "common_VBoxManage": {
        "Category": "common",
        "Command": "VBoxManage",
        "P-Summary": "command-lin interfac virtualbox\ninclud function gui",
        "P-Tasks": "list virtualbox virtual machin show inform particular virtual machin shutdown virtual machin without save state shutdown virtual machin save current state start virtual machin start virtual machin headless mode updat vbox extens pack",
        "Summary": "Command-line interface to VirtualBox.\nIncludes all the functionality of the GUI and more.",
        "Task-Script": {
            "List all VirtualBox virtual machines": "VBoxManage list vms",
            "Show information about a particular virtual machine": "VBoxManage showvminfo {{name|uuid}}",
            "Shutdown down the virtual machine without saving its state": "VBoxManage controlvm {{name|uuid}} poweroff",
            "Shutdown the virtual machine and save its current state": "VBoxManage controlvm {{name|uuid}} savestate",
            "Start a virtual machine": "VBoxManage startvm {{name|uuid}}",
            "Start a virtual machine in headless mode": "VBoxManage startvm {{name|uuid}} -type headless",
            "Update VBox extension packs": "VBoxManage extpack install --replace {{VboxExtensionPackFileName}}"
        }
    },
    "common_Xephyr": {
        "Category": "common",
        "Command": "Xephyr",
        "P-Summary": "nest x server run x applic",
        "P-Tasks": "creat black window display id :2 start x applic new screen",
        "Summary": "A nested X server that runs as an X application.",
        "Task-Script": {
            "Create a black window with display ID \":2\"": "Xephyr -br -ac -noreset -screen {{800x600}} {{:2}}",
            "Start an X application on the new screen": "DISPLAY=:2 {{command_name}}"
        }
    },
    "common_aapt": {
        "Category": "common",
        "Command": "aapt",
        "P-Summary": "android asset packag tool\ncompil packag android app resourc",
        "P-Tasks": "creat new apk archiv file specifi directori display app metadata version permiss etc\nlist file contain apk archiv",
        "Summary": "Android Asset Packaging Tool.\nCompile and package an Android app's resources.",
        "Task-Script": {
            "Create a new APK archive with files from the specified directory": "aapt package -F {{path/to/app.apk}} {{path/to/directory}}",
            "Display an app's metadata (version, permissions, etc.)": "aapt dump badging {{path/to/app.apk}}",
            "List files contained in an APK archive": "aapt list {{path/to/app.apk}}"
        }
    },
    "common_ab": {
        "Category": "common",
        "Command": "ab",
        "P-Summary": "apach benchmark tool\nsimplest tool perform load test",
        "P-Tasks": "execut 100 http get request given url execut 100 http get request process 10 request concurr given url execut 100 http post request given url use json payload file set maximum number second spend benchmark use keep aliv",
        "Summary": "Apache Benchmarking tool. The simplest tool to perform a load testing.",
        "Task-Script": {
            "Execute 100 HTTP GET requests to a given URL": "ab -n {{100}} {{url}}",
            "Execute 100 HTTP GET requests, processing up to 10 requests concurrently, to given URL": "ab -n {{100}} -c {{10}} {{url}}",
            "Execute 100 HTTP POST requests to a given URL, using a JSON payload from a file": "ab -n {{100}} -T {{application/json}} -p {{data.json}} {{url}}",
            "Set the maximum number of seconds to spend for benchmarking": "ab -t {{60}} {{url}}",
            "Use keep alive": "ab -k {{url}}"
        }
    },
    "common_abduco": {
        "Category": "common",
        "Command": "abduco",
        "P-Summary": "termin session manag",
        "P-Tasks": "attach session read-onli mode attach session dvtm creat exist attach session creat exist detach session list session",
        "Summary": "Terminal session manager.",
        "Task-Script": {
            "Attach to a session in read-only mode": "abduco -Ar {{name}}",
            "Attach to a session with `dvtm`, creating it if it doesn't exist": "abduco -A {{name}}",
            "Attach to a session, creating it if it doesn't exist": "abduco -A {{name}} {{bash}}",
            "Detach from a session": "Ctrl + \\",
            "List sessions": "abduco"
        }
    },
    "common_ack": {
        "Category": "common",
        "Command": "ack",
        "P-Summary": "search tool like grep optim programm",
        "P-Tasks": "count total number match term foo find file contain foo find file specif type list valid type search file specifi string search file specifi regex pattern show file name contain foo number match file",
        "Summary": "A search tool like grep, optimized for programmers.",
        "Task-Script": {
            "Count the total number of matches for the term \"foo\"": "ack -ch {{foo}}",
            "Find files containing \"foo\"": "ack {{foo}}",
            "Find files of a specific type": "ack --ruby {{foo}}",
            "List all valid types": "ack --help-types",
            "Search a file for a specified string": "ack bar \"{{foo bar}}\" {{path/to/file}}",
            "Search a file for the specified regex pattern": "ack bar \"{{[bB]ar \\d+}}\" {{path/to/file}}",
            "Show the file names containing \"foo\" and number of matches in each file": "ack -cl {{foo}}"
        }
    },
    "common_act": {
        "Category": "common",
        "Command": "act",
        "P-Summary": "execut github action local use docker",
        "P-Tasks": "actual run action e\ndri run list avail action run specif action run specif event run default event show verbos log",
        "Summary": "Execute GitHub Actions locally using Docker.",
        "Task-Script": {
            "Do not actually run the actions (i.e. a dry run)": "act -n",
            "List the available actions": "act -l",
            "Run a specific action": "act -a {{action_id}}",
            "Run a specific event": "act {{event_type}}",
            "Run the default event": "act",
            "Show verbose logs": "act -v"
        }
    },
    "common_adb": {
        "Category": "common",
        "Command": "adb",
        "P-Summary": "android debug bridg : commun android emul instanc connect android devic",
        "P-Tasks": "check whether adb server process run start copi file directori target devic copi file directori target devic get list connect devic push android applic emul devic start remot shell target emul devic instanc termin adb server process",
        "Summary": "Android Debug Bridge: communicate with an Android emulator instance or connected Android devices.",
        "Task-Script": {
            "Check whether the adb server process is running and start it": "adb start-server",
            "Copy a file/directory from the target device": "adb pull {{path/to/device_file_or_directory}} {{path/to/local_destination_directory}}",
            "Copy a file/directory to the target device": "adb push {{path/to/local_file_or_directory}} {{path/to/device_destination_directory}}",
            "Get a list of connected devices": "adb devices",
            "Push an Android application to an emulator/device": "adb install -r {{path/to/file.apk}}",
            "Start a remote shell in the target emulator/device instance": "adb shell",
            "Terminate the adb server process": "adb kill-server"
        }
    },
    "common_adb install": {
        "Category": "common",
        "Command": "adb install",
        "P-Summary": "android debug bridg instal : push packag android emul instanc connect android devic",
        "P-Tasks": "grant permiss list app manifest push android applic emul devic quickli updat instal packag updat part apk chang reinstal exist app keep data",
        "Summary": "Android Debug Bridge Install: Push packages to an Android emulator instance or connected Android devices.",
        "Task-Script": {
            "Grant all permissions listed in the app manifest": "adb install -g {{path/to/file.apk}}",
            "Push an Android application to an emulator/device": "adb install {{path/to/file.apk}}",
            "Quickly update an installed package by only updating the parts of the APK that changed": "adb install --fastdeploy {{path/to/file.apk}}",
            "Reinstall an existing app, keeping its data": "adb install -r {{path/to/file.apk}}"
        }
    },
    "common_adb reverse": {
        "Category": "common",
        "Command": "adb reverse",
        "P-Summary": "android debug bridg revers : revers socket connect android emul instanc connect android devic",
        "P-Tasks": "list revers socket connect emul devic remov revers socket connect emul devic remov revers socket connect emul devic revers tcp port emul devic localhost",
        "Summary": "Android Debug Bridge Reverse: reverse socket connections from an Android emulator instance or connected Android devices.",
        "Task-Script": {
            "List all reverse socket connections from emulators and devices": "adb reverse --list",
            "Remove a reverse socket connections from an emulator or device": "adb reverse --remove tcp:{{remote_port}}",
            "Remove all reverse socket connections from all emulators and devices": "adb reverse --remove-all",
            "Reverse a TCP port from an emulator or device to localhost": "adb reverse tcp:{{remote_port}} tcp:{{local_port}}"
        }
    },
    "common_adb shell": {
        "Category": "common",
        "Command": "adb shell",
        "P-Summary": "android debug bridg shell : run remot shell command android emul instanc connect android devic",
        "P-Tasks": "clear data applic emul devic get properti emul devic revert runtim permiss default revok danger permiss applic start remot interact shell emul devic start activ emul devic start home activ emul devic trigger key event",
        "Summary": "Android Debug Bridge Shell: Run remote shell commands on an Android emulator instance or connected Android devices.",
        "Task-Script": {
            "Clear the data of an application on an emulator or device": "adb shell pm clear {{package}}",
            "Get all the properties from emulator or device": "adb shell getprop",
            "Revert all runtime permissions to their default": "adb shell pm reset-permissions",
            "Revoke a dangerous permission for an application": "adb shell pm revoke {{package}} {{permission}}",
            "Start a remote interactive shell on the emulator/device": "adb shell",
            "Start an activity on emulator/device": "adb shell am start -n {{package}}/{{activity}}",
            "Start the home activity on an emulator or device": "adb shell am start -W -c android.intent.category.HOME -a android.intent.action.MAIN",
            "Trigger a key event": "adb shell input keyevent {{keycode}}"
        }
    },
    "common_ag": {
        "Category": "common",
        "Command": "ag",
        "P-Summary": "silver searcher\nlike ack aim faster",
        "P-Tasks": "find foo file name match bar find file contain foo case-insensit print match rather whole line find file contain foo specif directori find file contain foo print line match context find file contain foo list filenam find file whose content match regular express find file name match foo",
        "Summary": "The Silver Searcher. Like ack, but aims to be faster.",
        "Task-Script": {
            "Find \"foo\" in files with a name matching \"bar\"": "ag {{foo}} -G {{bar}}",
            "Find files containing \"FOO\" case-insensitively, and print only the match, rather than the whole line": "ag -i -o {{FOO}}",
            "Find files containing \"foo\" in a specific directory": "ag {{foo}} {{path/to/directory}}",
            "Find files containing \"foo\", and print the line matches in context": "ag {{foo}}",
            "Find files containing \"foo\", but only list the filenames": "ag -l {{foo}}",
            "Find files whose contents match a regular expression": "ag '{{^ba(r|z)$}}'",
            "Find files with a name matching \"foo\"": "ag -g {{foo}}"
        }
    },
    "common_airpaste": {
        "Category": "common",
        "Command": "airpaste",
        "P-Summary": "share messag file network",
        "P-Tasks": "creat join channel receiv file send file send text wait messag display receiv",
        "Summary": "Share messages and files on the same network.",
        "Task-Script": {
            "Create/Join channel": "airpaste {{channel_name}}",
            "Receive file": "airpaste > {{path/to/file}}",
            "Send file": "airpaste < {{path/to/file}}",
            "Send text": "echo {{text}} | airpaste",
            "Wait for message and display when received": "airpaste"
        }
    },
    "common_ajson": {
        "Category": "common",
        "Command": "ajson",
        "P-Summary": "execut jsonpath json object",
        "P-Tasks": "read json url evalu specifi jsonpath express read json file execut specifi jsonpath express read json stdin execut specifi jsonpath express read simpl json calcul valu",
        "Summary": "Executes JSONPath on JSON objects.",
        "Task-Script": {
            "Read JSON from a URL and evaluate a specified JSONPath expression": "ajson '{{avg($..price)}}' '{{https://example.com/api/}}'",
            "Read JSON from a file and execute a specified JSONPath expression": "ajson '{{$..json[?(@.path)]}}' {{path/to/file.json}}",
            "Read JSON from stdin and execute a specified JSONPath expression": "cat {{path/to/file.json}} | ajson '{{$..json[?(@.path)]}}'",
            "Read some simple JSON and calculate a value": "echo '{{3}}' | ajson '{{2 * pi * $}}'"
        }
    },
    "common_alacritty": {
        "Category": "common",
        "Command": "alacritty",
        "P-Summary": "cross-platform gpu-acceler termin emul",
        "P-Tasks": "open new alacritti window run command new alacritti window run specif directori run live config reload enabl also enabl default alacritti yml specifi altern configur file default xdg_config_hom alacritti alacritti yml",
        "Summary": "Cross-platform, GPU-accelerated terminal emulator.",
        "Task-Script": {
            "Open a new alacritty window": "alacritty",
            "Run a command in a new alacritty window": "alacritty -e {{command}}",
            "Run in a specific directory": "alacritty --working-directory {{path/to/directory}}",
            "Run with live config reload enabled (can also be enabled by default in alacritty.yml)": "alacritty --live-config-reload --config-file {{path/to/config.yml}}",
            "Specify alternative configuration file (defaults to $XDG_CONFIG_HOME/alacritty/alacritty.yml)": "alacritty --config-file {{path/to/config.yml}}"
        }
    },
    "common_alex": {
        "Category": "common",
        "Command": "alex",
        "P-Summary": "tool catch insensit inconsider write\nhelp find gender favour polaris race relat religion inconsider unequ phrase text",
        "P-Tasks": "analyz specif file analyz file current directori analyz markdown file except exampl md analyz text stdin",
        "Summary": "A tool that catches insensitive, inconsiderate writing.\nIt helps you find gender favouring, polarising, race related, religion inconsiderate, or other unequal phrasing in text.",
        "Task-Script": {
            "Analyze a specific file": "alex {{textfile.md}}",
            "Analyze all files in the current directory": "alex",
            "Analyze all markdown files except `example.md`": "alex *.md !{{example.md}}",
            "Analyze text from `stdin`": "echo {{His network looks good}} | alex --stdin"
        }
    },
    "common_alias": {
        "Category": "common",
        "Command": "alias",
        "P-Summary": "creat alias -- word replac command string\nalias expir current shell session unless defin shell configur file e g\nbashrc",
        "P-Tasks": "creat la shortcut ls -a creat gener alia list alias remov alias command turn rm interact command view command associ given alia",
        "Summary": "Creates aliases -- words that are replaced by a command string.\nAliases expire with the current shell session, unless they're defined in the shell's configuration file, e.g. `~/.bashrc`.",
        "Task-Script": {
            "Create `la` as a shortcut for `ls -a`": "alias {{la}}=\"{{ls -a}}\"",
            "Create a generic alias": "alias {{word}}=\"{{command}}\"",
            "List all aliases": "alias",
            "Remove an aliased command": "unalias {{word}}",
            "Turn `rm` into an interactive command": "alias {{rm}}=\"{{rm -i}}\"",
            "View the command associated to a given alias": "alias {{word}}"
        }
    },
    "common_androguard": {
        "Category": "common",
        "Command": "androguard",
        "P-Summary": "revers engin tool android applic\nwritten python",
        "P-Tasks": "decompil java code app display android app manifest display app metadata version app id",
        "Summary": "Reverse engineering tool for Android applications. Written in Python.",
        "Task-Script": {
            "Decompile Java code from an app": "androguard decompile {{path/to/app.apk}} --output {{path/to/directory}}",
            "Display Android app manifest": "androguard axml {{path/to/app.apk}}",
            "Display app metadata (version and app ID)": "androguard apkid {{path/to/app.apk}}"
        }
    },
    "common_ansible": {
        "Category": "common",
        "Command": "ansible",
        "P-Summary": "manag group comput remot ssh\nuse etc ansibl host file add new group host",
        "P-Tasks": "display fact group host invok setup modul execut command group host invok command modul argument execut command use custom inventori file execut command administr privileg list host belong group ping group host invok ping modul",
        "Summary": "Manage groups of computers remotely over SSH.\nUse the /etc/ansible/hosts file to add new groups/hosts.",
        "Task-Script": {
            "Display facts about a group of hosts by invoking the setup module": "ansible {{group}} -m setup",
            "Execute a command on a group of hosts by invoking command module with arguments": "ansible {{group}} -m command -a '{{my_command}}'",
            "Execute a command using a custom inventory file": "ansible {{group}} -i {{inventory_file}} -m command -a '{{my_command}}'",
            "Execute a command with administrative privileges": "ansible {{group}} --become --ask-become-pass -m command -a '{{my_command}}'",
            "List hosts belonging to a group": "ansible {{group}} --list-hosts",
            "Ping a group of hosts by invoking the ping module": "ansible {{group}} -m ping"
        }
    },
    "common_ansible-galaxy": {
        "Category": "common",
        "Command": "ansible-galaxy",
        "P-Summary": "creat manag ansibl role",
        "P-Tasks": "creat new role instal role list instal role remov role search given role",
        "Summary": "Create and manage Ansible roles.",
        "Task-Script": {
            "Create a new role": "ansible-galaxy init {{role_name}}",
            "Install a role": "ansible-galaxy install {{username.role_name}}",
            "List installed roles": "ansible-galaxy list",
            "Remove a role": "ansible-galaxy remove {{username.role_name}}",
            "Search for a given role": "ansible-galaxy search {{role_name}}"
        }
    },
    "common_ansible-playbook": {
        "Category": "common",
        "Command": "ansible-playbook",
        "P-Summary": "execut task defin playbook remot machin ssh",
        "P-Tasks": "run task playbook start specif task run task playbook run task playbook given tag run task playbook custom host inventori run task playbook extra variabl defin json file run task playbook extra variabl defin via command line",
        "Summary": "Execute tasks defined in playbook on remote machines over SSH.",
        "Task-Script": {
            "Run tasks in a playbook starting at a specific task": "ansible-playbook {{playbook}} --start-at {{task_name}}",
            "Run tasks in playbook": "ansible-playbook {{playbook}}",
            "Run tasks in playbook for the given tags": "ansible-playbook {{playbook}} --tags {{tag1,tag2}}",
            "Run tasks in playbook with custom host inventory": "ansible-playbook {{playbook}} -i {{inventory_file}}",
            "Run tasks in playbook with extra variables defined in a json file": "ansible-playbook {{playbook}} -e \"@{{variables.json}}\"",
            "Run tasks in playbook with extra variables defined via the command line": "ansible-playbook {{playbook}} -e \"{{variable1}}={{value1}} {{variable2}}={{value2}}\""
        }
    },
    "common_ansible-vault": {
        "Category": "common",
        "Command": "ansible-vault",
        "P-Summary": "encrypt decrypt valu data structur file within ansibl project",
        "P-Tasks": "creat new encrypt vault file use vault key file encrypt creat new encrypt vault file prompt password encrypt string use ansibl encrypt string format display interact prompt encrypt exist file use option password file re-key alreadi encrypt vault file new password file view encrypt file use password file decrypt",
        "Summary": "Encrypts & decrypts values, data structures and files within Ansible projects.",
        "Task-Script": {
            "Create a new encrypted vault file using a vault key file to encrypt it": "ansible-vault create --vault-password-file={{password_file}} {{vault_file}}",
            "Create a new encrypted vault file with a prompt for a password": "ansible-vault create {{vault_file}}",
            "Encrypt a string using Ansible's encrypted string format, displaying interactive prompts": "ansible-vault encrypt_string",
            "Encrypt an existing file using an optional password file": "ansible-vault encrypt --vault-password-file={{password_file}} {{vault_file}}",
            "Re-key already encrypted vault file with a new password file": "ansible-vault rekey --vault-password-file={{old_password_file}} --new-vault-password-file={{new_password_file}} {{vault_file}}",
            "View an encrypted file, using a password file to decrypt": "ansible-vault view --vault-password-file={{password_file}} {{vault_file}}"
        }
    },
    "common_ansiweather": {
        "Category": "common",
        "Command": "ansiweather",
        "P-Summary": "shell script display current weather condit termin",
        "P-Tasks": "display forecast show symbol daylight data current locat display forecast show wind humid data current locat display forecast use metric unit next five day rzeszow poland",
        "Summary": "A shell script for displaying the current weather conditions in your terminal.",
        "Task-Script": {
            "Display a forecast showing symbols and daylight data for your current location": "ansiweather -s {{true}} -d {{true}}",
            "Display a forecast showing wind and humidity data for your current location": "ansiweather -w {{true}} -h {{true}}",
            "Display a forecast using metric units for the next five days for Rzeszow, Poland": "ansiweather -u {{metric}} -f {{5}} -l {{Rzeszow,PL}}"
        }
    },
    "common_ant": {
        "Category": "common",
        "Command": "ant",
        "P-Summary": "apach ant\ntool build manag java-bas project",
        "P-Tasks": "build project use build file build xml build project default build file build xml execut target depend fail target print debug inform print inform possibl target project",
        "Summary": "Apache Ant.\nTool for building and managing Java-based projects.",
        "Task-Script": {
            "Build a project using build file other than `build.xml`": "ant -f {{buildfile.xml}}",
            "Build a project with default build file `build.xml`": "ant",
            "Execute all targets that do not depend on fail target(s)": "ant -k",
            "Print debugging information": "ant -d",
            "Print information on possible targets for this project": "ant -p"
        }
    },
    "common_apg": {
        "Category": "common",
        "Command": "apg",
        "P-Summary": "creat arbitrarili complex random password",
        "P-Tasks": "creat password appear dictionari dictionari file provid creat password 16 charact creat password least 1 symbol 1 number n 1 uppercas c 1 lowercas l creat password maximum length 16 creat random password default password length 8",
        "Summary": "Creates arbitrarily complex random passwords.",
        "Task-Script": {
            "Create a password that doesn't appear in a dictionary (the dictionary file has to be provided)": "apg -r {{dictionary_file}}",
            "Create a password with 16 characters": "apg -m {{16}}",
            "Create a password with at least 1 symbol (S), 1 number (N), 1 uppercase (C), 1 lowercase (L)": "apg -M SNCL",
            "Create a password with maximum length of 16": "apg -x {{16}}",
            "Create random passwords (default password length is 8)": "apg"
        }
    },
    "common_apktool": {
        "Category": "common",
        "Command": "apktool",
        "P-Summary": "revers engin apk file",
        "P-Tasks": "build folder apk file decod apk file instal store framework",
        "Summary": "Reverse engineer APK files.",
        "Task-Script": {
            "Build a folder into an APK file": "apktool b {{path/to/directory}}",
            "Decode an APK file": "apktool d {{file.apk}}",
            "Install and store frameworks": "apktool if {{framework.apk}}"
        }
    },
    "common_apm": {
        "Category": "common",
        "Command": "apm",
        "P-Summary": "atom editor packag manag\nsee atom",
        "P-Tasks": "instal packag http : atom io packag theme http : atom io theme remov packag theme upgrad packag theme",
        "Summary": "Atom editor Package Manager.\nSee `atom`.",
        "Task-Script": {
            "Install packages from http://atom.io/packages and themes from http://atom.io/themes": "apm install {{package_name}}",
            "Remove packages/themes": "apm remove {{package_name}}",
            "Upgrade packages/themes": "apm upgrade {{package_name}}"
        }
    },
    "common_apropos": {
        "Category": "common",
        "Command": "apropos",
        "P-Summary": "search manpag exampl find new command",
        "P-Tasks": "search keyword search page contain express given search search without restrict output termin width",
        "Summary": "Search in manpages, for example to find a new command.",
        "Task-Script": {
            "Search for keyword": "apropos {{regular_expression}}",
            "Search for pages that only contain all of the expressions given (AND search)": "apropos {{regular_expression_1}} -a {{regular_expression_2}} -a {{regular_expression_3}",
            "Search without restricting output to terminal width": "apropos -l {{regular_expression}}"
        }
    },
    "common_ar": {
        "Category": "common",
        "Command": "ar",
        "P-Summary": "creat modifi extract archiv",
        "P-Tasks": "creat archiv file accompani object file index extract member archiv insert object file index equival use ranlib list member archiv replac add file archiv",
        "Summary": "Create, modify, and extract from archives (.a, .so, .o).",
        "Task-Script": {
            "Create an archive with files and an accompanying object file index": "ar -rs {{libfoo.a}} {{foo.o}} {{bar.o}} {{baz.o}}",
            "Extract all members from an archive": "ar -x {{libfoo.a}}",
            "Insert an object file index (equivalent to using `ranlib`)": "ar -s {{libfoo.a}}",
            "List the members of an archive": "ar -t {{libfoo.a}}",
            "Replace or add files to an archive": "ar -r {{libfoo.a}} {{foo.o}} {{bar.o}} {{baz.o}}"
        }
    },
    "common_arc": {
        "Category": "common",
        "Command": "arc",
        "P-Summary": "arcanist : cli phabric",
        "P-Tasks": "push git chang send chang differenti review show pend revis inform updat git commit messag review",
        "Summary": "Arcanist: A CLI for Phabricator.",
        "Task-Script": {
            "Push Git changes": "arc land",
            "Send the changes to Differential for review": "arc diff",
            "Show pending revision information": "arc list",
            "Update Git commit messages after review": "arc amend"
        }
    },
    "common_arch": {
        "Category": "common",
        "Command": "arch",
        "P-Summary": "display name system architectur\nsee also unam",
        "P-Tasks": "display system architectur",
        "Summary": "Display the name of the system architecture.\nSee also `uname`.",
        "Task-Script": {
            "Display the system's architecture": "arch"
        }
    },
    "common_aria2": {
        "Category": "common",
        "Command": "aria2",
        "P-Summary": "lightweight multi-protocol multi-sourc command-lin download util\nsupport http http ftp sftp bittorr metalink",
        "P-Tasks": "download uri file download resourc multipl sourc download web resourc download bittorr magnet uri download bittorr uri download metalink uri download use 2 connect per host",
        "Summary": "A lightweight multi-protocol & multi-source command-line download utility.\nSupports HTTP, HTTPS, FTP, SFTP, BitTorrent and Metalink.",
        "Task-Script": {
            "Download URIs from a file": "aria2c -i {{uris.txt}}",
            "Download a resource from multiple sources": "aria2c {{http://mirror1.org/myLinux.iso}} {{http://mirror2.org/myLinux.iso}}",
            "Download a web resource": "aria2c {{http://example.org/myLinux.iso}}",
            "Download from a BitTorrent Magnet URI": "aria2c {{'magnet:?xt=urn:btih:248D0A1CD08284299DE78D5C1ED359BB46717D8C'}}",
            "Download from a BitTorrent URI": "aria2c {{http://example.org/myLinux.torrent}}",
            "Download from a Metalink URI": "aria2c {{http://example.org/myLinux.metalink}}",
            "Download using 2 connections per host": "aria2c -x{{2}} {{http://example.org/myLinux.iso}}"
        }
    },
    "common_aria2c": {
        "Category": "common",
        "Command": "aria2c",
        "P-Summary": "fast download util\nsupport http ftp sftp bittorr metalink",
        "P-Tasks": "download uri file download multipl sourc download uri list file download content url file download multipl connect ftp download usernam password limit download speed byte",
        "Summary": "Fast download utility.\nSupports HTTP(S), FTP, SFTP, BitTorrent, and Metalink.",
        "Task-Script": {
            "Download a URI to a file": "aria2c {{url}}",
            "Download from multiple sources": "aria2c {{url_1}} {{url_2}}",
            "Download the URIs listed in a file": "aria2c -i {{filename}}",
            "Download the contents of an URL to a file": "aria2c -o {{filename}} {{url}}",
            "Download with multiple connections": "aria2c -s {{connections_num}} {{url}}",
            "FTP download with username and password": "aria2c --ftp-user={{username}} --ftp-passwd={{password}} {{url}}",
            "Limit download speed in bytes/s": "aria2c --max-download-limit={{speed}} {{url}}"
        }
    },
    "common_arp": {
        "Category": "common",
        "Command": "arp",
        "P-Summary": "show manipul system arp cach",
        "P-Tasks": "clear entir cach creat entri delet specif entri show current arp tabl",
        "Summary": "Show and manipulate your system's ARP cache.",
        "Task-Script": {
            "Clear the entire cache": "sudo arp -a -d",
            "Create an entry": "arp -s {{address}} {{mac_address}}",
            "Delete a specific entry": "arp -d {{address}}",
            "Show current arp table": "arp -a"
        }
    },
    "common_arping": {
        "Category": "common",
        "Command": "arping",
        "P-Summary": "discov probe host network use arp protocol\nuse mac address discoveri",
        "P-Tasks": "broadcast arp request packet updat neighbour arp cach detect duplic ip address network send arp request 3 second timeout ping host specif number time ping host stop first repli ping host arp request packet ping host specif interfac",
        "Summary": "Discover and probe hosts in a network using the ARP protocol.\nUseful for MAC address discovery.",
        "Task-Script": {
            "Broadcast ARP request packets to update neighbours' ARP caches": "arping -U {{ip_to_broadcast}}",
            "Detect duplicated IP addresses in the network by sending ARP requests with a 3 seconds timeout": "arping -D -w {{3}} {{ip_to_check}}",
            "Ping a host a specific number of times": "arping -c {{count}} {{host_ip}}",
            "Ping a host and stop at the first reply": "arping -f {{host_ip}}",
            "Ping a host by ARP request packets": "arping {{host_ip}}",
            "Ping a host on a specific interface": "arping -I {{interface}} {{host_ip}}"
        }
    },
    "common_asar": {
        "Category": "common",
        "Command": "asar",
        "P-Summary": "file archiv electron platform",
        "P-Tasks": "archiv file directori extract specif file archiv extract archiv list content archiv file",
        "Summary": "A file archiver for the Electron platform.",
        "Task-Script": {
            "Archive a file or directory": "asar pack {{path/to/file_or_directory}} {{archived.asar}}",
            "Extract a specific file from an archive": "asar extract-file {{archived.asar}} {{file}}",
            "Extract an archive": "asar extract {{archived.asar}}",
            "List the contents of an archive file": "asar list {{archived.asar}}"
        }
    },
    "common_asciinema": {
        "Category": "common",
        "Command": "asciinema",
        "P-Summary": "record replay termin session option share asciinema org",
        "P-Tasks": "associ local instal asciinema asciinema org account make new record finish user prompt upload save local make new record save local file make new record limit idl time 2 5 second print full output local save record replay termin record local file replay termin record host asciinema org upload local save termin session asciinema org",
        "Summary": "Record and replay terminal sessions, and optionally share them on asciinema.org.",
        "Task-Script": {
            "Associate the local install of `asciinema` with an asciinema.org account": "asciinema auth",
            "Make a new recording (once finished, user will be prompted to upload it or save it locally)": "asciinema rec",
            "Make a new recording and save it to a local file": "asciinema rec {{path/to/file}}.cast",
            "Make a new recording, limiting any idle time to at most 2.5 seconds": "asciinema rec -i {{2.5}}",
            "Print the full output of a locally saved recording": "asciinema cat {{path/to/file}}.cast",
            "Replay a terminal recording from a local file": "asciinema play {{path/to/file}}.cast",
            "Replay a terminal recording hosted on asciinema.org": "asciinema play https://asciinema.org/a/{{cast_id}}",
            "Upload a locally saved terminal session to asciinema.org": "asciinema upload {{path/to/file}}.cast"
        }
    },
    "common_asdf": {
        "Category": "common",
        "Command": "asdf",
        "P-Summary": "command line interfac manag version differ packag",
        "P-Tasks": "instal plugin instal specif version packag list avail plugin list avail version packag set global version packag set local version packag",
        "Summary": "Command line interface for managing versions of different packages.",
        "Task-Script": {
            "Install a plugin": "asdf plugin-add {{name}}",
            "Install a specific version of a package": "asdf install {{name}} {{version}}",
            "List all available plugins": "asdf plugin-list-all",
            "List all available versions for a package": "asdf list-all {{name}}",
            "Set global version for a package": "asdf global {{name}} {{version}}",
            "Set local version for a package": "asdf local {{name}} {{version}}"
        }
    },
    "common_assimp": {
        "Category": "common",
        "Command": "assimp",
        "P-Summary": "command-lin client open asset import librari\nsupport load 40+ 3d file format export sever popular 3d format",
        "P-Tasks": "convert file one support output format use default paramet convert file use custom paramet dox_cmd h file assimp sourc code list avail paramet display summari 3d file content get help specif subcommand e g\nparamet specif list support export format list support import format list support subcommand verb",
        "Summary": "Command-line client for the Open Asset Import Library.\nSupports loading of 40+ 3D file formats, and exporting to several popular 3D formats.",
        "Task-Script": {
            "Convert a file to one of the supported output formats, using the default parameters": "assimp export {{input_file.stl}} {{output_file.obj}}",
            "Convert a file using custom parameters (the dox_cmd.h file in assimp's source code lists available parameters)": "assimp export {{input_file.stl}} {{output_file.obj}} {{parameters}}",
            "Display a summary of a 3D file's contents": "assimp info {{path/to/file}}",
            "Get help on a specific subcommand (e.g. the parameters specific to it)": "assimp {{subcommand}} --help",
            "List all supported export formats": "assimp listexport",
            "List all supported import formats": "assimp listext",
            "List all supported subcommands (\"verbs\")": "assimp help"
        }
    },
    "common_astronomer": {
        "Category": "common",
        "Command": "astronomer",
        "P-Summary": "tool detect illegitim star bot account github project",
        "P-Tasks": "scan repositori scan repositori includ compar report scan maximum amount star repositori",
        "Summary": "Tool that detects illegitimate stars from bot accounts on GitHub projects.",
        "Task-Script": {
            "Scan a repository": "astronomer {{tldr-pages/tldr-node-client}}",
            "Scan a repository including comparative reports": "astronomer {{tldr-pages/tldr-node-client}} --verbose",
            "Scan the maximum amount of stars in the repository": "astronomer {{tldr-pages/tldr-node-client}} --stars {{50}}"
        }
    },
    "common_astyle": {
        "Category": "common",
        "Command": "astyle",
        "P-Summary": "sourc code indent formatt beautifi c c++ c java program languag\nupon run copi origin file creat orig append origin file name",
        "P-Tasks": "appli custom indent use space\nchoos 2 20 space appli custom indent use tab\nchoos 2 20 tab appli allman style broken brace appli default style 4 space per indent format chang appli java style attach brace",
        "Summary": "Source code indenter, formatter, and beautifier for the C, C++, C# and Java programming languages.\nUpon running, a copy of the original file is created with an \".orig\" appended to the original file name.",
        "Task-Script": {
            "Apply a custom indent using spaces. Choose between 2 and 20 spaces": "astyle --indent=spaces={{number_of_spaces}} {{path/to/file}}",
            "Apply a custom indent using tabs. Choose between 2 and 20 tabs": "astyle --indent=tab={{number_of_tabs}} {{path/to/file}}",
            "Apply the allman style with broken braces": "astyle --style=allman {{path/to/file}}",
            "Apply the default style of 4 spaces per indent and no formatting changes": "astyle {{source_file}}",
            "Apply the java style with attached braces": "astyle --style=java {{path/to/file}}"
        }
    },
    "common_at": {
        "Category": "common",
        "Command": "at",
        "P-Summary": "execut command later time\nservic atd atrun run actual execut",
        "P-Tasks": "execut command standard input 10:00 today execut command given file next tuesday execut command standard input 5 minut press ctrl + done",
        "Summary": "Execute commands once at a later time.\nService atd (or atrun) should be running for the actual executions.",
        "Task-Script": {
            "Execute a command from standard input at 10:00 AM today": "echo \"{{./make_db_backup.sh}}\" | at 1000",
            "Execute commands from a given file next Tuesday": "at -f {{path/to/file}} 9:30 PM Tue",
            "Execute commands from standard input in 5 minutes (press `Ctrl + D` when done)": "at now + 5 minutes"
        }
    },
    "common_atom": {
        "Category": "common",
        "Command": "atom",
        "P-Summary": "cross-platform pluggabl text editor\nplugin manag apm",
        "P-Tasks": "open atom safe mode load addit packag open file directori open file directori new window open file directori exist window prevent atom fork background keep atom attach termin wait atom window close return use git commit editor",
        "Summary": "A cross-platform pluggable text editor.\nPlugins are managed by `apm`.",
        "Task-Script": {
            "Open Atom in safe mode (does not load any additional packages)": "atom --safe",
            "Open a file or directory": "atom {{path/to/file_or_directory}}",
            "Open a file or directory in a new window": "atom -n {{path/to/file_or_directory}}",
            "Open a file or directory in an existing window": "atom --add {{path/to/file_or_directory}}",
            "Prevent Atom from forking into the background, keeping Atom attached to the terminal": "atom --foreground",
            "Wait for Atom window to close before returning (useful for git commit editor)": "atom --wait"
        }
    },
    "common_atoum": {
        "Category": "common",
        "Command": "atoum",
        "P-Summary": "simpl modern intuit unit test framework php",
        "P-Tasks": "initialis configur file load custom bootstrap file run test run specif directori test run specif test file run test run test specif namespac run test specif tag run test use specifi configur file",
        "Summary": "A simple, modern and intuitive unit testing framework for PHP.",
        "Task-Script": {
            "Initialise a configuration file": "atoum --init",
            "Load a custom bootstrap file before running tests": "atoum --bootstrap-file {{path/to/file}}",
            "Run a specific directory of tests": "atoum -d {{path/to/directory}}",
            "Run a specific test file": "atoum -f {{path/to/file}}",
            "Run all tests": "atoum",
            "Run all tests under a specific namespace": "atoum -ns {{namespace}}",
            "Run all tests with a specific tag": "atoum -t {{tag}}",
            "Run tests using the specified configuration file": "atoum -c {{path/to/file}}"
        }
    },
    "common_atq": {
        "Category": "common",
        "Command": "atq",
        "P-Summary": "show job schedul batch command",
        "P-Tasks": "show job queue name queue single-charact name show job user run super user show current user schedul job",
        "Summary": "Show jobs scheduled by `at` or `batch` commands.",
        "Task-Script": {
            "Show jobs from queue named 'a' (queues have single-character names)": "atq -q {{a}}",
            "Show jobs of all users (run as super user)": "sudo atq",
            "Show the current user's scheduled jobs": "atq"
        }
    },
    "common_atrm": {
        "Category": "common",
        "Command": "atrm",
        "P-Summary": "remov job schedul batch command\nfind job number use atq",
        "P-Tasks": "remov job number 10 remov mani job separ space",
        "Summary": "Remove jobs scheduled by `at` or `batch` commands.\nTo find job numbers use `atq`.",
        "Task-Script": {
            "Remove job number 10": "atrm {{10}}",
            "Remove many jobs, separated by spaces": "atrm {{15}} {{17}} {{22}}"
        }
    },
    "common_autoflake": {
        "Category": "common",
        "Command": "autoflake",
        "P-Summary": "tool remov unus import variabl python code",
        "P-Tasks": "remov unus import multipl file display diff remov unus variabl file overwrit file remov unus variabl singl file display diff remov unus variabl recurs file directori overwrit file",
        "Summary": "A tool to remove unused imports and variables from Python code.",
        "Task-Script": {
            "Remove unused imports from multiple files and display the diffs": "autoflake --remove-all-unused-imports {{file1.py}} {{file2.py}} {{file3.py}}",
            "Remove unused variables from a file, overwriting the file": "autoflake --remove-unused-variables --in-place {{file.py}}",
            "Remove unused variables from a single file and display the diff": "autoflake --remove-unused-variables {{file.py}}",
            "Remove unused variables recursively from all files in a directory, overwriting each file": "autoflake --remove-unused-variables --in-place --recursive {{path/to/directory}}"
        }
    },
    "common_autojump": {
        "Category": "common",
        "Command": "autojump",
        "P-Summary": "quickli jump among directori visit\nalias like j jc provid even less type",
        "P-Tasks": "jump directori contain given pattern jump sub-directori child current directori contain given pattern open directori contain given pattern oper system file manag remov non-exist directori autojump databas show entri autojump databas",
        "Summary": "Quickly jump among the directories you visit the most.\nAliases like j or jc are provided for even less typing.",
        "Task-Script": {
            "Jump to a directory that contains the given pattern": "j {{pattern}}",
            "Jump to a sub-directory (child) of the current directory that contains the given pattern": "jc {{pattern}}",
            "Open a directory that contains the given pattern in the operating system file manager": "jo {{pattern}}",
            "Remove non-existing directories from the autojump database": "j --purge",
            "Show the entries in the autojump database": "j -s"
        }
    },
    "common_autossh": {
        "Category": "common",
        "Command": "autossh",
        "P-Summary": "run monitor restart ssh connect\nauto-reconnect keep port forward tunnel\naccept ssh flag",
        "P-Tasks": "fork execut ssh run background open remot shell open ssh session forward local port remot one restart necessari open ssh session restart monitor port fail return data run autossh background debug output log file ssh verbos output log second file run autossh background monitor port instead reli ssh keep-al everi 10 second detect failur run autossh background monitor port remot shell exit port forward fail",
        "Summary": "Runs, monitors and restarts SSH connections.\nAuto-reconnects to keep port forwarding tunnels up. Accepts all ssh flags.",
        "Task-Script": {
            "Fork before executing ssh (runs in the background) and don't open a remote shell": "autossh -f -M {{monitor_port}} -N {{ssh_command}}",
            "Open an SSH session which forwards a local port to a remote one, restarting if necessary": "autossh -M {{monitor_port}} -L {{local_port}}:localhost:{{remote_port}} {{user}}@{{host}}",
            "Open an SSH session, restarting when a monitoring port fails return data": "autossh -M {{monitor_port}} {{ssh_command}}",
            "Run autossh in the background with debug output logged to a file and ssh verbose output logged to a second file": "AUTOSSH_DEBUG=1 AUTOSSH_LOGFILE={{log_file}} autossh -f -M {{monitor_port}} -v -E {{ssh_log_file}} {{ssh_command}}",
            "Run autossh in the background, with no monitoring port, instead relying on SSH keep-alives every 10 seconds to detect failure": "autossh -f -M 0 -N -o \"ServerAliveInterval 10\" -o \"ServerAliveCountMax 3\" {{ssh_command}}",
            "Run autossh in the background, with no monitoring port, no remote shell, exiting if the port forward fails": "autossh -f -M 0 -N -o \"ServerAliveInterval 10\" -o \"ServerAliveCountMax 3\" -o ExitOnForwardFailure=yes -L {{local_port}}:localhost:{{remote_port}} {{user}}@{{host}}"
        }
    },
    "common_avrdude": {
        "Category": "common",
        "Command": "avrdude",
        "P-Summary": "driver program atmel avr microcontrol program",
        "P-Tasks": "list avail avr devic list avail avr programm read avr microcontrol write avr microcontrol",
        "Summary": "Driver program for Atmel AVR microcontrollers programming.",
        "Task-Script": {
            "List available AVR devices": "avrdude -p \\?",
            "List available AVR programmers": "avrdude -c \\?",
            "Read AVR microcontroller": "avrdude -p {{AVR_device}} -c {{programmer}} -U flash:r:{{file.hex}}:i",
            "Write AVR microcontroller": "avrdude -p {{AVR_device}} -c {{programmer}} -U flash:w:{{file.hex}}"
        }
    },
    "common_awk": {
        "Category": "common",
        "Command": "awk",
        "P-Summary": "versatil program languag work file",
        "P-Tasks": "print valu start third column print differ valu base condit print everi third line start first line print fifth column k\nfield space-separ file print last column line file use comma instead space field separ print second column line contain someth space-separ file sum valu first column pretty-print valu total sum valu first column file print total",
        "Summary": "A versatile programming language for working on files.",
        "Task-Script": {
            "Print all values starting from the third column": "awk '{for (i=3; i <= NF; i++) printf $i\"\"FS; print\"\"}' {{filename}}",
            "Print different values based on conditions": "awk '{if ($1 == \"foo\") print \"Exact match foo\"; else if ($1 ~ \"bar\") print \"Partial match bar\"; else print \"Baz\"}' {{filename}}",
            "Print every third line starting from the first line": "awk 'NR%3==1' {{filename}}",
            "Print the fifth column (a.k.a. field) in a space-separated file": "awk '{print $5}' {{filename}}",
            "Print the last column of each line in a file, using a comma (instead of space) as a field separator": "awk -F ',' '{print $NF}' {{filename}}",
            "Print the second column of the lines containing \"something\" in a space-separated file": "awk '/{{something}}/ {print $2}' {{filename}}",
            "Sum the values in the first column and pretty-print the values and then the total": "awk '{s+=$1; print $1} END {print \"--------\"; print s}' {{filename}}",
            "Sum the values in the first column of a file and print the total": "awk '{s+=$1} END {print s}' {{filename}}"
        }
    },
    "common_aws": {
        "Category": "common",
        "Command": "aws",
        "P-Summary": "offici cli tool amazon web servic\nwizard sso resourc autocomplet yaml option v2",
        "P-Tasks": "configur aw command line configur aw command line use sso gener json cli skeleton use infrastructur code get interact wizard aw resourc get caller ident use troubleshoot permiss list aw resourc region output yaml see help text aw command use auto prompt help command",
        "Summary": "The official CLI tool for Amazon Web Services.\nWizard, SSO, Resource Autocompletion, and YAML options are v2 only.",
        "Task-Script": {
            "Configure the AWS Command Line": "aws configure wizard",
            "Configure the AWS Command Line using SSO": "aws configure sso",
            "Generate a JSON CLI Skeleton (useful for infrastructure as code)": "aws dynamodb update-table --generate-cli-skeleton",
            "Get an interactive wizard for an AWS resource": "aws dynamodb wizard {{new-table}}",
            "Get the caller identity (used to troubleshoot permissions)": "aws sts get-caller-identity",
            "List AWS resources in a region and output in yaml": "aws dynamodb list-tables --region {{us-east-1}} --output yaml",
            "See help text for the AWS command": "aws {{command}} help",
            "Use auto prompt to help with a command": "aws iam create-user --cli-auto-prompt"
        }
    },
    "common_aws ec2": {
        "Category": "common",
        "Command": "aws ec2",
        "P-Summary": "cli aw ec2\nprovid secur resiz comput capac aw cloud enabl faster develop deploy applic",
        "P-Tasks": "creat snapshot ec2 volum delet ec2 volum display inform specif instanc display inform ec2 volum display inform instanc list avail ami amazon machin imag show help specif ec2 subcommand show list avail ec2 command",
        "Summary": "CLI for AWS EC2.\nProvides secure and resizable computing capacity in the AWS cloud to enable faster development and deployment of applications.",
        "Task-Script": {
            "Create a snapshot from an EC2 volume": "aws ec2 create-snapshot --volume-id {{volume_id}}",
            "Delete an EC2 volume": "aws ec2 delete-volume --volume-id {{volume_id}}",
            "Display information about a specific instance": "aws ec2 describe-instances --instance-ids {{instance_id}}",
            "Display information about all EC2 volumes": "aws ec2 describe-volumes",
            "Display information about all instances": "aws ec2 describe-instances",
            "List available AMIs (Amazon Machine Images)": "aws ec2 describe-images",
            "Show help for specific EC2 subcommand": "aws ec2 {{subcommand}} help",
            "Show list of all available EC2 commands": "aws ec2 help"
        }
    },
    "common_aws glue": {
        "Category": "common",
        "Command": "aws glue",
        "P-Summary": "cli aw glue\ndefin public endpoint aw glue servic",
        "P-Tasks": "creat dev endpoint list job list trigger start job start trigger start run workflow",
        "Summary": "CLI for AWS Glue.\nDefines the public endpoint for the AWS Glue service.",
        "Task-Script": {
            "Create a dev endpoint": "aws glue create-dev-endpoint --endpoint-name {{name}} --role-arn {{role_arn_used_by_endpoint}}",
            "List jobs": "aws glue list-jobs",
            "List triggers": "aws glue list-triggers",
            "Start a job": "aws glue start-job-run --job-name {{job_name}}",
            "Start a trigger": "aws glue start-trigger --name {{trigger_name}}",
            "Start running a workflow": "aws glue start-workflow-run --name {{workflow_name}}"
        }
    },
    "common_aws iam": {
        "Category": "common",
        "Command": "aws iam",
        "P-Summary": "cli aw iam",
        "P-Tasks": "describ iam polici get user group list access key list access key specif user list group list polici list user show aw iam help page includ avail iam command",
        "Summary": "CLI for AWS IAM.",
        "Task-Script": {
            "Describe an IAM policy": "aws iam get-policy --policy-arn arn:aws:iam::aws:policy/{{policy_name}}",
            "Get users in a group": "aws iam get-group --group-name {{group_name}}",
            "List access keys": "aws iam list-access-keys",
            "List access keys for a specific user": "aws iam list-access-keys --user-name {{user_name}}",
            "List groups": "aws iam list-groups",
            "List policies": "aws iam list-policies",
            "List users": "aws iam list-users",
            "Show `aws iam` help page (including all available iam commands)": "aws iam help"
        }
    },
    "common_aws kinesis": {
        "Category": "common",
        "Command": "aws kinesis",
        "P-Summary": "offici aw cli amazon kinesi stream data servic",
        "P-Tasks": "get shard iter read oldest messag stream shard list shard avail stream read record shard use shard iter show stream account write record kinesi stream inlin base64 encod write one record kinesi stream",
        "Summary": "Official AWS CLI for Amazon Kinesis streaming data services.",
        "Task-Script": {
            "Get a shard iterator for reading from the oldest message in a stream's shard": "aws kinesis get-shard-iterator --shard-iterator-type TRIM_HORIZON --stream-name {{name}} --shard-id {{id}}",
            "List the shards available on a stream": "aws kinesis list-shards --stream-name {{name}}",
            "Read records from a shard, using a shard iterator": "aws kinesis get-records --shard-iterator {{iterator}}",
            "Show all streams in the account": "aws kinesis list-streams",
            "Write a record to a Kinesis stream with inline base64 encoding": "aws kinesis put-record --stream-name {{name}} --partition-key {{key}} --data \"$( echo \"{{my raw message}}\" | base64 )\"",
            "Write one record to a Kinesis stream": "aws kinesis put-record --stream-name {{name}} --partition-key {{key}} --data {{base64_encoded_message}}"
        }
    },
    "common_aws quicksight": {
        "Category": "common",
        "Command": "aws quicksight",
        "P-Summary": "cli aw quicksight\naccess quicksight entiti",
        "P-Tasks": "display detail inform dataset display access dataset kind action perform dataset list dashboard list dataset list group list user",
        "Summary": "CLI for AWS QuickSight.\nAccess QuickSight entities.",
        "Task-Script": {
            "Display detailed information about a dataset": "aws quicksight describe-data-set --aws-account-id {{aws_account_id}} --data-set-id {{data_set_id}}",
            "Display who has access to the dataset and what kind of actions they can perform on the dataset": "aws quicksight describe-data-set-permissions --aws-account-id {{aws_account_id}} --data-set-id {{data_set_id}}",
            "List dashboards": "aws quicksight list-dashboards --aws-account-id {{aws_account_id}}",
            "List datasets": "aws quicksight list-data-sets --aws-account-id {{aws_account_id}}",
            "List groups": "aws quicksight list-groups --aws-account-id {{aws_account_id}} --namespace default",
            "List users": "aws quicksight list-users --aws-account-id {{aws_account_id}} --namespace default"
        }
    },
    "common_aws s3": {
        "Category": "common",
        "Command": "aws s3",
        "P-Summary": "cli aw s3 - provid storag web servic interfac",
        "P-Tasks": "preview chang remov file bucket show file bucket sync file directori bucket local sync file directori local bucket sync file directori exclus",
        "Summary": "CLI for AWS S3 - provides storage through web services interfaces.",
        "Task-Script": {
            "Preview changes only": "aws s3 {{any_command}} --dryrun",
            "Remove file from bucket": "aws s3 rm s3://{{bucket}}/{{path/to/file}}",
            "Show files in a bucket": "aws s3 ls {{bucket_name}}",
            "Sync files and directories from bucket to local": "aws s3 sync s3://{{bucket_name}} {{path/to/target}}",
            "Sync files and directories from local to bucket": "aws s3 sync {{path/to/files}} s3://{{bucket_name}}",
            "Sync files and directories with exclusions": "aws s3 sync {{path/to/files}} s3://{{bucket_name}} --exclude {{path/to/file}} --exclude {{path/to/directory}}/*"
        }
    },
    "common_aws-google-auth": {
        "Category": "common",
        "Command": "aws-google-auth",
        "P-Summary": "command line tool acquir aw temporari st credenti use googl app feder singl sign-on provid",
        "P-Tasks": "login sking role use case sever avail saml role login googl sso use idp sp identifi set credenti durat one hour resolv alias aw account show help inform",
        "Summary": "Command line tool to acquire AWS temporary (STS) credentials using Google Apps as a federated (Single Sign-On) provider.",
        "Task-Script": {
            "Login [a]sking which role to use (in case of several available SAML roles)": "aws-google-auth -u {{example@example.com}} -I {{$GOOGLE_IDP_ID}} -S {{$GOOGLE_SP_ID}} -d {{3600}} -a",
            "Login with Google SSO using the IDP and SP identifiers and set the credentials duration to one hour": "aws-google-auth -u {{example@example.com}} -I {{$GOOGLE_IDP_ID}} -S {{$GOOGLE_SP_ID}} -d {{3600}}",
            "Resolve aliases for AWS accounts": "aws-google-auth -u {{example@example.com}} -I {{$GOOGLE_IDP_ID}} -S {{$GOOGLE_SP_ID}} -d {{3600}} -a --resolve-aliases",
            "Show help information": "aws-google-auth -h"
        }
    },
    "common_aws-vault": {
        "Category": "common",
        "Command": "aws-vault",
        "P-Summary": "vault secur store access aw credenti develop environ",
        "P-Tasks": "add credenti secur keystor execut command aw credenti environ list profil along credenti session open browser window login aw consol remov credenti secur keystor rotat aw credenti",
        "Summary": "A vault for securely storing and accessing AWS credentials in development environments.",
        "Task-Script": {
            "Add credentials to the secure keystore": "aws-vault add {{profile}}",
            "Execute a command with AWS credentials in the environment": "aws-vault exec {{profile}} -- {{aws s3 ls}}",
            "List profiles, along with their credentials and sessions": "aws-vault list",
            "Open a browser window and login to the AWS Console": "aws-vault login {{profile}}",
            "Remove credentials from the secure keystore": "aws-vault remove {{profile}}",
            "Rotate AWS credentials": "aws-vault rotate {{profile}}"
        }
    },
    "common_awslogs": {
        "Category": "common",
        "Command": "awslogs",
        "P-Summary": "queri group stream event amazon cloudwatch log",
        "P-Tasks": "get log stream specifi group 1 2 hour ago get log match specif cloudwatch log filter pattern list exist stream specifi group list log group watch log stream specifi group",
        "Summary": "Queries groups, streams and events from Amazon Cloudwatch logs.",
        "Task-Script": {
            "Get logs for any streams in the specified group between 1 and 2 hours ago": "awslogs get {{/var/log/syslog}} --start='{{2h ago}}' --end='{{1h ago}}'",
            "Get logs that match a specific Cloudwatch Logs Filter pattern": "awslogs get {{/aws/lambda/my_lambda_group}} --filter-pattern='{{ERROR}}'",
            "List existing streams for the specified group": "awslogs streams {{/var/log/syslog}}",
            "List log groups": "awslogs groups",
            "Watch logs for any streams in the specified group": "awslogs get {{/var/log/syslog}} ALL --watch"
        }
    },
    "common_axel": {
        "Category": "common",
        "Command": "axel",
        "P-Summary": "download acceler\nsupport http http ftp",
        "P-Tasks": "download url file download specifi filenam download multipl connect limit download speed byte per second search mirror",
        "Summary": "Download accelerator.\nSupports HTTP, HTTPS, and FTP.",
        "Task-Script": {
            "Download a URL to a file": "axel {{url}}",
            "Download and specify filename": "axel {{url}} -o {{filename}}",
            "Download with multiple connections": "axel -n {{connections_num}} {{url}}",
            "Limit download speed (bytes per second)": "axel -s {{speed}} {{url}}",
            "Search for mirrors": "axel -S {{mirrors_num}} {{url}}"
        }
    },
    "common_az": {
        "Category": "common",
        "Command": "az",
        "P-Summary": "offici cli tool microsoft azur",
        "P-Tasks": "list azur manag disk list azur virtual machin log azur manag azur kubernet servic manag azur network resourc manag azur subscript inform",
        "Summary": "The official CLI tool for Microsoft Azure.",
        "Task-Script": {
            "List all Azure Managed Disks": "az disk list",
            "List all Azure virtual machines": "az vm list",
            "Log in to Azure": "az login",
            "Manage Azure Kubernetes Services": "az aks",
            "Manage Azure Network resources": "az network",
            "Manage azure subscription information": "az account"
        }
    },
    "common_b2sum": {
        "Category": "common",
        "Command": "b2sum",
        "P-Summary": "calcul blake2 cryptograph checksum",
        "P-Tasks": "calcul blake2 checksum multipl file calcul blake2 checksum file calcul blake2 checksum stdin read file blake2 sum filenam verifi file match checksum",
        "Summary": "Calculate BLAKE2 cryptographic checksums.",
        "Task-Script": {
            "Calculate BLAKE2 checksums for multiple files": "b2sum {{filename1}} {{filename2}}",
            "Calculate the BLAKE2 checksum for a file": "b2sum {{filename1}}",
            "Calculate the BLAKE2 checksum from `stdin`": "{{somecommand}} | b2sum",
            "Read a file of BLAKE2 sums and filenames and verify all files have matching checksums": "b2sum -c {{filename.b2}}"
        }
    },
    "common_babel": {
        "Category": "common",
        "Command": "babel",
        "P-Summary": "transpil convert code javascript es6 es7 syntax es5 syntax",
        "P-Tasks": "choos set preset output format ignor specifi comma-separ file directori output avail option transpil specifi input file output stdout transpil specifi input file output specif file transpil whole directori file transpil output minifi javascript transpil input file everi time chang",
        "Summary": "A transpiler which converts code from JavaScript ES6/ES7 syntax to ES5 syntax.",
        "Task-Script": {
            "Choose a set of presets for output formatting": "babel {{path/to/input_file}} --presets {{presets}}",
            "Ignore specified comma-separated files in a directory": "babel {{path/to/input_directory}} --ignore {{ignored_files}}",
            "Output all available options": "babel --help",
            "Transpile a specified input file and output to `stdout`": "babel {{path/to/file}}",
            "Transpile a specified input file and output to a specific file": "babel {{path/to/input_file}} --out-file {{path/to/output_file}}",
            "Transpile a whole directory of files": "babel {{path/to/input_directory}}",
            "Transpile and output as minified JavaScript": "babel {{path/to/input_file}} --minified",
            "Transpile the input file every time it is changed": "babel {{path/to/input_file}} --watch"
        }
    },
    "common_badblocks": {
        "Category": "common",
        "Command": "badblocks",
        "P-Summary": "search devic bad block\nusag badblock caus destruct action eras data disk includ partit tabl",
        "P-Tasks": "search disk bad block use non-destruct read-onli test search unmount disk bad block destruct write test search unmount disk bad block destruct write test show verbos statu search unmount disk bad block non-destruct read-writ test search unmount disk destruct mode output found block file search unmount disk destruct mode improv speed use 4k block size 64k block count",
        "Summary": "Search a device for bad blocks.\nSome usages of badblocks can cause destructive actions, such as erasing all the data on a disk, including the partition table.",
        "Task-Script": {
            "Search a disk for bad blocks by using a non-destructive read-only test": "sudo badblocks {{/dev/sda}}",
            "Search an unmounted disk for bad blocks with a destructive write test": "sudo badblocks -w {{/dev/sda}}",
            "Search an unmounted disk for bad blocks with a destructive write test and show verbose status": "sudo badblocks -svw {{/dev/sda}}",
            "Search an unmounted disk for bad blocks with a non-destructive read-write test": "sudo badblocks -n {{/dev/sda}}",
            "Search an unmounted disk in destructive mode and output found blocks to a file": "sudo badblocks -o {{/path/to/file}} -w {{/dev/sda}}",
            "Search an unmounted disk in destructive mode with improved speed using 4K block size and 64K block count": "sudo badblocks -w -b {{4096}} -c {{65536}} {{/dev/sda}}"
        }
    },
    "common_balena": {
        "Category": "common",
        "Command": "balena",
        "P-Summary": "interact balenacloud openbalena balena api command line",
        "P-Tasks": "creat balenacloud openbalena applic flash balenao imag local drive list balenacloud openbalena applic within account list devic associ balenacloud openbalena account login balenacloud account",
        "Summary": "Interact with the balenaCloud, openBalena and the balena API from the command line.",
        "Task-Script": {
            "Create a balenaCloud or openBalena application": "balena app create {{app_name}}",
            "Flash a balenaOS image to a local drive": "balena local flash {{path/to/balenaos.img}} --drive {{drive_location}}",
            "List all balenaCloud or openBalena applications within the account": "balena apps",
            "List all devices associated with the balenaCloud or openBalena account": "balena devices",
            "Login to the balenaCloud account": "balena login"
        }
    },
    "common_banner": {
        "Category": "common",
        "Command": "banner",
        "P-Summary": "print given argument larg ascii art",
        "P-Tasks": "print text messag banner width 50 charact print text messag larg banner quot option read text stdin",
        "Summary": "Print the given argument as a large ASCII art.",
        "Task-Script": {
            "Print the text message as a banner with a width of 50 characters": "banner -w {{50}} \"{{Hello World}}\"",
            "Print the text message as a large banner (quotes are optional)": "banner \"{{Hello World}}\"",
            "Read text from `stdin`": "banner"
        }
    },
    "common_base32": {
        "Category": "common",
        "Command": "base32",
        "P-Summary": "encod decod file standard input base32 standard output",
        "P-Tasks": "decod file decod stdin encod file encod stdin",
        "Summary": "Encode or decode file or standard input to/from Base32, to standard output.",
        "Task-Script": {
            "Decode a file": "base32 -d {{filename}}",
            "Decode from `stdin`": "{{somecommand}} | base32 -d",
            "Encode a file": "base32 {{filename}}",
            "Encode from `stdin`": "{{somecommand}} | base32"
        }
    },
    "common_base64": {
        "Category": "common",
        "Command": "base64",
        "P-Summary": "encod decod file standard input base64 standard output",
        "P-Tasks": "decod file decod stdin encod file encod stdin",
        "Summary": "Encode or decode file or standard input to/from Base64, to standard output.",
        "Task-Script": {
            "Decode a file": "base64 -d {{filename}}",
            "Decode from `stdin`": "{{somecommand}} | base64 -d",
            "Encode a file": "base64 {{filename}}",
            "Encode from `stdin`": "{{somecommand}} | base64"
        }
    },
    "common_basename": {
        "Category": "common",
        "Command": "basename",
        "P-Summary": "remov lead directori portion path",
        "P-Tasks": "show file name path show file name path suffix remov show rightmost directori name path",
        "Summary": "Remove leading directory portions from a path.",
        "Task-Script": {
            "Show only the file name from a path": "basename {{path/to/file}}",
            "Show only the file name from a path, with a suffix removed": "basename {{path/to/file}} {{suffix}}",
            "Show only the rightmost directory name from a path": "basename {{path/to/directory/}}"
        }
    },
    "common_bash": {
        "Category": "common",
        "Command": "bash",
        "P-Summary": "bourne-again shell\nsh -compat command line interpret",
        "P-Tasks": "execut command print version inform bash use echo bash_vers show version without licens inform run command stdin run command file run command file log command execut termin run command file stop first error start interact shell",
        "Summary": "Bourne-Again SHell.\n`sh`-compatible command line interpreter.",
        "Task-Script": {
            "Execute a command": "bash -c \"{{command}}\"",
            "Print the version information of bash (use `echo $BASH_VERSION` to show just the version without license information)": "bash --version",
            "Run commands from `stdin`": "bash -s",
            "Run commands from a file": "bash {{file.sh}}",
            "Run commands from a file, logging all commands executed to the terminal": "bash -x {{file.sh}}",
            "Run commands from a file, stopping at the first error": "bash -e {{file.sh}}",
            "Start interactive shell": "bash"
        }
    },
    "common_bashmarks": {
        "Category": "common",
        "Command": "bashmarks",
        "P-Summary": "save jump commonli use directori use 1 charact command",
        "P-Tasks": "delet bookmark go bookmark directori list avail bookmark print bookmark directori content save current directori bookmark_nam",
        "Summary": "Save and jump to commonly used directories using 1 character commands.",
        "Task-Script": {
            "Delete a bookmark": "d {{bookmark_name}}",
            "Go to a bookmarked directory": "g {{bookmark_name}}",
            "List available bookmarks": "l",
            "Print a bookmarked directory's contents": "p {{bookmark_name}}",
            "Save the current directory as \"bookmark_name\"": "s {{bookmark_name}}"
        }
    },
    "common_bat": {
        "Category": "common",
        "Command": "bat",
        "P-Summary": "print concaten file\ncat clone syntax highlight git integr",
        "P-Tasks": "append sever file target file concaten sever file target file display support languag number output line print content file standard output syntax highlight json file",
        "Summary": "Print and concatenate files.\nA `cat` clone with syntax highlighting and Git integration.",
        "Task-Script": {
            "Append several files into the target file": "bat {{file1}} {{file2}} >> {{target_file}}",
            "Concatenate several files into the target file": "bat {{file1}} {{file2}} > {{target_file}}",
            "Display all supported languages": "bat --list-languages",
            "Number all output lines": "bat -n {{file}}",
            "Print the contents of a file to the standard output": "bat {{file}}",
            "Syntax highlight a json file": "bat --language json {{file.json}}"
        }
    },
    "common_batch": {
        "Category": "common",
        "Command": "batch",
        "P-Summary": "execut command later time system load level permit\nservic atd atrun run actual execut",
        "P-Tasks": "execut command standard input execut command given file execut command standard input press ctrl + done",
        "Summary": "Execute commands at a later time when the system load levels permit.\nService atd (or atrun) should be running for the actual executions.",
        "Task-Script": {
            "Execute a command from standard input": "echo \"{{./make_db_backup.sh}}\" | batch",
            "Execute commands from a given file": "batch -f {{path/to/file}}",
            "Execute commands from standard input (press `Ctrl + D` when done)": "batch"
        }
    },
    "common_bc": {
        "Category": "common",
        "Command": "bc",
        "P-Summary": "calcul",
        "P-Tasks": "calcul express forc number decim place 10 calcul express sine cosin use mathlib calcul result express run calcul interact mode use standard math librari",
        "Summary": "Calculator.",
        "Task-Script": {
            "Calculate expression and force number of decimal places to 10": "bc <<< \"scale=10; 5 / 3\"",
            "Calculate expression with sine and cosine using mathlib": "bc -l <<< \"s(1) + c(1)\"",
            "Calculate the result of an expression": "bc <<< \"(1 + 2) * 2 ^ 2\"",
            "Run calculator in interactive mode using the standard math library": "bc -l"
        }
    },
    "common_beanstalkd": {
        "Category": "common",
        "Command": "beanstalkd",
        "P-Summary": "simpl gener work-queu server",
        "P-Tasks": "persist work queue save disk start beanstalkd listen custom port address start beanstalkd listen port 11300 sync persist directori everi 500 millisecond",
        "Summary": "A simple and generic work-queue server.",
        "Task-Script": {
            "Persist work queues by saving them to disk": "beanstalkd -b {{path/to/persistence_directory}}",
            "Start beanstalkd listening on a custom port and address": "beanstalkd -l {{ip_address}} -p {{port_number}}",
            "Start beanstalkd, listening on port 11300": "beanstalkd",
            "Sync to the persistence directory every 500 milliseconds": "beanstalkd -b {{path/to/persistence_directory}} -f {{500}}"
        }
    },
    "common_bedtools": {
        "Category": "common",
        "Command": "bedtools",
        "P-Summary": "swiss-armi knife tool genomic-analysi task\nuse intersect group convert count data bam bed gff gtf vcf format",
        "P-Tasks": "convert bam-format file bed-format one find featur file_1 bed closest one file_2 bed write distanc extra column input file must sort group file path file base first three fifth column summar sixth column sum intersect two file left outer join e\nreport featur file_1 null overlap file_2 intersect two file respect sequenc strand save result path output_fil use effici algorithm intersect two pre-sort file",
        "Summary": "A swiss-army knife of tools for genomic-analysis tasks.\nUsed to intersect, group, convert and count data in BAM, BED, GFF/GTF, VCF format.",
        "Task-Script": {
            "Convert bam-formatted file to a bed-formatted one": "bedtools bamtobed -i {{path/to/file}}.bam > {{path/to/file}}.bed",
            "Find for all features in {{file_1}}.bed the closest one in {{file_2}}.bed and write their distance in an extra column (input files must be sorted)": "bedtools closest -a {{path/to/file_1}}.bed -b {{path/to/file_2}}.bed -d",
            "Group file {{path/to/file}} based on the first three and the fifth column and summarize the sixth column by summing it up": "bedtools groupby -i {{path/to/file}} -c 1-3,5 -g 6 -o sum",
            "Intersect two files with a left outer join, i.e. report each feature from {{file_1}} and NULL if no overlap with {{file_2}}": "bedtools intersect -a {{path/to/file_1}} -b {{path/to/file_2}} -lof > {{path/to/output_file}}",
            "Intersect two files with respect to the sequences' strand and save the result to {{path/to/output_file}}": "bedtools intersect -a {{path/to/file_1}} -b {{path/to/file_2}} -s > {{path/to/output_file}}",
            "Using more efficient algorithm to intersect two pre-sorted files": "bedtools intersect -a {{path/to/file_1}} -b {{path/to/file_2}} -sorted > {{path/to/output_file}}"
        }
    },
    "common_behat": {
        "Category": "common",
        "Command": "behat",
        "P-Summary": "php framework behaviour-driven develop",
        "P-Tasks": "display list definit test suit initialis new behat project run test run test specifi suit run test output result file run test specif output formatt",
        "Summary": "A PHP framework for Behaviour-Driven Development.",
        "Task-Script": {
            "Display a list of definitions in your test suites": "behat --definitions",
            "Initialise a new Behat project": "behat --init",
            "Run all tests": "behat",
            "Run all tests from the specified suite": "behat --suite={{suite_name}}",
            "Run tests and output results to a file": "behat --out {{path/to/file}}",
            "Run tests with a specific output formatter": "behat --format {{pretty|progress}}"
        }
    },
    "common_berks": {
        "Category": "common",
        "Command": "berks",
        "P-Summary": "chef cookbook depend manag",
        "P-Tasks": "instal cookbook depend local repo updat specif cookbook depend upload cookbook chef server view depend cookbook",
        "Summary": "Chef cookbook dependency manager.",
        "Task-Script": {
            "Install cookbook dependencies into a local repo": "berks install",
            "Update a specific cookbook and its dependencies": "berks update {{cookbook}}",
            "Upload a cookbook to the Chef server": "berks upload {{cookbook}}",
            "View the dependencies of a cookbook": "berks contingent {{cookbook}}"
        }
    },
    "common_bg": {
        "Category": "common",
        "Command": "bg",
        "P-Summary": "resum job suspend e g\nuse ctrl + z keep run background",
        "P-Tasks": "resum specif job use job -l get id run background resum recent suspend job run background",
        "Summary": "Resumes jobs that have been suspended (e.g. using `Ctrl + Z`), and keeps them running in the background.",
        "Task-Script": {
            "Resume a specific job (use `jobs -l` to get its ID) and run it in the background": "bg {{job_id}}",
            "Resume most recently suspended job and run it in the background": "bg"
        }
    },
    "common_bison": {
        "Category": "common",
        "Command": "bison",
        "P-Summary": "gnu parser gener",
        "P-Tasks": "verbos compil compil bison definit file compil debug mode caus result parser write addit inform standard output specifi output filenam",
        "Summary": "GNU parser generator.",
        "Task-Script": {
            "Be verbose when compiling": "bison --verbose",
            "Compile a bison definition file": "bison {{path/to/file.y}}",
            "Compile in debug mode, which causes the resulting parser to write additional information to the standard output": "bison --debug {{path/to/file.y}}",
            "Specify the output filename": "bison --output {{path/to/output.c}} {{path/to/file.y}}"
        }
    },
    "common_bitcoin-cli": {
        "Category": "common",
        "Command": "bitcoin-cli",
        "P-Summary": "command-lin client interact bitcoin daemon via rpc call\nuse configur defin bitcoin conf",
        "P-Tasks": "export wallet inform text file gener one block list output previou transact avail fund outgo transact print high-level inform wallet send transact given address",
        "Summary": "Command-line client to interact with the Bitcoin daemon via RPC calls.\nUses the configuration defined in `bitcoin.conf`.",
        "Task-Script": {
            "Export the wallet information to a text file": "bitcoin-cli dumpwallet \"{{path/to/file}}\"",
            "Generate one or more blocks": "bitcoin-cli generate {{num_blocks}}",
            "List all outputs from previous transactions available to fund outgoing transactions": "bitcoin-cli listunspent",
            "Print high-level information about the wallet": "bitcoin-cli getwalletinfo",
            "Send a transaction to a given address": "bitcoin-cli sendtoaddress \"{{address}}\" {{amount}}"
        }
    },
    "common_black": {
        "Category": "common",
        "Command": "black",
        "P-Summary": "python auto code formatt",
        "P-Tasks": "auto-format file directori emit exclus error messag stderr auto-format file entir directori format code pass string output diff file stdout return statu without write file back",
        "Summary": "A Python auto code formatter.",
        "Task-Script": {
            "Auto-format a file or directory emitting exclusively error messages to stderr": "black --quiet {{path/to/file_or_directory}}",
            "Auto-format a file or entire directory": "black {{path/to/file_or_directory}}",
            "Format the code passed in as a string": "black -c {{path/to/file_or_directory}}",
            "Output a diff for each file on stdout": "black --diff {{path/to/file_or_directory}}",
            "Return the status without writing the files back": "black --check {{path/to/file_or_directory}}"
        }
    },
    "common_blackfire": {
        "Category": "common",
        "Command": "blackfire",
        "P-Summary": "command line profil tool php",
        "P-Tasks": "initialis configur blackfir client launch blackfir agent launch blackfir agent specif socket run profil collect 10 sampl run profil output result json run profil specif program upload profil file blackfir web servic view statu profil blackfir web servic",
        "Summary": "A command line profiling tool for PHP.",
        "Task-Script": {
            "Initialise and configure the Blackfire client": "blackfire config",
            "Launch the Blackfire agent": "blackfire agent",
            "Launch the Blackfire agent on a specific socket": "blackfire agent --socket=\"{{tcp://127.0.0.1:8307}}\"",
            "Run the profiler and collect 10 samples": "blackfire --samples={{10}} run {{php path/to/file.php}}",
            "Run the profiler and output results as JSON": "blackfire --json run {{php path/to/file.php}}",
            "Run the profiler on a specific program": "blackfire run {{php path/to/file.php}}",
            "Upload a profiler file to the Blackfire web service": "blackfire upload {{path/to/file}}",
            "View the status of profiles on the Blackfire web service": "blackfire status"
        }
    },
    "common_blender": {
        "Category": "common",
        "Command": "blender",
        "P-Summary": "command-lin interfac blender 3d comput graphic applic\nargument execut order given",
        "P-Tasks": "render frame anim background without load ui output save tmp render anim specif resolut pass python express render anim use specif imag name pattern path rel blend file render 10th frame anim singl imag save exist directori absolut path render anim specif scene start frame 10 end frame 500 render second last frame anim jpeg imag save exist directori rel path start interact blender session termin python consol import bpi start",
        "Summary": "Command-line interface to the Blender 3D computer graphics application.\nArguments are executed in the order they are given.",
        "Task-Script": {
            "Render all frames of an animation in the background, without loading the UI (output is saved to `/tmp`)": "blender -b {{filename}}.blend -a",
            "Render an animation at a specific resolution, by passing a Python expression": "blender -b {{filename}}.blend --python-expr '{{import bpy; bpy.data.scenes[0].render.resolution_percentage = 25}}' -a",
            "Render an animation using a specific image naming pattern, in a path relative (`//`) to the .blend file": "blender -b {{filename}}.blend -o //{{render/frame_###.png}} -a",
            "Render the 10th frame of an animation as a single image, saved to an existing directory (absolute path)": "blender -b {{filename}}.blend -o {{/path/to/output_directory}} -f {{10}}",
            "Render the animation of a specific scene, starting at frame 10 and ending at frame 500": "blender -b {{filename}}.blend -S {{scene_name}} -s {{10}} -e {{500}} -a",
            "Render the second last frame in an animation as a JPEG image, saved to an existing directory (relative path)": "blender -b {{filename}}.blend -o //{{output_directory}} -F {{JPEG}} -f {{-2}}",
            "Start an interactive Blender session in the terminal with a python console (do `import bpy` after starting)": "blender -b --python-console"
        }
    },
    "common_bmaptool": {
        "Category": "common",
        "Command": "bmaptool",
        "P-Summary": "creat copi block map intellig design faster cp dd",
        "P-Tasks": "copi compress imag file sdb copi imag file sdb copi imag file sdb without use blockmap creat blockmap imag file",
        "Summary": "Create or copy block maps intelligently (designed to be faster than `cp` or `dd`).",
        "Task-Script": {
            "Copy a compressed image file into sdb": "bmaptool copy --bmap {{blockmap.bmap}} {{source.img.gz}} {{/dev/sdb}}",
            "Copy an image file into sdb": "bmaptool copy --bmap {{blockmap.bmap}} {{source.img}} {{/dev/sdb}}",
            "Copy an image file into sdb without using a blockmap": "bmaptool copy --nobmap {{source.img}} {{/dev/sdb}}",
            "Create a blockmap from image file": "bmaptool create -o {{blockmap.bmap}} {{source.img}}"
        }
    },
    "common_boot": {
        "Category": "common",
        "Command": "boot",
        "P-Summary": "build tool clojur program languag",
        "P-Tasks": "build singl uberjar build develop use boot new templat build product use boot new templat gener scaffold new project base templat learn command start repl session either project standalon",
        "Summary": "Build tooling for the Clojure programming language.",
        "Task-Script": {
            "Build a single \"uberjar\"": "boot jar",
            "Build for development (if using the boot/new template)": "boot dev",
            "Build for production (if using the boot/new template)": "boot prod",
            "Generate scaffolding for a new project based on a template": "boot --dependencies boot/new new --template {{template_name}} --name {{project_name}}",
            "Learn about a command": "boot cljs --help",
            "Start a REPL session either with the project or standalone": "boot repl"
        }
    },
    "common_borg": {
        "Category": "common",
        "Command": "borg",
        "P-Summary": "dedupl backup tool\ncreat local remot backup mountabl filesystem",
        "P-Tasks": "backup directori repositori creat archiv call monday display help creat archiv extract specif directori monday archiv remot repositori exclud ext file initialis local repositori list archiv repositori mount repositori fuse filesystem prune repositori delet archiv older 7 day list chang",
        "Summary": "Deduplicating backup tool.\nCreates local or remote backups that are mountable as filesystems.",
        "Task-Script": {
            "Backup a directory into the repository, creating an archive called \"Monday\"": "borg create --progress {{/path/to/repo_directory}}::{{Monday}} {{/path/to/source_directory}}",
            "Display help on creating archives": "borg create --help",
            "Extract a specific directory from the \"Monday\" archive in a remote repository, excluding all *.ext files": "borg extract {{user}}@{{host}}:{{/path/to/repo_directory}}::{{Monday}} {{path/to/target_directory}} --exclude '{{*.ext}}'",
            "Initialise a (local) repository": "borg init {{/path/to/repo_directory}}",
            "List all archives in a repository": "borg list {{/path/to/repo_directory}}",
            "Mount a repository as a FUSE filesystem": "borg mount {{/path/to/repo_directory}}::{{Monday}} {{/path/to/mountpoint}}",
            "Prune a repository by deleting all archives older than 7 days, listing changes": "borg prune --keep-within {{7d}} --list {{/path/to/repo_directory}}"
        }
    },
    "common_bosh": {
        "Category": "common",
        "Command": "bosh",
        "P-Summary": "command line tool deploy manag bosh director",
        "P-Tasks": "creat local alia director list deploy list environ virtual machin list environ login director show current cloud config ssh virtual machin upload stemcel",
        "Summary": "Command line tool to deploy and manage the bosh director.",
        "Task-Script": {
            "Create local alias for director": "bosh alias-env {{environment_name}} -e {{ip_address|url}} --ca-cert {{ca_certificate}}",
            "List deployments": "bosh -e {{environment}} deployments",
            "List environment virtual machines": "bosh -e {{environment}} vms -d {{deployment}}",
            "List environments": "bosh environments",
            "Login to the director": "bosh login -e {{environment}}",
            "Show current cloud config": "bosh -e {{environment}} cloud-config",
            "Ssh into virtual machine": "bosh -e {{environment}} ssh {{virtual_machine}} -d {{deployment}}",
            "Upload stemcell": "bosh -e {{environment}} upload-stemcell {{stemcell_file|url}}"
        }
    },
    "common_bower": {
        "Category": "common",
        "Command": "bower",
        "P-Summary": "packag manag optim front-end web develop\npackag github user repo shorthand git endpoint url regist packag",
        "P-Tasks": "creat bower json file packag display help inform bower command instal project depend list bower json instal specif depend version add bower json instal one packag bower_compon directori list local packag possibl updat uninstal packag local bower_compon directori",
        "Summary": "A package manager optimized for front-end web development.\nA package can be a GitHub user/repo shorthand, a Git endpoint, a URL or a registered package.",
        "Task-Script": {
            "Create a bower.json file for your package": "bower init",
            "Display help information about a bower command": "bower help {{command}}",
            "Install a project's dependencies, listed in its bower.json": "bower install",
            "Install a specific dependency version, and add it to bower.json": "bower install {{local_name}}={{package}}#{{version}} --save",
            "Install one or more packages to the bower_components directory": "bower install {{package}} {{package}}",
            "List local packages and possible updates": "bower list",
            "Uninstall packages locally from the bower_components directory": "bower uninstall {{package}} {{package}}"
        }
    },
    "common_box": {
        "Category": "common",
        "Command": "box",
        "P-Summary": "php applic build manag phar",
        "P-Tasks": "compil new phar file compil new phar file use specif config file display avail command option display inform specif phar file display inform phar php extens valid first found config file work directori verifi signatur specif phar file",
        "Summary": "A PHP application for building and managing Phars.",
        "Task-Script": {
            "Compile a new Phar file": "box compile",
            "Compile a new Phar file using a specific config file": "box compile -c {{path/to/config}}",
            "Display all available commands and options": "box help",
            "Display information about a specific Phar file": "box info {{path/to/phar_file}}",
            "Display information about the PHAR PHP extension": "box info",
            "Validate the first found config file in the working directory": "box validate",
            "Verify the signature of a specific Phar file": "box verify {{path/to/phar_file}}"
        }
    },
    "common_browser-sync": {
        "Category": "common",
        "Command": "browser-sync",
        "P-Summary": "start local web server updat browser file chang",
        "P-Tasks": "creat configur file start server specif directori start server local directori watch css file directori start browser-sync config file",
        "Summary": "Starts local web server that updates browser on file changes.",
        "Task-Script": {
            "Create configuration file": "browser-sync init",
            "Start a server from a specific directory": "browser-sync start --server {{path/to/directory}} --files {{path/to/directory}}",
            "Start a server from local directory, watching all css files in some directory": "browser-sync start --server --files '{{path/to/directory/*.css}}'",
            "Start browser-sync from config file": "browser-sync start --config {{config_file}}"
        }
    },
    "common_btm": {
        "Category": "common",
        "Command": "btm",
        "P-Summary": "altern top\naim lightweight cross-platform graphic top",
        "P-Tasks": "enabl basic mode remov chart condens data similar top refresh everi 250 millisecond show last 30 second chart show also batteri charg health statu show default layout cpu memori temperatur disk network process use big dot instead small one chart",
        "Summary": "An alternative to `top`.\nAims to be lightweight, cross-platform and more graphical than `top`.",
        "Task-Script": {
            "Enable basic mode, removing charts and condensing data (similar to `top`)": "btm --basic",
            "Refresh every 250 milliseconds and show the last 30 seconds in the charts": "btm --rate 250 --default_time_value 30000",
            "Show also battery charge and health status": "btm --battery",
            "Show the default layout (cpu, memory, temperatures, disk, network, and processes)": "btm",
            "Use big dots instead of small ones in charts": "btm --dot_marker"
        }
    },
    "common_buku": {
        "Category": "common",
        "Command": "buku",
        "P-Summary": "command-lin browser-independ bookmark manag",
        "P-Tasks": "add bookmark tag search engin privaci delet bookmark display bookmark match keyword privaci tag open editor edit bookmark remov search engin tag bookmark",
        "Summary": "Command-line browser-independent bookmark manager.",
        "Task-Script": {
            "Add bookmark with tags \"search engine\" and \"privacy\"": "buku --add {{https://example.com}} {{search engine}}, {{privacy}}",
            "Delete a bookmark": "buku --delete {{bookmark_id}}",
            "Display all bookmarks matching \"keyword\" and with \"privacy\" tag": "buku {{keyword}} --stag {{privacy}}",
            "Open editor to edit a bookmark": "buku --write {{bookmark_id}}",
            "Remove \"search engine\" tag from a bookmark": "buku --update {{bookmark_id}} --tag {{-}} {{search engine}}"
        }
    },
    "common_bundle": {
        "Category": "common",
        "Command": "bundle",
        "P-Summary": "depend manag rubi program languag",
        "P-Tasks": "creat new gem skeleton instal gem defin gemfil expect work directori list instal gem gemfil newer version avail updat gem rule defin gemfil regener gemfil lock updat one specif gem defin gemfil updat one specif gem defin gemfil next patch version updat updat gem within given group gemfil",
        "Summary": "Dependency manager for the Ruby programming language.",
        "Task-Script": {
            "Create a new gem skeleton": "bundle gem {{gemname}}",
            "Install all gems defined in the `Gemfile` expected in the working directory": "bundle install",
            "List installed gems in the `Gemfile` with newer versions available": "bundle outdated",
            "Update all gems by the rules defined in the `Gemfile` and regenerate `Gemfile.lock`": "bundle update",
            "Update one or more specific gem(s) defined in the `Gemfile`": "bundle update {{gemname}} {{gemname}}",
            "Update one or more specific gems(s) defined in the `Gemfile` but only to the next patch version": "bundle update --patch {{gemname}} {{gemname}}",
            "Update update all gems within the given group in the `Gemfile`": "bundle update --group {{development}}"
        }
    },
    "common_bup": {
        "Category": "common",
        "Command": "bup",
        "P-Summary": "backup system base git packfil format provid increment save global dedupl",
        "P-Tasks": "backup directori repositori initi backup repositori specifi local directori prepar given directori take backup restor specif backup snapshot target directori show backup snapshot current store repositori",
        "Summary": "Backup system based on the git packfile format, providing incremental saves and global deduplication.",
        "Task-Script": {
            "Backup a directory to the repository": "bup -d {{path/to/repository}} save -n {{backup_name}} {{path/to/directory}}",
            "Initialize a backup repository in the specified local directory": "bup -d {{path/to/repository}} init",
            "Prepare a given directory before taking a backup": "bup -d {{path/to/repository}} index {{path/to/directory}}",
            "Restore a specific backup snapshot to a target directory": "bup -d {{path/to/repository}} restore -C {{path/to/target_directory}} {{backup_name}}",
            "Show the backup snapshots currently stored in the repository": "bup -d {{path/to/repository}} ls"
        }
    },
    "common_buzzphrase": {
        "Category": "common",
        "Command": "buzzphrase",
        "P-Summary": "node js command line tool output random buzzphras",
        "P-Tasks": "gener string three random phrase contain adject past tens verb plural noun output 4 phrase format present participl v erb + djectiv + singular n oun + f inal output phrase format mper verb + past tens v erb + djectiv + plural n oun",
        "Summary": "Node.js command line tool to output a random buzzphrase.",
        "Task-Script": {
            "Generate a string of three random phrases containing an adjective, a past tense verb and a plural noun": "buzzphrase",
            "Output 4 phrases formatted as present participle [V]erb + [a]djective + singular [n]oun + [f]inal": "buzzphrase {{4 '{V} {a} {n} {f}'}}",
            "Output a phrase formatted as [i]mperative verb + past tense [v]erb + [a]djective + plural [N]oun": "buzzphrase {{'{i} {v} {a} {N}'}}"
        }
    },
    "common_bw": {
        "Category": "common",
        "Command": "bw",
        "P-Summary": "cli access manag bitwarden vault",
        "P-Tasks": "creat folder bitwarden vault display particular item bitwarden vault log bitwarden user account log bitwarden user account search display item bitwarden vault",
        "Summary": "A CLI to access and manage a Bitwarden vault.",
        "Task-Script": {
            "Create a folder in Bitwarden vault": "{{echo -n '{\"name\":\"My Folder1\"}' | base64}} | bw create folder",
            "Display a particular item from Bitwarden vault": "bw get item {{github}}",
            "Log in to a Bitwarden user account": "bw login",
            "Log out of a Bitwarden user account": "bw logout",
            "Search and display items from Bitwarden vault": "bw list items --search {{github}}"
        }
    },
    "common_bzip2": {
        "Category": "common",
        "Command": "bzip2",
        "P-Summary": "block-sort file compressor",
        "P-Tasks": "compress file decompress file decompress file standard output",
        "Summary": "A block-sorting file compressor.",
        "Task-Script": {
            "Compress a file": "bzip2 {{path/to/file_to_compress}}",
            "Decompress a file": "bzip2 -d {{path/to/compressed_file.bz2}}",
            "Decompress a file to standard output": "bzip2 -dc {{path/to/compressed_file.bz2}}"
        }
    },
    "common_c99": {
        "Category": "common",
        "Command": "c99",
        "P-Summary": "compil c program accord iso c standard",
        "P-Tasks": "compil sourc file creat execut compil sourc file creat execut custom name compil sourc file creat object file compil sourc file link object file creat execut",
        "Summary": "Compiles C programs according to the ISO C standard.",
        "Task-Script": {
            "Compile source file(s) and create an executable": "c99 {{file.c}}",
            "Compile source file(s) and create an executable with a custom name": "c99 -o {{executable_name}} {{file.c}}",
            "Compile source file(s) and create object file(s)": "c99 -c {{file.c}}",
            "Compile source file(s), link with object file(s), and create an executable": "c99 {{file.c}} {{file.o}}"
        }
    },
    "common_cabal": {
        "Category": "common",
        "Command": "cabal",
        "P-Summary": "command line interfac haskel packag infrastructur cabal\nmanag haskel project cabal packag hackag packag repositori",
        "P-Tasks": "build project current directori creat new haskel project current directori download instal packag run test project current directori search list packag hackag show inform packag",
        "Summary": "Command line interface to the Haskell package infrastructure (Cabal).\nManage Haskell projects and Cabal packages from the Hackage package repository.",
        "Task-Script": {
            "Build the project in the current directory": "cabal build",
            "Create a new Haskell project in the current directory": "cabal init",
            "Download and install a package": "cabal install {{package_name}}",
            "Run tests of the project in the current directory": "cabal test",
            "Search and list packages from Hackage": "cabal list {{search_string}}",
            "Show information about a package": "cabal info {{package_name}}"
        }
    },
    "common_cake": {
        "Category": "common",
        "Command": "cake",
        "P-Summary": "command line processor cakephp framework",
        "P-Tasks": "build metadata cach clear singl cach tabl clear configur cach clear metadata cach display list avail rout display basic inform current app avail command start repl interact shell instanc start develop web server default port 8765",
        "Summary": "The command line processor for the CakePHP framework.",
        "Task-Script": {
            "Build the metadata cache": "cake schema_cache build --connection {{connection}}",
            "Clear a single cache table": "cake schema_cache clear {{table_name}}",
            "Clear configuration caches": "cake cache clear_all",
            "Clear the metadata cache": "cake schema_cache clear",
            "Display a list of available routes": "cake routes",
            "Display basic information about the current app and available commands": "cake",
            "Start a REPL interactive shell instance": "cake console",
            "Start a development web server (defaults to port 8765)": "cake server"
        }
    },
    "common_calendar": {
        "Category": "common",
        "Command": "calendar",
        "P-Summary": "display upcom event calendar file",
        "P-Tasks": "look head show event next 30 day look b ack show event previou 7 day show event today tomorrow weekend friday default calendar show event custom calendar f ile",
        "Summary": "Display upcoming events from a calendar file.",
        "Task-Script": {
            "Look [A]head, showing events for the next 30 days": "calendar -A {{30}}",
            "Look [B]ack, showing events for the previous 7 days": "calendar -B {{7}}",
            "Show events for today and tomorrow (or the weekend on Friday) from the default calendar": "calendar",
            "Show events from a custom calendar [f]ile": "calendar -f {{path/to/file}}"
        }
    },
    "common_calibre-server": {
        "Category": "common",
        "Command": "calibre-server",
        "P-Summary": "server applic use distribut ebook network\nebook must import librari use gui calibredb\npart calibr ebook librari",
        "P-Tasks": "password protect server start server distribut ebook\naccess http : localhost:8080 start server differ port\naccess http : localhost : port",
        "Summary": "A server application that can be used to distribute ebooks over a network.\nEbooks must be imported into the library using the GUI or calibredb before.\nPart of the Calibre ebook library.",
        "Task-Script": {
            "Password protect the server": "calibre-server --username {{username}} --password {{password}}",
            "Start a server to distribute ebooks. Access at http://localhost:8080": "calibre-server",
            "Start server on different port. Access at http://localhost:port": "calibre-server --port {{port}}"
        }
    },
    "common_calibredb": {
        "Category": "common",
        "Command": "calibredb",
        "P-Summary": "tool manipul ebook databas\npart calibr ebook librari",
        "P-Tasks": "add one ebook librari list ebook librari addit inform recurs add ebook directori librari remov one ebook librari\nneed ebook-id see search ebook display addit inform search id ebook",
        "Summary": "Tool to manipulate the your ebook database.\nPart of the Calibre ebook library.",
        "Task-Script": {
            "Add one or more ebooks to the library": "calibredb add {{file1 file2 …}}",
            "List ebooks in the library with additional information": "calibredb list",
            "Recursively add all ebooks under a directory to the library": "calibredb add -r {{path/to/directory}}",
            "Remove one or more ebooks from the library. You need ebook-ids (see above)": "calibredb remove {{id1 id2 …}}",
            "Search for ebooks displaying additional information": "calibredb list --search {{search_term}}",
            "Search for just ids of ebooks": "calibredb search {{search_term}}"
        }
    },
    "common_carbon-now": {
        "Category": "common",
        "Command": "carbon-now",
        "P-Summary": "creat beauti imag code\nhttp : github com mixn carbon-now-cli",
        "P-Tasks": "creat imag file use default set creat imag text clipboard use default set creat imag standard input use default set creat imag previous save preset creat imag interact custom set option save preset end specif line text open imag browser instead save start specifi line text",
        "Summary": "Create beautiful images of code.\nMore at <https://github.com/mixn/carbon-now-cli>.",
        "Task-Script": {
            "Create an image from a file using default settings": "carbon-now {{file}}",
            "Create an image from a text in clipboard using default settings": "carbon-now --from-clipboard",
            "Create an image from standard input using default settings": "{{input}} | carbon-now",
            "Create images from previously saved preset": "carbon-now -p {{preset}} {{file}}",
            "Create images interactively for custom settings and optionally save a preset": "carbon-now -i {{file}}",
            "End at a specific line of text": "carbon-now -e {{line}} {{file}}",
            "Open image in a browser instead of saving": "carbon-now --open {{file}}",
            "Start at a specified line of text": "carbon-now -s {{line}} {{file}}"
        }
    },
    "common_cargo": {
        "Category": "common",
        "Command": "cargo",
        "P-Summary": "rust packag manag\nmanag rust project modul depend crate",
        "P-Tasks": "build rust project current directori build use specif number thread default number cpu core creat new binari librari rust project current directori creat new binari librari rust project specifi directori instal crate list instal crate search crate",
        "Summary": "Rust package manager.\nManage Rust projects and their module dependencies (crates).",
        "Task-Script": {
            "Build the Rust project in the current directory": "cargo build",
            "Build using a specific number of threads (default is the number of CPU cores)": "cargo build -j {{jobs}}",
            "Create a new binary or library Rust project in the current directory": "cargo init --{{bin|lib}}",
            "Create a new binary or library Rust project in the specified directory": "cargo new {{path/to/directory}} --{{bin|lib}}",
            "Install a crate": "cargo install {{crate_name}}",
            "List installed crates": "cargo install --list",
            "Search for crates": "cargo search {{search_string}}"
        }
    },
    "common_cargo build": {
        "Category": "common",
        "Command": "cargo build",
        "P-Summary": "compil local packag depend",
        "P-Tasks": "build specif packag build packag workspac build artifact releas mode optim build specifi binari build specifi test target build packag packag defin cargo toml manifest file local path requir cargo lock date",
        "Summary": "Compile a local package and all of its dependencies.",
        "Task-Script": {
            "Build a specific package": "cargo build --package {{package}}",
            "Build all packages in the workspace": "cargo build --workspace",
            "Build artifacts in release mode, with optimizations": "cargo build --release",
            "Build only the specified binary": "cargo --bin {{name}}",
            "Build only the specified test target": "cargo build --test {{testname}}",
            "Build the package or packages defined by the `Cargo.toml` manifest file in the local path": "cargo build",
            "Require that `Cargo.lock` is up to date": "cargo build --locked"
        }
    },
    "common_cargo clippy": {
        "Category": "common",
        "Command": "cargo clippy",
        "P-Summary": "collect lint catch common mistak improv rust code",
        "P-Tasks": "appli clippi suggest automat experiment support nightli channel requir cargo lock date run check ignor warn run check packag run check packag workspac run check code current directori treat warn error",
        "Summary": "A collection of lints to catch common mistakes and improve your Rust code.",
        "Task-Script": {
            "Apply Clippy suggestion automatically (experimental and only supported on the nightly channel)": "cargo clippy --fix -Z unstable-options",
            "Require that `Cargo.lock` is up to date": "cargo clippy --locked",
            "Run checks and ignore warnings": "cargo clippy -- -A warnings",
            "Run checks for a package": "cargo clippy --package {{package}}",
            "Run checks on all packages in the workspace": "cargo clippy --workspace",
            "Run checks over the code in the current directory": "cargo clippy",
            "Treat warnings as errors": "RUSTFLAGS=\"-Dwarnings\" cargo clippy -- -D warnings"
        }
    },
    "common_cargo doc": {
        "Category": "common",
        "Command": "cargo doc",
        "P-Summary": "build view rust packag document offlin",
        "P-Tasks": "build view default packag document browser build document without access network view particular packag document view particular packag document offlin",
        "Summary": "Build and view Rust package documentation offline.",
        "Task-Script": {
            "Build and view the default package documentation in the browser": "cargo doc --open",
            "Build documentation without accessing the network": "cargo doc --offline",
            "View a particular package's documentation": "cargo doc --open --package {{package}}",
            "View a particular package's documentation offline": "cargo doc --open --offline --package {{package}}"
        }
    },
    "common_cargo rustc": {
        "Category": "common",
        "Command": "cargo rustc",
        "P-Summary": "compil rust packag pass extra option compil",
        "P-Tasks": "build specif packag build artifact releas mode optim build specifi binari build packag packag defin cargo toml manifest file current work directori check packag use unsaf code compil ize optim z also turn loop vector compil architecture-specif optim current cpu compil speed optim",
        "Summary": "Compile a Rust package, and pass extra options to the compiler.",
        "Task-Script": {
            "Build a specific package": "cargo rustc --package {{package}}",
            "Build artifacts in release mode, with optimizations": "cargo rustc --release",
            "Build only the specified binary": "cargo --bin {{name}}",
            "Build the package or packages defined by the `Cargo.toml` manifest file in the current working directory": "cargo rustc",
            "Check if your package uses unsafe code": "cargo rustc --lib -- -D unsafe-code",
            "Compile with [s]ize optimization (`z` also turns off loop vectorization)": "cargo rustc -- -C opt-level {{s|z}}",
            "Compile with architecture-specific optimizations for the current CPU": "cargo rustc --release -- -C target-cpu=native",
            "Compile with speed optimization": "cargo rustc -- -C opt-level {{1|2|3}}"
        }
    },
    "common_cargo test": {
        "Category": "common",
        "Command": "cargo test",
        "P-Summary": "execut unit integr test rust packag",
        "P-Tasks": "run test contain specif string name requir cargo lock date run test packag set number simultan run test case test packag workspac test artifact releas mode optim",
        "Summary": "Execute the unit and integration tests of a Rust package.",
        "Task-Script": {
            "Only run tests containing a specific string in their names": "cargo test {{testname}}",
            "Require that `Cargo.lock` is up to date": "cargo test --locked",
            "Run tests for a package": "cargo test --package {{package}}",
            "Set the number of simultaneous running test cases": "cargo test -- --test-threads={{count}}",
            "Test all packages in the workspace": "cargo test --workspace",
            "Test artifacts in release mode, with optimizations": "cargo test --release"
        }
    },
    "common_case": {
        "Category": "common",
        "Command": "case",
        "P-Summary": "branch base valu express",
        "P-Tasks": "combin pattern use fallback pattern match variabl string liter decid command run",
        "Summary": "Branch based on the value of an expression.",
        "Task-Script": {
            "Combine patterns with |, use * as a fallback pattern": "case {{$tocount}} in {{[wW]|words}}) {{wc -w README}}; ;; {{[lL]|lines}}) {{wc -l README}}; ;; *) {{echo \"what?\"}}; ;; esac",
            "Match a variable against string literals to decide which command to run": "case {{$tocount}} in {{words}}) {{wc -w README}}; ;; {{lines}}) {{wc -l README}}; ;; esac"
        }
    },
    "common_cat": {
        "Category": "common",
        "Command": "cat",
        "P-Summary": "print concaten file",
        "P-Tasks": "append sever file target file concaten sever file target file display non-print whitespac charact m- prefix non-ascii number output line print content file standard output",
        "Summary": "Print and concatenate files.",
        "Task-Script": {
            "Append several files into the target file": "cat {{file1}} {{file2}} >> {{target_file}}",
            "Concatenate several files into the target file": "cat {{file1}} {{file2}} > {{target_file}}",
            "Display non-printable and whitespace characters (with `M-` prefix if non-ASCII)": "cat -v -t -e {{file}}",
            "Number all output lines": "cat -n {{file}}",
            "Print the contents of a file to the standard output": "cat {{file}}"
        }
    },
    "common_cd": {
        "Category": "common",
        "Command": "cd",
        "P-Summary": "chang current work directori",
        "P-Tasks": "go home directori current user go given directori go previous chosen directori go parent current directori",
        "Summary": "Change the current working directory.",
        "Task-Script": {
            "Go to home directory of current user": "cd",
            "Go to the given directory": "cd {{path/to/directory}}",
            "Go to the previously chosen directory": "cd -",
            "Go up to the parent of the current directory": "cd .."
        }
    },
    "common_cf": {
        "Category": "common",
        "Command": "cf",
        "P-Summary": "command line tool manag app servic cloud foundri",
        "P-Tasks": "connect applic servic creat servic instanc push app use default set run script whose code includ app run independ start interact ssh session vm host app view dump recent app log view servic avail organ",
        "Summary": "Command line tool to manage apps and services on Cloud Foundry.",
        "Task-Script": {
            "Connect an application to a service": "cf bind-service {{app_name}} {{service_name}}",
            "Create a service instance": "cf create-service {{service}} {{plan}} {{service_name}}",
            "Push an app using the default settings": "cf push {{app_name}}",
            "Run a script whose code is included in the app, but runs independently": "cf run-task {{app_name}} \"{{script_command}}\" --name {{task_name}}",
            "Start an interactive SSH session with a VM hosting an app": "cf ssh {{app_name}}",
            "View a dump of recent app logs": "cf logs {{app_name}} --recent",
            "View the services available from your organization": "cf marketplace"
        }
    },
    "common_chars": {
        "Category": "common",
        "Command": "chars",
        "P-Summary": "display name code variou ascii unicod charact code point",
        "P-Tasks": "look charact unicod code point look charact valu look control charact look possibl charact given ambigu code point",
        "Summary": "Display names and codes for various ASCII and Unicode characters and code points.",
        "Task-Script": {
            "Look up a character by its Unicode code point": "chars {{U+1F63C}}",
            "Look up a character by its value": "chars '{{ß}}'",
            "Look up a control character": "chars \"{{^C}}\"",
            "Look up possible characters given an ambiguous code point": "chars {{10}}"
        }
    },
    "common_chcon": {
        "Category": "common",
        "Command": "chcon",
        "P-Summary": "chang selinux secur context file file directori",
        "P-Tasks": "chang rang level part selinux secur context chang role part selinux secur context chang type part selinux secur context chang user part selinux secur context chang full selinux secur context file chang secur context target file use refer file view secur context file",
        "Summary": "Change SELinux security context of a file or files/directories.",
        "Task-Script": {
            "Change only the range/level part of SELinux security context": "chcon -l {{range/level}} {{filename}}",
            "Change only the role part of SELinux security context": "chcon -r {{role}} {{filename}}",
            "Change only the type part of SELinux security context": "chcon -t {{type}} {{filename}}",
            "Change only the user part of SELinux security context": "chcon -u {{user}} {{filename}}",
            "Change the full SELinux security context of a file": "chcon {{user}}:{{role}}:{{type}}:{{range/level}} {{filename}}",
            "Change the security context of a target file, using a reference file": "chcon --reference={{reference_file}} {{target_file}}",
            "View security context of a file": "ls -lZ {{path/to/file}}"
        }
    },
    "common_cheat": {
        "Category": "common",
        "Command": "cheat",
        "P-Summary": "creat view interact cheat sheet command-lin",
        "P-Tasks": "edit cheat sheet command get current cheat version list avail cheat sheet search avail cheat sheet specifi command name show exampl usag command",
        "Summary": "Create and view interactive cheat sheets on the command-line.",
        "Task-Script": {
            "Edit the cheat sheet for a command": "cheat -e {{command}}",
            "Get the current cheat version": "cheat -v",
            "List the available cheat sheets": "cheat -l",
            "Search available the cheat sheets for a specified command name": "cheat -s {{command}}",
            "Show example usage of a command": "cheat {{command}}"
        }
    },
    "common_chgrp": {
        "Category": "common",
        "Command": "chgrp",
        "P-Summary": "chang group ownership file directori",
        "P-Tasks": "chang owner group file directori chang owner group file directori match refer file chang owner group symbol link recurs chang owner group directori content",
        "Summary": "Change group ownership of files and directories.",
        "Task-Script": {
            "Change the owner group of a file/directory": "chgrp {{group}} {{path/to/file_or_directory}}",
            "Change the owner group of a file/directory to match a reference file": "chgrp --reference={{path/to/reference_file}} {{path/to/file_or_directory}}",
            "Change the owner group of a symbolic link": "chgrp -h {{group}} {{path/to/symlink}}",
            "Recursively change the owner group of a directory and its contents": "chgrp -R {{group}} {{path/to/directory}}"
        }
    },
    "common_chisel": {
        "Category": "common",
        "Command": "chisel",
        "P-Summary": "creat tcp tunnel\ninclud client server",
        "P-Tasks": "connect chisel server tunnel specif host port remot server port connect chisel server tunnel specif port remot server port connect chisel server use usernam password authent run chisel server run chisel server listen specif port run chisel server accept authent connect use usernam password",
        "Summary": "Create TCP tunnels. Includes both client and server.",
        "Task-Script": {
            "Connect to a Chisel server and tunnel a specific host and port to a remote server and port": "chisel client {{server_ip}}:{{server_port}} {{local_host}}:{{local_port}}:{{remote_server}}:{{remote_port}}",
            "Connect to a Chisel server and tunnel a specific port to a remote server and port": "chisel client {{server_ip}}:{{server_port}} {{local_port}}:{{remote_server}}:{{remote_port}}",
            "Connect to a Chisel server using username and password authentication": "chisel client --auth {{username}}:{{password}} {{server_ip}}:{{server_port}} {{local_port}}:{{remote_server}}:{{remote_port}}",
            "Run a Chisel server": "chisel server",
            "Run a Chisel server listening to a specific port": "chisel server -p {{server_port}}",
            "Run a chisel server that accepts authenticated connections using username and password": "chisel server --auth {{username}}:{{password}}"
        }
    },
    "common_chmod": {
        "Category": "common",
        "Command": "chmod",
        "P-Summary": "chang access permiss file directori",
        "P-Tasks": "chang permiss recurs give g roup ther abil w rite give user right r ead e x ecut give ther file owner group right g roup give u ser right r ead w rite file directori give u ser own file right e x ecut remov right ther remov e x ecut right g roup",
        "Summary": "Change the access permissions of a file or directory.",
        "Task-Script": {
            "Change permissions recursively giving [g]roup and [o]thers the ability to [w]rite": "chmod -R g+w,o+w {{directory}}",
            "Give [a]ll users rights to [r]ead and e[x]ecute": "chmod a+rx {{file}}",
            "Give [o]thers (not in the file owner's group) the same rights as the [g]roup": "chmod o=g {{file}}",
            "Give the [u]ser rights to [r]ead and [w]rite to a file/directory": "chmod u+rw {{file_or_directory}}",
            "Give the [u]ser who owns a file the right to e[x]ecute it": "chmod u+x {{file}}",
            "Remove all rights from [o]thers": "chmod o= {{file}}",
            "Remove e[x]ecutable rights from the [g]roup": "chmod g-x {{file}}"
        }
    },
    "common_chown": {
        "Category": "common",
        "Command": "chown",
        "P-Summary": "chang user group ownership file directori",
        "P-Tasks": "chang owner file directori match refer file chang owner symbol link chang owner user group file directori chang owner user file directori recurs chang owner directori content",
        "Summary": "Change user and group ownership of files and directories.",
        "Task-Script": {
            "Change the owner of a file/directory to match a reference file": "chown --reference={{path/to/reference_file}} {{path/to/file_or_directory}}",
            "Change the owner of a symbolic link": "chown -h {{user}} {{path/to/symlink}}",
            "Change the owner user and group of a file/directory": "chown {{user}}:{{group}} {{path/to/file_or_directory}}",
            "Change the owner user of a file/directory": "chown {{user}} {{path/to/file_or_directory}}",
            "Recursively change the owner of a directory and its contents": "chown -R {{user}} {{path/to/directory}}"
        }
    },
    "common_chroma": {
        "Category": "common",
        "Command": "chroma",
        "P-Summary": "chroma general-purpos syntax highlight librari correspond command go",
        "P-Tasks": "highlight sourc file c++ lexer output svg imag use monokai style highlight sourc file go lexer output html file highlight sourc file python lexer output termin",
        "Summary": "Chroma is a general-purpose syntax highlighting library and corresponding command, for Go.",
        "Task-Script": {
            "Highlight a source file with C++ lexer and output to an SVG image, using the Monokai style": "chroma --lexer=\"{{c++}}\" --formatter=\"{{svg}}\" --syle=\"{{monokai}}\" {{source_file}} > {{svg_file}}",
            "Highlight a source file with Go lexer and output to a HTML file": "chroma --lexer=\"{{go}}\" --formatter=\"{{html}}\" {{source_file}} > {{html_file}}",
            "Highlight a source file with python lexer and output to terminal": "chroma --lexer=\"{{python}}\" {{source_file}}"
        }
    },
    "common_chromium": {
        "Category": "common",
        "Command": "chromium",
        "P-Summary": "open-sourc web browser googl",
        "P-Tasks": "open file open url open new window open app mode without toolbar url bar button etc\nopen incognito mode use proxi server",
        "Summary": "Open-source web browser from Google.",
        "Task-Script": {
            "Open a file": "chromium {{path/to/file.html}}",
            "Open an URL": "chromium {{example.com}}",
            "Open in a new window": "chromium --new-window {{example.com}}",
            "Open in app mode (without toolbars, URL bar, buttons, etc.)": "chromium --app='{{https://example.com}}'",
            "Open in incognito mode": "chromium --incognito {{example.com}}",
            "Use a proxy server": "chromium --proxy-server=\"{{socks5://hostname:66}}\" {{example.com}}"
        }
    },
    "common_chroot": {
        "Category": "common",
        "Command": "chroot",
        "P-Summary": "run command interact shell special root directori",
        "P-Tasks": "run command new root directori specifi user group id name use",
        "Summary": "Run command or interactive shell with special root directory.",
        "Task-Script": {
            "Run command as new root directory": "chroot {{/path/to/new/root}} {{command}}",
            "Specify user and group (ID or name) to use": "chroot --userspec={{user:group}}"
        }
    },
    "common_chsh": {
        "Category": "common",
        "Command": "chsh",
        "P-Summary": "chang user login shell",
        "P-Tasks": "chang shell",
        "Summary": "Change user's login shell.",
        "Task-Script": {
            "Change shell": "chsh -s {{path/to/shell_binary}} {{username}}"
        }
    },
    "common_cksum": {
        "Category": "common",
        "Command": "cksum",
        "P-Summary": "calcul crc checksum byte count file\nnote old unix system crc implement may differ",
        "P-Tasks": "display 32 bit checksum size byte filenam",
        "Summary": "Calculates CRC checksums and byte counts of a file.\nNote, on old UNIX systems the CRC implementation may differ.",
        "Task-Script": {
            "Display a 32 bit checksum, size in bytes and filename": "cksum {{filename}}"
        }
    },
    "common_clamscan": {
        "Category": "common",
        "Command": "clamscan",
        "P-Summary": "command line viru scanner",
        "P-Tasks": "move infect file specif directori output scan report log file remov infect file scan file vulner scan file recurs specif directori scan data stdin scan current directori output infect file specifi viru databas file directori file",
        "Summary": "A command line virus scanner.",
        "Task-Script": {
            "Move infected files to a specific directory": "clamscan --move {{path/to/quarantine_directory}}",
            "Output the scan report to a log file": "clamscan --log {{path/to/log_file}}",
            "Remove infected files": "clamscan --remove yes",
            "Scan a file for vulnerabilities": "clamscan {{path/to/file}}",
            "Scan all files recursively in a specific directory": "clamscan -r {{path/to/directory}}",
            "Scan data from `stdin`": "{{command}} | clamscan -",
            "Scan the current directory and output only infected files": "clamscan --infected",
            "Specify a virus database file or directory of files": "clamscan --database {{path/to/database_file_or_directory}}"
        }
    },
    "common_clang": {
        "Category": "common",
        "Command": "clang",
        "P-Summary": "compil c c++ objective-c sourc file\nuse drop-in replac gcc",
        "P-Tasks": "activ output error warn compil sourc code file execut binari compil sourc code llvm intermedi represent ir includ librari locat differ path sourc file",
        "Summary": "Compiler for C, C++, and Objective-C source files. Can be used as a drop-in replacement for GCC.",
        "Task-Script": {
            "Activate output of all errors and warnings": "clang {{input_source.c}} -Wall -o {{output_executable}}",
            "Compile a source code file into an executable binary": "clang {{input_source.c}} -o {{output_executable}}",
            "Compile source code into LLVM Intermediate Representation (IR)": "clang -S -emit-llvm {{file.c}} -o {{file.ll}}",
            "Include libraries located at a different path than the source file": "clang {{input_source.c}} -o {{output_executable}} -I{{header_path}} -L{{library_path}} -l{{library_name}}"
        }
    },
    "common_clang-format": {
        "Category": "common",
        "Command": "clang-format",
        "P-Summary": "tool auto-format c c++ java javascript objective-c protobuf c code",
        "P-Tasks": "format file print result stdout format file in-plac format file use predefin code style format file use clang-format file one parent directori sourc file gener custom clang-format file",
        "Summary": "Tool to auto-format C/C++/Java/JavaScript/Objective-C/Protobuf/C# code.",
        "Task-Script": {
            "Format a file and print the result to `stdout`": "clang-format {{path/to/file}}",
            "Format a file in-place": "clang-format -i {{path/to/file}}",
            "Format a file using a predefined coding style": "clang-format --style={{LLVM|Google|Chromium|Mozilla|WebKit}} {{path/to/file}}",
            "Format a file using the `.clang-format` file in one of the parent directories of the source file": "clang-format --style=file {{path/to/file}}",
            "Generate a custom `.clang-format` file": "clang-format --style={{LLVM|Google|Chromium|Mozilla|WebKit}} --dump-config > {{.clang-format}}"
        }
    },
    "common_clear": {
        "Category": "common",
        "Command": "clear",
        "P-Summary": "clear screen termin",
        "P-Tasks": "clear screen equival press control-l bash shell clear screen keep termin scrollback buffer indic type termin clean default valu environ variabl term show version ncurs use clear",
        "Summary": "Clears the screen of the terminal.",
        "Task-Script": {
            "Clear the screen (equivalent to pressing Control-L in Bash shell)": "clear",
            "Clear the screen but keep the terminal's scrollback buffer": "clear -x",
            "Indicate the type of terminal to clean (defaults to the value of the environment variable `TERM`)": "clear -T {{type_of_terminal}}",
            "Show the version of `ncurses` used by `clear`": "clear -V"
        }
    },
    "common_clementine": {
        "Category": "common",
        "Command": "clementine",
        "P-Summary": "modern music player librari organ",
        "P-Tasks": "load playlist file open clementin play 5th track current load playlist skip next track skip previou track start play music file stop playback toggl paus play",
        "Summary": "A modern music player and library organizer.",
        "Task-Script": {
            "Load a playlist file": "clementine --load {{path/to/playlist.ext}}",
            "Open Clementine": "clementine",
            "Play the 5th track in the currently loaded playlist": "clementine --play-track {{5}}",
            "Skip to the next track": "clementine --next",
            "Skip to the previous track": "clementine --previous",
            "Start playing a music file": "clementine {{url/or/path/to/file.ext}}",
            "Stop playback": "clementine --stop",
            "Toggle between pausing and playing": "clementine --play-pause"
        }
    },
    "common_cloc": {
        "Category": "common",
        "Command": "cloc",
        "P-Summary": "count comput differ line sourc code comment",
        "P-Tasks": "compar 2 directori structur count differ count line code directori count line code directori display progress bar count process count line code directori display result file instead languag ignor file ignor vc file specifi gitignor",
        "Summary": "Count, and compute differences of, lines of source code and comments.",
        "Task-Script": {
            "Compare 2 directory structures and count the differences between them": "cloc --diff {{path/to/directory/one}} {{path/to/directory/two}}",
            "Count all the lines of code in a directory": "cloc {{path/to/directory}}",
            "Count all the lines of code in a directory, displaying a progress bar during the counting process": "cloc --progress=1 {{path/to/directory}}",
            "Count all the lines of code in a directory, displaying the results for each file instead of each language": "cloc --by-file {{path/to/directory}}",
            "Ignore files that are ignored by VCS, such as files specified in .gitignore": "cloc --vcs git {{path/to/directory}}"
        }
    },
    "common_clockwork-cli": {
        "Category": "common",
        "Command": "clockwork-cli",
        "P-Summary": "command line interfac clockwork php debug framework",
        "P-Tasks": "monitor clockwork log specif project monitor clockwork log multipl project monitor clockwork log current project",
        "Summary": "A command line interface for the Clockwork PHP debugging framework.",
        "Task-Script": {
            "Monitor Clockwork logs for a specific project": "clockwork-cli {{path/to/directory}}",
            "Monitor Clockwork logs for multiple projects": "clockwork-cli {{path/to/directory1 path/to/directory2 …}}",
            "Monitor Clockwork logs for the current project": "clockwork-cli"
        }
    },
    "common_cmake": {
        "Category": "common",
        "Command": "cmake",
        "P-Summary": "cross-platform build system gener\ngener makefil visual studio project other depend target system",
        "P-Tasks": "gener makefil use compil project separ build directori out-of-sourc build gener makefil use compil project directori sourc",
        "Summary": "Cross-platform build system generator.\nIt generates Makefiles, Visual Studio projects or others, depending on the target system.",
        "Task-Script": {
            "Generate a Makefile and use it to compile a project in a separate \"build\" directory (out-of-source build)": "cmake -H. -B{{build}} && make -C {{build}}",
            "Generate a Makefile and use it to compile a project in the same directory as the source": "cmake && make"
        }
    },
    "common_cmark": {
        "Category": "common",
        "Command": "cmark",
        "P-Summary": "convert commonmark markdown format text format",
        "P-Tasks": "convert data standard input latex convert straight quot smart quot render commonmark markdown file html valid utf8 charact",
        "Summary": "Converts CommonMark Markdown formatted text to other formats.",
        "Task-Script": {
            "Convert data from standard input to latex": "cmark --to latex",
            "Convert straight quotes to smart quotes": "cmark --smart --to html {{filename.md}}",
            "Render a Commonmark Markdown file to HTML": "cmark --to html {{filename.md}}",
            "Validate utf8 characters": "cmark --validate-utf8 {{filename.md}}"
        }
    },
    "common_cmatrix": {
        "Category": "common",
        "Command": "cmatrix",
        "P-Summary": "show scroll matrix like screen termin",
        "P-Tasks": "display red text enabl asynchron scroll enabl rainbow mode set screen updat delay 2 centisecond",
        "Summary": "Shows a scrolling Matrix like screen in the terminal.",
        "Task-Script": {
            "Display red text": "cmatrix -C {{red}}",
            "Enable asynchronous scrolling": "cmatrix -a",
            "Enable rainbow mode": "cmatrix -r",
            "Set screen update delay to 2 centiseconds": "cmatrix -u {{2}}"
        }
    },
    "common_cmp": {
        "Category": "common",
        "Command": "cmp",
        "P-Summary": "compar two file",
        "P-Tasks": "find byte number differ byte everi differ find byte number line number first differ file",
        "Summary": "Compare two files.",
        "Task-Script": {
            "Find the byte number and differing bytes of every difference": "cmp -l {{file1}} {{file2}}",
            "Find the byte number and line number of the first difference between the files": "cmp {{file1}} {{file2}}"
        }
    },
    "common_code": {
        "Category": "common",
        "Command": "code",
        "P-Summary": "visual studio code",
        "P-Tasks": "compar two file vs code open vs code open vs code super user sudo permiss open file directori vs code open file directori current open vs code window open current directori vs code",
        "Summary": "Visual Studio Code.",
        "Task-Script": {
            "Compare two files in VS Code": "code -d {{file1}} {{file2}}",
            "Open VS Code": "code",
            "Open VS Code with super user (sudo) permissions": "sudo code {{path/to/file_or_directory}} --user-data-dir",
            "Open a file or directory in VS Code": "code {{path/to/file_or_directory}}",
            "Open a file or directory in the currently open VS Code window": "code --reuse-window {{path/to/file_or_directory}}",
            "Open the current directory in VS Code": "code ."
        }
    },
    "common_coffee": {
        "Category": "common",
        "Command": "coffee",
        "P-Summary": "execut coffeescript script compil javascript",
        "P-Tasks": "compil javascript save file name compil javascript save given output file run script run interact repl watch script chang re-run script",
        "Summary": "Executes CoffeeScript scripts or compiles them into JavaScript.",
        "Task-Script": {
            "Compile to JavaScript and save to a file with the same name": "coffee --compile {{path/to/file.coffee}}",
            "Compile to JavaScript and save to a given output file": "coffee --compile {{path/to/file.coffee}} --output {{path/to/file.js}}",
            "Run a script": "coffee {{path/to/file.coffee}}",
            "Run interactive REPL": "coffee --interactive",
            "Watch script for changes and re-run script": "coffee --watch {{path/to/file.coffee}}"
        }
    },
    "common_colordiff": {
        "Category": "common",
        "Command": "colordiff",
        "P-Summary": "tool color diff output\nperl script colordiff wrapper diff produc output pretti syntax highlight\ncolour scheme custom",
        "P-Tasks": "compar file ignor case differ file content ignor white space output two column report two file",
        "Summary": "A tool to colorize diff output.\nThe Perl script colordiff is a wrapper for `diff` and produces the same output but with pretty syntax highlighting. Colour schemes can be customized.",
        "Task-Script": {
            "Compare files": "colordiff {{file1}} {{file2}}",
            "Ignore case differences in file contents": "colordiff -i {{file1}} {{file2}}",
            "Ignore white spaces": "colordiff -w {{file1}} {{file2}}",
            "Output in two columns": "colordiff -y {{file1}} {{file2}}",
            "Report when two files are the same": "colordiff -s {{file1}} {{file2}}"
        }
    },
    "common_column": {
        "Category": "common",
        "Command": "column",
        "P-Summary": "format standard input file multipl column\nrow fill column default separ whitespac",
        "P-Tasks": "fill column fill row format output 30 charact wide display specifi column delimit charact -t option e g\ncsv default whitespac split column automat auto-align tabular format",
        "Summary": "Format standard input or file into multiple columns.\nRows are filled before columns; default separator is whitespace.",
        "Task-Script": {
            "Fill columns before filling rows": "printf \"header1\\nbar\\nfoobar\\n\" | column -c {{30}} -x",
            "Format output for a 30 characters wide display": "printf \"header1 header2\\nbar foo\\n\" | column -c {{30}}",
            "Specify column delimiter character for the -t option (e.g. \",\" for csv); default is whitespace": "printf \"header1,header2\\nbar,foo\\n\" | column -t -s{{,}}",
            "Split columns automatically and auto-align in a tabular format": "printf \"header1 header2\\nbar foo\\n\" | column -t"
        }
    },
    "common_comm": {
        "Category": "common",
        "Command": "comm",
        "P-Summary": "select reject line common two file\nfile must sort",
        "P-Tasks": "get line found first file save result third file print line found second file file sort print line common file print line common file read one file stdin produc three tab-separ column : line first file line second file common line",
        "Summary": "Select or reject lines common to two files. Both files must be sorted.",
        "Task-Script": {
            "Get lines only found in first file, saving the result to a third file": "comm -23 {{file1}} {{file2}} > {{file1_only}}",
            "Print lines only found in second file, when the files aren't sorted": "comm -13 <(sort {{file1}}) <(sort {{file2}})",
            "Print only lines common to both files": "comm -12 {{file1}} {{file2}}",
            "Print only lines common to both files, reading one file from `stdin`": "cat {{file1}} | comm -12 - {{file2}}",
            "Produce three tab-separated columns: lines only in first file, lines only in second file and common lines": "comm {{file1}} {{file2}}"
        }
    },
    "common_command": {
        "Category": "common",
        "Command": "command",
        "P-Summary": "command forc shell execut program ignor function builtin alias name",
        "P-Tasks": "display path execut alia definit specif command execut ls program liter even ls alia exist",
        "Summary": "Command forces the shell to execute the program and ignore any functions, builtins and aliases with the same name.",
        "Task-Script": {
            "Display the path to the executable or the alias definition of a specific command": "command -v {{command_name}}",
            "Execute the ls program literally, even if an ls alias exists": "command {{ls}}"
        }
    },
    "common_compare": {
        "Category": "common",
        "Command": "compare",
        "P-Summary": "view differ 2 imag",
        "P-Tasks": "compar 2 imag compar 2 imag use custom metric",
        "Summary": "View the difference between 2 images.",
        "Task-Script": {
            "Compare 2 images": "compare {{image1.png}} {{image2.png}} {{diff.png}}",
            "Compare 2 images using a custom metric": "compare -verbose -metric {{PSNR}} {{image1.png}} {{image2.png}} {{diff.png}}"
        }
    },
    "common_complete": {
        "Category": "common",
        "Command": "complete",
        "P-Summary": "provid argument autocomplet shell command",
        "P-Tasks": "appli command perform autocomplet anoth command appli function perform autocomplet command appli autocomplet without append space complet word",
        "Summary": "Provides argument autocompletion to shell commands.",
        "Task-Script": {
            "Apply a command that performs autocompletion to another command": "complete -C {{autocomplete_command}} {{command}}",
            "Apply a function that performs autocompletion to a command": "complete -F {{function}} {{command}}",
            "Apply autocompletion without appending a space to the completed word": "complete -o nospace -F {{function}} {{command}}"
        }
    },
    "common_composer": {
        "Category": "common",
        "Command": "composer",
        "P-Summary": "package-bas depend manag php project",
        "P-Tasks": "add packag depend project ad compos json instal depend project compos json creat compos lock interact creat compos json file learn depend instal uninstal packag project remov depend compos json updat depend project compos json note version compos lock file updat compos lock updat compos json manual updat compos latest version",
        "Summary": "A package-based dependency manager for PHP projects.",
        "Task-Script": {
            "Add a package as a dependency for this project, adding it to `composer.json`": "composer require {{user/package_name}}",
            "Install all the dependencies in this project's `composer.json` and create `composer.lock`": "composer install",
            "Interactively create a `composer.json` file": "composer init",
            "Learn more about why a dependency can't be installed": "composer why-not {{user/package_name}}",
            "Uninstall a package from this project, removing it as a dependency from `composer.json`": "composer remove {{user/package_name}}",
            "Update all the dependencies in this project's `composer.json` and note versions in `composer.lock` file": "composer update",
            "Update composer lock only after updating `composer.json` manually": "composer update --lock",
            "Update composer to its latest version": "composer self-update"
        }
    },
    "common_conda": {
        "Category": "common",
        "Command": "conda",
        "P-Summary": "packag depend environ manag program languag",
        "P-Tasks": "creat new environ instal name packag delet environ remov packag delet unus packag cach instal packag current environ list environ list current instal packag current environ load unload environ search conda channel packag name",
        "Summary": "Package, dependency and environment management for any programming language.",
        "Task-Script": {
            "Create a new environment, installing named packages into it": "conda create --name {{environment_name}} {{python=2.7 matplotlib}}",
            "Delete an environment (remove all packages)": "conda remove --name {{environment_name}} --all",
            "Delete unused packages and caches": "conda clean --all",
            "Install packages into the current environment": "conda install {{python=3.4 numpy}}",
            "List all environments": "conda info --envs",
            "List currently installed packages in current environment": "conda list",
            "Load or unload an environment": "conda {{activate|deactivate}} {{environment_name}}",
            "Search conda channels for a package by name": "conda search {{package_name}}"
        }
    },
    "common_consul": {
        "Category": "common",
        "Command": "consul",
        "P-Summary": "distribut key-valu store health check servic discoveri",
        "P-Tasks": "check consul version show gener help show help sub-command",
        "Summary": "Distributed key-value store with health checking and service discovery.",
        "Task-Script": {
            "Check the Consul version": "consul --version",
            "Show general help": "consul --help",
            "Show help for a sub-command": "consul {{sub-command}} --help"
        }
    },
    "common_consul-kv": {
        "Category": "common",
        "Command": "consul-kv",
        "P-Summary": "distribut key-valu store health check servic discoveri",
        "P-Tasks": "delet key-valu pair read valu key-valu store store new key-valu pair",
        "Summary": "Distributed key-value store with health checking and service discovery.",
        "Task-Script": {
            "Delete a key-value pair": "consul kv delete {{key}}",
            "Read a value from the key-value store": "consul kv get {{key}}",
            "Store a new key-value pair": "consul kv put {{key}} {{value}}"
        }
    },
    "common_convert": {
        "Category": "common",
        "Command": "convert",
        "P-Summary": "imagemagick imag convers tool",
        "P-Tasks": "convert imag jpg png creat gif seri imag 100m delay creat imag noth solid background horizont append imag scale imag 50 origin size scale imag keep origin aspect ratio maximum dimens 640x480 vertic append imag",
        "Summary": "Imagemagick image conversion tool.",
        "Task-Script": {
            "Convert an image from JPG to PNG": "convert {{image.jpg}} {{image.png}}",
            "Create a gif from a series of images with 100ms delay between them": "convert {{image1.png}} {{image2.png}} {{image3.png}} -delay {{10}} {{animation.gif}}",
            "Create an image with nothing but a solid background": "convert -size {{800x600}} \"xc:{{#ff0000}}\" {{image.png}}",
            "Horizontally append images": "convert {{image1.png}} {{image2.png}} {{image3.png}} +append {{image123.png}}",
            "Scale an image 50% its original size": "convert {{image.png}} -resize 50% {{image2.png}}",
            "Scale an image keeping the original aspect ratio to a maximum dimension of 640x480": "convert {{image.png}} -resize 640x480 {{image2.png}}",
            "Vertically append images": "convert {{image1.png}} {{image2.png}} {{image3.png}} -append {{image123.png}}"
        }
    },
    "common_convmv": {
        "Category": "common",
        "Command": "convmv",
        "P-Summary": "convert filenam file content one encod anoth",
        "P-Tasks": "convert filenam encod renam file new encod test filenam encod convers actual chang filenam",
        "Summary": "Convert filenames (NOT file content) from one encoding to another.",
        "Task-Script": {
            "Convert filename encoding and rename the file to the new encoding": "convmv -f {{from_encoding}} -t {{to_encoding}} --notest {{input_file}}",
            "Test filename encoding conversion (don't actually change the filename)": "convmv -f {{from_encoding}} -t {{to_encoding}} {{input_file}}"
        }
    },
    "common_copyq": {
        "Category": "common",
        "Command": "copyq",
        "P-Summary": "clipboard manag advanc featur",
        "P-Tasks": "copi jpeg imag clipboard copi file content clipboard insert raw text clipboard histori insert text contain escap sequenc n clipboard histori launch copyq store clipboard histori print content first 3 item clipboard histori show current clipboard content",
        "Summary": "Clipboard manager with advanced features.",
        "Task-Script": {
            "Copy a JPEG image into the clipboard": "copyq copy image/jpeg < {{image.jpg}}",
            "Copy a file's contents into the clipboard": "copyq copy < {{file.txt}}",
            "Insert raw text into the clipboard history": "copyq add -- {{text1}} {{text2}} {{text3}}",
            "Insert text containing escape sequences ('\\n', '\\t') into the clipboard history": "copyq add {{firstline\\nsecondline}}",
            "Launch CopyQ to store clipboard history": "copyq",
            "Print the content of the first 3 items in the clipboard history": "copyq read 0 1 2",
            "Show current clipboard content": "copyq clipboard"
        }
    },
    "common_cordova": {
        "Category": "common",
        "Command": "cordova",
        "P-Summary": "mobil app html css js",
        "P-Tasks": "add cordova platform add cordova plugin creat cordova project display current workspac statu remov cordova platform remov cordova plugin",
        "Summary": "Mobile apps with HTML, CSS & JS.",
        "Task-Script": {
            "Add a cordova platform": "cordova platform add {{platform}}",
            "Add a cordova plugin": "cordova plugin add {{pluginid}}",
            "Create a cordova project": "cordova create {{path}} {{package_name}} {{project_name}}",
            "Display the current workspace status": "cordova info",
            "Remove a cordova platform": "cordova platform remove {{platform}}",
            "Remove a cordova plugin": "cordova plugin remove {{pluginid}}"
        }
    },
    "common_cotton": {
        "Category": "common",
        "Command": "cotton",
        "P-Summary": "markdown test specif runner",
        "P-Tasks": "disabl certif verif insecur mode stop run test fail use specif base url",
        "Summary": "Markdown test specification runner.",
        "Task-Script": {
            "Disable certificate verification (insecure mode)": "cotton -u {{base_url}} -i {{file}}.md",
            "Stop running when a test fails": "cotton -u {{base_url}} -s {{file}}.md",
            "Use a specific base url": "cotton -u {{base_url}} {{file}}.md"
        }
    },
    "common_couchdb": {
        "Category": "common",
        "Command": "couchdb",
        "P-Summary": "command line interfac apach couchdb databas server",
        "P-Tasks": "kill background process note : respawn need shutdown background process start couchdb start couchdb background process start couchdb interact shell",
        "Summary": "Command line interface for Apache CouchDB database server.",
        "Task-Script": {
            "Kill the background process (Note: It will respawn if needed)": "couchdb -k",
            "Shutdown the background process": "couchdb -d",
            "Start couchdb": "couchdb",
            "Start couchdb as a background process": "couchdb -b",
            "Start couchdb interactive shell": "couchdb -i"
        }
    },
    "common_cowsay": {
        "Category": "common",
        "Command": "cowsay",
        "P-Summary": "gener ascii charact default cow say think someth",
        "P-Tasks": "list avail charact print stone think ascii cow print ascii cow say hello world\nprint ascii dragon say hello\nuse text standard input balloon",
        "Summary": "Generate an ASCII character (by default a cow) saying or thinking something.",
        "Task-Script": {
            "List all available characters": "cowsay -l",
            "Print a stoned thinking ASCII cow": "cowthink -s \"I'm just a cow, not a great thinker ...\"",
            "Print an ASCII cow saying \"Hello world!\"": "cowsay \"Hello world!\"",
            "Print an ASCII dragon saying \"Hello!\"": "cowsay -f dragon \"Hello!\"",
            "Use text from standard input for the balloon": "echo \"Hello!\" | cowsay"
        }
    },
    "common_cp": {
        "Category": "common",
        "Command": "cp",
        "P-Summary": "copi file directori",
        "P-Tasks": "copi directori recurs verbos mode show file copi copi file anoth directori keep filenam copi file anoth locat copi text file anoth locat interact mode prompt user overwrit derefer symbol link copi recurs copi directori content anoth locat destin exist directori copi insid",
        "Summary": "Copy files and directories.",
        "Task-Script": {
            "Copy a directory recursively, in verbose mode (shows files as they are copied)": "cp -vR {{path/to/source_directory}} {{path/to/target_directory}}",
            "Copy a file into another directory, keeping the filename": "cp {{path/to/source_file.ext}} {{path/to/target_parent_directory}}",
            "Copy a file to another location": "cp {{path/to/source_file.ext}} {{path/to/target_file.ext}}",
            "Copy text files to another location, in interactive mode (prompts user before overwriting)": "cp -i {{*.txt}} {{path/to/target_directory}}",
            "Dereference symbolic links before copying": "cp -L {{link}} {{path/to/target_directory}}",
            "Recursively copy a directory's contents to another location (if the destination exists, the directory is copied inside it)": "cp -R {{path/to/source_directory}} {{path/to/target_directory}}"
        }
    },
    "common_cpdf": {
        "Category": "common",
        "Command": "cpdf",
        "P-Summary": "cli manipul exist pdf file varieti way",
        "P-Tasks": "creat new document exist one addit metadata decrypt document use owner password fred encrypt document use 128bit encrypt provid fred owner password joe user password merg two document new one select page 1 2 3 6 sourc document write destin document show annot document show bookmark document split document ten-pag chunk write chunk001 pdf chunk002 pdf etc",
        "Summary": "CLI to manipulate existing PDF files in a variety of ways.",
        "Task-Script": {
            "Create a new document from an existing one with additional metadata": "cpdf -set-metadata {{path/to/metadata.xml}} {{path/to/source_document.pdf}} -o {{path/to/destination_document.pdf}}",
            "Decrypt a document using the owner password `fred`": "cpdf -decrypt {{path/to/encrypted_document.pdf}} owner={{fred}} -o {{path/to/decrypted_document.pdf}}",
            "Encrypt a document using 128bit encryption, providing `fred` as owner password and `joe` as user password": "cpdf -encrypt {{128bit}} {{fred}} {{joe}} {{path/to/source_document.pdf}} -o {{path/to/encrypted_document.pdf}}",
            "Merge two documents into a new one": "cpdf -merge {{path/to/source_document_one.pdf}} {{path/to/source_document_two.pdf}} -o {{path/to/destination_document.pdf}}",
            "Select pages 1, 2, 3 and 6 from a source document and write those to a destination document": "cpdf {{path/to/source_document.pdf}} {{1-3,6}} -o {{path/to/destination_document.pdf}}",
            "Show the annotations of a document": "cpdf -list-annotations {{path/to/document.pdf}}",
            "Show the bookmarks of a document": "cpdf -list-bookmarks {{path/to/document.pdf}}",
            "Split a document into ten-page chunks, writing them to chunk001.pdf, chunk002.pdf, etc": "cpdf -split {{path/to/document.pdf}} -o {{path/to/chunk%%%.pdf}} -chunk {{10}}"
        }
    },
    "common_cpio": {
        "Category": "common",
        "Command": "cpio",
        "P-Summary": "copi file archiv\nsupport follow archiv format : cpio custom binari old ascii new ascii crc hpux binari hpux old ascii old tar posix 1 tar",
        "P-Tasks": "copi file directori directori add nto archiv v erbos mode p ck file archiv gener irectori need v erbos mode take list file name standard input add nto archiv cpio binari format",
        "Summary": "Copies files in and out of archives.\nSupports the following archive formats: cpio's custom binary, old ASCII, new ASCII, crc, HPUX binary, HPUX old ASCII, old tar, and POSIX.1 tar.",
        "Task-Script": {
            "Copy all files and directories in a directory and add them [o]nto an archive, in [v]erbose mode": "find {{path/to/directory}} | cpio -ov > {{archive.cpio}}",
            "P[i]ck all files from an archive, generating [d]irectories where needed, in [v]erbose mode": "cpio -idv < {{archive.cpio}}",
            "Take a list of file names from standard input and add them [o]nto an archive in cpio's binary format": "echo \"{{file1}} {{file2}} {{file3}}\" | cpio -o > {{archive.cpio}}"
        }
    },
    "common_cppcheck": {
        "Category": "common",
        "Command": "cppcheck",
        "P-Summary": "static analysi tool c c++ code\ninstead syntax error focus type bug compil normal detect",
        "P-Tasks": "check microsoft visual studio project vcxproj solut sln check given file ignor specif test check given file specifi test perform default error shown check current directori provid path includ file locat outsid e g\nextern librari list avail test recurs check given directori print progress messag recurs check current directori show progress screen log error messag file",
        "Summary": "A static analysis tool for C/C++ code.\nInstead of syntax errors, it focuses on the types of bugs that compilers normally do not detect.",
        "Task-Script": {
            "Check a Microsoft Visual Studio project (`*.vcxproj`) or solution (`*.sln`)": "cppcheck --project={{path/to/project.sln}}",
            "Check a given file, ignoring specific tests": "cppcheck --suppress={{test_id1}} --suppress={{test_id2}} {{path/to/file.cpp}}",
            "Check a given file, specifying which tests to perform (by default only errors are shown)": "cppcheck --enable={{error|warning|style|performance|portability|information|all}} {{path/to/file.cpp}}",
            "Check the current directory, providing paths for include files located outside it (e.g. external libraries)": "cppcheck -I {{include/directory_1}} -I {{include/directory_2}} .",
            "List available tests": "cppcheck --errorlist",
            "Recursively check a given directory, and don't print progress messages": "cppcheck --quiet {{path/to/directory}}",
            "Recursively check the current directory, showing progress on the screen and logging error messages to a file": "cppcheck . 2> cppcheck.log"
        }
    },
    "common_cppclean": {
        "Category": "common",
        "Command": "cppclean",
        "P-Summary": "find unus code c++ project",
        "P-Tasks": "run project directori run project header inc1 inc2 directori run specif file main cpp run current directori exclud build directori",
        "Summary": "Find unused code in C++ projects.",
        "Task-Script": {
            "Run in a project's directory": "cppclean {{path/to/project}}",
            "Run on a project where the headers are in the \"inc1/\" and \"inc2/\" directories": "cppclean {{path/to/project}} --include-path={{inc1}} --include-path={{inc2}}",
            "Run on a specific file \"main.cpp\"": "cppclean {{main.cpp}}",
            "Run on the current directory, excluding the \"build\" directory": "cppclean {{.}} --exclude={{build}}"
        }
    },
    "common_cradle": {
        "Category": "common",
        "Command": "cradle",
        "P-Summary": "cradl php framework\nsee cradle-instal cradle-deploy page addit inform",
        "P-Tasks": "connect server display gener help display help specif command execut cradl command",
        "Summary": "The Cradle PHP framework.\nSee `cradle-install`, `cradle-deploy` and other pages for additional information.",
        "Task-Script": {
            "Connect to a server": "cradle connect {{server_name}}",
            "Display general help": "cradle help",
            "Display help for a specific command": "cradle {{command}} help",
            "Execute a Cradle command": "cradle {{command}}"
        }
    },
    "common_cradle deploy": {
        "Category": "common",
        "Command": "cradle deploy",
        "P-Summary": "manag cradl deploy",
        "P-Tasks": "deploy cradl server deploy static asset includ upload directori deploy static asset includ yarn compon directori deploy static asset amazon s3",
        "Summary": "Manage Cradle deployments.",
        "Task-Script": {
            "Deploy Cradle to a server": "cradle deploy production",
            "Deploy static assets including the \"upload\" directory": "cradle deploy s3 --include-upload",
            "Deploy static assets including the Yarn \"components\" directory": "cradle deploy s3 --include-yarn",
            "Deploy static assets to Amazon S3": "cradle deploy s3"
        }
    },
    "common_cradle elastic": {
        "Category": "common",
        "Command": "cradle elastic",
        "P-Summary": "manag elasticsearch instanc cradl instanc",
        "P-Tasks": "popul elasticsearch indic specif packag popul elasticsearch indic packag submit elasticsearch schema submit elasticsearch schema specif packag truncat elasticsearch index truncat elasticsearch index specif packag",
        "Summary": "Manage the ElasticSearch instances for a Cradle instance.",
        "Task-Script": {
            "Populate the ElasticSearch indices for a specific package": "cradle elastic populate {{package_name}}",
            "Populate the ElasticSearch indices for all packages": "cradle elastic populate",
            "Submit the ElasticSearch schema": "cradle elastic map",
            "Submit the ElasticSearch schema for a specific package": "cradle elastic map {{package_name}}",
            "Truncate the ElasticSearch index": "cradle elastic flush",
            "Truncate the ElasticSearch index for a specific package": "cradle elastic flush {{package_name}}"
        }
    },
    "common_cradle install": {
        "Category": "common",
        "Command": "cradle install",
        "P-Summary": "instal cradl php framework compon",
        "P-Tasks": "forc overwrit file instal cradl compon user prompt detail skip run sql migrat skip run packag updat use specif databas detail",
        "Summary": "Installs the Cradle PHP framework components.",
        "Task-Script": {
            "Forcefully overwrite files": "cradle install --force",
            "Install Cradle's components (User will be prompted for further details)": "cradle install",
            "Skip running SQL migrations": "cradle install --skip-sql",
            "Skip running package updates": "cradle install --skip-versioning",
            "Use specific database details": "cradle install -h {{hostname}} -u {{username}} -p {{password}}"
        }
    },
    "common_cradle package": {
        "Category": "common",
        "Command": "cradle package",
        "P-Summary": "manag packag cradl instanc",
        "P-Tasks": "display list avail packag instal packag packagist instal specif version packag remov specif packag search packag updat packag updat packag specif version",
        "Summary": "Manage packages for a Cradle instance.",
        "Task-Script": {
            "Display a list of available packages": "cradle package list",
            "Install a package from Packagist": "cradle package install {{package}}",
            "Install a specific version of a package": "cradle package install {{package}} {{version}}",
            "Remove a specific package": "cradle package remove {{package}}",
            "Search for a package": "cradle package search {{package}}",
            "Update a package": "cradle package update {{package}}",
            "Update a package to a specific version": "cradle package update {{package}} {{version}}"
        }
    },
    "common_cradle sql": {
        "Category": "common",
        "Command": "cradle sql",
        "P-Summary": "manag cradl sql databas",
        "P-Tasks": "empti databas tabl specif packag empti entir databas popul tabl specif packag popul tabl packag rebuild databas schema rebuild databas schema specif packag",
        "Summary": "Manage Cradle SQL databases.",
        "Task-Script": {
            "Empty the database tables for a specific package": "cradle sql flush {{package_name}}",
            "Empty the entire database": "cradle sql flush",
            "Populate the tables for a specific package": "cradle sql populate {{package_name}}",
            "Populate the tables for all packages": "cradle sql populate",
            "Rebuild the database schema": "cradle sql build",
            "Rebuild the database schema for a specific package": "cradle sql build {{package_name}}"
        }
    },
    "common_croc": {
        "Category": "common",
        "Command": "croc",
        "P-Summary": "send receiv file easili secur network",
        "P-Tasks": "display paramet option croc command host croc relay default port receiv file folder receiv machin receiv connect custom relay send file folder send file folder specif passphras send connect custom relay",
        "Summary": "Send and receive files easily and securely over any network.",
        "Task-Script": {
            "Display parameters and options for a croc command": "croc {{send|relay}} --help",
            "Host a croc relay on the default ports": "croc relay",
            "Receive a file or folder on receiving machine": "croc {{passphrase}}",
            "Receive and connect over a custom relay": "croc --relay {{ip_to_relay}} {{passphrase}}",
            "Send a file or folder": "croc send {{path/to/file}}",
            "Send a file or folder with a specific passphrase": "croc send --code {{passphrase}} {{path/to/file}}",
            "Send and connect over a custom relay": "croc --relay {{ip_to_relay}} send {{path/to/file}}"
        }
    },
    "common_crontab": {
        "Category": "common",
        "Command": "crontab",
        "P-Summary": "schedul cron job run time interv current user\njob definit format : min hour day_of_month month day_of_week command_to_execut",
        "P-Tasks": "edit crontab file specif user edit crontab file current user remov cron job current user sampl job run certain script 02:30 everi friday sampl job run 10:00 everi day mean valu sampl job run everi minut 3rd april view list exist cron job current user",
        "Summary": "Schedule cron jobs to run on a time interval for the current user.\nJob definition format: \"(min) (hour) (day_of_month) (month) (day_of_week) command_to_execute\".",
        "Task-Script": {
            "Edit the crontab file for a specific user": "sudo crontab -e -u {{user}}",
            "Edit the crontab file for the current user": "crontab -e",
            "Remove all cron jobs for the current user": "crontab -r",
            "Sample job which runs a certain script at 02:30 every Friday": "30 2 * * Fri {{/absolute/path/to/script.sh}}",
            "Sample job which runs at 10:00 every day (* means any value)": "0 10 * * * {{command_to_execute}}",
            "Sample job which runs every minute on the 3rd of April": "* * 3 Apr * {{command_to_execute}}",
            "View a list of existing cron jobs for current user": "crontab -l"
        }
    },
    "common_crunch": {
        "Category": "common",
        "Command": "crunch",
        "P-Summary": "wordlist gener",
        "P-Tasks": "output list permut abc length process output list permut given string length process output list hexadecim word length 8 output list word gener accord given pattern maximum number duplic letter output list word length 1 3 lowercas charact write list word chunk file given size start given string write list word compress chunk file specifi number word write list word stop given string invert wordlist",
        "Summary": "Wordlist generator.",
        "Task-Script": {
            "Output a list of all permutations of abc (lengths are not processed)": "crunch {{1}} {{1}} -p {{abc}}",
            "Output a list of all permutations of the given strings (lengths are not processed)": "crunch {{1}} {{1}} -p {{abc}} {{def}} {{ghi}}",
            "Output a list of hexadecimal words of length 8": "crunch {{8}} {{8}} {{0123456789abcdef}}",
            "Output a list of words generated according to the given pattern and a maximum number of duplicate letters": "crunch {{5}} {{5}} {{abcde123}} -t {{@@@12}} -d 2@",
            "Output a list of words of length 1 to 3 with only lowercase characters": "crunch {{1}} {{3}}",
            "Write a list of words in chunk files of a given size, starting with the given string": "crunch {{3}} {{5}} -o {{START}} -b {{10kb}} -s {{abc}}",
            "Write a list of words in compressed chunk files with a specified number of words": "crunch {{1}} {{5}} -o {{START}} -c {{1000}} -z {{gzip|bzip2|lzma|7z}}",
            "Write a list of words stopping with the given string and inverting the wordlist": "crunch {{1}} {{5}} -o {{START}} -e {{abcde}} -i"
        }
    },
    "common_cryfs": {
        "Category": "common",
        "Command": "cryfs",
        "P-Summary": "cryptograph filesystem cloud",
        "P-Tasks": "automat unmount ten minut inact mount encrypt filesystem\niniti wizard start first execut show list support cipher unmount encrypt filesystem",
        "Summary": "A cryptographic filesystem for the cloud.",
        "Task-Script": {
            "Automatically unmount after ten minutes of inactivity": "cryfs --unmount-idle {{10}} {{path/to/cipher_dir}} {{path/to/mount_point}}",
            "Mount an encrypted filesystem. The initialization wizard will be started on the first execution": "cryfs {{path/to/cipher_dir}} {{path/to/mount_point}}",
            "Show a list of supported ciphers": "cryfs --show-ciphers",
            "Unmount an encrypted filesystem": "cryfs-unmount {{path/to/mount_point}}"
        }
    },
    "common_crystal": {
        "Category": "common",
        "Command": "crystal",
        "P-Summary": "tool manag crystal sourc code",
        "P-Tasks": "compil file depend singl execut creat project directori crystal applic display help option run crystal file start local interact server test languag",
        "Summary": "Tool for managing Crystal source code.",
        "Task-Script": {
            "Compile a file and all dependencies to a single executable": "crystal build {{path/to/file.cr}}",
            "Create a project directory for a Crystal application": "crystal init app {{application_name}}",
            "Display all help options": "crystal help",
            "Run a Crystal file": "crystal {{path/to/file.cr}}",
            "Start a local interactive server for testing the language": "crystal play"
        }
    },
    "common_csc": {
        "Category": "common",
        "Command": "csc",
        "P-Summary": "microsoft c compil",
        "P-Tasks": "automat gener xml document compil dll librari instead execut compil one c file cil execut emb resourc refer anoth assembl specifi icon specifi output filenam strongly-nam result assembl keyfil",
        "Summary": "The Microsoft C# Compiler.",
        "Task-Script": {
            "Automatically generate XML documentation": "csc /doc:{{path/to/output.xml}} {{path/to/input_file.cs}}",
            "Compile into a '.dll' library instead of an executable": "csc /target:library {{path/to/input_file.cs}}",
            "Compile one or more C# files to a CIL executable": "csc {{path/to/input_file_a.cs}} {{path/to/input_file_b.cs}}",
            "Embed a resource": "csc /resource:{{path/to/resource_file}} {{path/to/input_file.cs}}",
            "Reference another assembly": "csc /reference:{{path/to/library.dll}} {{path/to/input_file.cs}}",
            "Specify an icon": "csc /win32icon:{{path/to/icon.ico}} {{path/to/input_file.cs}}",
            "Specify the output filename": "csc /out:{{path/to/filename}} {{path/to/input_file.cs}}",
            "Strongly-name the resulting assembly with a keyfile": "csc /keyfile:{{path/to/keyfile}} {{path/to/input_file.cs}}"
        }
    },
    "common_csslint": {
        "Category": "common",
        "Command": "csslint",
        "P-Summary": "linter css code",
        "P-Tasks": "lint singl css file lint multipl css file list possibl style rule specifi certain rule error result non-zero exit code specifi certain rule warn specifi certain rule complet ignor",
        "Summary": "A linter for CSS code.",
        "Task-Script": {
            "Lint a single CSS file": "csslint {{file.css}}",
            "Lint multiple CSS files": "csslint {{file1.css}} {{file2.css}} {{file3.css}}",
            "List all possible style rules": "csslint --list-rules",
            "Specify certain rules as errors (which result in a non-zero exit code)": "csslint --errors={{errors,universal-selector,imports}} {{file.css}}",
            "Specify certain rules as warnings": "csslint --warnings={{box-sizing,selector-max,floats}} {{file.css}}",
            "Specify certain rules to completely ignore": "csslint --ignore={{ids,rules-count,shorthand}} {{file.css}}"
        }
    },
    "common_csvclean": {
        "Category": "common",
        "Command": "csvclean",
        "P-Summary": "find clean common syntax error csv file\ninclud csvkit",
        "P-Tasks": "clean csv file list locat syntax error csv file",
        "Summary": "Finds and cleans common syntax errors in CSV files.\nIncluded in csvkit.",
        "Task-Script": {
            "Clean a CSV file": "csvclean {{bad.csv}}",
            "List locations of syntax errors in a CSV file": "csvclean -n {{bad.csv}}"
        }
    },
    "common_csvcut": {
        "Category": "common",
        "Command": "csvcut",
        "P-Summary": "filter truncat csv file\nlike unix cut command tabular data\ninclud csvkit",
        "P-Tasks": "extract column except fourth one extract column name id first name order extract first third column print indic name column",
        "Summary": "Filter and truncate CSV files. Like Unix's `cut` command, but for tabular data.\nIncluded in csvkit.",
        "Task-Script": {
            "Extract all columns **except** the fourth one": "csvcut -C {{4}} {{data.csv}}",
            "Extract the columns named \"id\" and \"first name\" (in that order)": "csvcut -c {{id,\"first name\"}} {{data.csv}}",
            "Extract the first and third columns": "csvcut -c {{1,3}} {{data.csv}}",
            "Print indices and names of all columns": "csvcut -n {{data.csv}}"
        }
    },
    "common_csvformat": {
        "Category": "common",
        "Command": "csvformat",
        "P-Summary": "convert csv file custom output format\ninclud csvkit",
        "P-Tasks": "convert delimit custom charact convert line end carriag return + line feed convert tab-delimit file tsv maxim use quot charact minim use quot charact",
        "Summary": "Convert a CSV file to a custom output format.\nIncluded in csvkit.",
        "Task-Script": {
            "Convert delimiters to a custom character": "csvformat -D \"{{custom_character}}\" {{data.csv}}",
            "Convert line endings to carriage return (^M) + line feed": "csvformat -M \"{{\\r\\n}}\" {{data.csv}}",
            "Convert to a tab-delimited file (TSV)": "csvformat -T {{data.csv}}",
            "Maximize use of quote characters": "csvformat -U 1 {{data.csv}}",
            "Minimize use of quote characters": "csvformat -U 0 {{data.csv}}"
        }
    },
    "common_csvgrep": {
        "Category": "common",
        "Command": "csvgrep",
        "P-Summary": "filter csv row string pattern match\ninclud csvkit",
        "P-Tasks": "find row column 3 4 match certain regex pattern find row name column includ string john doe find row certain string column 1",
        "Summary": "Filter CSV rows with string and pattern matching.\nIncluded in csvkit.",
        "Task-Script": {
            "Find rows in which columns 3 or 4 match a certain regex pattern": "csvgrep -c {{3,4}} -r {{regex_pattern}} {{data.csv}}",
            "Find rows in which the \"name\" column does NOT include the string \"John Doe\"": "csvgrep -i -c {{name}} -m \"{{John Doe}}\" {{data.csv}}",
            "Find rows that have a certain string in column 1": "csvgrep -c {{1}} -m {{string_to_match}} {{data.csv}}"
        }
    },
    "common_csvkit": {
        "Category": "common",
        "Command": "csvkit",
        "P-Summary": "manipul toolkit csv file\nsee individu command : csvclean csvcut csvformat csvgrep csvlook csvpi csvsort csvstat",
        "P-Tasks": "run command csv file custom delimit run command csv file custom quot charact run command csv file tab delimit overrid -d run command csv file header row",
        "Summary": "Manipulation toolkit for CSV files.\nSee the individual commands: `csvclean`, `csvcut`, `csvformat`, `csvgrep`, `csvlook`, `csvpy`, `csvsort`, `csvstat`.",
        "Task-Script": {
            "Run a command on a CSV file with a custom delimiter": "{{cmd}} -d {{delimiter}} {{filename.csv}}",
            "Run a command on a CSV file with a custom quote character": "{{cmd}} -q {{quote_char}} {{filename.csv}}",
            "Run a command on a CSV file with a tab as a delimiter (overrides -d)": "{{cmd}} -t {{filename.csv}}",
            "Run a command on a CSV file with no header row": "{{cmd}} -H {{filename.csv}}"
        }
    },
    "common_csvlook": {
        "Category": "common",
        "Command": "csvlook",
        "P-Summary": "render csv file consol fixed-width tabl\ninclud csvkit",
        "P-Tasks": "view csv file",
        "Summary": "Render a CSV file in the console as a fixed-width table.\nIncluded in csvkit.",
        "Task-Script": {
            "View a CSV file": "csvlook {{data.csv}}"
        }
    },
    "common_csvpy": {
        "Category": "common",
        "Command": "csvpy",
        "P-Summary": "load csv file python shell\ninclud csvkit",
        "P-Tasks": "load csv file csvkitdictread object load csv file csvkitread object",
        "Summary": "Loads a CSV file into a Python shell.\nIncluded in csvkit.",
        "Task-Script": {
            "Load a CSV file into a `CSVKitDictReader` object": "csvpy --dict {{data.csv}}",
            "Load a CSV file into a `CSVKitReader` object": "csvpy {{data.csv}}"
        }
    },
    "common_csvsort": {
        "Category": "common",
        "Command": "csvsort",
        "P-Summary": "sort csv file\ninclud csvkit",
        "P-Tasks": "sort csv file column 2 column 4 sort csv file column 9 sort csv file name column descend order sort csv file without infer data type",
        "Summary": "Sorts CSV files.\nIncluded in csvkit.",
        "Task-Script": {
            "Sort a CSV file by column 2, then by column 4": "csvsort -c {{2,4}} {{data.csv}}",
            "Sort a CSV file by column 9": "csvsort -c {{9}} {{data.csv}}",
            "Sort a CSV file by the \"name\" column in descending order": "csvsort -r -c {{name}} {{data.csv}}",
            "Sort a CSV file without inferring data types": "csvsort --no-inference -c {{columns}} {{data.csv}}"
        }
    },
    "common_csvsql": {
        "Category": "common",
        "Command": "csvsql",
        "P-Summary": "gener sql statement csv file execut statement directli databas\ninclud csvkit",
        "P-Tasks": "gener creat tabl sql statement csv file import csv file sql databas run sql queri csv file",
        "Summary": "Generate SQL statements for a CSV file or execute those statements directly on a database.\nIncluded in csvkit.",
        "Task-Script": {
            "Generate a `CREATE TABLE` SQL statement for a CSV file": "csvsql {{path/to/data.csv}}",
            "Import a CSV file into an SQL database": "csvsql --insert --db \"{{mysql://user:password@host/database}}\" {{data.csv}}",
            "Run an SQL query on a CSV file": "csvsql --query \"{{select * from 'data'}}\" {{data.csv}}"
        }
    },
    "common_csvstat": {
        "Category": "common",
        "Command": "csvstat",
        "P-Summary": "print descript statist column csv file\ninclud csvkit",
        "P-Tasks": "show stat column show stat column 2 4 show sum column show max valu length column 3 show number uniqu valu name column",
        "Summary": "Print descriptive statistics for all columns in a CSV file.\nIncluded in csvkit.",
        "Task-Script": {
            "Show all stats for all columns": "csvstat {{data.csv}}",
            "Show all stats for columns 2 and 4": "csvstat -c {{2,4}} {{data.csv}}",
            "Show sums for all columns": "csvstat --sum {{data.csv}}",
            "Show the max value length for column 3": "csvstat -c {{3}} --len {{data.csv}}",
            "Show the number of unique values in the \"name\" column": "csvstat -c {{name}} --unique {{data.csv}}"
        }
    },
    "common_csvtool": {
        "Category": "common",
        "Command": "csvtool",
        "P-Summary": "util filter extract data csv format sourc",
        "P-Tasks": "extract line csv file second column exactli match foo extract line csv file second column start bar extract second fourth column csv file extract second column csv file find line csv file second column end baz extract third sixth column",
        "Summary": "Utility to filter and extract data from CSV formatted sources.",
        "Task-Script": {
            "Extract lines from a CSV file where the second column exactly matches 'Foo'": "csvtool --column {{2}} --search '{{^Foo$}}' {{path/to/file.csv}}",
            "Extract lines from a CSV file where the second column starts with 'Bar'": "csvtool --column {{2}} --search '{{^Bar}}' {{path/to/file.csv}}",
            "Extract the second and fourth columns from a CSV file": "csvtool --column {{2,4}} {{path/to/file.csv}}",
            "Extract the second column from a CSV file": "csvtool --column {{2}} {{path/to/file.csv}}",
            "Find lines in a CSV file where the second column ends with 'Baz' and then extract the third and sixth columns": "csvtool --column {{2}} --search '{{Baz$}}' {{path/to/file.csv}} | csvtool --no-header --column {{3,6}}"
        }
    },
    "common_ctags": {
        "Category": "common",
        "Command": "ctags",
        "P-Summary": "gener index tag file languag object found sourc file mani popular program languag",
        "P-Tasks": "gener tag singl file output file name tag current directori overwrit file exist gener tag file current directori subdirectori gener tag file current directori output specif file overwrit file exist",
        "Summary": "Generates an index (or tag) file of language objects found in source files for many popular programming languages.",
        "Task-Script": {
            "Generate tags for a single file, and output them to a file named \"tags\" in the current directory, overwriting the file if it exists": "ctags {{path/to/file}}",
            "Generate tags for all files in the current directory and all subdirectories": "ctags --recurse",
            "Generate tags for all files in the current directory, and output them to a specific file, overwriting the file if it exists": "ctags -f {{filename}} *"
        }
    },
    "common_ctest": {
        "Category": "common",
        "Command": "ctest",
        "P-Summary": "cmake test driver program",
        "P-Tasks": "run singl test base name filter regular express run test defin cmake project execut 4 job time parallel show list avail test",
        "Summary": "CMake test driver program.",
        "Task-Script": {
            "Run a single test based on its name, or filter on a regular expression": "ctest --output-on-failure -R '^{{test_name}}$'",
            "Run all tests defined in the CMake project, executing 4 jobs at a time in parallel": "ctest -j{{4}} --output-on-failure",
            "Show a list of available tests": "ctest -N"
        }
    },
    "common_curl": {
        "Category": "common",
        "Command": "curl",
        "P-Summary": "transfer data server\nsupport protocol includ http ftp pop3",
        "P-Tasks": "download file follow l ocat redirect automat c ontinu resum previou file transfer download file save output filenam indic url download content url file pass user name password server authent pass client certif key resourc skip certif valid send request extra header use custom http method send data json format specifi appropri content-typ header send form-encod data post request type applic x-www-form-urlencod\nuse -d file_nam -d - read stdin",
        "Summary": "Transfers data from or to a server.\nSupports most protocols, including HTTP, FTP, and POP3.",
        "Task-Script": {
            "Download a file, following [L]ocation redirects, and automatically [C]ontinuing (resuming) a previous file transfer": "curl -O -L -C - {{http://example.com/filename}}",
            "Download a file, saving the output under the filename indicated by the URL": "curl -O {{http://example.com/filename}}",
            "Download the contents of an URL to a file": "curl {{http://example.com}} -o {{filename}}",
            "Pass a user name and password for server authentication": "curl -u myusername:mypassword {{http://example.com}}",
            "Pass client certificate and key for a resource, skipping certificate validation": "curl --cert {{client.pem}} --key {{key.pem}} --insecure {{https://example.com}}",
            "Send a request with an extra header, using a custom HTTP method": "curl -H {{'X-My-Header: 123'}} -X {{PUT}} {{http://example.com}}",
            "Send data in JSON format, specifying the appropriate content-type header": "curl -d {{'{\"name\":\"bob\"}'}} -H {{'Content-Type: application/json'}} {{http://example.com/users/1234}}",
            "Send form-encoded data (POST request of type `application/x-www-form-urlencoded`). Use `-d @file_name` or `-d @'-'` to read from STDIN": "curl -d {{'name=bob'}} {{http://example.com/form}}"
        }
    },
    "common_cut": {
        "Category": "common",
        "Command": "cut",
        "P-Summary": "cut field stdin file",
        "P-Tasks": "cut everyth 3rd charact end line cut 2nd 10th field line use semicolon delimit cut field 3 end line use space delimit cut fifth field line use colon field delimit default delimit tab cut first sixteen charact line stdin cut first sixteen charact line given file",
        "Summary": "Cut out fields from `stdin` or files.",
        "Task-Script": {
            "Cut out everything from the 3rd character to the end of each line": "cut -c {{3-}}",
            "Cut out the 2nd and 10th fields of each line, using a semicolon as a delimiter": "cut -d'{{;}}' -f{{2,10}}",
            "Cut out the fields 3 through to the end of each line, using a space as a delimiter": "cut -d'{{ }}' -f{{3-}}",
            "Cut out the fifth field of each line, using a colon as a field delimiter (default delimiter is tab)": "cut -d'{{:}}' -f{{5}}",
            "Cut out the first sixteen characters of each line of `stdin`": "cut -c {{1-16}}",
            "Cut out the first sixteen characters of each line of the given files": "cut -c {{1-16}} {{file}}"
        }
    },
    "common_darkhttpd": {
        "Category": "common",
        "Command": "darkhttpd",
        "P-Summary": "darkhttpd web server",
        "P-Tasks": "listen specifi ip address default server listen interfac start server specifi port port 8080 default run non-root user start server serv specifi document root",
        "Summary": "Darkhttpd web server.",
        "Task-Script": {
            "Listen only on specified IP address (by default, the server listens on all interfaces)": "darkhttpd {{path/to/docroot}} --addr {{ip_address}}",
            "Start server on specified port (port 8080 by default if running as non-root user)": "darkhttpd {{path/to/docroot}} --port {{port}}",
            "Start server serving the specified document root": "darkhttpd {{path/to/docroot}}"
        }
    },
    "common_date": {
        "Category": "common",
        "Command": "date",
        "P-Summary": "set display system date",
        "P-Tasks": "convert specif date unix timestamp format display specif date repres unix timestamp use default format display current date unix timestamp second sinc unix epoch display current date utc iso 8601 format display current date use rfc-3339 format yyyy-mm-dd hh : mm : ss tz display current date use default local format",
        "Summary": "Set or display the system date.",
        "Task-Script": {
            "Convert a specific date to the Unix timestamp format": "date -d \"{{2018-09-01 00:00}}\" +%s --utc",
            "Display a specific date (represented as a Unix timestamp) using the default format": "date -d @1473305798",
            "Display the current date as a Unix timestamp (seconds since the Unix epoch)": "date +%s",
            "Display the current date in UTC and ISO 8601 format": "date -u +\"%Y-%m-%dT%H:%M:%S%Z\"",
            "Display the current date using the RFC-3339 format (`YYYY-MM-DD hh:mm:ss TZ`)": "date --rfc-3339=s",
            "Display the current date using the default locale's format": "date +\"%c\""
        }
    },
    "common_dc": {
        "Category": "common",
        "Command": "dc",
        "P-Summary": "arbitrari precis calcul\nuse revers polish notat rpn",
        "P-Tasks": "calcul 4 time 5 4 5 subtract 17 17 - p rint output use echo calcul golden ratio phi : set number decim place 100 100 k squar root 5 5 v plu 1 1 + divid 2 2 p rint result execut dc script file run calcul interact mode set number decim place 7 7 k calcul 5 divid -3 5 _3 p rint use dc -e",
        "Summary": "An arbitrary precision calculator. Uses reverse polish notation (RPN).",
        "Task-Script": {
            "Calculate 4 times 5 [4 5 *], subtract 17 [17 -], and [p]rint the output (using echo)": "echo \"4 5 * 17 - p\"| dc",
            "Calculate the golden ratio, phi: Set number of decimal places to 100 [100 k], square root of 5 [5 v] plus 1 [1 +], divided by 2 [2 /], and [p]rint result": "dc -e \"100 k 5 v 1 + 2 / p\"",
            "Execute dc script in file": "dc -f {{file}}",
            "Run calculator in interactive mode": "dc",
            "Set number of decimal places to 7 [7 k], calculate 5 divided by -3 [5 _3 /] and [p]rint (using dc -e)": "dc -e \"7 k 5 _3 / p\""
        }
    },
    "common_dcfldd": {
        "Category": "common",
        "Command": "dcfldd",
        "P-Summary": "enhanc version dd forens secur",
        "P-Tasks": "copi disk raw imag file hash imag use sha256 copi disk raw imag file hash 1gb chunk",
        "Summary": "Enhanced version of dd for forensics and security.",
        "Task-Script": {
            "Copy a disk to a raw image file and hash the image using SHA256": "dcfldd if=/dev/{{disk_device}} of={{file.img}} hash=sha256 hashlog={{file.hash}}",
            "Copy a disk to a raw image file, hashing each 1GB chunk": "dcfldd if=/dev/{{disk_device}} of={{file.img}} hash={{sha512|sha384|sha256|sha1|md5}} hashlog={{file.hash}} hashwindow={{1G}}"
        }
    },
    "common_dcg": {
        "Category": "common",
        "Command": "dcg",
        "P-Summary": "drupal code gener",
        "P-Tasks": "directli specifi kind code gener gener code specif directori start wizard choos kind code e g\nmodul servic form etc\ngener",
        "Summary": "Drupal code generator.",
        "Task-Script": {
            "Directly specify the kind of code to generate": "dcg {{service|plugin|theme|module|form}}",
            "Generate the code in a specific directory": "dcg --directory {{path/to/directory}}",
            "Start a wizard to choose what kind of code (e.g. module, service, form, etc.) to generate": "dcg"
        }
    },
    "common_dd": {
        "Category": "common",
        "Command": "dd",
        "P-Summary": "convert copi file",
        "P-Tasks": "benchmark write perform disk check progress ongo dd oper run command anoth shell clone drive anoth drive 4mb block ignor error show progress gener file 100 random byte use kernel random driver make bootabl usb drive isohybrid file like archlinux-xxx iso show progress",
        "Summary": "Convert and copy a file.",
        "Task-Script": {
            "Benchmark the write performance of a disk": "dd if=/dev/zero of={{file_1GB}} bs=1024 count=1000000",
            "Check progress of an ongoing dd operation (Run this command from another shell)": "kill -USR1 $(pgrep ^dd)",
            "Clone a drive to another drive with 4MB block, ignore error and show progress": "dd if=/dev/{{source_drive}} of=/dev/{{dest_drive}} bs=4M conv=noerror status=progress",
            "Generate a file of 100 random bytes by using kernel random driver": "dd if=/dev/urandom of={{random_file}} bs=100 count=1",
            "Make a bootable usb drive from an isohybrid file (such like archlinux-xxx.iso) and show the progress": "dd if={{file.iso}} of=/dev/{{usb_drive}} status=progress"
        }
    },
    "common_decaffeinate": {
        "Category": "common",
        "Command": "decaffeinate",
        "P-Summary": "move coffeescript sourc modern javascript",
        "P-Tasks": "convert coffeescript file javascript convert coffeescript v2 file javascript convert coffeescript allow name export convert requir modul export import export",
        "Summary": "Move your CoffeeScript source to modern JavaScript.",
        "Task-Script": {
            "Convert a CoffeeScript file to JavaScript": "decaffeinate {{path/to/file.coffee}}",
            "Convert a CoffeeScript v2 file to JavaScript": "decaffeinate --use-cs2 {{path/to/file.coffee}}",
            "Convert a CoffeeScript, allowing named exports": "decaffeinate --loose-js-modules {{path/to/file.coffee}}",
            "Convert require and module.exports to import and export": "decaffeinate --use-js-modules {{path/to/file.coffee}}"
        }
    },
    "common_deemix": {
        "Category": "common",
        "Command": "deemix",
        "P-Summary": "barebon deezer download librari built ash deezload remix\nuse standalon cli app implement ui use api\ninform : http : deemix app",
        "P-Tasks": "creat portabl deemix config current directori download track playlist download specif path download track playlist specif bitrat",
        "Summary": "A barebone deezer downloader library built from the ashes of Deezloader Remix.\nIt can be used as a standalone CLI app or implemented in an UI using the API.\nMore Information: <https://deemix.app>.",
        "Task-Script": {
            "Create a portable deemix config in the current directory": "deemix --portable --bitrate {{bitrate}} --path {{path}} {{url}}",
            "Download a track or playlist": "deemix {{https://www.deezer.com/us/track/00000000}}",
            "Download to a specific path": "deemix --bitrate {{bitrate}} --path {{path}} {{url}}",
            "Download track / playlist at a specific bitrate": "deemix --bitrate {{FLAC|MP3}} {{url}}"
        }
    },
    "common_delta": {
        "Category": "common",
        "Command": "delta",
        "P-Summary": "viewer git diff output",
        "P-Tasks": "compar file directori compar file directori ignor git configur set compar file directori show differ side side compar file directori show line number compar render commit hash file name line number hyperlink accord hyperlink spec termin emul display support languag associ file extens display current set",
        "Summary": "A viewer for git and diff output.",
        "Task-Script": {
            "Compare files or directories": "delta {{path/to/old_file_or_directory}} {{path/to/new_file_or_directory}}",
            "Compare files or directories, ignoring any git configuration settings": "delta --no-gitconfig {{path/to/old_file_or_directory}} {{path/to/new_file_or_directory}}",
            "Compare files or directories, showing the differences side by side": "delta --side-by-side {{path/to/old_file_or_directory}} {{path/to/new_file_or_directory}}",
            "Compare files or directories, showing the line numbers": "delta --line-numbers {{path/to/old_file_or_directory}} {{path/to/new_file_or_directory}}",
            "Compare, rendering commit hashes, file names, and line numbers as hyperlinks, according to the hyperlink spec for terminal emulators": "delta --hyperlinks {{path/to/old_file_or_directory}} {{path/to/new_file_or_directory}}",
            "Display supported languages and associated file extensions": "delta --list-languages",
            "Display the current settings": "delta --show-config"
        }
    },
    "common_deluge": {
        "Category": "common",
        "Command": "deluge",
        "P-Summary": "command line bittorr client",
        "P-Tasks": "download torrent download torrent launch specifi user interfac download torrent output log file download torrent use specif configur file",
        "Summary": "A command line BitTorrent client.",
        "Task-Script": {
            "Download a torrent": "deluge {{url|magnet|path/to/file}}",
            "Download a torrent and launch the specified user interface": "deluge -u {{gtk|web|console}} {{url|magnet|path/to/file}}",
            "Download a torrent and output the log to a file": "deluge -l {{path/to/log_file}} {{url|magnet|path/to/file}}",
            "Download a torrent using a specific configuration file": "deluge -c {{path/to/configuration_file}} {{url|magnet|path/to/file}}"
        }
    },
    "common_deluge-console": {
        "Category": "common",
        "Command": "deluge-console",
        "P-Summary": "interact interfac delug bittorr client",
        "P-Tasks": "add torrent daemon connect delug daemon instanc display inform specif torrent display inform torrent paus torrent remov torrent daemon resum torrent start interact consol interfac",
        "Summary": "An interactive interface for the Deluge BitTorrent client.",
        "Task-Script": {
            "Add a torrent to the daemon": "add {{url|magnet|path/to/file}}",
            "Connect to a Deluge daemon instance": "connect {{hostname}}:{{port}}",
            "Display information about a specific torrent": "info {{torrent_id}}",
            "Display information about all torrents": "info",
            "Pause a torrent": "pause {{torrent_id}}",
            "Remove a torrent from the daemon": "rm {{torrent_id}}",
            "Resume a torrent": "resume {{torrent_id}}",
            "Start the interactive console interface": "deluge-console"
        }
    },
    "common_deluged": {
        "Category": "common",
        "Command": "deluged",
        "P-Summary": "daemon process delug bittorr client",
        "P-Tasks": "start delug daemon start delug daemon output log file start delug daemon specif port start delug daemon use specif configur file",
        "Summary": "A daemon process for the Deluge BitTorrent client.",
        "Task-Script": {
            "Start the Deluge daemon": "deluged",
            "Start the Deluge daemon and output the log to a file": "deluged -l {{path/to/log_file}}",
            "Start the Deluge daemon on a specific port": "deluged -p {{port}}",
            "Start the Deluge daemon using a specific configuration file": "deluged -c {{path/to/configuration_file}}"
        }
    },
    "common_deluser": {
        "Category": "common",
        "Command": "deluser",
        "P-Summary": "remov user account remov user group",
        "P-Tasks": "remov user remov user along home directori mail spool remov user group",
        "Summary": "Remove a user account or remove a user from a group.",
        "Task-Script": {
            "Remove a user": "deluser {{name}}",
            "Remove a user along with their home directory and mail spool": "deluser -r {{name}}",
            "Remove a user from a group": "deluser {{name}} {{group}}"
        }
    },
    "common_deno": {
        "Category": "common",
        "Command": "deno",
        "P-Summary": "secur runtim javascript typescript",
        "P-Tasks": "instal execut script url run javascript typescript file run file url run file network access enabl start repl interact shell",
        "Summary": "A secure runtime for JavaScript and TypeScript.",
        "Task-Script": {
            "Install an executable script from a URL": "deno install --allow-net --allow-read {{file_server}} {{https://deno.land/std/http/file_server.ts}}",
            "Run a JavaScript or TypeScript file": "deno {{path/to/file.ts}}",
            "Run a file from a URL": "deno {{https://deno.land/std/examples/welcome.ts}}",
            "Run a file with network access enabled": "deno --allow-net {{path/to/file.ts}}",
            "Start a REPL (interactive shell)": "deno"
        }
    },
    "common_dep": {
        "Category": "common",
        "Command": "dep",
        "P-Summary": "cli tool deploy php applic\nnote : go command dep name deprec archiv",
        "P-Tasks": "connect remot host via ssh deploy applic remot host display help command interact initi deploy local path use framework templat -- templat templat list command rollback previou work releas run arbitrari command remot host",
        "Summary": "A CLI tool for deployment of PHP applications.\nNote: The Go command `dep` with the same name is deprecated and archived.",
        "Task-Script": {
            "Connect to a remote host via ssh": "dep ssh {{hostname}}",
            "Deploy an application to a remote host": "dep deploy {{hostname}}",
            "Display help for a command": "dep help {{command}}",
            "Interactively initialize deployer in the local path (use a framework template with `--template={{template}}`)": "dep init",
            "List commands": "dep list",
            "Rollback to the previous working release": "dep rollback",
            "Run any arbitrary command on the remote hosts": "dep run \"{{command}}\""
        }
    },
    "common_detox": {
        "Category": "common",
        "Command": "detox",
        "P-Summary": "renam file make easier work\nremov space annoy like duplic underlin charact",
        "P-Tasks": "remov space undesir charact file name remov space undesir charact file directori tree show detox would renam file directori tree",
        "Summary": "Renames files to make them easier to work with.\nIt removes spaces and other such annoyances like duplicate underline characters.",
        "Task-Script": {
            "Remove spaces and other undesirable characters from a file's name": "detox {{file}}",
            "Remove spaces and other undesirable characters from all files in a directory tree": "detox -r {{directory}}",
            "Show how detox would rename all of the files in a directory tree": "detox --dry-run -r {{directory}}"
        }
    },
    "common_dexdump": {
        "Category": "common",
        "Command": "dexdump",
        "P-Summary": "display inform android dex file",
        "P-Tasks": "display header inform dex file contain apk file display dis-assembl output execut section extract class method apk file output result file",
        "Summary": "Display information about Android DEX files.",
        "Task-Script": {
            "Display header information of DEX files contained in an APK file": "dexdump -f {{path/to/file.apk}}",
            "Display the dis-assembled output of executable sections": "dexdump -d {{path/to/file.apk}}",
            "Extract classes and methods from an APK file": "dexdump {{path/to/file.apk}}",
            "Output results to a file": "dexdump -o {{path/to/file}} {{path/to/file.apk}}"
        }
    },
    "common_dexter": {
        "Category": "common",
        "Command": "dexter",
        "P-Summary": "tool authent kubectl user openid connect",
        "P-Tasks": "creat authent user googl oidc overrid default kube config locat",
        "Summary": "Tool for authenticating the kubectl users with OpenId Connect.",
        "Task-Script": {
            "Create and authenticate a user with Google OIDC": "dexter auth -i {{client-id}} -s {{client-secret}}",
            "Override the default kube config location": "dexter auth -i {{client-id}} -s {{client-secret}} --kube-config {{sample/config}}"
        }
    },
    "common_df": {
        "Category": "common",
        "Command": "df",
        "P-Summary": "give overview filesystem disk space usag",
        "P-Tasks": "display filesystem disk usag display filesystem disk usag human readabl form display filesystem exclud specifi type display statist number free inod display filesystem disk usag contain given file directori",
        "Summary": "Gives an overview of the filesystem disk space usage.",
        "Task-Script": {
            "Display all filesystems and their disk usage": "df",
            "Display all filesystems and their disk usage in human readable form": "df -h",
            "Display filesystems but exclude the specified type": "df -x {{squashfs}} -x {{tmpfs}}",
            "Display statistics on the number of free inodes": "df -i",
            "Display the filesystem and its disk usage containing the given file or directory": "df {{path/to/file_or_directory}}"
        }
    },
    "common_dfc": {
        "Category": "common",
        "Command": "dfc",
        "P-Summary": "give overview filesystem disk space usag colour graph",
        "P-Tasks": "display filesystem includ pseudo duplic inaccess filesystem display filesystem disk usag human readabl form colour graph display filesystem contain ext filesystem type display filesystem without colour",
        "Summary": "Gives an overview of the filesystem disk space usage with colours and graphs.",
        "Task-Script": {
            "Display all filesystems including pseudo, duplicate and inaccessible filesystems": "dfc -a",
            "Display filesystems and their disk usage in human readable form with colours and graphs": "dfc",
            "Display filesystems containing \"ext\" in the filesystem type": "dfc -t ext",
            "Display filesystems without colour": "dfc -c never"
        }
    },
    "common_dhclient": {
        "Category": "common",
        "Command": "dhclient",
        "P-Summary": "dhcp client",
        "P-Tasks": "get ip address eth0 interfac releas ip address eth0 interfac",
        "Summary": "DHCP client.",
        "Task-Script": {
            "Get an IP address for the `eth0` interface": "sudo dhclient {{eth0}}",
            "Release an IP address for the `eth0` interface": "sudo dhclient -r {{eth0}}"
        }
    },
    "common_dhcpwn": {
        "Category": "common",
        "Command": "dhcpwn",
        "P-Summary": "test dhcp ip exhaust attack sniff local dhcp traffic",
        "P-Tasks": "flood network ip request sniff local dhcp traffic",
        "Summary": "Test DHCP IP exhaustion attacks and sniff local DHCP traffic.",
        "Task-Script": {
            "Flood the network with IP requests": "dhcpwn --interface {{network_interface}} flood --count {{number_of_requests}}",
            "Sniff local DHCP traffic": "dhcpwn --interface {{network_interface}} sniff"
        }
    },
    "common_diff": {
        "Category": "common",
        "Command": "diff",
        "P-Summary": "compar file directori",
        "P-Tasks": "compar directori recurs show name differ file directori well chang made file compar directori show name file differ compar file list chang turn old_fil new_fil compar file ignor white space compar file show differ unifi format use git diff compar file show differ side side",
        "Summary": "Compare files and directories.",
        "Task-Script": {
            "Compare directories recursively (shows names for differing files/directories as well as changes made to files)": "diff -r {{old_directory}} {{new_directory}}",
            "Compare directories, only showing the names of files that differ": "diff -rq {{old_directory}} {{new_directory}}",
            "Compare files (lists changes to turn `old_file` into `new_file`)": "diff {{old_file}} {{new_file}}",
            "Compare files, ignoring white spaces": "diff -w {{old_file}} {{new_file}}",
            "Compare files, showing the differences in unified format (as used by `git diff`)": "diff -u {{old_file}} {{new_file}}",
            "Compare files, showing the differences side by side": "diff -y {{old_file}} {{new_file}}"
        }
    },
    "common_diffoscope": {
        "Category": "common",
        "Command": "diffoscope",
        "P-Summary": "compar file archiv directori",
        "P-Tasks": "compar two directori control whether directori metadata consid compar two directori exclud file name match specifi pattern compar two file compar two file write html-report file use - stdout compar two file without display progress bar",
        "Summary": "Compare files, archives, and directories.",
        "Task-Script": {
            "Compare two directories and control whether directory metadata is considered": "diffoscope --exclude-directory-metadata {{auto|yes|no|recursive}} {{path/to/directory1}} {{path/to/directory2}}",
            "Compare two directories excluding files with a name matching a specified pattern": "diffoscope --exclude {{pattern}} {{path/to/directory1}} {{path/to/directory2}}",
            "Compare two files": "diffoscope {{path/to/file1}} {{path/to/file2}}",
            "Compare two files and write a HTML-report to a file (use `-` for `stdout`)": "diffoscope --html {{path/to/outfile|-}} {{path/to/file1}} {{path/to/file2}}",
            "Compare two files without displaying a progress bar": "diffoscope --no-progress {{path/to/file1}} {{path/to/file2}}"
        }
    },
    "common_diffstat": {
        "Category": "common",
        "Command": "diffstat",
        "P-Summary": "creat histogram output diff command",
        "P-Tasks": "display chang histogram display insert delet modifi chang tabl",
        "Summary": "Create a histogram from the output of the `diff` command.",
        "Task-Script": {
            "Display changes in a histogram": "diff {{file1}} {{file2}} | diffstat",
            "Display inserted, deleted and modified changes as a table": "diff {{file1}} {{file2}} | diffstat -t"
        }
    },
    "common_dig": {
        "Category": "common",
        "Command": "dig",
        "P-Summary": "dn lookup util",
        "P-Tasks": "find authorit name server zone display soa record get type record given domain name lookup ip associ hostnam record lookup mail server associ given domain name mx record perform revers dn lookup ip address ptr record perform iter queri display entir trace path resolv domain name specifi altern dn server queri",
        "Summary": "DNS Lookup utility.",
        "Task-Script": {
            "Find authoritative name servers for the zone and display SOA records": "dig +nssearch {{example.com}}",
            "Get all types of records for a given domain name": "dig {{example.com}} ANY",
            "Lookup the IP(s) associated with a hostname (A records)": "dig +short {{example.com}}",
            "Lookup the mail server(s) associated with a given domain name (MX record)": "dig +short {{example.com}} MX",
            "Perform a reverse DNS lookup on an IP address (PTR record)": "dig -x {{8.8.8.8}}",
            "Perform iterative queries and display the entire trace path to resolve a domain name": "dig +trace {{example.com}}",
            "Specify an alternate DNS server to query": "dig @{{8.8.8.8}} {{example.com}}"
        }
    },
    "common_dircolors": {
        "Category": "common",
        "Command": "dircolors",
        "P-Summary": "output command set ls_color environ variabl style ls dir etc",
        "P-Tasks": "output command bourn shell output command c shell output command set ls_color use color file output command set ls_color use default color view default color file type extens",
        "Summary": "Output commands to set the LS_COLOR environment variable and style `ls`, `dir`, etc.",
        "Task-Script": {
            "Output commands for Bourne shell": "dircolors --bourne-shell",
            "Output commands for C shell": "dircolors --c-shell",
            "Output commands to set LS_COLOR using colors from a file": "dircolors {{file}}",
            "Output commands to set LS_COLOR using default colors": "dircolors",
            "View the default colors for file types and extensions": "dircolors --print-data"
        }
    },
    "common_direnv": {
        "Category": "common",
        "Command": "direnv",
        "P-Summary": "shell extens load unload environ variabl depend current directori",
        "P-Tasks": "edit envrc file default text editor reload environ exit grant direnv permiss load specifi envrc print debug statu inform revok author given envrc trigger reload environ",
        "Summary": "Shell extension to load and unload environment variables depending on the current directory.",
        "Task-Script": {
            "Edit the `.envrc` file in the default text editor and reload the environment on exit": "direnv allow",
            "Grant direnv permission to load the specified .envrc": "direnv allow",
            "Print some debug status information": "direnv status",
            "Revoke the authorization of a given .envrc": "direnv deny",
            "Trigger a reload of the environment": "direnv reload"
        }
    },
    "common_dirname": {
        "Category": "common",
        "Command": "dirname",
        "P-Summary": "calcul parent directori given file directori path",
        "P-Tasks": "calcul parent directori given path calcul parent directori multipl path delimit output nul charact instead newlin use combin xarg",
        "Summary": "Calculates the parent directory of a given file or directory path.",
        "Task-Script": {
            "Calculate the parent directory of a given path": "dirname {{path/to/file_or_directory}}",
            "Calculate the parent directory of multiple paths": "dirname {{path/to/file_a}} {{path/to/directory_b}}",
            "Delimit output with a NUL character instead of a newline (useful when combining with `xargs`)": "dirname --zero {{path/to/directory_a}} {{path/to/file_b}}"
        }
    },
    "common_dirs": {
        "Category": "common",
        "Command": "dirs",
        "P-Summary": "display manipul directori stack\ndirectori stack list recent visit directori manipul pushd popd command",
        "P-Tasks": "clear directori stack display nth entri directori stack start 0 display directori stack space entri display directori stack one entri per line",
        "Summary": "Displays or manipulates the directory stack.\nThe directory stack is a list of recently visited directories that can be manipulated with the `pushd` and `popd` commands.",
        "Task-Script": {
            "Clear the directory stack": "dirs -c",
            "Display only the nth entry in the directory stack, starting at 0": "dirs +{{N}}",
            "Display the directory stack with a space between each entry": "dirs",
            "Display the directory stack with one entry per line": "dirs -p"
        }
    },
    "common_dirsearch": {
        "Category": "common",
        "Command": "dirsearch",
        "P-Summary": "web path scanner",
        "P-Tasks": "scan list web server common path php extens scan web server common path common extens scan web server user-defin path common extens scan web server use cooki scan web server use head http method scan web server save result json file",
        "Summary": "Web path scanner.",
        "Task-Script": {
            "Scan a list of web servers for common paths with the `.php` extension": "dirsearch --url-list {{path/to/url-list.txt}} --extensions {{php}}",
            "Scan a web server for common paths with common extensions": "dirsearch --url {{url}} --extensions-list",
            "Scan a web server for user-defined paths with common extensions": "dirsearch --url {{url}} --extensions-list --wordlist {{path/to/url-paths.txt}}",
            "Scan a web server using a cookie": "dirsearch --url {{url}} --extensions {{php}} --cookie {{cookie}}",
            "Scan a web server using the `HEAD` HTTP method": "dirsearch --url {{url}} --extensions {{php}} --http-method {{HEAD}}",
            "Scan a web server, saving the results to a `.json` file": "dirsearch --url {{url}} --extensions {{php}} --json-report {{path/to/report.json}}"
        }
    },
    "common_dive": {
        "Category": "common",
        "Command": "dive",
        "P-Summary": "tool explor docker imag layer content discov way shrink",
        "P-Tasks": "analyz docker imag build imag start analyz",
        "Summary": "A tool for exploring a Docker image, layer contents, and discovering ways to shrink it.",
        "Task-Script": {
            "Analyze a Docker image": "dive {{your_image_tag}}",
            "Build an image and start analyzing it": "dive build -t {{some_tag}}"
        }
    },
    "common_django-admin": {
        "Category": "common",
        "Command": "django-admin",
        "P-Summary": "django util administr task",
        "P-Tasks": "check current version django creat new app current project creat new django project display inform given command",
        "Summary": "Django’s utility for administrative tasks.",
        "Task-Script": {
            "Check the current version of Django": "django-admin --version",
            "Create a new app for the current project": "django-admin startapp {{app_name}}",
            "Create a new django project": "django-admin startproject {{project_name}}",
            "Display more information for the given command": "django-admin help {{command}}"
        }
    },
    "common_doas": {
        "Category": "common",
        "Command": "doas",
        "P-Summary": "execut command anoth user",
        "P-Tasks": "launch default shell root make doa request password even suppli earlier pars config file check execut command anoth user allow run command anoth user run command root",
        "Summary": "Executes a command as another user.",
        "Task-Script": {
            "Launch the default shell as root": "doas -s",
            "Make `doas` request a password even after it was supplied earlier": "doas -L",
            "Parse a config file and check if the execution of a command as another user is allowed": "doas -C {{config_file}} {{command}}",
            "Run a command as another user": "doas -u {{user}} {{command}}",
            "Run a command as root": "doas {{command}}"
        }
    },
    "common_docker": {
        "Category": "common",
        "Command": "docker",
        "P-Summary": "manag docker contain imag",
        "P-Tasks": "fetch follow log contain list docker contain run stop list current run docker contain open shell insid alreadi run contain pull imag docker registri remov stop contain start contain imag custom name start stop exist contain",
        "Summary": "Manage Docker containers and images.",
        "Task-Script": {
            "Fetch and follow the logs of a container": "docker logs -f {{container_name}}",
            "List all docker containers (running and stopped)": "docker ps -a",
            "List currently running docker containers": "docker ps",
            "Open a shell inside of an already running container": "docker exec -it {{container_name}} {{sh}}",
            "Pull an image from a docker registry": "docker pull {{image}}",
            "Remove a stopped container": "docker rm {{container_name}}",
            "Start a container from an image, with a custom name": "docker run --name {{container_name}} {{image}}",
            "Start or stop an existing container": "docker {{start|stop}} {{container_name}}"
        }
    },
    "common_docker build": {
        "Category": "common",
        "Command": "docker build",
        "P-Summary": "build imag dockerfil",
        "P-Tasks": "build docker imag tag build docker imag dockerfil specifi url build docker imag use specif dockerfil build docker imag use dockerfil current directori build custom build-tim variabl use cach build imag",
        "Summary": "Build an image from a Dockerfile.",
        "Task-Script": {
            "Build a docker image and tag it": "docker build --tag {{name:tag}} .",
            "Build a docker image from a Dockerfile at a specified URL": "docker build {{github.com/creack/docker-firefox}}",
            "Build a docker image using a specific Dockerfile": "docker build --file {{Dockerfile}} .",
            "Build a docker image using the Dockerfile in the current directory": "docker build .",
            "Build with custom build-time variables": "docker build --build-arg {{HTTP_PROXY=http://10.20.30.2:1234}} --build-arg {{FTP_PROXY=http://40.50.60.5:4567}} .",
            "Do not use the cache when building the image": "docker build --no-cache --tag {{name:tag}} ."
        }
    },
    "common_docker container": {
        "Category": "common",
        "Command": "docker container",
        "P-Summary": "manag docker contain",
        "P-Tasks": "creat new imag contain chang display detail inform one contain export contain filesystem tar archiv kill one run contain list current run docker contain paus process within one contain start one stop contain stop one run contain",
        "Summary": "Manage Docker containers.",
        "Task-Script": {
            "Create a new image from a container's changes": "docker container commit {{container_name}}",
            "Display detailed information on one or more containers": "docker container inspect {{container_name}}",
            "Export a container's filesystem as a tar archive": "docker container export {{container_name}}",
            "Kill one or more running containers": "docker container kill {{container_name}}",
            "List currently running Docker containers": "docker container ls",
            "Pause all processes within one or more containers": "docker container pause {{container_name}}",
            "Start one or more stopped containers": "docker container start {{container1_name}} {{container2_name}}",
            "Stop one or more running containers": "docker container stop {{container_name}}"
        }
    },
    "common_docker exec": {
        "Category": "common",
        "Command": "docker exec",
        "P-Summary": "execut command alreadi run docker contain",
        "P-Tasks": "enter interact shell session already-run contain run command background exist contain keep stdin open run command background detach run contain select work directori given command execut set environ variabl run bash session",
        "Summary": "Execute a command on an already running Docker container.",
        "Task-Script": {
            "Enter an interactive shell session on an already-running container": "docker exec -it {{container_name}} {{/bin/bash}}",
            "Run a command in background on existing container but keep `stdin` open": "docker exec -i -d {{container_name}} {{command}}",
            "Run a command in the background (detached) on a running container": "docker exec -d {{container_name}} {{command}}",
            "Select the working directory for a given command to execute into": "docker exec -it -w {{path/to/directory}} {{container_name}} {{command}}",
            "Set an environment variable in a running bash session": "docker exec -it -e {{variable_name}}={{value}} {{container_name}} {{/bin/bash}}"
        }
    },
    "common_docker images": {
        "Category": "common",
        "Command": "docker images",
        "P-Summary": "manag docker imag",
        "P-Tasks": "list docker imag list docker imag includ intermedi list docker imag use contain list output quiet mode numer id",
        "Summary": "Manage Docker images.",
        "Task-Script": {
            "List all Docker images": "docker images",
            "List all Docker images including intermediates": "docker images -a",
            "List all Docker images not used by any container": "docker images --filter dangling=true",
            "List the output in quiet mode (only numeric IDs)": "docker images -q"
        }
    },
    "common_docker inspect": {
        "Category": "common",
        "Command": "docker inspect",
        "P-Summary": "return low-level inform docker object",
        "P-Tasks": "display contain ip address display port bind display inform contain imag volum use name id display configur inform json display imag name contain display path contain log file show help",
        "Summary": "Return low-level information on Docker objects.",
        "Task-Script": {
            "Display a container's IP address": "docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' {{container}}",
            "Display all port bindings": "docker inspect --format='{{range $p, $conf := .NetworkSettings.Ports}} {{$p}} -> {{(index $conf 0).HostPort}} {{end}}' {{container}}",
            "Display information about a container, image, or volume using a name or ID": "docker inspect {{container|image|ID}}",
            "Display the configuration information as JSON": "docker inspect --format='{{json .Config}}' {{container}}",
            "Display the image name of the container": "docker inspect --format='{{.Config.Image}}' {{container}}",
            "Display the path to the container's log file": "docker inspect --format='{{.LogPath}}' {{container}}",
            "Show help": "docker inspect"
        }
    },
    "common_docker logs": {
        "Category": "common",
        "Command": "docker logs",
        "P-Summary": "print contain log",
        "P-Tasks": "print last 5 line print log append timestamp print log follow print log certain point time contain execut e\n23m 10 2013-01-02t13:23:37 print log contain",
        "Summary": "Print container logs.",
        "Task-Script": {
            "Print last 5 lines": "docker logs {{container_name}} --tail {{5}}",
            "Print logs and append them with timestamps": "docker logs -t {{container_name}}",
            "Print logs and follow them": "docker logs -f {{container_name}}",
            "Print logs from a certain point in time of container execution (i.e. 23m, 10s, 2013-01-02T13:23:37)": "docker logs {{container_name}} --until {{time}}",
            "Print logs from a container": "docker logs {{container_name}}"
        }
    },
    "common_docker network": {
        "Category": "common",
        "Command": "docker network",
        "P-Summary": "creat manag docker network",
        "P-Tasks": "connect contain network use name id creat user defin network disconnect contain network display detail inform space-separ list network list avail configur network docker daemon remov space-separ list unus network remov unus referenc contain network",
        "Summary": "Create and manage docker networks.",
        "Task-Script": {
            "Connect a container to a network using a name or ID": "docker network connect {{network_name}} {{container_name|ID}}",
            "Create a user defined network": "docker network create --driver {{driver_name}} {{network_name}}",
            "Disconnect a container from a network": "docker network disconnect {{network_name}} {{container_name|ID}}",
            "Display detailed information of a space-separated list of networks": "docker network inspect {{network_name}}",
            "List all available and configured networks on docker daemon": "docker network ls",
            "Remove a space-separated list of unused networks": "docker network rm {{network_name}}",
            "Remove all unused (not referenced by any container) networks": "docker network prune"
        }
    },
    "common_docker ps": {
        "Category": "common",
        "Command": "docker ps",
        "P-Summary": "list docker contain",
        "P-Tasks": "filter contain exit statu code filter contain statu creat run remov paus exit dead filter contain contain substr name filter contain mount specif volum volum mount specif path filter contain share given imag ancestor list docker contain run stop list current run docker contain show latest creat contain includ state",
        "Summary": "List Docker containers.",
        "Task-Script": {
            "Filter containers by exit status code": "docker ps --all --filter=\"exited={{code}}\"",
            "Filter containers by status (created, running, removing, paused, exited and dead)": "docker ps --filter=\"status={{status}}\"",
            "Filter containers that contain a substring in their name": "docker ps --filter=\"name={{name}}\"",
            "Filter containers that mount a specific volume or have a volume mounted in a specific path": "docker ps --filter=\"volume={{path/to/directory}}\" --format \"table {{.ID}}\\t{{.Image}}\\t{{.Names}}\\t{{.Mounts}}\"",
            "Filter containers that share a given image as an ancestor": "docker ps --filter \"ancestor={{image}}:{{tag}}\"",
            "List all docker containers (running and stopped)": "docker ps --all",
            "List currently running docker containers": "docker ps",
            "Show the latest created container (includes all states)": "docker ps --latest"
        }
    },
    "common_docker rmi": {
        "Category": "common",
        "Command": "docker rmi",
        "P-Summary": "remov one docker imag",
        "P-Tasks": "forc remov imag remov imag without delet untag parent remov one imag given name show help",
        "Summary": "Remove one or more Docker images.",
        "Task-Script": {
            "Force remove an image": "docker rmi --force {{image}}",
            "Remove an image without deleting untagged parents": "docker rmi --no-prune {{image}}",
            "Remove one or more images given their names": "docker rmi {{image1 image2 ...}}",
            "Show help": "docker rmi"
        }
    },
    "common_docker run": {
        "Category": "common",
        "Command": "docker run",
        "P-Summary": "run command new docker contain",
        "P-Tasks": "run command new contain tag imag run command new contain background display id run command new contain bind mount volum run command new contain pass environ variabl run command new contain publish port run command one-off contain interact mode pseudo-tti",
        "Summary": "Run a command in a new Docker container.",
        "Task-Script": {
            "Run command in a new container from a tagged image": "docker run {{image:tag}} {{command}}",
            "Run command in a new container in background and display its ID": "docker run -d {{image}} {{command}}",
            "Run command in a new container with bind mounted volumes": "docker run -v {{path/to/host_path}}:{{path/to/container_path}} {{image}} {{command}}",
            "Run command in a new container with passed environment variables": "docker run -e '{{variable}}={{value}}' -e {{variable}} {{image}} {{command}}",
            "Run command in a new container with published ports": "docker run -p {{host_port}}:{{container_port}} {{image}} {{command}}",
            "Run command in a one-off container in interactive mode and pseudo-TTY": "docker run --rm -it {{image}} {{command}}"
        }
    },
    "common_docker start": {
        "Category": "common",
        "Command": "docker start",
        "P-Summary": "start one stop contain",
        "P-Tasks": "show help start contain attach stdout stderr forward signal start docker contain start one space-separ contain",
        "Summary": "Start one or more stopped containers.",
        "Task-Script": {
            "Show help": "docker start",
            "Start a container, attaching `stdout` and `stderr` and forwarding signals": "docker start --attach {{container}}",
            "Start a docker container": "docker start {{container}}",
            "Start one or more space-separated containers": "docker start {{container(s)}}"
        }
    },
    "common_docker system": {
        "Category": "common",
        "Command": "docker system",
        "P-Summary": "manag docker data display system-wid inform",
        "P-Tasks": "display real-tim event contain stream valid json line display real-tim event docker daemon display system-wid inform remov unus data remov unus data creat specifi amount time past show detail inform disk usag show docker disk usag show help",
        "Summary": "Manage Docker data and display system-wide information.",
        "Task-Script": {
            "Display real-time events from containers streamed as valid JSON Lines": "docker system events --filter 'type=container' --format '{{json .}}'",
            "Display real-time events from the Docker daemon": "docker system events",
            "Display system-wide information": "docker system info",
            "Remove unused data": "docker system prune",
            "Remove unused data created more than a specified amount of time in the past": "docker system prune --filter=\"until={{hours}}h{{minutes}}m\"",
            "Show detailed information on disk usage": "docker system df --verbose",
            "Show docker disk usage": "docker system df",
            "Show help": "docker system"
        }
    },
    "common_docker-compose": {
        "Category": "common",
        "Command": "docker-compose",
        "P-Summary": "run manag multi contain docker applic",
        "P-Tasks": "creat start contain background use docker-compos yml file current directori follow log specif contain follow log contain list run contain start contain use altern compos file start contain rebuild necessari stop run contain stop remov contain network imag volum",
        "Summary": "Run and manage multi container docker applications.",
        "Task-Script": {
            "Create and start all containers in the background using a `docker-compose.yml` file from the current directory": "docker-compose up -d",
            "Follow logs for a specific container": "docker-compose logs --follow {{container_name}}",
            "Follow logs for all containers": "docker-compose logs --follow",
            "List all running containers": "docker-compose ps",
            "Start all containers using an alternate compose file": "docker-compose --file {{path/to/file}} up",
            "Start all containers, rebuild if necessary": "docker-compose up --build",
            "Stop all running containers": "docker-compose stop",
            "Stop and remove all containers, networks, images, and volumes": "docker-compose down --rmi all --volumes"
        }
    },
    "common_docker-machine": {
        "Category": "common",
        "Command": "docker-machine",
        "P-Summary": "creat manag machin run docker",
        "P-Tasks": "creat new docker machin specif name get statu machin inspect inform machin list current run docker machin start machin stop machin",
        "Summary": "Create and manage machines running Docker.",
        "Task-Script": {
            "Create a new docker machine with specific name": "docker-machine create {{name}}",
            "Get the status of a machine": "docker-machine status {{name}}",
            "Inspect information about a machine": "docker-machine inspect {{name}}",
            "List currently running docker machines": "docker-machine ls",
            "Start a machine": "docker-machine start {{name}}",
            "Stop a machine": "docker-machine stop {{name}}"
        }
    },
    "common_dokku": {
        "Category": "common",
        "Command": "dokku",
        "P-Summary": "docker power mini-heroku paa\neasili deploy multipl app server differ languag use singl git-push command",
        "P-Tasks": "creat app instal plugin link databas app list run app remov app",
        "Summary": "Docker powered mini-Heroku (PaaS).\nEasily deploy multiple apps to your server in different languages using a single `git-push` command.",
        "Task-Script": {
            "Create an app": "dokku apps:create {{app_name}}",
            "Install plugin": "dokku plugin:install {{full_repo_url}}",
            "Link database to an app": "dokku {{db}}:link {{db_name}} {{app_name}}",
            "List running apps": "dokku apps",
            "Remove an app": "dokku apps:destroy {{app_name}}"
        }
    },
    "common_dot": {
        "Category": "common",
        "Command": "dot",
        "P-Summary": "command-lin tool produc layer draw direct graph",
        "P-Tasks": "creat svg dot file render imag file determin output filenam base input filenam select format",
        "Summary": "A command-line tool to produce layered drawings of directed graphs.",
        "Task-Script": {
            "Create an SVG from DOT file": "dot -Tsvg -o {{path/to/out_file.svg}} {{path/to/file.dot}}",
            "Render an image file and determine output filename based on input filename and selected format": "dot -Tpng -O {{path/to/file.dot}}"
        }
    },
    "common_dotnet": {
        "Category": "common",
        "Command": "dotnet",
        "P-Summary": "cross platform net command line tool net core",
        "P-Tasks": "build execut net project current directori initi new net project restor nuget packag run packag dotnet applic need runtim rest command requir net core sdk instal",
        "Summary": "Cross platform .NET command line tools for .NET Core.",
        "Task-Script": {
            "Build and execute the .NET project in the current directory": "dotnet run",
            "Initialize a new .NET project": "dotnet new {{template_short_name}}",
            "Restore nuget packages": "dotnet restore",
            "Run a packaged dotnet application (only needs the runtime, the rest of the commands require the .NET Core SDK installed)": "dotnet {{path/to/application.dll}}"
        }
    },
    "common_dotnet build": {
        "Category": "common",
        "Command": "dotnet build",
        "P-Summary": "build net applic depend",
        "P-Tasks": "compil net project solut debug mode compil specif runtim compil releas mode compil project solut current directori compil specif verbos level compil without restor depend specifi output directori",
        "Summary": "Builds a .NET application and its dependencies.",
        "Task-Script": {
            "Compile a .NET project or solution in debug mode": "dotnet build {{path/to/project_or_solution}}",
            "Compile for a specific runtime": "dotnet build --runtime {{runtime_identifier}}",
            "Compile in release mode": "dotnet build",
            "Compile the project or solution in the current directory": "dotnet build",
            "Compile with a specific verbosity level": "dotnet build --verbosity {{quiet|minimal|normal|detailed|diagnostic}}",
            "Compile without restoring dependencies": "dotnet build --no-restore",
            "Specify the output directory": "dotnet build --output {{path/to/directory}}"
        }
    },
    "common_dotnet publish": {
        "Category": "common",
        "Command": "dotnet publish",
        "P-Summary": "publish net applic depend folder deploy host system",
        "P-Tasks": "compil net project releas mode compil net project without restor depend packag applic platform-specif single-fil execut publish net core runtim applic specifi runtim specifi output directori trim unus librari reduc deploy size applic",
        "Summary": "Publish a .NET application and its dependencies to a folder for deployment to a hosting system.",
        "Task-Script": {
            "Compile a .NET project in release mode": "dotnet publish --configuration Release {{path/to/project_file}}",
            "Compile a .NET project without restoring dependencies": "dotnet publish --no-restore {{path/to/project_file}}",
            "Package the application into a platform-specific single-file executable": "dotnet publish --runtime {{runtime_identifier}} -p:PublishSingleFile=true {{path/to/project_file}}",
            "Publish the .NET Core runtime with your application for the specified runtime": "dotnet publish --self-contained true --runtime {{runtime_identifier}} {{path/to/project_file}}",
            "Specify the output directory": "dotnet publish --output {{path/to/directory}} {{path/to/project_file}}",
            "Trim unused libraries to reduce the deployment size of an application": "dotnet publish --self-contained true --runtime {{runtime_identifier}} -p:PublishTrimmed=true {{path/to/project_file}}"
        }
    },
    "common_dotnet restore": {
        "Category": "common",
        "Command": "dotnet restore",
        "P-Summary": "restor depend tool net project",
        "P-Tasks": "forc depend resolv even last restor success restor depend net project solut specif locat restor depend net project solut current directori restor depend use packag sourc failur warn restor depend specif verbos level restor depend without cach http request",
        "Summary": "Restores the dependencies and tools of a .NET project.",
        "Task-Script": {
            "Force all dependencies to be resolved even if the last restore was successful": "dotnet restore --force",
            "Restore dependencies for a .NET project or solution in a specific location": "dotnet restore {{path/to/project_or_solution}}",
            "Restore dependencies for a .NET project or solution in the current directory": "dotnet restore",
            "Restore dependencies using package source failures as warnings": "dotnet restore --ignore-failed-sources",
            "Restore dependencies with a specific verbosity level": "dotnet restore --verbosity {{quiet|minimal|normal|detailed|diagnostic}}",
            "Restore dependencies without caching the HTTP requests": "dotnet restore --no-cache"
        }
    },
    "common_doxygen": {
        "Category": "common",
        "Command": "doxygen",
        "P-Summary": "document system variou program languag",
        "P-Tasks": "gener default templat configur file doxyfil gener templat configur file gener document use exist configur file",
        "Summary": "A documentation system for various programming languages.",
        "Task-Script": {
            "Generate a default template configuration file \"Doxyfile\"": "doxygen -g",
            "Generate a template configuration file": "doxygen -g {{path/to/config_file}}",
            "Generate documentation using an existing configuration file": "doxygen {{path/to/config_file}}"
        }
    },
    "common_drill": {
        "Category": "common",
        "Command": "drill",
        "P-Summary": "perform variou dn queri",
        "P-Tasks": "get type record given domain name lookup ip associ hostnam record lookup mail server associ given domain name mx record perform dnssec trace root server domain name perform revers dn lookup ip address ptr record show dnskey record domain name specifi altern dn server queri",
        "Summary": "Perform various DNS queries.",
        "Task-Script": {
            "Get all types of records for a given domain name": "drill any {{example.com}}",
            "Lookup the IP(s) associated with a hostname (A records)": "drill {{example.com}}",
            "Lookup the mail server(s) associated with a given domain name (MX record)": "drill mx {{example.com}}",
            "Perform DNSSEC trace from root servers down to a domain name": "drill -TD {{example.com}}",
            "Perform a reverse DNS lookup on an IP address (PTR record)": "drill -x {{8.8.8.8}}",
            "Show DNSKEY record(s) for a domain name": "drill -s dnskey {{example.com}}",
            "Specify an alternate DNS server to query": "drill {{example.com}} @{{8.8.8.8}}"
        }
    },
    "common_drupal": {
        "Category": "common",
        "Command": "drupal",
        "P-Summary": "cli drupal\ngener boilerpl code interact debug drupal project",
        "P-Tasks": "clear cach instal modul uninstal modul view current drupal instal statu",
        "Summary": "CLI for Drupal.\nGenerates boilerplate code, interacts with and debugs Drupal projects.",
        "Task-Script": {
            "Clear all caches": "drupal cache:rebuild",
            "Install a module": "drupal module:install {{module_name}}",
            "Uninstall a module": "drupal module:uninstall {{module_name}}",
            "View current Drupal installation status": "drupal site:status"
        }
    },
    "common_drupal-check": {
        "Category": "common",
        "Command": "drupal-check",
        "P-Summary": "check drupal php code deprec",
        "P-Tasks": "check code exclud comma-separ list directori check code specif directori deprec show progress bar perform static analysi detect bad code practic",
        "Summary": "Check Drupal PHP code for deprecations.",
        "Task-Script": {
            "Check the code excluding a comma-separated list of directories": "drupal-check --exclude-dir {{path/to/excluded_directory}},{{path/to/excluded_files/*.php}} {{path/to/directory}}",
            "Check the code in a specific directory for deprecations": "drupal-check {{path/to/directory}}",
            "Don't show a progress bar": "drupal-check --no-progress {{path/to/directory}}",
            "Perform static analysis to detect bad coding practices": "drupal-check --analysis {{path/to/directory}}"
        }
    },
    "common_drush": {
        "Category": "common",
        "Command": "drush",
        "P-Summary": "command-lin shell script interfac drupal",
        "P-Tasks": "clear css javascript cach clear cach enabl modul foo uninstal modul foo",
        "Summary": "A command-line shell and scripting interface for Drupal.",
        "Task-Script": {
            "Clear CSS and JavaScript caches": "drush cc css-js",
            "Clear all caches": "drush cr",
            "Enable module \"foo\"": "drush en {{foo}}",
            "Uninstall module \"foo\"": "drush pmu {{foo}}"
        }
    },
    "common_du": {
        "Category": "common",
        "Command": "du",
        "P-Summary": "disk usag : estim summar file directori space usag",
        "P-Tasks": "list human-read size jpg file subdirectori current directori show cumul total end list human-read size directori subdirectori n level deep list human-read size directori file directori within list size directori subdirectori human-read form e\nauto-select appropri unit size list size directori subdirectori given unit b kb mb show size singl directori human readabl unit",
        "Summary": "Disk usage: estimate and summarize file and directory space usage.",
        "Task-Script": {
            "List the human-readable size of all .jpg files in subdirectories of the current directory, and show a cumulative total at the end": "du -ch */*.jpg",
            "List the human-readable sizes of a directory and any subdirectories, up to N levels deep": "du -h --max-depth=N {{path/to/directory}}",
            "List the human-readable sizes of a directory and of all the files and directories within it": "du -ah {{path/to/directory}}",
            "List the sizes of a directory and any subdirectories, in human-readable form (i.e. auto-selecting the appropriate unit for each size)": "du -h {{path/to/directory}}",
            "List the sizes of a directory and any subdirectories, in the given unit (B/KB/MB)": "du -{{b|k|m}} {{path/to/directory}}",
            "Show the size of a single directory, in human readable units": "du -sh {{path/to/directory}}"
        }
    },
    "common_dua": {
        "Category": "common",
        "Command": "dua",
        "P-Summary": "dua disk usag analyz tool conveni learn usag disk space given directori",
        "P-Tasks": "aggreg consum space one directori file analyz specif directori count hard-link file time seen display appar size instead disk usag format print byte count launch termin user interfac set number thread use",
        "Summary": "Dua (Disk Usage Analyzer) is a tool to conveniently learn about the usage of disk space of a given directory.",
        "Task-Script": {
            "Aggregate the consumed space of one or more directories or files": "dua aggregate",
            "Analyze specific directory": "dua {{path/to/directory}}",
            "Count hard-linked files each time they are seen": "dua --count-hard-links",
            "Display apparent size instead of disk usage": "dua --apparent-size",
            "Format printing byte counts": "dua --format {{metric|binary|bytes|GB|GiB|MB|MiB}}",
            "Launch the terminal user interface": "dua interactive",
            "Set the number of threads to be used": "dua --threads {{count}}"
        }
    },
    "common_duplicity": {
        "Category": "common",
        "Command": "duplicity",
        "P-Summary": "creat increment compress encrypt version backup\nalso upload backup varieti backend servic",
        "P-Tasks": "backup directori amazon s3 full backup everi month backup directori via ftp remot machin encrypt password delet version older 1 year backup store webdav share list avail backup list file backup store remot machin via ssh restor subdirectori gnupg-encrypt local backup given locat",
        "Summary": "Creates incremental, compressed, encrypted and versioned backups.\nCan also upload the backups to a variety of backend services.",
        "Task-Script": {
            "Backup a directory to Amazon S3, doing a full backup every month": "duplicity --full-if-older-than {{1M}} --use-new-style s3://{{bucket_name[/prefix]}}",
            "Backup a directory via FTPS to a remote machine, encrypting it with a password": "FTP_PASSWORD={{ftp_login_password}} PASSPHRASE={{encryption_password}} duplicity {{path/to/source/directory}} {{ftps://user@hostname/target/directory/path/}}",
            "Delete versions older than 1 year from a backup stored on a WebDAV share": "FTP_PASSWORD={{webdav_login_password}} duplicity remove-older-than {{1Y}} --force {{webdav[s]://user@hostname[:port]/some_dir}}",
            "List the available backups": "duplicity collection-status \"file://{{absolute/path/to/backup/directory}}\"",
            "List the files in a backup stored on a remote machine, via ssh": "duplicity list-current-files --time {{YYYY-MM-DD}} scp://{{user@hostname}}/path/to/backup/dir",
            "Restore a subdirectory from a GnuPG-encrypted local backup to a given location": "PASSPHRASE={{gpg_key_password}} duplicity restore --encrypt-key {{gpg_key_id}} --file-to-restore {{relative/path/restoredirectory}} file://{{absolute/path/to/backup/directory}} {{path/to/directory/to/restore/to}}"
        }
    },
    "common_dvc": {
        "Category": "common",
        "Command": "dvc",
        "P-Summary": "data version control : like git data",
        "P-Tasks": "check dvc version display gener help display help specif subcommand execut dvc subcommand",
        "Summary": "Data Version Control: like `git` for data.",
        "Task-Script": {
            "Check the DVC version": "dvc --version",
            "Display general help": "dvc --help",
            "Display help about a specific subcommand": "dvc {{subcommand}} --help",
            "Execute a DVC subcommand": "dvc {{subcommand}}"
        }
    },
    "common_dvc add": {
        "Category": "common",
        "Command": "dvc add",
        "P-Summary": "add chang file index",
        "P-Tasks": "add singl target file index add target directori index add target file custom dvc filenam recurs add file given target directori",
        "Summary": "Add changed files to the index.",
        "Task-Script": {
            "Add a single target file to the index": "dvc add {{path/to/file}}",
            "Add a target directory to the index": "dvc add {{path/to/directory}}",
            "Add a target file with a custom `.dvc` filename": "dvc add --file {{custom_name.dvc}} {{path/to/file}}",
            "Recursively add all the files in a given target directory": "dvc add --recursive {{path/to/directory}}"
        }
    },
    "common_dvc checkout": {
        "Category": "common",
        "Command": "dvc checkout",
        "P-Summary": "checkout data file directori cach",
        "P-Tasks": "checkout specif version target differ git commit tag branch checkout latest version target file directori checkout latest version specifi target",
        "Summary": "Checkout data files and directories from cache.",
        "Task-Script": {
            "Checkout a specific version of a target from a different Git commit/tag/branch": "git checkout {{commit_hash|tag|branch}} {{target}} && dvc checkout {{target}}",
            "Checkout the latest version of all target files and directories": "dvc checkout",
            "Checkout to latest version of a specified target": "dvc checkout {{target}}"
        }
    },
    "common_dvc commit": {
        "Category": "common",
        "Command": "dvc commit",
        "P-Summary": "record chang dvc-track file project",
        "P-Tasks": "commit chang specifi dvc-track target commit chang dvc-track file directori recurs commit dvc-track file directori",
        "Summary": "Record changes to DVC-tracked files in the project.",
        "Task-Script": {
            "Commit changes to a specified DVC-tracked target": "dvc commit {{target}}",
            "Commit changes to all DVC-tracked files and directories": "dvc commit",
            "Recursively commit all DVC-tracked files in a directory": "dvc commit --recursive {{path/to/directory}}"
        }
    },
    "common_dvc config": {
        "Category": "common",
        "Command": "dvc config",
        "P-Summary": "low level command manag custom configur option dvc repositori\nconfigur project local global system level",
        "P-Tasks": "get config valu specifi key current project get name default remot set local global system level config valu set config valu key project level set project default remot unset project level config valu given key unset project default remot",
        "Summary": "Low level command to manage custom configuration options for dvc repositories.\nThese configurations can be on project, local, global, or system level.",
        "Task-Script": {
            "Get the config value for a specified key for the current project": "dvc config {{key}}",
            "Get the name of the default remote": "dvc config core.remote",
            "Set a local, global, or system level config value": "dvc config --local/global/system {{key}} {{value}}",
            "Set the config value for a key on a project level": "dvc config {{key}} {{value}}",
            "Set the project's default remote": "dvc config core.remote {{remote_name}}",
            "Unset a project level config value for a given key": "dvc config --unset {{key}}",
            "Unset the project's default remote": "dvc config --unset core.remote"
        }
    },
    "common_dvc dag": {
        "Category": "common",
        "Command": "dvc dag",
        "P-Summary": "visual pipelin defin dvc yaml",
        "P-Tasks": "export pipelin dot format visual entir pipelin visual pipelin stage specifi target stage",
        "Summary": "Visualize the pipeline(s) defined in `dvc.yaml`.",
        "Task-Script": {
            "Export the pipeline in the dot format": "dvc dag --dot > {{path/to/pipeline.dot}}",
            "Visualize the entire pipeline": "dvc dag",
            "Visualize the pipeline stages up to a specified target stage": "dvc dag {{target}}"
        }
    },
    "common_dvc destroy": {
        "Category": "common",
        "Command": "dvc destroy",
        "P-Summary": "remov dvc file directori dvc project",
        "P-Tasks": "destroy current project forc destroy current project",
        "Summary": "Remove all DVC files and directories from a DVC project.",
        "Task-Script": {
            "Destroy the current project": "dvc destroy",
            "Force destroy the current project": "dvc destroy --force"
        }
    },
    "common_dvc diff": {
        "Category": "common",
        "Command": "dvc diff",
        "P-Summary": "show chang dvc track file directori",
        "P-Tasks": "compar dvc track file differ git commit tag branch w r current workspac compar dvc track file along latest hash compar dvc track file display output json compar dvc track file display output markdown compar chang dvc track file 1 git commit anoth",
        "Summary": "Show changes in DVC tracked file and directories.",
        "Task-Script": {
            "Compare DVC tracked files from different Git commits, tags, and branches w.r.t the current workspace": "dvc diff {{commit_hash/tag/branch}}",
            "Compare DVC tracked files, along with their latest hash": "dvc diff --show-hash {{commit}}",
            "Compare DVC tracked files, displaying the output as JSON": "dvc diff --show-json --show-hash {{commit}}",
            "Compare DVC tracked files, displaying the output as Markdown": "dvc diff --show-md --show-hash {{commit}}",
            "Compare the changes in DVC tracked files from 1 git commit to another": "dvc diff {{revision_b}} {{revision_a}}"
        }
    },
    "common_dvc fetch": {
        "Category": "common",
        "Command": "dvc fetch",
        "P-Summary": "download dvc track file directori remot repositori",
        "P-Tasks": "fetch chang branch tag fetch chang commit fetch chang specif remot upstream repositori fetch latest chang specif target fetch latest chang default remot upstream repositori set",
        "Summary": "Download DVC tracked files and directories from a remote repository.",
        "Task-Script": {
            "Fetch changes for all branch and tags": "dvc fetch --all-branches --all-tags",
            "Fetch changes for all commits": "dvc fetch --all-commits",
            "Fetch changes from a specific remote upstream repository": "dvc fetch --remote {{remote_name}}",
            "Fetch the latest changes for a specific target/s": "dvc fetch {{target/s}}",
            "Fetch the latest changes from the default remote upstream repository (if set)": "dvc fetch"
        }
    },
    "common_dvc freeze": {
        "Category": "common",
        "Command": "dvc freeze",
        "P-Summary": "freez stage dvc pipelin\nprevent dvc track chang stage depend re-execut unfreez\nsee also dv unfreez",
        "P-Tasks": "freez 1 specifi stage",
        "Summary": "Freeze stages in the DVC pipeline.\nThis prevents DVC from tracking changes in stage dependencies and re-execution until unfreeze.\nSee also `dvs unfreeze`.",
        "Task-Script": {
            "Freeze 1 or more specified stages": "dvc freeze {{stage_name_a}} [{{stage_name_b}} ...]"
        }
    },
    "common_dvc gc": {
        "Category": "common",
        "Command": "dvc gc",
        "P-Summary": "remov unus file directori cach remot storag",
        "P-Tasks": "garbag collect cach includ specif cloud remot storag garbag collect cach includ default cloud remot storag set garbag collect cach keep version referenc branch tag commit garbag collect cach keep version referenc current workspac",
        "Summary": "Remove unused files and directories from the cache or remote storage.",
        "Task-Script": {
            "Garbage collect from the cache, including a specific cloud remote storage": "dvc gc --all-commits --cloud --remote {{remote_name}}",
            "Garbage collect from the cache, including the default cloud remote storage (if set)": "dvc gc --all-commits --cloud",
            "Garbage collect from the cache, keeping only versions referenced by branch, tags, and commits": "dvc gc --all-branches --all-tags --all-commits",
            "Garbage collect from the cache, keeping only versions referenced by the current workspace": "dvc gc --workspace"
        }
    },
    "common_dvc init": {
        "Category": "common",
        "Command": "dvc init",
        "P-Summary": "initi new local dvc repositori",
        "P-Tasks": "initi dvc subdirectori initi dvc without git initi new local repositori",
        "Summary": "Initialize a new local DVC repository.",
        "Task-Script": {
            "Initialize DVC in a subdirectory": "cd {{path/to/subdir}} && dvc init --sudir",
            "Initialize DVC without Git": "dvc init --no-scm",
            "Initialize a new local repository": "dvc init"
        }
    },
    "common_dvc unfreeze": {
        "Category": "common",
        "Command": "dvc unfreeze",
        "P-Summary": "unfreez stage dvc pipelin\nallow dvc start track chang stage depend frozen\nsee also dvc freez",
        "P-Tasks": "unfreez 1 specifi stage",
        "Summary": "Unfreeze stages in the DVC pipeline.\nThis allows DVC to start tracking changes in stage dependencies again after they were frozen.\nSee also `dvc freeze`.",
        "Task-Script": {
            "Unfreeze 1 or more specified stages": "dvc unfreeze {{stage_name_a}} [{{stage_name_b}} ...]"
        }
    },
    "common_ebook-convert": {
        "Category": "common",
        "Command": "ebook-convert",
        "P-Summary": "use convert ebook common format e g pdf epub mobi\npart calibr ebook librari tool",
        "P-Tasks": "convert markdown html ebook toc titl author convert ebook anoth format",
        "Summary": "Can be used to convert ebooks between common formats, e.g., pdf, epub and mobi.\nPart of the Calibre ebook library tool.",
        "Task-Script": {
            "Convert Markdown or HTML to ebook with TOC, title and author": "ebook-convert {{source}} {{destination}} --level1-toc=\"//h:h1\" --level2-toc=\"//h:h2\" --level3-toc=\"//h:h3\" --title={{title}} --authors={{author}}",
            "Convert an ebook into another format": "ebook-convert {{source}} {{destination}}"
        }
    },
    "common_echo": {
        "Category": "common",
        "Command": "echo",
        "P-Summary": "print given argument",
        "P-Tasks": "append messag file enabl interpret backslash escap special charact print messag environ variabl print messag without trail newlin print text messag\nnote : quot option",
        "Summary": "Print given arguments.",
        "Task-Script": {
            "Append a message to the file": "echo \"{{Hello World}}\" >> {{file.txt}}",
            "Enable interpretation of backslash escapes (special characters)": "echo -e \"{{Column 1\\tColumn 2}}\"",
            "Print a message with environment variables": "echo \"{{My path is $PATH}}\"",
            "Print a message without the trailing newline": "echo -n \"{{Hello World}}\"",
            "Print a text message. Note: quotes are optional": "echo \"{{Hello World}}\""
        }
    },
    "common_ect": {
        "Category": "common",
        "Command": "ect",
        "P-Summary": "effici compress tool ect c++ file optim\nsupport png jpeg gzip zip file",
        "P-Tasks": "compress file compress file highest compress level multithread compress file directori recurs keep origin modif time",
        "Summary": "Efficient Compression Tool (or ECT) is a C++ file optimizer. It supports PNG, JPEG, GZIP and ZIP files.",
        "Task-Script": {
            "Compress a file": "ect {{filename.png}}",
            "Compress a file with the highest compression level and multithreading": "ect -9 --mt-deflate {{filename.png}}",
            "Compress all the files in a directory recursively, keeping the original modification time": "ect -keep -recurse {{directory}}"
        }
    },
    "common_ed": {
        "Category": "common",
        "Command": "ed",
        "P-Summary": "origin unix text editor",
        "P-Tasks": "add text current document\nmark complet enter period new line print entir document shortcut rang 1 cover start end document quit ed start ed edit exist file show byte count load file start ed edit empti document save new file current directori start ed edit empti document : command prompt indic toggl print error explan\ndefault explan print\nappear write current document new file filenam omit ed call exist file",
        "Summary": "The original Unix text editor.",
        "Task-Script": {
            "Add text to the current document. Mark completion by entering a period by itself in a new line": "a<Enter>{{text_to_insert}}<Enter>.",
            "Print the entire document (`,` is a shortcut to the range `1,$` which covers the start to the end of the document)": ",p",
            "Quit ed": "q",
            "Start ed editing an existing file (this shows the byte count of the loaded file)": "ed -p : {{path/to/file}}",
            "Start ed, editing an empty document (which can be saved as a new file in the current directory)": "ed",
            "Start ed, editing an empty document, with `:` as a command prompt indicator": "ed -p :",
            "Toggle the printing of error explanations. (By default, explanations are not printed and only a `?` appears)": "H",
            "Write the current document to a new file (the filename can be omitted if `ed` was called with an existing file)": "w {{filename}}"
        }
    },
    "common_electrum": {
        "Category": "common",
        "Command": "electrum",
        "P-Summary": "ergonom bitcoin wallet privat key manag",
        "P-Tasks": "connect specif electrum-serv instanc creat new wallet creat sign transact offlin display wallet receiv address restor exist wallet seed offlin sign messag verifi messag",
        "Summary": "Ergonomic Bitcoin wallet and private key management.",
        "Task-Script": {
            "Connect only to a specific electrum-server instance": "electrum -p socks5:{{127.0.0.1}}:9050 -s {{56ckl5obj37gypcu.onion}}:50001:t -1",
            "Create a new wallet": "electrum -w {{new_wallet.dat}} create",
            "Create a signed transaction offline": "electrum mktx {{recipient}} {{amount}} -f 0.0000001 -F {{from}} -o",
            "Display all wallet receiving addresses": "electrum listaddresses -a",
            "Restore an existing wallet from seed offline": "electrum -w {{recovery_wallet.dat}} restore -o",
            "Sign a message": "electrum signmessage {{address}} {{message}}",
            "Verify a message": "electrum verifymessage {{address}} {{signature}} {{message}}"
        }
    },
    "common_elinks": {
        "Category": "common",
        "Command": "elinks",
        "P-Summary": "text base browser similar lynx",
        "P-Tasks": "dump output webpag consol color text ansi control code quit elink start elink",
        "Summary": "A text based browser similar to lynx.",
        "Task-Script": {
            "Dump output of webpage to console, colorizing the text with ANSI control codes": "elinks -dump -dump-color-mode {{1}} {{url}}",
            "Quit elinks": "Ctrl + C",
            "Start elinks": "elinks"
        }
    },
    "common_elixir": {
        "Category": "common",
        "Command": "elixir",
        "P-Summary": "elixir program languag interpret",
        "P-Tasks": "evalu elixir code pass argument run elixir file",
        "Summary": "Elixir programming language interpreter.",
        "Task-Script": {
            "Evaluate Elixir code by passing it as an argument": "elixir -e \"{{code}}\"",
            "Run an Elixir file": "elixir {{path/to/file}}"
        }
    },
    "common_elm": {
        "Category": "common",
        "Command": "elm",
        "P-Summary": "compil run elm sourc file",
        "P-Tasks": "compil elm file output result javascript file compil elm file output result index html file initi elm project gener elm json file instal elm packag http : packag elm-lang org start interact elm shell start local web server compil elm file page load",
        "Summary": "Compile and run Elm source files.",
        "Task-Script": {
            "Compile an Elm file, output the result to a Javascript file": "elm make {{source}} --output={{destination}}.js",
            "Compile an Elm file, output the result to an index.html file": "elm make {{source}}",
            "Initialize an Elm project, generates an elm.json file": "elm init",
            "Install Elm package from https://package.elm-lang.org": "elm install {{author}}/{{package}}",
            "Start interactive Elm shell": "elm repl",
            "Start local web server that compiles Elm files on page load": "elm reactor"
        }
    },
    "common_emacs": {
        "Category": "common",
        "Command": "emacs",
        "P-Summary": "extens customiz self-docu real-tim display editor",
        "P-Tasks": "open file open file specifi line number quit save file start consol mode without x window",
        "Summary": "The extensible, customizable, self-documenting, real-time display editor.",
        "Task-Script": {
            "Open a file": "emacs {{path/to/file}}",
            "Open a file at a specified line number": "emacs +{{line_number}} {{path/to/file}}",
            "Quit": "Ctrl + X, Ctrl + C",
            "Save a file": "Ctrl + X, Ctrl + S",
            "Start in console mode (without X window)": "emacs -nw"
        }
    },
    "common_emacsclient": {
        "Category": "common",
        "Command": "emacsclient",
        "P-Summary": "open file exist emac server",
        "P-Tasks": "eval command new emac frame open file exist emac frame return immedi open file new emac frame open file consol mode without x window open file exist emac server use gui avail",
        "Summary": "Open files in an existing emacs server.",
        "Task-Script": {
            "Eval command in a new emacs frame": "emacsclient -c -e '({{command}})'",
            "Open a file in an existing emacs frame and return immediately": "emacsclient -n {{filename}}",
            "Open file in a new emacs frame": "emacsclient -c {{filename}}",
            "Open file in console mode (without X window)": "emacsclient -nw {{filename}}",
            "Open files in an existing Emacs server (using GUI if available)": "emacsclient {{filename}}"
        }
    },
    "common_ember": {
        "Category": "common",
        "Command": "ember",
        "P-Summary": "ember js command line util\nuse creat maintain ember js applic",
        "P-Tasks": "build project build project product mode creat new ember addon creat new ember applic instal ember-cli addon run blueprint gener someth like rout compon run develop server run test suit",
        "Summary": "The Ember.js command line utility.\nUsed for creating and maintaining Ember.js applications.",
        "Task-Script": {
            "Build the project": "ember build",
            "Build the project in production mode": "ember build -prod",
            "Create a new Ember addon": "ember addon {{my_new_addon}}",
            "Create a new Ember application": "ember new {{my_new_app}}",
            "Install an ember-cli addon": "ember install {{name_of_addon}}",
            "Run a blueprint to generate something like a route or component": "ember generate {{type}} {{name}}",
            "Run the development server": "ember serve",
            "Run the test suite": "ember test"
        }
    },
    "common_emulator": {
        "Category": "common",
        "Command": "emulator",
        "P-Summary": "manag android emul command line",
        "P-Tasks": "display help display webcam develop comput avail emul start android emul devic start emul overrid face back camera set use -camera-front front camera start emul given sd card partit imag file start emul network latenc start emul make tcp connect specifi http http proxi port number requir start emul maximun network speed",
        "Summary": "Manager Android emulators from the command line.",
        "Task-Script": {
            "Display the help": "emulator -help",
            "Display the webcams on your development computer that are available for emulation": "emulator -avd {{name}} -webcam-list",
            "Start an Android emulator device": "emulator -avd {{name}}",
            "Start an emulator overriding the facing back camera setting (use `-camera-front` for front camera)": "emulator -avd {{name}} -camera-back {{none|emulated|webcamN}}",
            "Start an emulator with a given SD card partition image file": "emulator -avd {{name}} -sdcard {{path/to/sdcard.img}}",
            "Start an emulator with network latency": "emulator -avd {{name}} -netdelay {{gsm|hscsd|gprs|edge|hsdpa|lte|evdo|none}}",
            "Start an emulator, making all TCP connections through a specified HTTP/HTTPS proxy (port number is required)": "emulator -avd {{name}} -http-proxy {{http://example.com:80}}",
            "Start an emulator, with a maximun network speed": "emulator -avd {{name}} -netspeed {{gsm|hscsd|gprs|edge|hsdpa|lte|evdo|full}}"
        }
    },
    "common_enca": {
        "Category": "common",
        "Command": "enca",
        "P-Summary": "detect convert encod text file",
        "P-Tasks": "convert file specif encod creat copi exist file use differ encod detect file encod accord system local detect file encod specifi languag posix c local format e g\nzh_cn en_u",
        "Summary": "Detect and convert the encoding of text files.",
        "Task-Script": {
            "Convert file(s) to a specific encoding": "enca -L {{language}} -x {{to_encoding}} {{file1 file2 ...}}",
            "Create a copy of an existing file using a different encoding": "enca -L {{language}} -x {{to_encoding}} < {{original_file}} > {{new_file}}",
            "Detect file(s) encoding according to the system's locale": "enca {{file1 file2 ...}}",
            "Detect file(s) encoding specifying a language in the POSIX/C locale format (e.g. zh_CN, en_US)": "enca -L {{language}} {{file1 file2 ...}}"
        }
    },
    "common_enscript": {
        "Category": "common",
        "Command": "enscript",
        "P-Summary": "convert text file postscript html rtf ansi overstrik",
        "P-Tasks": "display avail syntax highlight languag file format gener postscript file text file gener postscript file landscap layout split page column maximum 9 gener postscript file syntax highlight color specifi languag gener file differ languag postscript",
        "Summary": "Convert text files to PostScript, HTML, RTF, ANSI, and overstrikes.",
        "Task-Script": {
            "Display available syntax highlighting languages and file formats": "enscript --help-highlight",
            "Generate a PostScript file from a text file": "enscript {{path/to/input_file}} --output={{path/to/output_file}}",
            "Generate a PostScript file with a landscape layout, splitting the page into columns (maximum 9)": "enscript {{path/to/input_file}} --columns={{num}} --landscape --output={{path/to/output_file}}",
            "Generate a PostScript file with syntax highlighting and color for a specified language": "enscript {{path/to/input_file}} --color=1 --highlight={{language}} --output={{path/to/output_file}}",
            "Generate a file in a different language than PostScript": "enscript {{path/to/input_file}} --language={{html|rtf|...}} --output={{path/to/output_file}}"
        }
    },
    "common_entr": {
        "Category": "common",
        "Command": "entr",
        "P-Summary": "run arbitrari command file chang",
        "P-Tasks": "rebuild test make c sourc file current directori chang rebuild make file subdirectori chang run command chang file _ argument send sigterm previous spawn rubi subprocess execut rubi main rb",
        "Summary": "Run arbitrary commands when files change.",
        "Task-Script": {
            "Rebuild and test with `make` if any `.c` source files in the current directory change": "{{ls *.c}} | entr {{'make && make test'}}",
            "Rebuild with `make` if any file in any subdirectory changes": "{{ag -l}} | entr {{make}}",
            "Run a command with the changed file (`/_`) as an argument": "{{ls *.sql}} | entr {{psql -f}} /_",
            "Send a `SIGTERM` to any previously spawned ruby subprocesses before executing `ruby main.rb`": "{{ls *.rb}} | entr -r {{ruby main.rb}}"
        }
    },
    "common_env": {
        "Category": "common",
        "Command": "env",
        "P-Summary": "show environ run program modifi environ",
        "P-Tasks": "clear environ run program remov variabl environ run program run program\noften use script shebang\nlook path program set variabl run program set multipl variabl run program show environ",
        "Summary": "Show the environment or run a program in a modified environment.",
        "Task-Script": {
            "Clear the environment and run a program": "env -i {{program}}",
            "Remove variable from the environment and run a program": "env -u {{variable}} {{program}}",
            "Run a program. Often used in scripts after the shebang (#!) for looking up the path to the program": "env {{program}}",
            "Set a variable and run a program": "env {{variable}}={{value}} {{program}}",
            "Set multiple variables and run a program": "env {{variable1}}={{value}} {{variable2}}={{value}} {{variable3}}={{value}} {{program}}",
            "Show the environment": "env"
        }
    },
    "common_envoy": {
        "Category": "common",
        "Command": "envoy",
        "P-Summary": "php-base task manag laravel remot server",
        "P-Tasks": "connect specifi server via ssh dump task bash script inspect initialis configur file run task run task continu failur run task specif project",
        "Summary": "A PHP-based task manager for Laravel remote servers.",
        "Task-Script": {
            "Connect to the specified server via SSH": "envoy ssh {{server_name}}",
            "Dump a task as a bash script for inspection": "envoy run --pretend {{task_name}}",
            "Initialise a configuration file": "envoy init {{host_name}}",
            "Run a task": "envoy run {{task_name}}",
            "Run a task and continue on failure": "envoy run --continue {{task_name}}",
            "Run a task from a specific project": "envoy run --path {{path/to/directory}} {{task_name}}"
        }
    },
    "common_envsubst": {
        "Category": "common",
        "Command": "envsubst",
        "P-Summary": "substitut environ variabl valu shell format string\nvariabl replac either var var format",
        "P-Tasks": "replac environ variabl stdin output stdout replac environ variabl input file output stdout replac environ variabl input file output file replac environ variabl input file space-separ list",
        "Summary": "Substitutes environment variables with their value in shell format strings.\nVariables to be replaced should be in either `${var}` or `$var` format.",
        "Task-Script": {
            "Replace environment variables in `stdin` and output to `stdout`": "echo '{{$HOME}}' | envsubst",
            "Replace environment variables in an input file and output to `stdout`": "envsubst < {{path/to/input_file}}",
            "Replace environment variables in an input file and output to a file": "envsubst < {{path/to/input_file}} > {{path/to/output_file}}",
            "Replace environment variables in an input file from a space-separated list": "envsubst '{{$USER $SHELL $HOME}}' < {{path/to/input_file}}"
        }
    },
    "common_erl": {
        "Category": "common",
        "Command": "erl",
        "P-Summary": "run manag program erlang program languag",
        "P-Tasks": "compil run sequenti erlang program common script exit connect run erlang node tell erlang shell load modul directori",
        "Summary": "Run and manage programs in the Erlang programming language.",
        "Task-Script": {
            "Compile and run sequential Erlang program as a common script and then exit": "erlc {{files}} && erl -noshell '{{mymodule:myfunction(arguments)}}, init:stop().'",
            "Connect to a running Erlang node": "erl -remsh {{nodename}}@{{hostname}} -sname {{custom_shortname}} -hidden -setcookie {{cookie_of_remote_node}}",
            "Tell the Erlang shell to load modules from a directory": "erl -pa {{directory_with_beam_files}}"
        }
    },
    "common_eslint": {
        "Category": "common",
        "Command": "eslint",
        "P-Summary": "pluggabl lint util javascript jsx",
        "P-Tasks": "creat eslint config fix lint issu lint given set file lint config",
        "Summary": "A pluggable linting utility for JavaScript and JSX.",
        "Task-Script": {
            "Create eslint config": "eslint --init",
            "Fix lint issues": "eslint --fix",
            "Lint on a given set of files": "eslint {{filename}}.js {{filename1}}.js",
            "Lint with config": "eslint -c {{path/to/config_file}} {{app/src}}"
        }
    },
    "common_espeak": {
        "Category": "common",
        "Command": "espeak",
        "P-Summary": "use text-to-speech speak default sound devic",
        "P-Tasks": "save output wav audio file rather speak directli speak file aloud speak phrase aloud use differ voic",
        "Summary": "Uses text-to-speech to speak through the default sound device.",
        "Task-Script": {
            "Save output to a WAV audio file, rather than speaking it directly": "espeak -w {{filename.wav}} \"It's GNU plus Linux\"",
            "Speak a file aloud": "espeak -f {{filename}}",
            "Speak a phrase aloud": "espeak \"I like to ride my bike.\"",
            "Use a different voice": "espeak -v {{voice}}"
        }
    },
    "common_eva": {
        "Category": "common",
        "Command": "eva",
        "P-Summary": "simpl calcul repl similar bc syntax highlight persist histori",
        "P-Tasks": "calcul express forc number decim place 5 calcul express sine cosin calcul result express run calcul interact mode",
        "Summary": "Simple calculator REPL, similar to `bc`, with syntax highlighting and persistent history.",
        "Task-Script": {
            "Calculate an expression forcing the number of decimal places to 5": "eva --fix {{5}} \"{{5 / 3}}\"",
            "Calculate an expression with sine and cosine": "eva \"{{sin(1) + cos(1)}}\"",
            "Calculate the result of an expression": "eva \"{{(1 + 2) * 2 ^ 2}}\"",
            "Run the calculator in interactive mode": "eva"
        }
    },
    "common_evil-winrm": {
        "Category": "common",
        "Command": "evil-winrm",
        "P-Summary": "window remot manag winrm shell pentest\nconnect get powershel prompt target host",
        "P-Tasks": "connect host connect host pass password hash connect host specifi folder script execut connect host use ssl get list load powershel function invok binari host -- execut folder load powershel script -- script folder upload file host",
        "Summary": "Windows Remote Management (WinRM) shell for pentesting.\nOnce connected, we get a PowerShell prompt on the target host.",
        "Task-Script": {
            "Connect to a host": "evil-winrm --ip {{ip}} --user {{user}} --password {{password}}",
            "Connect to a host, passing the password hash": "evil-winrm --ip {{ip}} --user {{user}} --hash {{nt_hash}}",
            "Connect to a host, specifying folders for scripts and executables": "evil-winrm --ip {{ip}} --user {{user}} --password {{password}} --scripts {{path/to/scripts}} --executables {{path/to/executables}}",
            "Connect to a host, using SSL": "evil-winrm --ip {{ip}} --user {{user}} --password {{password}} --ssl --pub-key {{path/to/pubkey}} --priv-key {{path/to/privkey}}",
            "Get a list of loaded PowerShell functions": "PS > menu",
            "Invoke a binary on the host from the `--executables` folder": "PS > Invoke-Binary {{binary.exe}}",
            "Load a PowerShell script from the `--scripts` folder": "PS > {{script.ps1}}",
            "Upload a file to the host": "PS > upload {{path/to/local/file}} {{path/to/remote/file}}"
        }
    },
    "common_exa": {
        "Category": "common",
        "Command": "exa",
        "P-Summary": "modern replac ls list directori content",
        "P-Tasks": "display tree file three level deep list file includ hidden file list file one per line list file sort modif date oldest first list file largest top long format list permiss ownership size modif date file",
        "Summary": "A modern replacement for `ls` (List directory contents).",
        "Task-Script": {
            "Display a tree of files, three levels deep": "exa --long --tree --level={{3}}",
            "List all files, including hidden files": "exa --all",
            "List files one per line": "exa --oneline",
            "List files sorted by modification date (oldest first)": "exa --long --sort={{modified}}",
            "List files with the largest at the top": "exa --reverse --sort={{size}}",
            "Long format list (permissions, ownership, size and modification date) of all files": "exa --long --all"
        }
    },
    "common_exec": {
        "Category": "common",
        "Command": "exec",
        "P-Summary": "replac current process anoth process",
        "P-Tasks": "replac specifi command chang process name replac specifi command login use default shell replac specifi command use current environ variabl replac specifi command clear environ variabl",
        "Summary": "Replace the current process with another process.",
        "Task-Script": {
            "Replace with the specified command and change the process name": "exec -a {{process_name}} {{command -with -flags}}",
            "Replace with the specified command and login using the default shell": "exec -l {{command -with -flags}}",
            "Replace with the specified command using the current environment variables": "exec {{command -with -flags}}",
            "Replace with the specified command, clearing environment variables": "exec -c {{command -with -flags}}"
        }
    },
    "common_exiftool": {
        "Category": "common",
        "Command": "exiftool",
        "P-Summary": "read write meta inform file",
        "P-Tasks": "move date jpeg photo current directori taken 1 day 2 hour backward move date photo directori taken 1 hour forward chang datetimeorigin field subtract 1 5 hour without keep backup recurs renam jpeg photo directori base datetimeorigin field remov exif metadata given file",
        "Summary": "Read and write meta information in files.",
        "Task-Script": {
            "Move the date at which all JPEG photos in the current directory were taken 1 day and 2 hours backward": "exiftool \"-AllDates-=0:0:1 2:0:0\" -ext jpg",
            "Move the date at which all photos in a directory were taken 1 hour forward": "exiftool \"-AllDates+=0:0:0 1:0:0\" {{path/to/directory}}",
            "Only change the `DateTimeOriginal` field subtracting 1.5 hours, without keeping backups": "exiftool -DateTimeOriginal-=1.5 -overwrite_original",
            "Recursively rename all JPEG photos in a directory based on the `DateTimeOriginal` field": "exiftool '-filename<DateTimeOriginal' -d %Y-%m-%d_%H-%M-%S%%lc.%%e {{path/to/directory}} -r -ext jpg",
            "Remove all EXIF metadata from the given files": "exiftool -All= {{file1 file2 ...}}"
        }
    },
    "common_exit": {
        "Category": "common",
        "Command": "exit",
        "P-Summary": "exit shell",
        "P-Tasks": "exit shell exit code last command execut exit shell specifi exit code",
        "Summary": "Exit the shell.",
        "Task-Script": {
            "Exit the shell with the exit code of the last command executed": "exit",
            "Exit the shell with the specified exit code": "exit {{exit_code}}"
        }
    },
    "common_exiv2": {
        "Category": "common",
        "Command": "exiv2",
        "P-Summary": "imag metadata manipul tool",
        "P-Tasks": "delet metadata imag delet metadata preserv file timestamp print summari imag exif metadata print metadata exif iptc xmp interpret valu print metadata raw valu renam file prepend date time metadata file timestamp",
        "Summary": "Image metadata manipulation tool.",
        "Task-Script": {
            "Delete all metadata from an image": "exiv2 -d a {{path/to/file}}",
            "Delete all metadata, preserving the file timestamp": "exiv2 -d a -k {{path/to/file}}",
            "Print a summary of the image Exif metadata": "exiv2 {{path/to/file}}",
            "Print all metadata (Exif, IPTC, XMP) with interpreted values": "exiv2 -P kt {{path/to/file}}",
            "Print all metadata with raw values": "exiv2 -P kv {{path/to/file}}",
            "Rename the file, prepending the date and time from metadata (not from the file timestamp)": "exiv2 -r {{'%Y%m%d_%H%M%S_:basename:'}} {{path/to/file}}"
        }
    },
    "common_expand": {
        "Category": "common",
        "Command": "expand",
        "P-Summary": "convert tab space",
        "P-Tasks": "convert tab file space write standard output convert tab space read standard input convert tab non blank tab certain number charact apart 8 use comma separ list explicit tab posit",
        "Summary": "Convert tabs to spaces.",
        "Task-Script": {
            "Convert tabs in each file to spaces, writing to standard output": "expand {{file}}",
            "Convert tabs to spaces, reading from standard input": "expand",
            "Do not convert tabs after non blanks": "expand -i {{file}}",
            "Have tabs a certain number of characters apart, not 8": "expand -t={{number}} {{file}}",
            "Use a comma separated list of explicit tab positions": "expand -t={{1,4,6}}"
        }
    },
    "common_expose": {
        "Category": "common",
        "Command": "expose",
        "P-Summary": "open sourc tunnel applic share websit",
        "P-Tasks": "regist authent token run expos server run expos server specif hostnam share local url share current work directori share current work directori specif subdomain",
        "Summary": "An open source tunnel application for sharing websites.",
        "Task-Script": {
            "Register your authentication token": "expose token {{token}}",
            "Run the Expose server": "expose serve",
            "Run the Expose server with a specific hostname": "expose serve {{hostname}}",
            "Share a local url": "expose share {{url}}",
            "Share the current working directory": "expose",
            "Share the current working directory with a specific subdomain": "expose --subdomain={{subdomain}}"
        }
    },
    "common_expr": {
        "Category": "common",
        "Command": "expr",
        "P-Summary": "evalu express manipul string",
        "P-Tasks": "evalu logic math express oper + - etc\nspecial symbol escap extract part string extract part string match regular express get posit first charact string match substr get string length",
        "Summary": "Evaluate expressions and manipulate strings.",
        "Task-Script": {
            "Evaluate logical or math expression with an operator ('+', '-', '*', '&', '|', etc.). Special symbols should be escaped": "expr {{first_argument}} {{operator}} {{second_argument}}",
            "Extract part of the string": "echo $(expr substr {{string}} {{position_to_start}} {{number_of_characters}}",
            "Extract part of the string which matches a regular expression": "echo $(expr {{string}} : '\\({{regular_expression}}\\)')",
            "Get position of the first character in 'string' that matches 'substring'": "echo $(expr index {{string}} {{substring}})",
            "Get string length": "expr length {{string}}"
        }
    },
    "common_f3fix": {
        "Category": "common",
        "Command": "f3fix",
        "P-Summary": "edit partit tabl fake flash drive\nsee also f3probe f3write f3read",
        "P-Tasks": "fill fake flash drive singl partit match real capac mark partit bootabl specifi filesystem",
        "Summary": "Edit the partition table of a fake flash drive.\nSee also `f3probe`, `f3write`, `f3read`.",
        "Task-Script": {
            "Fill a fake flash drive with a single partition that matches its real capacity": "sudo f3fix {{/dev/device_name}}",
            "Mark the partition as bootable": "sudo f3fix --boot {{/dev/device_name}}",
            "Specify the filesystem": "sudo f3fix --fs-type={{filesystem_type}} {{/dev/device_name}}"
        }
    },
    "common_f3probe": {
        "Category": "common",
        "Command": "f3probe",
        "P-Summary": "probe block devic e g\nflash drive microsd card counterfeit flash memori\nsee also f3read f3write f3fix",
        "P-Tasks": "probe block devic time disk oper use minimum ram possibl",
        "Summary": "Probe a block device (e.g. a flash drive or a microSD card) for counterfeit flash memory.\nSee also `f3read`, `f3write`, `f3fix`.",
        "Task-Script": {
            "Probe a block device": "sudo f3probe {{path/to/block_device}}",
            "Time disk operations": "sudo f3probe --time-ops {{path/to/block_device}}",
            "Use the minimum about of RAM possible": "sudo f3probe --min-memory {{path/to/block_device}}"
        }
    },
    "common_f3read": {
        "Category": "common",
        "Command": "f3read",
        "P-Summary": "valid h2w file test real capac drive\nsee also f3write f3probe f3fix",
        "P-Tasks": "valid devic check file given directori",
        "Summary": "Validate .h2w files to test the real capacity of the drive.\nSee also `f3write`, `f3probe`, `f3fix`.",
        "Task-Script": {
            "Validate a device by checking the files in a given directory": "f3read {{path/to/mount_point}}"
        }
    },
    "common_f3write": {
        "Category": "common",
        "Command": "f3write",
        "P-Summary": "fill drive h2w file test real capac\nsee also f3read f3probe f3fix",
        "P-Tasks": "limit write speed write test file given directori fill drive",
        "Summary": "Fill a drive out with .h2w files to test its real capacity.\nSee also `f3read`, `f3probe`, `f3fix`.",
        "Task-Script": {
            "Limit the write speed": "f3write --max-write-rate={{kb_per_second}} {{path/to/mount_point}}",
            "Write test files to a given directory, filling the drive": "f3write {{path/to/mount_point}}"
        }
    },
    "common_factor": {
        "Category": "common",
        "Command": "factor",
        "P-Summary": "print prime factor number",
        "P-Tasks": "display prime-factor number take input stdin argument specifi",
        "Summary": "Prints the prime factorization of a number.",
        "Task-Script": {
            "Display the prime-factorization of a number": "factor {{number}}",
            "Take the input from `stdin` if no argument is specified": "echo {{number}} | factor"
        }
    },
    "common_false": {
        "Category": "common",
        "Command": "false",
        "P-Summary": "return exit code 1",
        "P-Tasks": "return exit code 1",
        "Summary": "Returns an exit code of 1.",
        "Task-Script": {
            "Return an exit code of 1": "false"
        }
    },
    "common_fastboot": {
        "Category": "common",
        "Command": "fastboot",
        "P-Summary": "commun connect android devic bootload mode one place adb work",
        "P-Tasks": "display inform devic display connect devic flash custom recoveri imag flash given imag reboot devic fastboot mode fastboot mode relock bootload unlock bootload",
        "Summary": "Communicate with connected Android devices when in bootloader mode (the one place `adb` doesn't work).",
        "Task-Script": {
            "Display all information of a device": "fastboot getvar all",
            "Display connected devices": "fastboot devices",
            "Flash a custom recovery image": "fastboot flash recovery {{file.img}}",
            "Flash a given image": "fastboot flash {{file.zip}}",
            "Reboot the device from fastboot mode into fastboot mode again": "fastboot reboot bootloader",
            "Relock the bootloader": "fastboot oem lock",
            "Unlock the bootloader": "fastboot oem unlock"
        }
    },
    "common_fd": {
        "Category": "common",
        "Command": "fd",
        "P-Summary": "altern find\naim faster easier use find",
        "P-Tasks": "find file specif directori find file begin foo find file specif extens includ ignor hidden file search recurs find file match given pattern current directori",
        "Summary": "An alternative to `find`.\nAims to be faster and easier to use than `find`.",
        "Task-Script": {
            "Find files in a specific directory": "fd {{pattern}} {{path/to/dir}}",
            "Find files that begin with \"foo\"": "fd {{'^foo'}}",
            "Find files with a specific extension": "fd --extension {{txt}}",
            "Include ignored and hidden files in the search": "fd --hidden --no-ignore {{pattern}}",
            "Recursively find files matching the given pattern in the current directory": "fd {{pattern}}"
        }
    },
    "common_fdroid": {
        "Category": "common",
        "Command": "fdroid",
        "P-Summary": "f-droid build tool\nf-droid instal catalogu foss free open sourc softwar applic android platform",
        "P-Tasks": "build specif app build specif app build server vm check metadata format correctli fix format automat possibl instal app everi connect devic publish app local repositori",
        "Summary": "F-Droid build tool.\nF-Droid is an installable catalogue of FOSS (Free and Open Source Software) applications for the Android platform.",
        "Task-Script": {
            "Build a specific app": "fdroid build {{app_id}}",
            "Build a specific app in a build server VM": "fdroid build {{app_id}} --server",
            "Check if the metadata is formatted correctly": "fdroid lint --format {{app_id}}",
            "Fix the formatting automatically (if possible)": "fdroid rewritemeta {{app_id}}",
            "Install the app on every connected device": "fdroid install {{app_id}}",
            "Publish the app to the local repository": "fdroid publish {{app_id}}"
        }
    },
    "common_fdroidcl": {
        "Category": "common",
        "Command": "fdroidcl",
        "P-Summary": "f-droid cli client",
        "P-Tasks": "display info app download apk file fetch f-droid index instal app connect devic search app index",
        "Summary": "F-Droid CLI client.",
        "Task-Script": {
            "Display info about an app": "fdroidcl show {{app_id}}",
            "Download an APK file": "fdroidcl download {{app_id}}",
            "Fetch the F-Droid index": "fdroidcl update",
            "Install an app on a connected device": "fdroidcl install {{app_id}}",
            "Search for an app in the index": "fdroidcl search {{search_pattern}}"
        }
    },
    "common_fdupes": {
        "Category": "common",
        "Command": "fdupes",
        "P-Summary": "find duplic file given set directori",
        "P-Tasks": "search singl directori search directori recurs search multipl directori search multipl directori one recurs",
        "Summary": "Finds duplicate files in a given set of directories.",
        "Task-Script": {
            "Search a single directory": "fdupes {{directory}}",
            "Search all directories recursively": "fdupes -r {{directory}}",
            "Search multiple directories": "fdupes {{directory1}} {{directory2}}",
            "Search multiple directories, one recursively": "fdupes {{directory1}} -R {{directory2}}"
        }
    },
    "common_ffmpeg": {
        "Category": "common",
        "Command": "ffmpeg",
        "P-Summary": "video convers tool",
        "P-Tasks": "combin number imag frame_1 jpg frame_2 jpg etc video gif convert avi video mp4\naac audio 128kbit h264 video crf 23 convert mp4 video vp9 codec\nbest qualiti use crf valu recommend rang 15-35 -b : video must 0 convert frame video gif individu number imag extract sound video save mp3 quickli extract singl frame video time mm : ss save 128x128 resolut imag remux mkv video mp4 without re-encod audio video stream trim video given start time mm : ss end time mm2 : ss2 omit -to flag trim till end",
        "Summary": "Video conversion tool.",
        "Task-Script": {
            "Combine numbered images (frame_1.jpg, frame_2.jpg, etc) into a video or GIF": "ffmpeg -i {{frame_%d.jpg}} -f image2 {{video.mpg|video.gif}}",
            "Convert AVI video to MP4. AAC Audio @ 128kbit, h264 Video @ CRF 23": "ffmpeg -i {{input_video}}.avi -codec:audio aac -b:audio 128k -codec:video libx264 -crf 23 {{output_video}}.mp4",
            "Convert MP4 video to VP9 codec. For the best quality, use a CRF value (recommended range 15-35) and -b:video MUST be 0": "ffmpeg -i {{input_video}}.mp4 -codec:video libvpx-vp9 -crf {{30}} -b:video 0 -codec:audio libopus -vbr on -threads {{number_of_threads}} {{output_video}}.webm",
            "Convert frames from a video or GIF into individual numbered images": "ffmpeg -i {{video.mpg|video.gif}} {{frame_%d.png}}",
            "Extract the sound from a video and save it as MP3": "ffmpeg -i {{video.mp4}} -vn {{sound}}.mp3",
            "Quickly extract a single frame from a video at time mm:ss and save it as a 128x128 resolution image": "ffmpeg -ss {{mm:ss}} -i {{video.mp4}} -frames 1 -s {{128x128}} -f image2 {{image.png}}",
            "Remux MKV video to MP4 without re-encoding audio or video streams": "ffmpeg -i {{input_video}}.mkv -codec copy {{output_video}}.mp4",
            "Trim a video from a given start time mm:ss to an end time mm2:ss2 (omit the -to flag to trim till the end)": "ffmpeg -ss {{mm:ss}} -to {{mm2:ss2}} -i {{video.mp4}} -codec copy {{output.mp4}}"
        }
    },
    "common_ffprobe": {
        "Category": "common",
        "Command": "ffprobe",
        "P-Summary": "multimedia stream analyz",
        "P-Tasks": "display avail stream info media file display media durat display averag bit rate video display frame rate video display width height video",
        "Summary": "Multimedia stream analyzer.",
        "Task-Script": {
            "Display all available stream info for a media file": "ffprobe -v error -show_entries {{input.mp4}}",
            "Display media duration": "ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 {{input.mp4}}",
            "Display the average bit rate of a video": "ffprobe -v error -select_streams v:0 -show_entries stream=bit_rate -of default=noprint_wrappers=1:nokey=1 {{input.mp4}}",
            "Display the frame rate of a video": "ffprobe -v error -select_streams v:0 -show_entries stream=avg_frame_rate -of default=noprint_wrappers=1:nokey=1 {{input.mp4}}",
            "Display the width or height of a video": "ffprobe -v error -select_streams v:0 -show_entries stream={{width|height}} -of default=noprint_wrappers=1:nokey=1 {{input.mp4}}"
        }
    },
    "common_ffsend": {
        "Category": "common",
        "Command": "ffsend",
        "P-Summary": "easili secur share file command line",
        "P-Tasks": "download file download file protect password upload file upload file allow 4 download upload file password",
        "Summary": "Easily and securely share files from command line.",
        "Task-Script": {
            "Download a file": "ffsend download {{url}}",
            "Download a file protected by password": "ffsend download {{file}} -p {{password}}",
            "Upload a file": "ffsend upload {{file}}",
            "Upload a file and allow 4 downloads": "ffsend upload {{file}} -d {{4}}",
            "Upload a file with password": "ffsend upload {{file}} -p {{password}}"
        }
    },
    "common_fg": {
        "Category": "common",
        "Command": "fg",
        "P-Summary": "run job foreground",
        "P-Tasks": "bring specif job foreground bring recent suspend background job foreground",
        "Summary": "Run jobs in foreground.",
        "Task-Script": {
            "Bring a specific job to foreground": "fg {{job_id}}",
            "Bring most recently suspended background job to foreground": "fg"
        }
    },
    "common_fgrep": {
        "Category": "common",
        "Command": "fgrep",
        "P-Summary": "match pattern file\nsupport simpl pattern regular express",
        "P-Tasks": "count number line match given string file display line except contain given regular express display filenam whose content match regular express least search exact string file search line match entir file show line number file along line match",
        "Summary": "Matches patterns in files.\nSupports simple patterns and regular expressions.",
        "Task-Script": {
            "Count the number of lines that match the given string in a file": "fgrep -c {{search_string}} {{path/to/file}}",
            "Display all lines except those that contain the given regular expression": "fgrep -v {{^regex$}} {{path/to/file}}",
            "Display filenames whose content matchs the regular expression at least once": "fgrep -l {{^regex$}} {{path/to/file1}} {{path/to/file2}}",
            "Search for an exact string in a file": "fgrep {{search_string}} {{path/to/file}}",
            "Search only lines that match entirely in files": "fgrep -x {{path/to/file1}} {{path/to/file2}}",
            "Show the line number in the file along with the line matched": "fgrep -n {{search_string}} {{path/to/file}}"
        }
    },
    "common_figlet": {
        "Category": "common",
        "Command": "figlet",
        "P-Summary": "gener ascii banner user input",
        "P-Tasks": "gener directli input text pipe command output figlet show avail figlet font use custom font file",
        "Summary": "Generate ASCII banners from user input.",
        "Task-Script": {
            "Generate by directly inputting text": "figlet {{input_text}}",
            "Pipe command output through figlet": "{{command}} | figlet",
            "Show available figlet fonts": "showfigfonts {{optional_string_to_display}}",
            "Use a custom font file": "figlet {{input_text}} -f {{font_filename}}"
        }
    },
    "common_fin": {
        "Category": "common",
        "Command": "fin",
        "P-Summary": "docksal command line util",
        "P-Tasks": "display log specif contain display log specif contain follow log open shell specif contain start project current directori stop project current directori",
        "Summary": "Docksal command line utility.",
        "Task-Script": {
            "Display logs of a specific container": "fin logs {{container_name}}",
            "Display logs of a specific container and follow the log": "fin logs -f {{container_name}}",
            "Open a shell into a specific container": "fin bash {{container_name}}",
            "Start the project in the current directory": "fin project start",
            "Stop the project in the current directory": "fin project stop"
        }
    },
    "common_find": {
        "Category": "common",
        "Command": "find",
        "P-Summary": "find file directori given directori tree recurs",
        "P-Tasks": "find directori match given name case-insensit mode find file extens find file match multipl pattern find file match given pattern exclud specif path find file match given size rang find file match path pattern find file modifi last 7 day delet run command file use within command access filenam",
        "Summary": "Find files or directories under the given directory tree, recursively.",
        "Task-Script": {
            "Find directories matching a given name, in case-insensitive mode": "find {{root_path}} -type d -iname '{{*lib*}}'",
            "Find files by extension": "find {{root_path}} -name '{{*.ext}}'",
            "Find files by matching multiple patterns": "find {{root_path}} -name '{{*pattern_1*}}' -or -name '{{*pattern_2*}}'",
            "Find files matching a given pattern, excluding specific paths": "find {{root_path}} -name '{{*.py}}' -not -path '{{*/site-packages/*}}'",
            "Find files matching a given size range": "find {{root_path}} -size {{+500k}} -size {{-10M}}",
            "Find files matching a path pattern": "find {{root_path}} -path '{{**/lib/**/*.ext}}'",
            "Find files modified in the last 7 days, and delete them": "find {{root_path}} -mtime {{-7}} -delete",
            "Run a command for each file (use `{}` within the command to access the filename)": "find {{root_path}} -name '{{*.ext}}' -exec {{wc -l {} }}\\;"
        }
    },
    "common_finger": {
        "Category": "common",
        "Command": "finger",
        "P-Summary": "user inform lookup program",
        "P-Tasks": "display inform specif user display inform current log user display user login name real name termin name inform prevent match user name use login name produc multi-lin output format display inform -s well user home directori home phone number login shell mail statu etc",
        "Summary": "User information lookup program.",
        "Task-Script": {
            "Display information about a specific user": "finger {{username}}",
            "Display information about currently logged in users": "finger",
            "Display the user's login name, real name, terminal name, and other information": "finger -s",
            "Prevent matching against user's names and only use login names": "finger -m",
            "Produce multi-line output format displaying same information as `-s` as well as user's home directory, home phone number, login shell, mail status, etc.": "finger -l"
        }
    },
    "common_firebase": {
        "Category": "common",
        "Command": "firebase",
        "P-Summary": "firebas command line interfac cli tool\nuse test manag deploy firebas project command line",
        "P-Tasks": "deploy code asset project current directori display help list exist firebas project login setup firebas current directori",
        "Summary": "Firebase Command Line Interface (CLI) Tools.\nUsed to test, manage, and deploy your Firebase project from the command line.",
        "Task-Script": {
            "Deploy code and assets to the project in the current directory": "firebase deploy",
            "Display the help": "firebase help",
            "List existing firebase projects": "firebase project:list",
            "Login": "firebase login",
            "Setup a firebase in the current directory": "firebase init {{options}} {{feature}}"
        }
    },
    "common_firefox": {
        "Category": "common",
        "Command": "firefox",
        "P-Summary": "free open sourc web browser",
        "P-Tasks": "launch firefox open web page launch firefox safe mode extens disabl open new window open privat incognito window search wikipedia use default search engin set firefox default browser take screenshot web page headless mode use specif profil allow multipl separ instanc firefox run",
        "Summary": "A free and open source web browser.",
        "Task-Script": {
            "Launch Firefox and open a web page": "firefox {{https://www.duckduckgo.com}}",
            "Launch Firefox in safe mode, with all extensions disabled": "firefox --safe-mode",
            "Open a new window": "firefox --new-window {{https://www.duckduckgo.com}}",
            "Open a private (incognito) window": "firefox --private-window",
            "Search for \"wikipedia\" using the default search engine": "firefox --search \"{{wikipedia}}\"",
            "Set Firefox as the default browser": "firefox --setDefaultBrowser",
            "Take a screenshot of a web page in headless mode": "firefox --headless --screenshot {{path/to/output_file.png}} {{https://example.com/}}",
            "Use a specific profile to allow multiple separate instances of Firefox to run at once": "firefox --profile {{path/to/directory}} {{https://example.com/}}"
        }
    },
    "common_fish": {
        "Category": "common",
        "Command": "fish",
        "P-Summary": "friendli interact shell\ncommand-lin interpret design user friendli",
        "P-Tasks": "check file syntax error display version inform exit execut command run command file set export environment variabl persist across restart start interact shell",
        "Summary": "The Friendly Interactive SHell.\nA command-line interpreter designed to be user friendly.",
        "Task-Script": {
            "Check a file for syntax errors": "fish --no-execute {{file.fish}}",
            "Display version information and exit": "fish --version",
            "Execute a command": "fish -c \"{{command}}\"",
            "Run commands from a file": "fish {{file.fish}}",
            "Set and export environmental variables that persist across restarts": "set -Ux {{variable_name}} {{variable_value}}",
            "Start interactive shell": "fish"
        }
    },
    "common_fisher": {
        "Category": "common",
        "Command": "fisher",
        "P-Summary": "fisher fish-shel plugin manag\ninstal plugin name manag fishfil bundl instal",
        "P-Tasks": "edit fishfil hand favorit editor instal multipl plugin instal plugin github gist instal one plugin list instal plugin remov one plugin show avail plugin updat plugin",
        "Summary": "Fisher, a fish-shell plugin manager.\nInstall plugins by name or from a managed 'fishfile' for bundled installs.",
        "Task-Script": {
            "Edit 'fishfile' by hand with your favorite editor and install multiple plugins": "{{editor}} ~/.config/fish/fishfile; fisher",
            "Install a plugin from a GitHub gist": "fisher {{gist_url}}",
            "Install one or more plugins": "fisher {{plugin1}} {{plugin2}}",
            "List installed plugins": "fisher ls",
            "Remove one or more plugins": "fisher rm {{plugin1}} {{plugin2}}",
            "Show available plugins": "fisher ls-remote",
            "Update plugins": "fisher up"
        }
    },
    "common_fkill": {
        "Category": "common",
        "Command": "fkill",
        "P-Summary": "fabul kill process\ncross-platform",
        "P-Tasks": "kill process pid name port run without argument use interact interfac",
        "Summary": "Fabulously kill processes. Cross-platform.",
        "Task-Script": {
            "Kill the process by pid, name or port": "fkill {{pid|name|:port}}",
            "Run without arguments to use the interactive interface": "fkill"
        }
    },
    "common_flac": {
        "Category": "common",
        "Command": "flac",
        "P-Summary": "encod decod test flac file",
        "P-Tasks": "decod flac file wav specifi output file encod wav file flac creat flac file locat wav file encod wav file flac specifi output file test flac file correct encod",
        "Summary": "Encodes, decodes and tests flac files.",
        "Task-Script": {
            "Decode a flac file to wav, specifying the output file": "flac -d -o {{path/to/output.wav}} {{path/to/file.flac}}",
            "Encode a wav file to flac (this will create a flac file in the same location as the wav file)": "flac {{path/to/file.wav}}",
            "Encode a wav file to flac, specifying the output file": "flac -o {{path/to/output.flac}} {{path/to/file.wav}}",
            "Test a flac file for the correct encoding": "flac -t {{path/to/file.flac}}"
        }
    },
    "common_flask": {
        "Category": "common",
        "Command": "flask",
        "P-Summary": "gener util script flask applic\nload applic defin flask_app environ variabl",
        "P-Tasks": "run python interact shell app context run develop server show rout app",
        "Summary": "A general utility script for Flask applications. Loads the application defined in the `FLASK_APP` environment variable.",
        "Task-Script": {
            "Run a Python interactive shell in the app's context": "flask shell",
            "Run a development server": "flask run",
            "Show the routes for the app": "flask routes"
        }
    },
    "common_flex": {
        "Category": "common",
        "Command": "flex",
        "P-Summary": "lexic analys gener\nbase lex\ngiven specif lexic analys gener c code implement",
        "P-Tasks": "compil c file gener flex gener analys flex file specifi output file",
        "Summary": "Lexical analyser generator. Based on `lex`.\nGiven the specification for a lexical analyser, generates C code implementing it.",
        "Task-Script": {
            "Compile a C file generated by flex": "cc {{path/to/lex.yy.c}} --output {{executable}}",
            "Generate an analyser from a flex file": "flex {{analyser.l}}",
            "Specify the output file": "flex --outfile {{analyser.c}} {{analyser.l}}"
        }
    },
    "common_fls": {
        "Category": "common",
        "Command": "fls",
        "P-Summary": "list file directori imag file devic",
        "P-Tasks": "analys singl partit provid sector offset filesystem start imag analys singl partit provid timezon origin system build recurs fl list devic output path start c",
        "Summary": "List files and directories in an image file or device.",
        "Task-Script": {
            "Analyse a single partition, providing the sector offset at which the filesystem starts in the image": "fls -r -m {{C:}} -o {{sector}} {{path/to/image_file}}",
            "Analyse a single partition, providing the timezone of the original system": "fls -r -m {{C:}} -z {{timezone}} {{/dev/loop1p1}}",
            "Build a recursive fls list over a device, output paths will start with C": "fls -r -m {{C:}} {{/dev/loop1p1}}"
        }
    },
    "common_flutter": {
        "Category": "common",
        "Command": "flutter",
        "P-Summary": "googl free open sourc cross-platform mobil app sdk",
        "P-Tasks": "check flutter version display gener help display help specif command execut flutter command list chang flutter channel run flutter start emul connect devic run test termin root project show inform instal tool",
        "Summary": "Google's free, open source, and cross-platform mobile app SDK.",
        "Task-Script": {
            "Check the Flutter version": "flutter --version",
            "Display general help": "flutter help",
            "Display help about a specific command": "flutter help {{command}}",
            "Execute a Flutter command": "flutter {{command}}",
            "List or change Flutter channel": "flutter channel {{stable|beta|dev|master}}",
            "Run Flutter on all started emulators and connected devices": "flutter run -d all",
            "Run tests in a terminal from the root of the project": "flutter test {{test/example_test.dart}}",
            "Show information about the installed tooling": "flutter doctor"
        }
    },
    "common_fly": {
        "Category": "common",
        "Command": "fly",
        "P-Summary": "command line tool concourse-ci",
        "P-Tasks": "authent save concours target destroy pipelin list pipelin list target show pipelin configur unpaus pipelin updat local copi fli upload updat pipelin",
        "Summary": "Command line tool for concourse-ci.",
        "Task-Script": {
            "Authenticate with and save concourse target": "fly --target {{target_name}} login --team-name {{team_name}} -c {{https://ci.example.com}}",
            "Destroy pipeline": "fly -t {{target_name}} destroy-pipeline --pipeline {{pipeline_name}}",
            "List pipelines": "fly -t {{target_name}} pipelines",
            "List targets": "fly targets",
            "Show pipeline configuration": "fly -t {{target_name}} get-pipeline --pipeline {{pipeline_name}}",
            "Unpause pipeline": "fly -t {{target_name}} unpause-pipeline --pipeline {{pipeline_name}}",
            "Update local copy of fly": "fly -t {{target_name}} sync",
            "Upload or update a pipeline": "fly -t {{target_name}} set-pipeline --config {{pipeline.yml}} --pipeline {{pipeline_name}}"
        }
    },
    "common_fmt": {
        "Category": "common",
        "Command": "fmt",
        "P-Summary": "reformat text file join paragraph limit line width given number charact 75 default",
        "P-Tasks": "reformat file reformat file produc output line n charact reformat file uniform space 1 space word 2 space paragraph reformat file without join line shorter given width togeth",
        "Summary": "Reformat a text file by joining its paragraphs and limiting the line width to given number of characters (75 by default).",
        "Task-Script": {
            "Reformat a file": "fmt {{path/to/file}}",
            "Reformat a file producing output lines of (at most) `n` characters": "fmt -w {{n}} {{path/to/file}}",
            "Reformat a file with uniform spacing (1 space between words and 2 spaces between paragraphs)": "fmt -u {{path/to/file}}",
            "Reformat a file without joining lines shorter than the given width together": "fmt -s {{path/to/file}}"
        }
    },
    "common_fnm": {
        "Category": "common",
        "Command": "fnm",
        "P-Summary": "fast node js version manag\ninstal uninstal switch node js version\ninfo : http : github com schniz fnm",
        "P-Tasks": "instal specif version node js list avail node js version highlight default one set default node js version uninstal given node js version use specif version node js current shell",
        "Summary": "Fast Node.js version manager.\nInstall, uninstall or switch between Node.js versions.\nMore info: <https://github.com/Schniz/fnm>.",
        "Task-Script": {
            "Install a specific version of Node.js": "fnm install {{node_version}}",
            "List all available Node.js versions and highlight the default one": "fnm ls",
            "Set the default Node.js version": "fnm default {{node_version}}",
            "Uninstall a given Node.js version": "fnm uninstall {{node_version}}",
            "Use a specific version of Node.js in the current shell": "fnm use {{node_version}}"
        }
    },
    "common_fold": {
        "Category": "common",
        "Command": "fold",
        "P-Summary": "wrap line input file fit specifi width print standard output",
        "P-Tasks": "wrap line default width 80 charact wrap line width 30 wrap line width 5 break line space put space separ word new line word length 5 wrap",
        "Summary": "Wraps each line in an input file to fit a specified width and prints it to the standard output.",
        "Task-Script": {
            "Wrap each line to default width (80 characters)": "fold {{file}}",
            "Wrap each line to width \"30\"": "fold -w30 {{file}}",
            "Wrap each line to width \"5\" and break the line at spaces (puts each space separated word in a new line, words with length > 5 are wrapped)": "fold -w5 -s {{file}}"
        }
    },
    "common_for": {
        "Category": "common",
        "Command": "for",
        "P-Summary": "shell loop paramet",
        "P-Tasks": "perform command everi directori perform command differ argument",
        "Summary": "Shell loop over parameters.",
        "Task-Script": {
            "Perform a command in every directory": "for d in *; do (cd $d; {{command}}); done",
            "Perform a command with different arguments": "for argument in 1 2 3; do {{command $argument}}; done"
        }
    },
    "common_forever": {
        "Category": "common",
        "Command": "forever",
        "P-Summary": "server-sid javascript applic make sure node js applic run indefinit restart exit",
        "P-Tasks": "list run forev process along id detail forev process start run file forev daemon stop run forev process",
        "Summary": "Server-side JavaScript application that makes sure Node.js applications run indefinitely (restarts after exit).",
        "Task-Script": {
            "List running \"forever\" processes (along with IDs and other details of \"forever\" processes)": "forever list",
            "Start running a file forever (as a daemon)": "forever {{script}}",
            "Stop a running \"forever\" process": "forever stop {{ID|pid|script}}"
        }
    },
    "common_fortune": {
        "Category": "common",
        "Command": "fortune",
        "P-Summary": "print random quotat fortune-cooki style",
        "P-Tasks": "list avail quotat databas file print long quotat print quotat print quotat one databas file list fortun -f print short quotat print offens quotat",
        "Summary": "Print a random quotation (fortune-cookie style).",
        "Task-Script": {
            "List the available quotation database files": "fortune -f",
            "Print a long quotation": "fortune -l",
            "Print a quotation": "fortune",
            "Print a quotation from one of the database files listed by `fortune -f`": "fortune {{filename}}",
            "Print a short quotation": "fortune -s",
            "Print an offensive quotation": "fortune -o"
        }
    },
    "common_fossa": {
        "Category": "common",
        "Command": "fossa",
        "P-Summary": "cli fossa servic - gener realtim licens audit vulner scan report depend licens",
        "P-Tasks": "analyz built depend gener report initi fossa yml configur file run default project build test current revis fossa scan statu exit error issu found",
        "Summary": "CLI for the Fossa service - Generate realtime license audits, vulnerability scans and reports about dependencies licenses.",
        "Task-Script": {
            "Analyze built dependencies": "fossa analyze",
            "Generate reports": "fossa report",
            "Initialize a `.fossa.yml` configuration file": "fossa init",
            "Run a default project build": "fossa build",
            "Test current revision against the FOSSA scan status and exit with errors if issues are found": "fossa test"
        }
    },
    "common_fping": {
        "Category": "common",
        "Command": "fping",
        "P-Summary": "power ping ping multipl host",
        "P-Tasks": "list aliv host within subnet gener netmask list aliv host within subnet gener ip rang list unreach host within subnet gener netmask",
        "Summary": "A more powerful ping which can ping multiple hosts.",
        "Task-Script": {
            "List alive hosts within a subnet generated from a netmask": "fping -a -g 192.168.1.0/24",
            "List alive hosts within a subnet generated from an IP range": "fping -a -g 192.168.1.1 192.168.1.254",
            "List unreachable hosts within a subnet generated from a netmask": "fping -u -g 192.168.1.0/24"
        }
    },
    "common_fselect": {
        "Category": "common",
        "Command": "fselect",
        "P-Summary": "find file sql-like queri",
        "P-Tasks": "find old-school rap 320kbp mp3 file find squar imag select full path size temporari config file given directori select first 5 result output json use sql aggreg function calcul minimum maximum averag size file directori",
        "Summary": "Find files with SQL-like queries.",
        "Task-Script": {
            "Find old-school rap 320kbps MP3 files": "fselect path from {{path/to/directory}} where genre = {{Rap}} and bitrate = {{320}} and mp3_year lt {{2000}}",
            "Find square images": "fselect path from {{path/to/directory}} where width = height",
            "Select full path and size from temporary or config files in a given directory": "fselect size, path from {{path/to/directory}} where name = {{'*.cfg'}} or name = {{'*.tmp'}}",
            "Select only the first 5 results and output as JSON": "fselect size, path from {{path/to/directory}} limit {{5}} into json",
            "Use SQL aggregate functions to calculate minimum, maximum and average size of files in a directory": "fselect \"{{MIN(size), MAX(size), AVG(size), SUM(size), COUNT(*)}} from {{path/to/directory}}\""
        }
    },
    "common_fswatch": {
        "Category": "common",
        "Command": "fswatch",
        "P-Summary": "cross-platform file chang monitor",
        "P-Tasks": "filter event type eg\nupdat delet creat print absolut path chang file run bash command file creation updat delet watch one file directori",
        "Summary": "A cross-platform file change monitor.",
        "Task-Script": {
            "Filter by event type, eg. Updated, Deleted or Created": "fswatch --event {{Updated}} {{path/to/directory}} | xargs -n 1 {{bash_command}}",
            "Print the absolute paths of the changed files": "fswatch {{path/to/directory}} | xargs -n 1 -I {} echo {}",
            "Run a bash command on file creation, update or deletion": "fswatch {{path/to/file}} | xargs -n 1 {{bash_command}}",
            "Watch one or more files and/or directories": "fswatch {{path/to/file}} {{path/to/directory}} {{path/to/another_directory/**/*.js}} | xargs -n 1 {{bash_command}}"
        }
    },
    "common_fswebcam": {
        "Category": "common",
        "Command": "fswebcam",
        "P-Summary": "small simpl webcam nix",
        "P-Tasks": "take pictur take pictur select devic default dev video0 take pictur custom resolut take pictur timestamp timestamp string format strftime",
        "Summary": "Small and simple webcam for *nix.",
        "Task-Script": {
            "Take a picture": "fswebcam {{filename}}",
            "Take a picture from selected device(Default is /dev/video0)": "fswebcam -d {{device}} {{filename}}",
            "Take a picture with custom resolution": "fswebcam -r {{width}}x{{height}} {{filename}}",
            "Take a picture with timestamp(timestamp string is formatted by strftime)": "fswebcam --timestamp {{timestamp}} {{filename}}"
        }
    },
    "common_ftp": {
        "Category": "common",
        "Command": "ftp",
        "P-Summary": "tool interact server via file transfer protocol",
        "P-Tasks": "connect ftp server delet multipl file remot server download multipl file glob express renam file remot server switch binari transfer mode graphic compress file etc transfer multipl file without prompt confirm everi file upload multipl file glob express",
        "Summary": "Tools to interact with a server via File Transfer Protocol.",
        "Task-Script": {
            "Connect to an FTP server": "ftp {{ftp.example.com}}",
            "Delete multiple files on the remote server": "mdelete {{*.txt}}",
            "Download multiple files (glob expression)": "mget {{*.png}}",
            "Rename a file on the remote server": "rename {{original_filename}} {{new_filename}}",
            "Switch to binary transfer mode (graphics, compressed files, etc)": "binary",
            "Transfer multiple files without prompting for confirmation on every file": "prompt off",
            "Upload multiple files (glob expression)": "mput {{*.zip}}"
        }
    },
    "common_fuck": {
        "Category": "common",
        "Command": "fuck",
        "P-Summary": "correct previou consol command",
        "P-Tasks": "set fuck alia thefuck tool tri match rule previou command",
        "Summary": "Corrects your previous console command.",
        "Task-Script": {
            "Set the `fuck` alias to `thefuck` tool": "eval \"$(thefuck --alias)\"",
            "Try to match a rule for the previous command": "fuck"
        }
    },
    "common_func": {
        "Category": "common",
        "Command": "func",
        "P-Summary": "azur function core tool : develop test azur function local\nlocal function connect live azur servic deploy function app azur subscript",
        "P-Tasks": "creat new function creat new function project download set exist function app get connect string specif storag account publish code function app azur run function local",
        "Summary": "Azure Functions Core Tools: Develop and test Azure Functions locally.\nLocal functions can connect to live Azure services, and can deploy a function app to an Azure subscription.",
        "Task-Script": {
            "Create a new function": "func new",
            "Create a new functions project": "func init {{project}}",
            "Download all settings from an existing function app": "func azure functionapp fetch-app-settings {{function}}",
            "Get the connection string for a specific storage account": "func azure storage fetch-connection-string {{storage_account}}",
            "Publish your code to a function app in Azure": "func azure functionapp publish {{function}}",
            "Run functions locally": "func start"
        }
    },
    "common_fzf": {
        "Category": "common",
        "Command": "fzf",
        "P-Summary": "command line fuzzi finder",
        "P-Tasks": "select multipl file shift + tab write file start finder file arbitrari locat start finder entri match pyc match exactli travi start finder entri start core end either go rb py start finder run process start finder given queri",
        "Summary": "Command line fuzzy finder.",
        "Task-Script": {
            "Select multiple files with `Shift + Tab` and write to a file": "find {{path/to/search_files}} -type f | fzf -m > {{filename}}",
            "Start finder on all files from arbitrary locations": "find {{path/to/search}} -type f | fzf",
            "Start finder on entries that not match pyc and match exactly travis": "fzf -q \"!pyc 'travis\"",
            "Start finder on entries that start with core and end with either go, rb, or py": "fzf -q \"^core go$ | rb$ | py$\"",
            "Start finder on running processes": "ps aux | fzf",
            "Start finder with a given query": "fzf -q \"{{query}}\""
        }
    },
    "common_gatsby": {
        "Category": "common",
        "Command": "gatsby",
        "P-Summary": "static site gener react",
        "P-Tasks": "creat new site creat new site gatsbi starter perform product build gener static html start live-reload local develop server start local server serv product build",
        "Summary": "Static site generator for React.",
        "Task-Script": {
            "Create a new site": "gatsby new {{site_name}}",
            "Create a new site with a Gatsby 'starter'": "gatsby new {{site_name}} {{url_of_starter_github_repo}}",
            "Perform a production build and generate static HTML": "gatsby build",
            "Start a live-reloading local development server": "gatsby develop",
            "Start a local server which serves the production build": "gatsby serve"
        }
    },
    "common_gcal": {
        "Category": "common",
        "Command": "gcal",
        "P-Summary": "display calendar",
        "P-Tasks": "chang start day week 1st day week monday display calendar current month display calendar month februari year 2010 display previou current next month surround today provid calendar sheet week number",
        "Summary": "Displays calendar.",
        "Task-Script": {
            "Change starting day of week to 1st day of the week (Monday)": "gcal --starting-day={{1}}",
            "Display calendar for the current month": "gcal",
            "Display calendar for the month of February of the year 2010": "gcal {{2}} {{2010}}",
            "Display the previous, current and next month surrounding today": "gcal .",
            "Provide calendar sheet with week numbers": "gcal --with-week-number"
        }
    },
    "common_gcalcli": {
        "Category": "common",
        "Command": "gcalcli",
        "P-Summary": "command line tool interact googl calendar\nrequest googl api author upon first launch",
        "P-Tasks": "add event calendar\ntrigger interact prompt display ascii calendar event week display ascii calendar event month list event specif calendar list event calendar next 7 day quick-add event calendar show event start specif date also take rel date e g\ntomorrow",
        "Summary": "Command line tool to interact with Google Calendar.\nRequests Google API authorization upon first launch.",
        "Task-Script": {
            "Add an event to calendar. Triggers interactive prompt": "gcalcli --calendar \"{{calendar_name}}\" add",
            "Display an ASCII calendar of events by week": "gcalcli calw",
            "Display an ASCII calendar of events for a month": "gcalcli calm",
            "List events from a specific calendar": "gcalcli --calendar {{calendar_name}} agenda",
            "List your events for all your calendars over the next 7 days": "gcalcli agenda",
            "Quick-add an event to your calendar": "gcalcli --calendar {{calendar_name}} quick \"{{mm/dd}} {{HH:MM}} {{event_name}}\"",
            "Show events starting from or between specific dates (also takes relative dates e.g. \"tomorrow\")": "gcalcli agenda {{mm/dd}} [{{mm/dd}}]"
        }
    },
    "common_gcc": {
        "Category": "common",
        "Command": "gcc",
        "P-Summary": "preprocess compil c c++ sourc file assembl link togeth",
        "P-Tasks": "allow warn debug symbol output compil multipl sourc file execut compil sourc code assembl instruct compil sourc code without link includ librari differ path",
        "Summary": "Preprocess and compile C and C++ source files, then assemble and link them together.",
        "Task-Script": {
            "Allow warnings, debug symbols in output": "gcc {{source.c}} -Wall -Og -o {{executable}}",
            "Compile multiple source files into executable": "gcc {{source1.c}} {{source2.c}} -o {{executable}}",
            "Compile source code into Assembler instructions": "gcc -S {{source.c}}",
            "Compile source code without linking": "gcc -c {{source.c}}",
            "Include libraries from a different path": "gcc {{source.c}} -o {{executable}} -I{{header_path}} -L{{library_path}} -l{{library_name}}"
        }
    },
    "common_gcloud": {
        "Category": "common",
        "Command": "gcloud",
        "P-Summary": "offici cli tool googl cloud platform",
        "P-Tasks": "display googl comput engin instanc project\ninstanc zone list default list properti one activ configur login googl account ssh virtual machin instanc set activ project show help given command updat kubeconfig file appropri credenti point kubectl specif cluster googl kubernet engin updat gcloud cli compon",
        "Summary": "The official CLI tool for Google Cloud Platform.",
        "Task-Script": {
            "Display all Google Compute Engine instances in a project. Instances from all zones are listed by default": "gcloud compute instances list",
            "List all properties in one's active configuration": "gcloud config list",
            "Login to Google account": "gcloud auth login",
            "SSH into a virtual machine instance": "gcloud compute ssh {{user}}@{{instance}}",
            "Set the active project": "gcloud config set project {{project_name}}",
            "Show help for a given command": "gcloud help {{command}}",
            "Update a kubeconfig file with the appropriate credentials to point kubectl to a specific cluster in Google Kubernetes Engine": "gcloud container clusters get-credentials {{cluster_name}}",
            "Update all gcloud CLI components": "gcloud components update"
        }
    },
    "common_gdb": {
        "Category": "common",
        "Command": "gdb",
        "P-Summary": "gnu debugg",
        "P-Tasks": "attach process gdb debug execut debug core file execut given gdb command upon start start gdb pass argument execut",
        "Summary": "The GNU Debugger.",
        "Task-Script": {
            "Attach a process to gdb": "gdb -p {{procID}}",
            "Debug an executable": "gdb {{executable}}",
            "Debug with a core file": "gdb -c {{core}} {{executable}}",
            "Execute given GDB commands upon start": "gdb -ex \"{{commands}}\" {{executable}}",
            "Start gdb and pass arguments to the executable": "gdb --args {{executable}} {{argument1}} {{argument2}}"
        }
    },
    "common_gdrive": {
        "Category": "common",
        "Command": "gdrive",
        "P-Summary": "command line tool interact googl drive\nfolder file id obtain googl drive folder id url",
        "P-Tasks": "creat new revis id use given file folder download file directori id current directori download given local path id upload local path parent folder specifi id",
        "Summary": "Command line tool to interact with Google Drive.\nFolder/file id can be obtained from the Google Drive folder or id url.",
        "Task-Script": {
            "Create a new revision of an id using a given file or folder": "gdrive update {{id}} {{path/to/file_or_folder}}",
            "Download file or directory by id to current directory": "gdrive download {{id}}",
            "Download to a given local path by its id": "gdrive download --path {{path/to/folder}} {{id}}",
            "Upload a local path to the parent folder with the specified id": "gdrive upload -p {{id}} {{path/to/file_or_folder}}"
        }
    },
    "common_gem": {
        "Category": "common",
        "Command": "gem",
        "P-Summary": "interact packag manag rubi program languag",
        "P-Tasks": "instal latest version gem instal specif version gem instal latest match semver version gem list local gem search remot gem show avail version uninstal gem uninstal specif version gem updat gem",
        "Summary": "Interact with the package manager for the Ruby programming language.",
        "Task-Script": {
            "Install latest version of a gem": "gem install {{gemname}}",
            "Install specific version of a gem": "gem install {{gemname}} --version {{1.0.0}}",
            "Install the latest matching (SemVer) version of a gem": "gem install {{gemname}} --version '~> {{1.0}}'",
            "List all local gems": "gem list",
            "Search for remote gem(s) and show all available versions": "gem search {{regexp}} --all",
            "Uninstall a gem": "gem uninstall {{gemname}}",
            "Uninstall specific version of a gem": "gem uninstall {{gemname}} --version {{1.0.0}}",
            "Update a gem": "gem update {{gemname}}"
        }
    },
    "common_geth": {
        "Category": "common",
        "Command": "geth",
        "P-Summary": "go-ethereum command line interfac",
        "P-Tasks": "connect ropsten test network connect main ethereum network automat download full node creat new account enabl mine",
        "Summary": "The go-ethereum command line interface.",
        "Task-Script": {
            "Connect to the Ropsten test network": "geth --testnet",
            "Connect to the main Ethereum network and automatically download the full node": "geth",
            "Create a new account": "geth account new",
            "Enable mining": "geth --mine"
        }
    },
    "common_gh": {
        "Category": "common",
        "Command": "gh",
        "P-Summary": "work seamlessli github command line",
        "P-Tasks": "check pull request local check statu repositori pull request clone repositori local creat new issu creat pull request view pull request browser view issu browser view filter repositori open issu",
        "Summary": "Work seamlessly with GitHub from the command line.",
        "Task-Script": {
            "Check out pull requests locally": "gh pr checkout {{pr_number}}",
            "Check the status of a repository's pull requests": "gh pr status",
            "Clone a repository locally": "gh repo clone {{owner}}/{{repository}}",
            "Create a new issue": "gh issue create",
            "Create a pull request": "gh pr create",
            "View a pull request in the browser": "gh pr view --web {{pr_number}}",
            "View an issue in the browser": "gh issue view --web {{issue_number}}",
            "View and filter a repository’s open issues": "gh issue list"
        }
    },
    "common_gh auth": {
        "Category": "common",
        "Command": "gh auth",
        "P-Summary": "authent github host command line",
        "P-Tasks": "check log log login specif github enterpris server login token standard input creat http : github com set token login interact prompt",
        "Summary": "Authenticate with a GitHub host from the command line.",
        "Task-Script": {
            "Check if you are logged in": "gh auth status",
            "Log out": "gh auth logout",
            "Login with a specific GitHub Enterprise Server": "gh auth login --hostname {{github.example.com}}",
            "Login with a token from standard input (created in https://github.com/settings/tokens)": "echo {{your_token}} | gh auth login --with-token",
            "Login with interactive prompt": "gh auth login"
        }
    },
    "common_gh config": {
        "Category": "common",
        "Command": "gh config",
        "P-Summary": "chang configur github cli",
        "P-Tasks": "disabl interact prompt display git protocol use reset default text editor set specif configur valu set protocol ssh set text editor vim",
        "Summary": "Change configuration for GitHub cli.",
        "Task-Script": {
            "Disable interactive prompts": "gh config set prompt {{disabled}}",
            "Display what Git protocol is being used": "gh config get git_protocol",
            "Reset to default text editor": "gh config set editor {{\"\"}}",
            "Set a specific configuration value": "gh config set {{key}} {{value}}",
            "Set protocol to SSH": "gh config set git_protocol {{ssh}}",
            "Set text editor to Vim": "gh config set editor {{vim}}"
        }
    },
    "common_gh release": {
        "Category": "common",
        "Command": "gh release",
        "P-Summary": "manag github releas command line",
        "P-Tasks": "creat new releas delet specif releas display inform specif releas download asset specif releas list releas github repositori limit 30 item upload asset specif releas",
        "Summary": "Manage GitHub releases from the command line.",
        "Task-Script": {
            "Create a new release": "gh release create {{tag}}",
            "Delete a specific release": "gh release delete {{tag}}",
            "Display information about a specific release": "gh release view {{tag}}",
            "Download assets from a specific release": "gh release download {{tag}}",
            "List releases in a GitHub repository, limited to 30 items": "gh release list",
            "Upload assets to a specific release": "gh release upload {{tag}} {{path/to/file1}} {{path/to/file2}}"
        }
    },
    "common_gh-pr": {
        "Category": "common",
        "Command": "gh-pr",
        "P-Summary": "manag github pull request command line",
        "P-Tasks": "approv pull request current branch check pull request local creat pull request merg pull request associ current branch remov branch local remot view chang made pr",
        "Summary": "Manage GitHub pull requests from the command line.",
        "Task-Script": {
            "Approve the pull request of the current branch": "gh pr review --approve",
            "Check out a pull request locally": "gh pr checkout {{pr_number}}",
            "Create a pull request": "gh pr create",
            "Merge the pull request associated with the current branch, removing the branch on both the local and the remote": "gh pr merge",
            "View the changes made in the PR": "gh pr diff"
        }
    },
    "common_ghc": {
        "Category": "common",
        "Command": "ghc",
        "P-Summary": "glasgow haskel compil\ncompil link haskel sourc file",
        "P-Tasks": "compil singl file compil use extra optim evalu singl express find compil modul current directori run haskel interact interpret repl stop compil gener object file",
        "Summary": "The Glasgow Haskell Compiler.\nCompiles and links Haskell source files.",
        "Task-Script": {
            "Compile a single file": "ghc {{file.hs}}",
            "Compile using extra optimization": "ghc -O {{file.hs}}",
            "Evaluate a single expression": "ghc -e {{expression}}",
            "Find and compile all modules in the current directory": "ghc Main",
            "Run Haskell interactive interpreter (REPL)": "ghci",
            "Stop compilation after generating object files (.o)": "ghc -c {{file.hs}}"
        }
    },
    "common_ghci": {
        "Category": "common",
        "Command": "ghci",
        "P-Summary": "glasgow haskel compil interact environ",
        "P-Tasks": "start repl interact shell start repl enabl languag option start repl enabl level compil warn e g\ncompact start repl load specifi haskel sourc file start repl colon-separ list directori find sourc file",
        "Summary": "The Glasgow Haskell Compiler's interactive environment.",
        "Task-Script": {
            "Start a REPL (interactive shell)": "ghci",
            "Start a REPL and enable a language option": "ghci -X{{language_option}}",
            "Start a REPL and enable some level of compiler warnings (e.g. `all` or `compact`)": "ghci -W{{warning_level}}",
            "Start a REPL and load the specified Haskell source file": "ghci {{source_file.hs}}",
            "Start a REPL with a colon-separated list of directories for finding source files": "ghci -i{{path/to/directory1}}:{{path/to/directory2}}"
        }
    },
    "common_ghdl": {
        "Category": "common",
        "Command": "ghdl",
        "P-Summary": "open-sourc simul vhdl languag",
        "P-Tasks": "analyz vhdl sourc file produc object file check syntax vhdl sourc file display help page elabor design design name configur unit entiti unit architectur unit run elabor design run elabor design dump output waveform file",
        "Summary": "Open-source simulator for the VHDL language.",
        "Task-Script": {
            "Analyze a VHDL source file and produce an object file": "ghdl -a {{filename.vhdl}}",
            "Check the syntax of a VHDL source file": "ghdl -s {{filename.vhdl}}",
            "Display the help page": "ghdl --help",
            "Elaborate a design (where `{{design}}` is the name of a configuration unit, entity unit or architecture unit)": "ghdl -e {{design}}",
            "Run an elaborated design": "ghdl -r {{design}}",
            "Run an elaborated design and dump output to a waveform file": "ghdl -r {{design}} --wave={{output.ghw}}"
        }
    },
    "common_ghost": {
        "Category": "common",
        "Command": "ghost",
        "P-Summary": "blog platform headless cm",
        "P-Tasks": "check system potenti hiccup instal updat ghost instal ghost current directori restart ghost instanc run ghost instanc directli use process manag debug start instanc ghost view edit ghost configur view run ghost process view log ghost instanc",
        "Summary": "A blogging platform and headless CMS.",
        "Task-Script": {
            "Check the system for any potential hiccups when on install or update of Ghost": "ghost doctor",
            "Install Ghost in the current directory": "ghost install",
            "Restart the Ghost instance": "ghost restart",
            "Run a Ghost instance directly (used by process managers and for debugging)": "ghost run",
            "Start an instance of Ghost": "ghost start",
            "View or edit Ghost configuration": "ghost config {{key}} {{value}}",
            "View running Ghost processes": "ghost ls",
            "View the logs of a Ghost instance": "ghost log {{name}}"
        }
    },
    "common_gibo": {
        "Category": "common",
        "Command": "gibo",
        "P-Summary": "fetch gitignor boilerpl",
        "P-Tasks": "list avail boilerpl search boilerpl contain given string updat avail local boilerpl write boilerpl gitignor write boilerpl stdout",
        "Summary": "Fetch gitignore boilerplates.",
        "Task-Script": {
            "List available boilerplates": "gibo list",
            "Search for boilerplates containing a given string": "gibo search {{string}}",
            "Update available local boilerplates": "gibo update",
            "Write a boilerplate to .gitignore": "gibo dump {{boilerplate}} >>{{.gitignore}}",
            "Write a boilerplate to `stdout`": "gibo dump {{boilerplate}}"
        }
    },
    "common_gifsicle": {
        "Category": "common",
        "Command": "gifsicle",
        "P-Summary": "creat gif",
        "P-Tasks": "extract frame anim make gif anim gifsicl optimis gif also edit anim replac delet insert frame",
        "Summary": "Create GIFs.",
        "Task-Script": {
            "Extract frames from an animation": "gifsicle {{anim.gif}} '#0' > {{firstframe.gif}}",
            "Make a GIF animation with gifsicle": "gifsicle --delay={{10}} --loop *.gif > {{anim.gif}}",
            "Optimise a GIF": "gifsicle --batch --optimize=3 {{amin.gif}}",
            "You can also edit animations by replacing, deleting, or inserting frames": "gifsicle -b {{anim.gif}} --replace '#0' {{new.gif}}"
        }
    },
    "common_gist": {
        "Category": "common",
        "Command": "gist",
        "P-Summary": "upload code http : gist github com",
        "P-Tasks": "creat gist number text file creat privat gist descript list gist current log user list public privat gist login gist comput read content stdin creat gist use id gist url modifi includ file",
        "Summary": "Upload code to https://gist.github.com.",
        "Task-Script": {
            "Create a gist from any number of text files": "gist {{file.txt}} {{file2.txt}}",
            "Create a private gist with a description": "gist -p -d \"{{A meaningful description}}\" {{file.txt}}",
            "List all gists for the currently logged in user": "gist -l {{username}}",
            "List your public and private gists": "gist -l",
            "Login in gist on this computer": "gist --login",
            "Read contents from `stdin` and create a gist from it": "{{echo \"hello world\"}} | gist",
            "Use the id from the gist URL to modify or include a file": "gist -u {{GIST_ID}} {{file.txt}}"
        }
    },
    "common_git": {
        "Category": "common",
        "Command": "git",
        "P-Summary": "distribut version control system",
        "P-Tasks": "check git version execut git subcommand execut git subcommand custom repositori root path execut git subcommand given configur set show gener help show help git subcommand like commit log etc",
        "Summary": "Distributed version control system.",
        "Task-Script": {
            "Check the Git version": "git --version",
            "Execute a Git subcommand": "git {{subcommand}}",
            "Execute a Git subcommand on a custom repository root path": "git -C {{path/to/repo}} {{subcommand}}",
            "Execute a Git subcommand with a given configuration set": "git -c '{{config.key}}={{value}}' {{subcommand}}",
            "Show general help": "git --help",
            "Show help on a Git subcommand (like `commit`, `log`, etc.)": "git help {{subcommand}}"
        }
    },
    "common_git add": {
        "Category": "common",
        "Command": "git add",
        "P-Summary": "add chang file index",
        "P-Tasks": "add file index add file track untrack also add ignor file interact stage file interact stage part given file interact stage part file add alreadi track file",
        "Summary": "Adds changed files to the index.",
        "Task-Script": {
            "Add a file to the index": "git add {{path/to/file}}",
            "Add all files (tracked and untracked)": "git add -A",
            "Also add ignored files": "git add -f",
            "Interactively stage a file": "git add -i",
            "Interactively stage parts of a given file": "git add -p {{path/to/file}}",
            "Interactively stage parts of files": "git add -p",
            "Only add already tracked files": "git add -u"
        }
    },
    "common_git am": {
        "Category": "common",
        "Command": "git am",
        "P-Summary": "appli patch file\nuse receiv commit via email\nsee also git format-patch gener patch file",
        "P-Tasks": "abort process appli patch file appli patch file appli much patch file possibl save fail hunk reject file",
        "Summary": "Apply patch files. Useful when receiving commits via email.\nSee also `git format-patch`, which can generate patch files.",
        "Task-Script": {
            "Abort the process of applying a patch file": "git am --abort",
            "Apply a patch file": "git am {{path/to/file.patch}}",
            "Apply as much of a patch file as possible, saving failed hunks to reject files": "git am --reject {{path/to/file.patch}}"
        }
    },
    "common_git annex": {
        "Category": "common",
        "Command": "git annex",
        "P-Summary": "manag file git without check content\nfile annex content move key-valu store symlink made point content",
        "P-Tasks": "add file get file directori help initi repo git annex show current statu file directori synchron local repositori remot",
        "Summary": "Manage files with git, without checking their contents in.\nWhen a file is annexed, its content is moved into a key-value store, and a symlink is made that points to the content.",
        "Task-Script": {
            "Add a file": "git annex add {{path/to/file_or_directory}}",
            "Get a file or directory": "git annex get {{path/to/file_or_directory}}",
            "Help": "git annex help",
            "Initialize a repo with git annex": "git annex init",
            "Show the current status of a file or directory": "git annex status {{path/to/file_or_directory}}",
            "Synchronize a local repository with a remote": "git annex {{remote}}"
        }
    },
    "common_git apply": {
        "Category": "common",
        "Command": "git apply",
        "P-Summary": "appli patch file index",
        "P-Tasks": "appli remot patch file appli add patch file index appli patch revers output diffstat input appli patch print messag patch file store patch result index without modifi work tree",
        "Summary": "Apply a patch to files and/or to the index.",
        "Task-Script": {
            "Apply a remote patch file": "curl {{https://example.com/file.patch}} | git apply",
            "Apply and add the patched files to the index": "git apply --index {{path/to/file}}",
            "Apply the patch in reverse": "git apply --reverse {{path/to/file}}",
            "Output diffstat for the input and apply the patch": "git apply --stat --apply {{path/to/file}}",
            "Print messages about the patched files": "git apply --verbose {{path/to/file}}",
            "Store the patch result in the index without modifying the working tree": "git apply --cache {{path/to/file}}"
        }
    },
    "common_git archive": {
        "Category": "common",
        "Command": "git archive",
        "P-Summary": "creat archiv file name tree",
        "P-Tasks": "creat tar archiv content specif directori creat tar archiv content current head print standard output creat tar archiv content latest commit specif branch creat zip archiv current head print standard output prepend path file archiv insid specif directori write zip archiv file",
        "Summary": "Create an archive of files from a named tree.",
        "Task-Script": {
            "Create a tar archive from the contents of a specific directory": "git archive --output={{path/to/file.tar}} HEAD:{{path/to/directory}}",
            "Create a tar archive from the contents of the current HEAD and print it to standard output": "git archive --verbose HEAD",
            "Create a tar archive from the contents of the latest commit on a specific branch": "git archive --output={{path/to/file.tar}} {{branch_name}}",
            "Create a zip archive from the current HEAD and print it to standard output": "git archive --verbose --format=zip HEAD",
            "Prepend a path to each file to archive it inside a specific directory": "git archive --output={{path/to/file.tar}} --prefix={{path/to/prepend}}/ HEAD",
            "Same as above, but write the zip archive to file": "git archive --verbose --output={{path/to/file.zip}} HEAD"
        }
    },
    "common_git bisect": {
        "Category": "common",
        "Command": "git bisect",
        "P-Summary": "use binari search find commit introduc bug\ngit automat jump back forth commit graph progress narrow faulti commit",
        "P-Tasks": "git bisect pinpoint faulti commit end bisect session return previou branch commit git bisect select mark bad good test issu skip commit bisect e g\none fail test due differ issu start bisect session commit rang bound known buggi commit known clean typic older one",
        "Summary": "Use binary search to find the commit that introduced a bug.\nGit automatically jumps back and forth in the commit graph to progressively narrow down the faulty commit.",
        "Task-Script": {
            "After `git bisect` pinpoints the faulty commit, end the bisect session and return to the previous branch": "git bisect reset",
            "For each commit that `git bisect` selects, mark it as \"bad\" or \"good\" after testing it for the issue": "git bisect {{good|bad}}",
            "Skip a commit during a bisect (e.g. one that fails the tests due to a different issue)": "git bisect skip",
            "Start a bisect session on a commit range bounded by a known buggy commit, and a known clean (typically older) one": "git bisect start {{bad_commit}} {{good_commit}}"
        }
    },
    "common_git blame": {
        "Category": "common",
        "Command": "git blame",
        "P-Summary": "show commit hash last author line file",
        "P-Tasks": "print file author email commit hash line print file author name commit hash line",
        "Summary": "Show commit hash and last author on each line of a file.",
        "Task-Script": {
            "Print file with author email and commit hash on each line": "git blame -e {{file}}",
            "Print file with author name and commit hash on each line": "git blame {{file}}"
        }
    },
    "common_git branch": {
        "Category": "common",
        "Command": "git branch",
        "P-Summary": "main git command work branch",
        "P-Tasks": "creat new branch base specif commit creat new branch base current commit delet local branch must check delet remot branch list branch local remot list local branch\ncurrent branch highlight renam branch must check show name current branch",
        "Summary": "Main git command for working with branches.",
        "Task-Script": {
            "Create new branch based on a specific commit": "git branch {{branch_name}} {{commit_hash}}",
            "Create new branch based on the current commit": "git branch {{branch_name}}",
            "Delete a local branch (must not have it checked out to do this)": "git branch -d {{branch_name}}",
            "Delete a remote branch": "git push {{remote_name}} --delete {{remote_branch_name}}",
            "List all branches (local and remote)": "git branch -a",
            "List local branches. The current branch is highlighted by `*`": "git branch",
            "Rename a branch (must not have it checked out to do this)": "git branch -m {{old_branch_name}} {{new_branch_name}}",
            "Show the name of the current branch": "git branch --show-current"
        }
    },
    "common_git bundle": {
        "Category": "common",
        "Command": "git bundle",
        "P-Summary": "packag object refer archiv",
        "P-Tasks": "creat bundl file branch creat bundl file last 5 commit current branch creat bundl file latest 7 day creat bundl file contain object refer specif branch print standard output list refer contain bundl unbundl specif branch bundl file current repositori verifi bundl file valid appli current repositori",
        "Summary": "Package objects and references into an archive.",
        "Task-Script": {
            "Create a bundle file of all branches": "git bundle create {{path/to/file.bundle}} --all",
            "Create a bundle file of the last 5 commits of the current branch": "git bundle create {{path/to/file.bundle}} -{{5}} {{HEAD}}",
            "Create a bundle file of the latest 7 days": "git bundle create {{path/to/file.bundle}} --since={{7.days}} {{HEAD}}",
            "Create a bundle file that contains all objects and references of a specific branch": "git bundle create {{path/to/file.bundle}} {{branch_name}}",
            "Print to the standard output the list of references contained in a bundle": "git bundle unbundle {{path/to/file.bundle}}",
            "Unbundle a specific branch from a bundle file into the current repository": "git pull {{path/to/file.bundle}} {{branch_name}}",
            "Verify that a bundle file is valid and can be applied to the current repository": "git bundle verify {{path/to/file.bundle}}"
        }
    },
    "common_git cat-file": {
        "Category": "common",
        "Command": "git cat-file",
        "P-Summary": "provid content type size inform git repositori object",
        "P-Tasks": "get ize head commit byte get ype blob tree commit tag given git object pretty- p rint content given git object base type",
        "Summary": "Provide content or type and size information for git repository objects.",
        "Task-Script": {
            "Get the [s]ize of the HEAD commit in bytes": "git cat-file -s HEAD",
            "Get the [t]ype (blob, tree, commit, tag) of a given git object": "git cat-file -t {{8c442dc3}}",
            "Pretty-[p]rint the contents of a given git object based on its type": "git cat-file -p {{HEAD~2}}"
        }
    },
    "common_git check-ignore": {
        "Category": "common",
        "Command": "git check-ignore",
        "P-Summary": "analys debug git ignor exclud gitignor file",
        "P-Tasks": "check whether file directori ignor check whether multipl file directori ignor check index use debug path track ignor includ detail match pattern path use pathnam one per line stdin",
        "Summary": "Analyse and debug Git ignore / exclude (\".gitignore\") files.",
        "Task-Script": {
            "Check whether a file or directory is ignored": "git check-ignore {{path/to/file_or_directory}}",
            "Check whether multiple files or directories are ignored": "git check-ignore {{path/to/file}} {{path/to/directory}}",
            "Do not check the index (used to debug why paths were tracked and not ignored)": "git check-ignore --no-index {{path/to/files_or_directories}}",
            "Include details about the matching pattern for each path": "git check-ignore --verbose {{path/to/files_or_directories}}",
            "Use pathnames, one per line, from `stdin`": "git check-ignore --stdin < {{path/to/file_list}}"
        }
    },
    "common_git checkout": {
        "Category": "common",
        "Command": "git checkout",
        "P-Summary": "checkout branch path work tree",
        "P-Tasks": "creat switch new branch creat switch new branch base specif refer branch remot branch tag exampl valid refer discard unstag chang current directori see git reset undo-lik command discard unstag chang given file replac file current directori version commit given branch switch exist local branch switch exist remot branch switch previous check branch",
        "Summary": "Checkout a branch or paths to the working tree.",
        "Task-Script": {
            "Create and switch to a new branch": "git checkout -b {{branch_name}}",
            "Create and switch to a new branch based on a specific reference (branch, remote/branch, tag are examples of valid references)": "git checkout -b {{branch_name}} {{reference}}",
            "Discard all unstaged changes in the current directory (see `git reset` for more undo-like commands)": "git checkout .",
            "Discard unstaged changes to a given file": "git checkout {{filename}}",
            "Replace a file in the current directory with the version of it committed in a given branch": "git checkout {{branch_name}} -- {{filename}}",
            "Switch to an existing local branch": "git checkout {{branch_name}}",
            "Switch to an existing remote branch": "git checkout --track {{remote_name}}/{{branch_name}}",
            "Switch to the previously checked out branch": "git checkout -"
        }
    },
    "common_git cherry": {
        "Category": "common",
        "Command": "git cherry",
        "P-Summary": "find commit yet appli upstream",
        "P-Tasks": "limit commit within given limit show commit messag equival commit upstream specifi differ upstream topic branch",
        "Summary": "Find commits that have yet to be applied upstream.",
        "Task-Script": {
            "Limit commits to those within a given limit": "git cherry {{origin}} {{topic}} {{base}}",
            "Show commits (and their messages) with equivalent commits upstream": "git cherry -v",
            "Specify a different upstream and topic branch": "git cherry {{origin}} {{topic}}"
        }
    },
    "common_git cherry-pick": {
        "Category": "common",
        "Command": "git cherry-pick",
        "P-Summary": "appli chang introduc exist commit current branch\nappli chang anoth branch first use git checkout switch desir branch",
        "P-Tasks": "add chang commit work directori without creat commit appli commit current branch appli rang commit current branch see also git rebas -- onto appli multipl non-sequenti commit current branch",
        "Summary": "Apply the changes introduced by existing commits to the current branch.\nTo apply changes to another branch, first use `git checkout` to switch to the desired branch.",
        "Task-Script": {
            "Add the changes of a commit to the working directory, without creating a commit": "git cherry-pick -n {{commit}}",
            "Apply a commit to the current branch": "git cherry-pick {{commit}}",
            "Apply a range of commits to the current branch (see also `git rebase --onto`)": "git cherry-pick {{start_commit}}~..{{end_commit}}",
            "Apply multiple (non-sequential) commits to the current branch": "git cherry-pick {{commit_1}} {{commit_2}}"
        }
    },
    "common_git clean": {
        "Category": "common",
        "Command": "git clean",
        "P-Summary": "remov untrack file work tree",
        "P-Tasks": "delet file track git delet untrack file includ ignor file gitignor git info exclud forc delet directori track git forc delet file track git interact delet file track git show file would delet without actual delet",
        "Summary": "Remove untracked files from the working tree.",
        "Task-Script": {
            "Delete files that are not tracked by git": "git clean",
            "Delete untracked files, including ignored files in `.gitignore` and `.git/info/exclude`": "git clean -x",
            "Forcefully delete directories that are not tracked by git": "git clean -fd",
            "Forcefully delete files that are not tracked by git": "git clean -f",
            "Interactively delete files that are not tracked by git": "git clean -i",
            "Show what files would be deleted without actually deleting them": "git clean --dry-run"
        }
    },
    "common_git clone": {
        "Category": "common",
        "Command": "git clone",
        "P-Summary": "clone exist repositori",
        "P-Tasks": "clone local repositori clone exist repositori clone exist repositori submodul clone exist repositori fetch 10 recent commit default branch use save time clone quietli",
        "Summary": "Clone an existing repository.",
        "Task-Script": {
            "Clone a local repository": "git clone -l {{path/to/local/repository}}",
            "Clone an existing repository": "git clone {{remote_repository_location}}",
            "Clone an existing repository and its submodules": "git clone --recursive {{remote_repository_location}}",
            "Clone an existing repository only fetching the 10 most recent commits on the default branch (useful to save time)": "git clone --depth {{10}} {{remote_repository_location}}",
            "Clone quietly": "git clone -q {{remote_repository_location}}"
        }
    },
    "common_git commit": {
        "Category": "common",
        "Command": "git commit",
        "P-Summary": "commit file repositori",
        "P-Tasks": "auto stage modifi file commit messag commit specif alreadi stage file commit stage file repositori messag updat last commit ad current stage chang chang commit hash",
        "Summary": "Commit files to the repository.",
        "Task-Script": {
            "Auto stage all modified files and commit with a message": "git commit -a -m {{message}}",
            "Commit only specific (already staged) files": "git commit {{path/to/my/file1}} {{path/to/my/file2}}",
            "Commit staged files to the repository with a message": "git commit -m {{message}}",
            "Update the last commit by adding the currently staged changes, changing the commit's hash": "git commit --amend"
        }
    },
    "common_git config": {
        "Category": "common",
        "Command": "git config",
        "P-Summary": "manag custom configur option git repositori\nconfigur local current repositori global current user",
        "P-Tasks": "edit git configur current repositori default editor edit global git configur default editor get valu given configur entri list configur entri defin either local global list global configur entri store gitconfig list local configur entri store git config current repositori revert global configur entri default valu set global valu given configur entri",
        "Summary": "Manage custom configuration options for git repositories.\nThese configurations can be local (for the current repository) or global (for the current user).",
        "Task-Script": {
            "Edit the git configuration for the current repository in the default editor": "git config --edit",
            "Edit the global git configuration in the default editor": "git config --global --edit",
            "Get the value of a given configuration entry": "git config alias.unstage",
            "List all configuration entries that have been defined either locally or globally": "git config --list",
            "List only global configuration entries (stored in `~/.gitconfig`)": "git config --list --global",
            "List only local configuration entries (stored in `.git/config` in the current repository)": "git config --list --local",
            "Revert a global configuration entry to its default value": "git config --global --unset alias.unstage",
            "Set the global value of a given configuration entry": "git config --global alias.unstage \"reset HEAD --\""
        }
    },
    "common_git describe": {
        "Category": "common",
        "Command": "git describe",
        "P-Summary": "give object human readabl name base avail ref",
        "P-Tasks": "creat name last commit given branch creat name 4 digit abbrevi commit hash creat uniqu name current commit name contain recent annot tag number addit commit abbrevi commit hash describ git tag gener name tag refer path",
        "Summary": "Give an object a human readable name based on an available ref.",
        "Task-Script": {
            "Create a name for the last commit of a given branch": "git describe {{branch_name}}",
            "Create a name with 4 digits for the abbreviated commit hash": "git describe --abbrev={{4}}",
            "Create a unique name for the current commit (the name contains the most recent annotated tag, the number of additional commits, and the abbreviated commit hash)": "git describe",
            "Describe a git tag": "git describe {{v1.0.0}}",
            "Generate a name with the tag reference path": "git describe --all"
        }
    },
    "common_git diff": {
        "Category": "common",
        "Command": "git diff",
        "P-Summary": "show chang track file",
        "P-Tasks": "compar singl file two branch commit compar differ file current branch branch output summari file creation renam mode chang sinc given commit show uncommit chang includ stage one show chang commit sinc given date time date express e g\n1 week 2 day iso date show name chang file sinc given commit show stage ad yet commit chang show unstag uncommit chang",
        "Summary": "Show changes to tracked files.",
        "Task-Script": {
            "Compare a single file between two branches or commits": "git diff {{branch_1}}..{{branch_2}} [--] {{path/to/file}}",
            "Compare different files from the current branch to other branch": "git diff {{branch}}:{{path/to/file2}} {{path/to/file}}",
            "Output a summary of file creations, renames and mode changes since a given commit": "git diff --summary {{commit}}",
            "Show all uncommitted changes (including staged ones)": "git diff HEAD",
            "Show changes from all commits since a given date/time (a date expression, e.g. \"1 week 2 days\" or an ISO date)": "git diff 'HEAD@{3 months|weeks|days|hours|seconds ago}'",
            "Show only names of changed files since a given commit": "git diff --name-only {{commit}}",
            "Show only staged (added, but not yet committed) changes": "git diff --staged",
            "Show unstaged, uncommitted changes": "git diff"
        }
    },
    "common_git difftool": {
        "Category": "common",
        "Command": "git difftool",
        "P-Summary": "show file chang use extern diff tool\naccept option argument git diff",
        "P-Tasks": "list avail diff tool set default diff tool meld use specif tool opendiff show chang sinc given commit use default diff tool show stage chang",
        "Summary": "Show file changes using external diff tools. Accepts the same options and arguments as git diff.",
        "Task-Script": {
            "List available diff tools": "git difftool --tool-help",
            "Set the default diff tool to meld": "git config --global diff.tool \"{{meld}}\"",
            "Use a specific tool (opendiff) to show changes since a given commit": "git difftool --tool={{opendiff}} {{commit}}",
            "Use the default diff tool to show staged changes": "git difftool --staged"
        }
    },
    "common_git fetch": {
        "Category": "common",
        "Command": "git fetch",
        "P-Summary": "download object ref remot repositori",
        "P-Tasks": "also fetch tag remot upstream repositori delet local refer remot branch delet upstream fetch new branch specif remot upstream repositori fetch latest chang remot upstream repositori fetch latest chang default remot upstream repositori set",
        "Summary": "Download objects and refs from a remote repository.",
        "Task-Script": {
            "Also fetch tags from the remote upstream repository": "git fetch --tags",
            "Delete local references to remote branches that have been deleted upstream": "git fetch --prune",
            "Fetch new branches from a specific remote upstream repository": "git fetch {{remote_name}}",
            "Fetch the latest changes from all remote upstream repositories": "git fetch --all",
            "Fetch the latest changes from the default remote upstream repository (if set)": "git fetch"
        }
    },
    "common_git flow": {
        "Category": "common",
        "Command": "git flow",
        "P-Summary": "collect git extens provid high-level repositori oper",
        "P-Tasks": "finish develop featur branch merg develop branch delet get featur publish anoth user initi insid exist git repositori publish featur remot server start develop featur branch base develop",
        "Summary": "A collection of Git extensions to provide high-level repository operations.",
        "Task-Script": {
            "Finish development on a feature branch, merging it into the `develop` branch and deleting it": "git flow feature finish {{feature}}",
            "Get a feature published by another user": "git flow feature pull origin {{feature}}",
            "Initialize it inside an existing git repository": "git flow init",
            "Publish a feature to the remote server": "git flow feature publish {{feature}}",
            "Start developing on a feature branch based on `develop`": "git flow feature start {{feature}}"
        }
    },
    "common_git format-patch": {
        "Category": "common",
        "Command": "git format-patch",
        "P-Summary": "prepar patch file\nuse email commit elsewher\nsee also git appli gener patch file",
        "P-Tasks": "creat auto-nam patch file unpush commit write patch file commit 2 revis stdout write patch file 3 latest commit",
        "Summary": "Prepare .patch files. Useful when emailing commits elsewhere.\nSee also `git am`, which can apply generated .patch files.",
        "Task-Script": {
            "Create an auto-named .patch file for all the unpushed commits": "git format-patch {{origin}}",
            "Write a .patch file for all the commits between 2 revisions to `stdout`": "git format-patch {{revision_1}}..{{revision_2}}",
            "Write a .patch file for the 3 latest commits": "git format-patch -{{3}}"
        }
    },
    "common_git fsck": {
        "Category": "common",
        "Command": "git fsck",
        "P-Summary": "verifi valid connect node git repositori index\nmake modif\nsee git gc clean dangl blob",
        "P-Tasks": "check current repositori list root node found list tag found",
        "Summary": "Verify the validity and connectivity of nodes in a Git repository index.\nDoes not make any modifications. See `git gc` for cleaning up dangling blobs.",
        "Task-Script": {
            "Check the current repository": "git fsck",
            "List all root nodes found": "git fsck --root",
            "List all tags found": "git fsck --tags"
        }
    },
    "common_git gc": {
        "Category": "common",
        "Command": "git gc",
        "P-Summary": "optimis local repositori clean unnecessari file",
        "P-Tasks": "aggress optimis take time prune loos object prune default optimis repositori suppress output view full usag",
        "Summary": "Optimise the local repository by cleaning unnecessary files.",
        "Task-Script": {
            "Aggressively optimise, takes more time": "git gc --aggressive",
            "Do not prune loose objects (prunes by default)": "git gc --no-prune",
            "Optimise the repository": "git gc",
            "Suppress all output": "git gc --quiet",
            "View full usage": "git gc --help"
        }
    },
    "common_git help": {
        "Category": "common",
        "Command": "git help",
        "P-Summary": "display help inform git",
        "P-Tasks": "display list avail git subcommand display help specif git subcommand display help specif git subcommand web browser list possibl configur variabl list avail guid",
        "Summary": "Display help information about git.",
        "Task-Script": {
            "Display a list of all available git subcommands": "git help --all",
            "Display help about a specific git subcommand": "git help {{subcommand}}",
            "Display help about a specific git subcommand in a web browser": "git help --web {{subcommand}}",
            "List all possible configuration variables": "git help --config",
            "List the available guides": "git help --guide"
        }
    },
    "common_git ignore": {
        "Category": "common",
        "Command": "git ignore",
        "P-Summary": "gener gitignor file predefin templat",
        "P-Tasks": "gener gitignor templat list avail templat",
        "Summary": "Generate .gitignore files from predefined templates.",
        "Task-Script": {
            "Generate a .gitignore template": "git ignore {{item_a,item_b,item_n}}",
            "List available templates": "git ignore list"
        }
    },
    "common_git init": {
        "Category": "common",
        "Command": "git init",
        "P-Summary": "initi new local git repositori",
        "P-Tasks": "initi barebon repositori suitabl use remot ssh initi new local repositori",
        "Summary": "Initializes a new local Git repository.",
        "Task-Script": {
            "Initialize a barebones repository, suitable for use as a remote over ssh": "git init --bare",
            "Initialize a new local repository": "git init"
        }
    },
    "common_git instaweb": {
        "Category": "common",
        "Command": "git instaweb",
        "P-Summary": "helper launch gitweb server",
        "P-Tasks": "also auto-launch web browser launch gitweb server current git repositori listen specif port listen localhost restart current run gitweb server stop current run gitweb server use specifi http daemon",
        "Summary": "Helper to launch a gitweb server.",
        "Task-Script": {
            "Also auto-launch a web browser": "git instaweb --start --browser",
            "Launch a gitweb server for the current git repository": "git instaweb --start",
            "Listen on a specific port": "git instaweb --start --port {{1234}}",
            "Listen only on localhost": "git instaweb --start --local",
            "Restart the currently running gitweb server": "git instaweb --restart",
            "Stop the currently running gitweb server": "git instaweb --stop",
            "Use a specified http daemon": "git instaweb --start --httpd {{lighttpd|apache2|mongoose|plackup|webrick}}"
        }
    },
    "common_git lfs": {
        "Category": "common",
        "Command": "git lfs",
        "P-Summary": "work larg file git repositori",
        "P-Tasks": "chang git lf endpoint url use lf server separ git server checkout git lf object fetch git lf object initialis git lf list track file commit list track pattern push git lf object remot server use error encount track file match glob",
        "Summary": "Work with large files in Git repositories.",
        "Task-Script": {
            "Change the Git LFS endpoint URL (useful if the LFS server is separate from the Git server)": "git config -f .lfsconfig lfs.url {{lfs_endpoint_url}}",
            "Checkout all Git LFS objects": "git lfs checkout",
            "Fetch all Git LFS objects": "git lfs fetch",
            "Initialise Git LFS": "git lfs install",
            "List tracked files that have been commited": "git lfs ls-files",
            "List tracked patterns": "git lfs track",
            "Push all Git LFS objects to the remote server (useful if errors are encountered)": "git lfs push --all {{remote_name}} {{branch_name}}",
            "Track files that match a glob": "git lfs track '{{*.bin}}'"
        }
    },
    "common_git log": {
        "Category": "common",
        "Command": "git log",
        "P-Summary": "show histori commit",
        "P-Tasks": "show graph commit tag branch entir repo show graph commit current branch use first line commit messag show overview file chang commit show commit two date show commit whose messag includ given string case-insensit show histori particular file directori includ differ show last n commit certain author show sequenc commit start current one revers chronolog order git repositori current work directori",
        "Summary": "Show a history of commits.",
        "Task-Script": {
            "Show a graph of all commits, tags and branches in the entire repo": "git log --oneline --decorate --all --graph",
            "Show a graph of commits in the current branch using only the first line of each commit message": "git log --oneline --graph",
            "Show an overview of which file(s) changed in each commit": "git log --stat",
            "Show commits between two dates": "git log --before={{date}} --after={{date}}",
            "Show only commits whose messages include a given string (case-insensitively)": "git log -i --grep {{search_string}}",
            "Show the history of a particular file or directory, including differences": "git log -p {{path/to/file_or_directory}}",
            "Show the last N commits from a certain author": "git log -n {{number}} --author={{author}}",
            "Show the sequence of commits starting from the current one, in reverse chronological order of the git repository in the current working directory": "git log"
        }
    },
    "common_git ls-files": {
        "Category": "common",
        "Command": "git ls-files",
        "P-Summary": "show inform file index work tree",
        "P-Tasks": "show delet file show ignor untrack file show modifi delet file",
        "Summary": "Show information about files in the index and the working tree.",
        "Task-Script": {
            "Show deleted files": "git ls-files --deleted",
            "Show ignored and untracked files": "git ls-files --others",
            "Show modified and deleted files": "git ls-files --modified"
        }
    },
    "common_git ls-remote": {
        "Category": "common",
        "Command": "git ls-remote",
        "P-Summary": "git command list refer remot repositori base name url\nname url given configur upstream branch use remot origin former configur",
        "P-Tasks": "show refer remot repositiori base name url show refer default remot repositoiori show head refer default remot repositori show tag refer default remot repositori show refer remot repositiori filter pattern",
        "Summary": "Git command for listing references in a remote repository based on name or URL.\nIf no name or URL are given, then the configured upstream branch will be used, or remote origin if the former is not configured.",
        "Task-Script": {
            "Show all references from a remote repositiory based on name or url": "git ls-remote {{repositiory-url}}",
            "Show all references in the default remote repositoiory": "git ls-remote",
            "Show only heads references in the default remote repository": "git ls-remote --heads",
            "Show only tags references in the default remote repository": "git ls-remote --tags",
            "Show references from a remote repositiory filtered by a pattern": "git ls-remote {{repositiory-name}} \"{{pattern}}\""
        }
    },
    "common_git ls-tree": {
        "Category": "common",
        "Command": "git ls-tree",
        "P-Summary": "list content tree object",
        "P-Tasks": "list filenam tree commit list content tree branch list content tree commit recurs subtre",
        "Summary": "List the contents of a tree object.",
        "Task-Script": {
            "List only the filenames of the tree on a commit": "git ls-tree --name-only {{commit_hash}}",
            "List the contents of the tree on a branch": "git ls-tree {{branch_name}}",
            "List the contents of the tree on a commit, recursing into subtrees": "git ls-tree -r {{commit_hash}}"
        }
    },
    "common_git merge": {
        "Category": "common",
        "Command": "git merge",
        "P-Summary": "merg branch",
        "P-Tasks": "abort merg case conflict edit merg messag merg branch creat merg commit merg branch current branch",
        "Summary": "Merge branches.",
        "Task-Script": {
            "Abort a merge in case of conflicts": "git merge --abort",
            "Edit the merge message": "git merge -e {{branch_name}}",
            "Merge a branch and create a merge commit": "git merge --no-ff {{branch_name}}",
            "Merge a branch into your current branch": "git merge {{branch_name}}"
        }
    },
    "common_git mergetool": {
        "Category": "common",
        "Command": "git mergetool",
        "P-Summary": "run merg conflict resolut tool resolv merg conflict",
        "P-Tasks": "prompt invoc merg tool explicitli use gui merg tool see merg guitool config variabl explicitli use regular merg tool see merg tool config variabl launch default merg tool resolv conflict launch merg tool identifi name list valid merg tool",
        "Summary": "Run merge conflict resolution tools to resolve merge conflicts.",
        "Task-Script": {
            "Don't prompt before each invocation of the merge tool": "git mergetool --no-prompt",
            "Explicitly use the GUI merge tool (see the `merge.guitool` config variable)": "git mergetool --gui",
            "Explicitly use the regular merge tool (see the `merge.tool` config variable)": "git mergetool --no-gui",
            "Launch the default merge tool to resolve conflicts": "git mergetool",
            "Launch the merge tool identified by a name": "git mergetool --tool {{tool_name}}",
            "List valid merge tools": "git mergetool --tool-help"
        }
    },
    "common_git mv": {
        "Category": "common",
        "Command": "git mv",
        "P-Summary": "move renam file updat git index",
        "P-Tasks": "move file insid repo add movement next commit overwrit file target path exist renam file add renam next commit",
        "Summary": "Move or rename files and update the git index.",
        "Task-Script": {
            "Move file inside the repo and add the movement to the next commit": "git mv {{path/to/file}} {{new/path/to/file}}",
            "Overwrite the file in the target path if it exists": "git mv --force {{file}} {{target}}",
            "Rename file and add renaming to the next commit": "git mv {{filename}} {{new_filename}}"
        }
    },
    "common_git notes": {
        "Category": "common",
        "Command": "git notes",
        "P-Summary": "add inspect object note",
        "P-Tasks": "append note specifi object open default text editor append note specifi object specifi messag copi note one object anoth edit exist note default head list note object attach list note attach given object default head remov note ad specifi object show note attach given object default head",
        "Summary": "Add or inspect object notes.",
        "Task-Script": {
            "Append a note to a specified object (opens the default text editor)": "git notes append {{object}}",
            "Append a note to a specified object, specifying the message": "git notes append --message=\"{{message_text}}\"",
            "Copy a note from one object to another": "git notes copy {{source_object}} {{target_object}}",
            "Edit an existing note (defaults to HEAD)": "git notes edit [{{object}}]",
            "List all notes and the objects they are attached to": "git notes list",
            "List all notes attached to a given object (defaults to HEAD)": "git notes list [{{object}}]",
            "Remove all the notes added to a specified object": "git notes remove {{object}}",
            "Show the notes attached to a given object (defaults to HEAD)": "git notes show [{{object}}]"
        }
    },
    "common_git pr": {
        "Category": "common",
        "Command": "git pr",
        "P-Summary": "check github pull request local",
        "P-Tasks": "check pull request specif remot check pull request url check specif pull request clean old pull request branch",
        "Summary": "Check out GitHub pull requests locally.",
        "Task-Script": {
            "Check out a pull request for a specific remote": "git pr {{pr_number}} {{remote}}",
            "Check out a pull request from its URL": "git pr {{url}}",
            "Check out a specific pull request": "git pr {{pr_number}}",
            "Clean up old pull request branches": "git pr clean"
        }
    },
    "common_git prune": {
        "Category": "common",
        "Command": "git prune",
        "P-Summary": "git command prune unreach object object databas\ncommand often use direct intern command use git gc",
        "P-Tasks": "prune unreach object display prune stdout prune unreach object show progress report would remov git prune without remov",
        "Summary": "Git command for pruning all unreachable objects from the object database.\nThis command is often not used directely but as an internal command that is used by git gc.",
        "Task-Script": {
            "Prune unreachable objects and display what has been pruned to `stdout`": "git prune --verbose",
            "Prune unreachable objects while showing progress": "git prune --progress",
            "Report what would be removed by git prune without removing it": "git prune --dry-run"
        }
    },
    "common_git pull": {
        "Category": "common",
        "Command": "git pull",
        "P-Summary": "fetch branch remot repositori merg local repositori",
        "P-Tasks": "download chang default remot repositori merg download chang default remot repositori use fast forward download chang given remot repositori branch merg head",
        "Summary": "Fetch branch from a remote repository and merge it to local repository.",
        "Task-Script": {
            "Download changes from default remote repository and merge it": "git pull",
            "Download changes from default remote repository and use fast forward": "git pull --rebase",
            "Download changes from given remote repository and branch, then merge them into HEAD": "git pull {{remote_name}} {{branch}}"
        }
    },
    "common_git push": {
        "Category": "common",
        "Command": "git push",
        "P-Summary": "push commit remot repositori",
        "P-Tasks": "delet branch remot repositori publish tag yet remot repositori publish current branch remot repositori set remot branch name remov remot branch local counterpart send chang local branch counterpart given remot repositori send local chang given branch remot counterpart send local chang current branch remot counterpart",
        "Summary": "Push commits to a remote repository.",
        "Task-Script": {
            "Delete a branch in a remote repository": "git push {{remote_name}} --delete {{remote_branch}}",
            "Publish tags that aren't yet in the remote repository": "git push --tags",
            "Publish the current branch to a remote repository, setting the remote branch name": "git push {{remote_name}} -u {{remote_branch}}",
            "Remove remote branches that don't have a local counterpart": "git push --prune {{remote_name}}",
            "Send changes on all local branches to their counterparts in a given remote repository": "git push --all {{remote_name}}",
            "Send local changes in a given branch to its remote counterpart": "git push {{remote_name}} {{local_branch}}",
            "Send local changes in the current branch to its remote counterpart": "git push"
        }
    },
    "common_git rebase": {
        "Category": "common",
        "Command": "git rebase",
        "P-Summary": "reappli commit one branch top anoth branch\ncommonli use move entir branch anoth base creat copi commit new locat",
        "P-Tasks": "abort rebas progress e g\ninterrupt merg conflict auto-resolv conflict favor work branch version keyword revers mean case continu rebas interrupt merg failur edit conflict file continu rebas paus due merg conflict skip conflict commit move part current branch onto new base provid old base start reappli last 5 commit in-plac stop allow reorder omit combin modifi rebas current branch top anoth specifi branch start interact rebas allow commit reorder omit combin modifi",
        "Summary": "Reapply commits from one branch on top of another branch.\nCommonly used to \"move\" an entire branch to another base, creating copies of the commits in the new location.",
        "Task-Script": {
            "Abort a rebase in progress (e.g. if it is interrupted by a merge conflict)": "git rebase --abort",
            "Auto-resolve any conflicts by favoring the working branch version (`theirs` keyword has reversed meaning in this case)": "git rebase -X theirs {{branch_name}}",
            "Continue a rebase that was interrupted by a merge failure, after editing conflicting files": "git rebase --continue",
            "Continue a rebase that was paused due to merge conflicts, by skipping the conflicted commit": "git rebase --skip",
            "Move part of the current branch onto a new base, providing the old base to start from": "git rebase --onto {{new_base}} {{old_base}}",
            "Reapply the last 5 commits in-place, stopping to allow them to be reordered, omitted, combined or modified": "git rebase -i {{HEAD~5}}",
            "Rebase the current branch on top of another specified branch": "git rebase {{new_base_branch}}",
            "Start an interactive rebase, which allows the commits to be reordered, omitted, combined or modified": "git rebase -i {{target_base_branch_or_commit_hash}}"
        }
    },
    "common_git reflog": {
        "Category": "common",
        "Command": "git reflog",
        "P-Summary": "show log chang local refer like head branch tag",
        "P-Tasks": "show 5 latest entri reflog show reflog head show reflog given branch",
        "Summary": "Show a log of changes to local references like HEAD, branches or tags.",
        "Task-Script": {
            "Show only the 5 latest entries in the reflog": "git reflog -n {{5}}",
            "Show the reflog for HEAD": "git reflog",
            "Show the reflog for a given branch": "git reflog {{branch_name}}"
        }
    },
    "common_git remote": {
        "Category": "common",
        "Command": "git remote",
        "P-Summary": "manag set track repositori remot",
        "P-Tasks": "add remot chang url remot use -- add keep exist url remov remot renam remot show list exist remot name url show inform remot",
        "Summary": "Manage set of tracked repositories (\"remotes\").",
        "Task-Script": {
            "Add a remote": "git remote add {{remote_name}} {{remote_url}}",
            "Change the URL of a remote (use `--add` to keep the existing URL)": "git remote set-url {{remote_name}} {{new_url}}",
            "Remove a remote": "git remote remove {{remote_name}}",
            "Rename a remote": "git remote rename {{old_name}} {{new_name}}",
            "Show a list of existing remotes, their names and URL": "git remote -v",
            "Show information about a remote": "git remote show {{remote_name}}"
        }
    },
    "common_git repack": {
        "Category": "common",
        "Command": "git repack",
        "P-Summary": "pack unpack object git repositori",
        "P-Tasks": "also remov redund object pack pack unpack object current directori",
        "Summary": "Pack unpacked objects in a git repository.",
        "Task-Script": {
            "Also remove redundant objects after packing": "git repack -d",
            "Pack unpacked objects in the current directory": "git repack"
        }
    },
    "common_git replace": {
        "Category": "common",
        "Command": "git replace",
        "P-Summary": "creat list delet ref replac object",
        "P-Tasks": "delet exist replac ref given object edit object content interact replac commit differ one leav commit unchang",
        "Summary": "Create, list, and delete refs to replace objects.",
        "Task-Script": {
            "Delete existing replace refs for the given objects": "git replace --delete {{object}}",
            "Edit an object’s content interactively": "git replace --edit {{object}}",
            "Replace any commit with a different one, leaving other commits unchanged": "git replace {{object}} {{replacement}}"
        }
    },
    "common_git request-pull": {
        "Category": "common",
        "Command": "git request-pull",
        "P-Summary": "gener request ask upstream project pull chang tree",
        "P-Tasks": "produc request summar chang v0 1 releas foo branch local bar branch produc request summar chang v1 1 releas specifi branch",
        "Summary": "Generate a request asking the upstream project to pull changes into its tree.",
        "Task-Script": {
            "Produce a request summarizing the changes between the v0.1 release on the `foo` branch and the local `bar` branch": "git request-pull {{v0.1}} {{https://example.com/project}} {{foo:bar}}",
            "Produce a request summarizing the changes between the v1.1 release and a specified branch": "git request-pull {{v1.1}} {{https://example.com/project}} {{branch_name}}"
        }
    },
    "common_git reset": {
        "Category": "common",
        "Command": "git reset",
        "P-Summary": "undo commit unstag chang reset current git head specifi state\npath pass work unstag commit hash branch pass work uncommit",
        "P-Tasks": "discard uncommit chang stage unstag chang use git checkout reset repositori given commit discard commit stage uncommit chang sinc undo last commit keep chang uncommit chang filesystem undo last two commit ad chang index e\nstage commit unstag everyth unstag portion file unstag specif file",
        "Summary": "Undo commits or unstage changes, by resetting the current git HEAD to the specified state.\nIf a path is passed, it works as \"unstage\"; if a commit hash or branch is passed, it works as \"uncommit\".",
        "Task-Script": {
            "Discard any uncommitted changes, staged or not (for only unstaged changes, use `git checkout`)": "git reset --hard",
            "Reset the repository to a given commit, discarding committed, staged and uncommitted changes since then": "git reset --hard {{commit}}",
            "Undo the last commit, keeping its changes (and any further uncommitted changes) in the filesystem": "git reset HEAD~",
            "Undo the last two commits, adding their changes to the index, i.e. staged for commit": "git reset --soft HEAD~2",
            "Unstage everything": "git reset",
            "Unstage portions of a file": "git reset -p {{path/to/file}}",
            "Unstage specific file(s)": "git reset {{path/to/file(s)}}"
        }
    },
    "common_git restore": {
        "Category": "common",
        "Command": "git restore",
        "P-Summary": "restor work tree file\nrequir git version 2 23+\nsee also git checkout",
        "P-Tasks": "restor delet file content current commit head restor file version differ commit undo uncommit chang track file revert current head",
        "Summary": "Restore working tree files. Requires git version 2.23+.\nSee also `git checkout`.",
        "Task-Script": {
            "Restore a deleted file from the contents of the current commit (HEAD)": "git restore {{path/to/file}}",
            "Restore a file to a version from a different commit": "git restore --source {{commit}} {{path/to/file}}",
            "Undo any uncommitted changes to tracked files, reverting to the current HEAD": "git restore ."
        }
    },
    "common_git rev-list": {
        "Category": "common",
        "Command": "git rev-list",
        "P-Summary": "list revis commit revers chronolog order",
        "P-Tasks": "list commit current branch list merg commit specif commit list commit recent specif date specif branch",
        "Summary": "List revisions (commits) in reverse chronological order.",
        "Task-Script": {
            "List all commits on the current branch": "git rev-list {{HEAD}}",
            "List all merge commits on a specific commit": "git rev-list --merges {{commit}}",
            "List commits more recent than a specific date, on a specific branch": "git rev-list --since={{'2019-12-01 00:00:00'}} {{branch_name}}"
        }
    },
    "common_git rev-parse": {
        "Category": "common",
        "Command": "git rev-parse",
        "P-Summary": "display metadata relat specif revis",
        "P-Tasks": "get absolut path root directori get commit hash branch get current branch name",
        "Summary": "Display metadata related to specific revisions.",
        "Task-Script": {
            "Get the absolute path to the root directory": "git rev-parse --show-toplevel",
            "Get the commit hash of a branch": "git rev-parse {{branch_name}}",
            "Get the current branch name": "git rev-parse --abbrev-ref {{HEAD}}"
        }
    },
    "common_git revert": {
        "Category": "common",
        "Command": "git revert",
        "P-Summary": "creat new commit revers effect earlier one",
        "P-Tasks": "creat new commit chang work tree revert multipl commit revert 5th last commit revert recent commit",
        "Summary": "Create new commits which reverse the effect of earlier ones.",
        "Task-Script": {
            "Don't create new commits, just change the working tree": "git revert -n {{0c01a9..9a1743}}",
            "Revert multiple commits": "git revert {{branch_name~5..branch_name~2}}",
            "Revert the 5th last commit": "git revert HEAD~{{4}}",
            "Revert the most recent commit": "git revert {{@}}"
        }
    },
    "common_git rm": {
        "Category": "common",
        "Command": "git rm",
        "P-Summary": "remov file repositori index local filesystem",
        "P-Tasks": "remov directori remov file repositori index filesystem remov file repositori index keep untouch local",
        "Summary": "Remove files from repository index and local filesystem.",
        "Task-Script": {
            "Remove directory": "git rm -r {{directory}}",
            "Remove file from repository index and filesystem": "git rm {{file}}",
            "Remove file from repository index but keep it untouched locally": "git rm --cached {{file}}"
        }
    },
    "common_git send-email": {
        "Category": "common",
        "Command": "git send-email",
        "P-Summary": "send collect patch email\npatch specifi file direct revis list",
        "P-Tasks": "review edit email messag patch send send given commit send introductori email messag patch seri send multipl e g\n10 commit current branch send last commit current branch",
        "Summary": "Send a collection of patches as emails.\nPatches can be specified as files, directions, or a revision list.",
        "Task-Script": {
            "Review and edit the email message for each patch you're about to send": "git send-email -{{number of commits}} --annotate",
            "Send a given commit": "git send-email -1 {{commit}}",
            "Send an introductory email message for the patch series": "git send-email -{{number of commits}} --compose",
            "Send multiple (e.g. 10) commits in the current branch": "git send-email {{-10}}",
            "Send the last commit in the current branch": "git send-email -1"
        }
    },
    "common_git shortlog": {
        "Category": "common",
        "Command": "git shortlog",
        "P-Summary": "summar git log output",
        "P-Tasks": "view summari commit made group alphabet author name view summari commit made group commit ident name email view summari commit made sort number commit made view summari last 5 commit e\nspecifi revis rang view user email number commit branch view user email number commit current branch",
        "Summary": "Summarizes the `git log` output.",
        "Task-Script": {
            "View a summary of all the commits made, grouped alphabetically by author name": "git shortlog",
            "View a summary of all the commits made, grouped by the commiter identities (name and email)": "git shortlog -c",
            "View a summary of all the commits made, sorted by the number of commits made": "git shortlog -n",
            "View a summary of the last 5 commits (i.e. specify a revision range)": "git shortlog HEAD~{{5}}..HEAD",
            "View all users, emails and the number of commits in all branches": "git shortlog -sne --all",
            "View all users, emails and the number of commits in the current branch": "git shortlog -sne"
        }
    },
    "common_git show": {
        "Category": "common",
        "Command": "git show",
        "P-Summary": "show variou type git object commit tag etc",
        "P-Tasks": "show commit messag singl line suppress diff output show inform given commit show inform 3rd commit tip branch show inform commit associ given tag show inform latest commit hash messag chang metadata show list file chang commit show content file given revis e g\nbranch tag commit",
        "Summary": "Show various types of git objects (commits, tags, etc.).",
        "Task-Script": {
            "Show a commit's message in a single line, suppressing the diff output": "git show --oneline -s {{commit}}",
            "Show information about a given commit": "git show {{commit}}",
            "Show information about the 3rd commit from the tip of a branch": "git show {{branch}}~{{3}}",
            "Show information about the commit associated with a given tag": "git show {{tag}}",
            "Show information about the latest commit (hash, message, changes, and other metadata)": "git show",
            "Show only the list of the files changed in a commit": "git show --stat {{commit}}",
            "Show the contents of a file as it was at a given revision (e.g. branch, tag or commit)": "git show {{revision}}:{{path/to/file}}"
        }
    },
    "common_git show-branch": {
        "Category": "common",
        "Command": "git show-branch",
        "P-Summary": "show branch commit",
        "P-Tasks": "compar given branch current branch compar remot track branch compar local remot track branch compar commit histori multipl commit branch display commit name instead rel name keep go given number commit past common ancest list latest commit branch show summari latest commit branch",
        "Summary": "Show branches and their commits.",
        "Task-Script": {
            "Compare a given branch with the current branch": "git show-branch --current {{commit|branch_name|ref}}",
            "Compare all remote tracking branches": "git show-branch --remotes",
            "Compare both local and remote tracking branches": "git show-branch --all",
            "Compare commits in the history of multiple commits or branches": "git show-branch {{branch_name|ref|commit}}",
            "Display the commit name instead of the relative name": "git show-branch --sha1-name --current {{current|branch_name|ref}}",
            "Keep going a given number of commits past the common ancester": "git show-branch --more {{5}} {{commit|branch_name|ref}} {{commit|branch_name|ref}} {{...}}",
            "List the latest commits in all branches": "git show-branch --all --list",
            "Show a summary of the latest commit on a branch": "git show-branch {{branch_name|ref|commit}}"
        }
    },
    "common_git show-ref": {
        "Category": "common",
        "Command": "git show-ref",
        "P-Summary": "git command list refer",
        "P-Tasks": "show ref repositori show head refer show tag refer verifi given refer exist",
        "Summary": "Git command for listing references.",
        "Task-Script": {
            "Show all refs in the repository": "git show-ref",
            "Show only heads references": "git show-ref --heads",
            "Show only tags references": "git show-ref --tags",
            "Verify that a given reference exists": "git show-ref --verify {{path/to/ref}}"
        }
    },
    "common_git sizer": {
        "Category": "common",
        "Command": "git sizer",
        "P-Summary": "comput variou git repositori size metric alert might caus problem inconveni",
        "P-Tasks": "report statist report statist level concern greater 0 see addit option",
        "Summary": "Computes various Git repository size metrics and alerts you to any that might cause problems or inconvenience.",
        "Task-Script": {
            "Report all statistics": "git sizer -v",
            "Report only statistics that have a level of concern greater than 0": "git sizer",
            "See additional options": "git sizer -h"
        }
    },
    "common_git stage": {
        "Category": "common",
        "Command": "git stage",
        "P-Summary": "add file content stage area\nsynonym git add",
        "P-Tasks": "add file index add file track untrack also add ignor file interact stage file interact stage part given file interact stage part file add alreadi track file",
        "Summary": "Add file contents to the staging area.\nSynonym of `git add`.",
        "Task-Script": {
            "Add a file to the index": "git stage {{path/to/file}}",
            "Add all files (tracked and untracked)": "git stage -A",
            "Also add ignored files": "git stage -f",
            "Interactively stage a file": "git stage -i",
            "Interactively stage parts of a given file": "git stage -p {{path/to/file}}",
            "Interactively stage parts of files": "git stage -p",
            "Only add already tracked files": "git stage -u"
        }
    },
    "common_git stash": {
        "Category": "common",
        "Command": "git stash",
        "P-Summary": "stash local git chang temporari area",
        "P-Tasks": "appli stash default stash 0 remov stash list appli caus conflict appli stash default latest name stash 0 drop stash default stash 0 drop stash interact select part chang file stash list stash show stash name relat branch messag stash current chang except new untrack file stash current chang includ new untrack file",
        "Summary": "Stash local Git changes in a temporary area.",
        "Task-Script": {
            "Apply a stash (default is stash@{0}), and remove it from the stash list if applying doesn't cause conflicts": "git stash pop {{optional_stash_name}}",
            "Apply a stash (default is the latest, named stash@{0})": "git stash apply {{optional_stash_name_or_commit}}",
            "Drop a stash (default is stash@{0})": "git stash drop {{optional_stash_name}}",
            "Drop all stashes": "git stash clear",
            "Interactively select parts of changed files for stashing": "git stash -p",
            "List all stashes (shows stash name, related branch and message)": "git stash list",
            "Stash current changes, except new (untracked) files": "git stash [push -m {{optional_stash_message}}]",
            "Stash current changes, including new (untracked) files": "git stash -u"
        }
    },
    "common_git status": {
        "Category": "common",
        "Command": "git status",
        "P-Summary": "show chang file git repositori\nlist chang ad delet file compar current checked-out commit",
        "P-Tasks": "show untrack file output give output hort format show chang file yet ad commit show output hort format along b ranch info",
        "Summary": "Show the changes to files in a git repository.\nLists changed, added and deleted files compared to the currently checked-out commit.",
        "Task-Script": {
            "Don't show untracked files in the output": "git status --untracked-files=no",
            "Give output in [s]hort format": "git status -s",
            "Show changed files which are not yet added for commit": "git status",
            "Show output in [s]hort format along with [b]ranch info": "git status -sb"
        }
    },
    "common_git submodule": {
        "Category": "common",
        "Command": "git submodule",
        "P-Summary": "inspect updat manag submodul",
        "P-Tasks": "add git repositori submodul add git repositori submodul specifi directori instal repositori specifi submodul updat everi submodul latest commit",
        "Summary": "Inspects, updates and manages submodules.",
        "Task-Script": {
            "Add a git repository as a submodule": "git submodule add {{repository_url}}",
            "Add a git repository as a submodule at the specified directory": "git submodule add {{repository_url}} {{path/to/directory}}",
            "Install a repository's specified submodules": "git submodule update --init --recursive",
            "Update every submodule to its latest commit": "git submodule foreach git pull"
        }
    },
    "common_git subtree": {
        "Category": "common",
        "Command": "git subtree",
        "P-Summary": "tool manag project depend subproject",
        "P-Tasks": "add git repositori subtre extract new project histori histori subtre merg recent chang latest subtre commit subtre push commit subtre repositori updat subtre repositori latest commit",
        "Summary": "Tool to manage project dependencies as subprojects.",
        "Task-Script": {
            "Add a git repository as a subtree": "git subtree add --prefix={{path/to/directory/}} --squash {{repository_url}} {{branch_name}}",
            "Extract a new project history from the history of a subtree": "git subtree split --prefix={{path/to/directory/}} {{repository_url}} -b {{branch_name}}",
            "Merge recent changes up to the latest subtree commit into the subtree": "git subtree merge --prefix={{path/to/directory/}} --squash {{repository_url}} {{branch_name}}",
            "Push commits to a subtree repository": "git subtree push --prefix={{path/to/directory/}} {{repository_url}} {{branch_name}}",
            "Update subtree repository to its latest commit": "git subtree pull --prefix={{path/to/directory/}} {{repository_url}} {{branch_name}}"
        }
    },
    "common_git svn": {
        "Category": "common",
        "Command": "git svn",
        "P-Summary": "bidirect oper subvers repositori git",
        "P-Tasks": "clone svn repositori start given revis number clone svn repositori commit back svn repositori fetch updat remot svn repositori without chang git head updat local clone remot svn repositori",
        "Summary": "Bidirectional operation between a Subversion repository and Git.",
        "Task-Script": {
            "Clone a SVN repository starting at a given revision number": "git svn clone -r{{1234}}:HEAD {{https://svn.example.net/subversion/repo}} {{local_dir}}",
            "Clone an SVN repository": "git svn clone {{https://example.com/subversion_repo}} {{local_dir}}",
            "Commit back to the SVN repository": "git svn dcommit",
            "Fetch updates from the remote SVN repository without changing the git HEAD": "git svn fetch",
            "Update local clone from the remote SVN repository": "git svn rebase"
        }
    },
    "common_git switch": {
        "Category": "common",
        "Command": "git switch",
        "P-Summary": "switch git branch\nrequir git version 2 23+\nsee also git checkout",
        "P-Tasks": "creat new branch switch creat new branch base exist commit switch switch branch automat merg current branch uncommit chang switch branch updat submodul match switch exist branch switch previou branch",
        "Summary": "Switch between git branches. Requires git version 2.23+.\nSee also `git checkout`.",
        "Task-Script": {
            "Create a new branch and switch to it": "git switch --create {{branch_name}}",
            "Create a new branch based on an existing commit and switch to it": "git switch --create {{branch_name}} {{commit}}",
            "Switch to a branch and automatically merge the current branch and any uncommitted changes into it": "git switch --merge {{branch_name}}",
            "Switch to a branch and update all submodules to match": "git switch --recurse-submodules {{branch_name}}",
            "Switch to an existing branch": "git switch {{branch_name}}",
            "Switch to the previous branch": "git switch -"
        }
    },
    "common_git tag": {
        "Category": "common",
        "Command": "git tag",
        "P-Summary": "creat list delet verifi tag\ntag static refer specif commit",
        "P-Tasks": "creat tag given name point given commit creat tag given name point current commit creat annot tag given messag delet tag given name get updat tag upstream list tag list tag whose ancestor includ given commit",
        "Summary": "Create, list, delete or verify tags.\nA tag is a static reference to a specific commit.",
        "Task-Script": {
            "Create a tag with the given name pointing to a given commit": "git tag {{tag_name}} {{commit}}",
            "Create a tag with the given name pointing to the current commit": "git tag {{tag_name}}",
            "Create an annotated tag with the given message": "git tag {{tag_name}} -m {{tag_message}}",
            "Delete the tag with the given name": "git tag -d {{tag_name}}",
            "Get updated tags from upstream": "git fetch --tags",
            "List all tags": "git tag",
            "List all tags whose ancestors include a given commit": "git tag --contains {{commit}}"
        }
    },
    "common_git update-index": {
        "Category": "common",
        "Command": "git update-index",
        "P-Summary": "git command manipul index",
        "P-Tasks": "pretend modifi file unchang git statu show chang",
        "Summary": "Git command for manipulating the index.",
        "Task-Script": {
            "Pretend that a modified file is unchanged (`git status` will not show this as changed)": "git update-index --skip-worktree {{path/to/modified_file}}"
        }
    },
    "common_git update-ref": {
        "Category": "common",
        "Command": "git update-ref",
        "P-Summary": "git command creat updat delet git ref",
        "P-Tasks": "delet ref use soft reset first commit updat ref messag",
        "Summary": "Git command for creating, updating, and deleting git refs.",
        "Task-Script": {
            "Delete a ref, useful for soft resetting the first commit": "git update-ref -d {{HEAD}}",
            "Update ref with a message": "git update-ref -m {{message}} {{HEAD}} {{4e95e05}}"
        }
    },
    "common_git worktree": {
        "Category": "common",
        "Command": "git worktree",
        "P-Summary": "manag multipl work tree attach repositori",
        "P-Tasks": "creat new directori new branch check creat new directori specifi branch check list work directori attach repositori remov worktre delet worktre directori",
        "Summary": "Manage multiple working trees attached to the same repository.",
        "Task-Script": {
            "Create a new directory with a new branch checked out into it": "git worktree add {{path/to/directory}} -b {{new_branch}}",
            "Create a new directory with the specified branch checked out into it": "git worktree add {{path/to/directory}} {{branch}}",
            "List all the working directories attached to this repository": "git worktree list",
            "Remove a worktree (after deleting worktree directory)": "git worktree prune"
        }
    },
    "common_git-grep": {
        "Category": "common",
        "Command": "git-grep",
        "P-Summary": "find string insid file anywher repositori histori\naccept lot flag regular grep",
        "P-Tasks": "search string across branch search string specif point histori search string file match pattern track file search string track file search string track file includ submodul",
        "Summary": "Find strings inside files anywhere in a repository's history.\nAccepts a lot of the same flags as regular `grep`.",
        "Task-Script": {
            "Search for a string across all branches": "git grep {{search_string}} $(git rev-list --all)",
            "Search for a string at a specific point in history": "git grep {{search_string}} {{HEAD~2}}",
            "Search for a string in files matching a pattern in tracked files": "git grep {{search_string}} -- {{file_glob_pattern}}",
            "Search for a string in tracked files": "git grep {{search_string}}",
            "Search for a string in tracked files, including submodules": "git grep --recurse-submodules {{search_string}}"
        }
    },
    "common_git-imerge": {
        "Category": "common",
        "Command": "git-imerge",
        "P-Summary": "perform merg rebas two git branch increment\nconflict branch track pair individu commit simplifi conflict resolut",
        "P-Tasks": "abort imerg oper return previou branch continu imerg oper resolv conflict git add conflict file first show ascii diagram in-progress merg rebas start imerge-bas merg checkout branch merg first start imerge-bas rebas checkout branch rebas first wrap imerg oper conflict resolv",
        "Summary": "Perform a merge or rebase between two git branches incrementally.\nConflicts between branches are tracked down to pairs of individual commits, to simplify conflict resolution.",
        "Task-Script": {
            "Abort imerge operation, and return to the previous branch": "git-imerge remove && git checkout {{previous_branch}}",
            "Continue imerge operation after resolving conflicts (`git add` the conflicted files, first)": "git imerge continue --no-edit",
            "Show ASCII diagram of in-progress merge or rebase": "git imerge diagram",
            "Start imerge-based merge (checkout the branch to merge into, first)": "git imerge merge {{branch_to_be_merged}}",
            "Start imerge-based rebase (checkout the branch to be rebased, first)": "git imerge rebase {{branch_to_rebase_onto}}",
            "Wrap up imerge operation, after all conflicts are resolved": "git imerge finish"
        }
    },
    "common_github-label-sync": {
        "Category": "common",
        "Command": "github-label-sync",
        "P-Summary": "command line interfac synchronis github label",
        "P-Tasks": "keep label label json perform dri run instead actual synchronis label synchronis label use local label json file synchronis label use specif label json file synchronis use github_access_token environ variabl",
        "Summary": "A command line interface for synchronising GitHub labels.",
        "Task-Script": {
            "Keep labels that aren't in `labels.json`": "github-label-sync --access-token {{token}} --allow-added-labels {{repository_name}}",
            "Perform a dry run instead of actually synchronising labels": "github-label-sync --access-token {{token}} --dry-run {{repository_name}}",
            "Synchronise labels using a local `labels.json` file": "github-label-sync --access-token {{token}} {{repository_name}}",
            "Synchronise labels using a specific labels JSON file": "github-label-sync --access-token {{token}} --labels {{url|path/to/json_file}} {{repository_name}}",
            "Synchronise using the `GITHUB_ACCESS_TOKEN` environment variable": "github-label-sync {{repository_name}}"
        }
    },
    "common_gitk": {
        "Category": "common",
        "Command": "gitk",
        "P-Summary": "graphic git repositori browser",
        "P-Tasks": "show 100 chang branch show commit made sinc 1 week ago show commit older 1 1 2016 show repositori browser specif file directori show repositori browser current git repositori",
        "Summary": "A graphical git repository browser.",
        "Task-Script": {
            "Show at most 100 changes in all branches": "gitk --max-count={{100}} --all",
            "Show commits made since 1 week ago": "gitk --since=\"{{1 week ago}}\"",
            "Show commits older than 1/1/2016": "gitk --until=\"{{1/1/2015}}\"",
            "Show repository browser for a specific file or directory": "gitk {{path/to/file_or_directory}}",
            "Show the repository browser for the current git repository": "gitk"
        }
    },
    "common_gitlab": {
        "Category": "common",
        "Command": "gitlab",
        "P-Summary": "rubi wrapper cli gitlab api",
        "P-Tasks": "creat new project get info specif commit get info job ci pipelin start specif ci job",
        "Summary": "Ruby wrapper and CLI for the GitLab API.",
        "Task-Script": {
            "Create a new project": "gitlab create_project {{project_name}}",
            "Get info about a specific commit": "gitlab commit {{project_name}} {{commit_hash}}",
            "Get info about jobs in a CI pipeline": "gitlab pipeline_jobs {{project_name}} {{pipeline_id}}",
            "Start a specific CI job": "gitlab job_play {{project_name}} {{job_id}}"
        }
    },
    "common_gitlab-ctl": {
        "Category": "common",
        "Command": "gitlab-ctl",
        "P-Summary": "cli tool manag gitlab omnibu",
        "P-Tasks": "display log specif servic display log everi servic keep read ctrl + c press display statu specif servic display statu everi servic restart specif servic restart everi servic",
        "Summary": "CLI tool for managing the GitLab omnibus.",
        "Task-Script": {
            "Display the logs of a specific service": "sudo gitlab-ctl tail {{nginx}}",
            "Display the logs of every service and keep reading until `Ctrl + C` is pressed": "sudo gitlab-ctl tail",
            "Display the status of a specific service": "sudo gitlab-ctl status {{nginx}}",
            "Display the status of every service": "sudo gitlab-ctl status",
            "Restart a specific service": "sudo gitlab-ctl restart {{nginx}}",
            "Restart every service": "sudo gitlab-ctl restart"
        }
    },
    "common_gitlab-runner": {
        "Category": "common",
        "Command": "gitlab-runner",
        "P-Summary": "cli tool manag gitlab runner",
        "P-Tasks": "check regist runner connect gitlab display statu runner servic regist runner regist runner docker executor restart runner servic unregist runner",
        "Summary": "CLI tool for managing GitLab runners.",
        "Task-Script": {
            "Check if the registered runners can connect to GitLab": "sudo gitlab-runner verify",
            "Display the status of the runner service": "sudo gitlab-runner status",
            "Register a runner": "sudo gitlab-runner register --url {{https://gitlab.example.com}} --registration-token {{token}} --name {{name}}",
            "Register a runner with a Docker executor": "sudo gitlab-runner register --url {{https://gitlab.example.com}} --registration-token {{token}} --name {{name}} --executor {{docker}}",
            "Restart the runner service": "sudo gitlab-runner restart",
            "Unregister a runner": "sudo gitlab-runner unregister --name {{name}}"
        }
    },
    "common_gitsome": {
        "Category": "common",
        "Command": "gitsome",
        "P-Summary": "terminal-bas interfac github access via gh command\nalso provid menu-styl autocomplet suggest git command",
        "P-Tasks": "enter gitsom shell option enabl autocomplet interact help git gh command list notif current account would seen http : github com notif list current account star repo filter given search string setup github integr current account view recent activ feed given github user use default pager e g\nless view recent activ feed given github repositori",
        "Summary": "A terminal-based interface for GitHub, accessed via the `gh` command.\nIt also provides menu-style autocomplete suggestions for `git` commands.",
        "Task-Script": {
            "Enter the gitsome shell (optional), to enable autocompletion and interactive help for git (and gh) commands": "gitsome",
            "List notifications for the current account (as would be seen in https://github.com/notifications)": "gh notifications",
            "List the current account's starred repos, filtered by a given search string": "gh starred \"{{python 3}}\"",
            "Setup GitHub integration with the current account": "gh configure",
            "View the recent activity feed for a given GitHub user, using the default pager (e.g. `less`)": "gh feed {{torvalds}} -p",
            "View the recent activity feed of a given GitHub repository": "gh feed {{tldr-pages/tldr}}"
        }
    },
    "common_gixy": {
        "Category": "common",
        "Command": "gixy",
        "P-Summary": "analyz nginx configur file",
        "P-Tasks": "analyz nginx configur default path : etc nginx nginx conf analyz nginx configur skip specif test analyz nginx configur file specif path analyz nginx configur specif sever level",
        "Summary": "Analyze nginx configuration files.",
        "Task-Script": {
            "Analyze nginx configuration (default path: /etc/nginx/nginx.conf)": "gixy",
            "Analyze nginx configuration but skip specific tests": "gixy --skips {{http_splitting}}",
            "Analyze nginx configuration files on the specific path": "gixy {{path/to/configuration_file_1}} {{path/to/configuration_file_2}}",
            "Analyze nginx configuration with the specific severity level": "gixy {{-l|-ll|-lll}}"
        }
    },
    "common_glab": {
        "Category": "common",
        "Command": "glab",
        "P-Summary": "gitlab cli tool help work gitlab command line",
        "P-Tasks": "clone repositori specif directori creat merg request creat new issu list merg request list pipelin view filter current repositori open issu",
        "Summary": "GitLab CLI tool to help working with GitLab from the command line.",
        "Task-Script": {
            "Clone a repository into a specific directory": "glab repo clone {{user}}/{{repository}} {{directory}}",
            "Create a merge request": "glab mr create",
            "Create a new issue": "glab issue create",
            "List merge requests": "glab mr list",
            "List pipelines": "glab pipeline list",
            "View and filter the current repository's open issues": "glab issue list"
        }
    },
    "common_glances": {
        "Category": "common",
        "Command": "glances",
        "P-Summary": "cross-platform system monitor tool",
        "P-Tasks": "connect glanc server requir password web server mode run server mode allow connect glanc client run termin run web server mode show result browser",
        "Summary": "A cross-platform system monitoring tool.",
        "Task-Script": {
            "Connect to a Glances server": "glances -c {{hostname}}",
            "Require a password in (web) server mode": "glances -s --password",
            "Run in server mode to allow connections from other Glances clients": "glances -s",
            "Run in terminal": "glances",
            "Run in web server mode to show results in browser": "glances -w"
        }
    },
    "common_glib-compile-resources": {
        "Category": "common",
        "Command": "glib-compile-resources",
        "P-Summary": "compil resourc file e g\nimag binari resourc bundl\nmay link gtk applic use gresourc api",
        "P-Tasks": "compil resourc file gresourc xml chosen target file c h gresourc extens compil resourc referenc file gresourc xml gresourc binari compil resourc referenc file gresourc xml c sourc file print list resourc file referenc file gresourc xml",
        "Summary": "Compiles resource files (e.g. images) into a binary resource bundle.\nThese may be linked into GTK applications using the GResource API.",
        "Task-Script": {
            "Compile resources in \"file.gresource.xml\" to a chosen target file, with .c, .h or .gresource extension": "glib-compile-resources --generate --target={{file.ext}} {{file.gresource.xml}}",
            "Compile resources referenced in \"file.gresource.xml\" to a .gresource binary": "glib-compile-resources {{file.gresource.xml}}",
            "Compile resources referenced in \"file.gresource.xml\" to a C source file": "glib-compile-resources --generate-source {{file.gresource.xml}}",
            "Print a list of resource files referenced in \"file.gresource.xml\"": "glib-compile-resources --generate-dependencies {{file.gresource.xml}}"
        }
    },
    "common_glow": {
        "Category": "common",
        "Command": "glow",
        "P-Summary": "render markdown termin\ninfomr : http : github com charmbracelet glow",
        "P-Tasks": "render markdown file termin run glow select file view view github gitlab readm view file url view markdown file use pagin",
        "Summary": "Render Markdown in the terminal.\nMore infomration: <https://github.com/charmbracelet/glow>.",
        "Task-Script": {
            "Render a markdown file to the terminal": "glow {{path/to/file}}",
            "Run glow and select a file to view": "glow",
            "View a GitHub/GitLab README": "glow {{github.com/owner/repository}}",
            "View a file from a URL": "glow {{https://example.com/file.md}}",
            "View a markdown file using a paginator": "glow -p {{path/to/file}}"
        }
    },
    "common_gnomon": {
        "Category": "common",
        "Command": "gnomon",
        "P-Summary": "util annot consol log statement timestamp find slow process",
        "P-Tasks": "set high threshold 0 5 second elaps time exceed timestamp color bright red set medium threshold 0 2 second timestamp color bright yellow show absolut timestamp utc show number second sinc start process use unix do pipe pipe stdout command gnomon",
        "Summary": "Utility to annotate console logging statements with timestamps and find slow processes.",
        "Task-Script": {
            "Set a high threshold of 0.5 seconds for the elapsed time; exceeding which the timestamp will be colored bright red": "{{npm test}} | gnomon --high {{0.5}}",
            "Set a medium threshold of 0.2 seconds (Timestamp will be colored bright yellow)": "{{npm test}} | gnomon --medium {{0.2}}",
            "Show an absolute timestamp in UTC": "{{npm test}} | gnomon --type=absolute",
            "Show number of seconds since the start of the process": "{{npm test}} | gnomon --type=elapsed-total",
            "Use UNIX (or DOS) pipes to pipe the `stdout` of any command through gnomon": "{{npm test}} | gnomon"
        }
    },
    "common_gnuplot": {
        "Category": "common",
        "Command": "gnuplot",
        "P-Summary": "graph plotter output sever format",
        "P-Tasks": "persist graph plot preview window gnuplot exit plot graph specifi graph definit file set output format execut command load definit file start interact graph plot shell",
        "Summary": "A graph plotter that outputs in several formats.",
        "Task-Script": {
            "Persist the graph plot preview window after gnuplot exits": "gnuplot --persist {{path/to/definition.plt}}",
            "Plot the graph for the specified graph definition file": "gnuplot {{path/to/definition.plt}}",
            "Set the output format by executing a command before loading the definition file": "gnuplot -e \"{{set output \"path/to/filename.png\" size 1024,768}}\" {{path/to/definition.plt}}",
            "Start the interactive graph plotting shell": "gnuplot"
        }
    },
    "common_go": {
        "Category": "common",
        "Command": "go",
        "P-Summary": "tool manag go sourc code",
        "P-Tasks": "compil sourc file name execut compil instal current packag compil run sourc file contain main packag compil packag present current directori download instal packag specifi import path execut test case current packag file end _test go initi new modul current directori",
        "Summary": "Tool for managing go source code.",
        "Task-Script": {
            "Compile a source file into a named executable": "go build -o {{executable}} {{file}}.go",
            "Compile and install the current package": "go install",
            "Compile and run a source file (it has to contain a `main` package)": "go run {{file}}.go",
            "Compile the package present in the current directory": "go build",
            "Download and install a package, specified by its import path": "go get {{package_path}}",
            "Execute all test cases of the current package (files have to end with `_test.go`)": "go test",
            "Initialize a new module in the current directory": "go mod init {{module_name}}"
        }
    },
    "common_go bug": {
        "Category": "common",
        "Command": "go bug",
        "P-Summary": "report bug",
        "P-Tasks": "open web page start bug report",
        "Summary": "Report a bug.",
        "Task-Script": {
            "Open a web page to start a bug report": "go bug"
        }
    },
    "common_go build": {
        "Category": "common",
        "Command": "go build",
        "P-Summary": "compil go sourc",
        "P-Tasks": "compil file compil main packag execut data race detect compil packag compil specifi output filenam",
        "Summary": "Compile Go sources.",
        "Task-Script": {
            "Compile a file": "go build {{path/to/main.go}}",
            "Compile a main package into an executable, with data race detection": "go build -race -o {{path/to/executable}} {{path/to/main/package}}",
            "Compile a package": "go build -o {{path/to/binary}} {{path/to/package}}",
            "Compile, specifying the output filename": "go build -o {{path/to/binary}} {{path/to/source.go}}"
        }
    },
    "common_go clean": {
        "Category": "common",
        "Command": "go clean",
        "P-Summary": "remov object file cach file",
        "P-Tasks": "delet cach test result delet build cach delet modul cach print remov command instead actual remov anyth",
        "Summary": "Remove object files and cached files.",
        "Task-Script": {
            "Delete all cached test results": "go clean -testcache",
            "Delete the build cache": "go clean -cache",
            "Delete the module cache": "go clean -modcache",
            "Print the remove commands instead of actually removing anything": "go clean -n"
        }
    },
    "common_go doc": {
        "Category": "common",
        "Command": "go doc",
        "P-Summary": "show document packag symbol",
        "P-Tasks": "show specif symbol show also document symbol show also sourc show document current packag show packag document export symbol",
        "Summary": "Show documentation for a package or symbol.",
        "Task-Script": {
            "Show a specific symbol": "go doc -all -src {{encoding/json.Number}}",
            "Show also documentation of symbols": "go doc -all {{encoding/json}}",
            "Show also sources": "go doc -all -src {{encoding/json}}",
            "Show documentation for the current package": "go doc",
            "Show package documentation and exported symbols": "go doc {{encoding/json}}"
        }
    },
    "common_go env": {
        "Category": "common",
        "Command": "go env",
        "P-Summary": "manag environ variabl use go toolchain",
        "P-Tasks": "reset environ variabl valu set environ variabl valu show specif environ variabl show environ variabl",
        "Summary": "Manage environment variables used by the Go toolchain.",
        "Task-Script": {
            "Reset an environment variable's value": "go env -u {{GOBIN}}",
            "Set an environment variable to a value": "go env -w {{GOBIN}}={{path/to/directory}}",
            "Show a specific environment variable": "go env {{GOPATH}}",
            "Show all environment variables": "go env"
        }
    },
    "common_go fix": {
        "Category": "common",
        "Command": "go fix",
        "P-Summary": "updat packag use new api",
        "P-Tasks": "updat packag use new api",
        "Summary": "Update packages to use new APIs.",
        "Task-Script": {
            "Update packages to use new APIs": "go fix {{packages}}"
        }
    },
    "common_go generate": {
        "Category": "common",
        "Command": "go generate",
        "P-Summary": "gener go file run command within sourc file",
        "P-Tasks": "gener go file run command within sourc file",
        "Summary": "Generate Go files by running commands within source files.",
        "Task-Script": {
            "Generate Go files by running commands within source files": "go generate"
        }
    },
    "common_go list": {
        "Category": "common",
        "Command": "go list",
        "P-Summary": "list packag modul",
        "P-Tasks": "list modul depend avail updat list packag list packag json format list standard packag",
        "Summary": "List packages or modules.",
        "Task-Script": {
            "List module dependencies and available updates": "go list -m -u all",
            "List packages": "go list ./...",
            "List packages in json format": "go list -json time net/http",
            "List standard packages": "go list std"
        }
    },
    "common_go mod": {
        "Category": "common",
        "Command": "go mod",
        "P-Summary": "modul mainten",
        "P-Tasks": "add miss remov unus modul copi sourc depend vendor directori download modul local cach initi new modul current directori verifi depend expect content",
        "Summary": "Module maintenance.",
        "Task-Script": {
            "Add missing and remove unused modules": "go mod tidy",
            "Copy sources of all dependencies into the vendor directory": "go mod vendor",
            "Download modules to local cache": "go mod download",
            "Initialize new module in current directory": "go mod init {{moduleName}}",
            "Verify dependencies have expected content": "go mod verify"
        }
    },
    "common_go version": {
        "Category": "common",
        "Command": "go version",
        "P-Summary": "print go version",
        "P-Tasks": "print go version print go version use build name execut file",
        "Summary": "Print Go version.",
        "Task-Script": {
            "Print Go version": "go version",
            "Print the Go version used to build the named executable file": "go version {{path/to/executable}}"
        }
    },
    "common_gocryptfs": {
        "Category": "common",
        "Command": "gocryptfs",
        "P-Summary": "encrypt overlay filesystem written go",
        "P-Tasks": "chang password initi encrypt filesystem make encrypt snapshot plain directori mount encrypt filesystem mount explicit master key instead password",
        "Summary": "Encrypted overlay filesystem written in Go.",
        "Task-Script": {
            "Change the password": "gocryptfs --passwd {{path/to/cipher_dir}}",
            "Initialize an encrypted filesystem": "gocryptfs -init {{path/to/cipher_dir}}",
            "Make an encrypted snapshot of a plain directory": "gocryptfs --reverse {{path/to/plain_dir}} {{path/to/cipher_dir}}",
            "Mount an encrypted filesystem": "gocryptfs {{path/to/cipher_dir}} {{path/to/mount_point}}",
            "Mount with the explicit master key instead of password": "gocryptfs --masterkey {{path/to/cipher_dir}} {{path/to/mount_point}}"
        }
    },
    "common_godoc": {
        "Category": "common",
        "Command": "godoc",
        "P-Summary": "show document go packag",
        "P-Tasks": "creat index file display help packag fmt display help function printf fmt packag serv document web server port 6060 use given index file search doc",
        "Summary": "Show documentation for go packages.",
        "Task-Script": {
            "Create an index file": "godoc -write_index -index_files={{path/to/file}}",
            "Display help for package \"fmt\"": "godoc {{fmt}}",
            "Display help for the function \"Printf\" of \"fmt\" package": "godoc {{fmt}} {{Printf}}",
            "Serve documentation as a web server on port \"6060\"": "godoc -http=:{{6060}}",
            "Use the given index file to search the docs": "godoc -http=:{{6060}} -index -index_files={{path/to/file}}"
        }
    },
    "common_godot": {
        "Category": "common",
        "Command": "godot",
        "P-Summary": "open sourc 2d 3d game engin",
        "P-Tasks": "edit project current directori must contain project godot file execut standalon gdscript file script must inherit scenetre mainloop export project given export preset preset must defin project open project manag even current directori contain project godot file run project current directori contain project godot file otherwis open project manag",
        "Summary": "An open source 2D and 3D game engine.",
        "Task-Script": {
            "Edit a project (the current directory must contain a `project.godot` file)": "godot -e",
            "Execute a standalone GDScript file (the script must inherit from `SceneTree` or `MainLoop`)": "godot -s {{script.gd}}",
            "Export a project for a given export preset (the preset must be defined in the project)": "godot --export {{preset}} {{output_path}}",
            "Open the project manager even if the current directory contains a `project.godot` file": "godot -p",
            "Run a project if the current directory contains a `project.godot` file, otherwise open the project manager": "godot"
        }
    },
    "common_gofmt": {
        "Category": "common",
        "Command": "gofmt",
        "P-Summary": "tool format go sourc code",
        "P-Tasks": "format file display result consol format file simplifi code overwrit origin file format file overwrit origin file in-plac print includ spuriou error",
        "Summary": "Tool for formatting Go source code.",
        "Task-Script": {
            "Format a file and display the result to the console": "gofmt {{source.go}}",
            "Format a file, and then simplify the code, overwriting the original file": "gofmt -s -w {{source.go}}",
            "Format a file, overwriting the original file in-place": "gofmt -w {{source.go}}",
            "Print all (including spurious) errors": "gofmt -e {{source.go}}"
        }
    },
    "common_goimports": {
        "Category": "common",
        "Command": "goimports",
        "P-Summary": "updat go import line ad miss one remov unreferenc one",
        "P-Tasks": "display diff write result back sourc file display complet import sourc file set import prefix string 3rd-parti packag comma-separ list write result back sourc file instead standard output",
        "Summary": "Updates Go import lines, adding missing ones and removing unreferenced ones.",
        "Task-Script": {
            "Display diffs and write the result back to the source file": "goimports -w -d {{file}}.go",
            "Display the completed import source file": "goimports {{file}}.go",
            "Set the import prefix string after 3rd-party packages (comma-separated list)": "goimports -local {{/path/to/package}} {{file}}.go",
            "Write the result back to the source file instead of the standard output": "goimports -w {{file}}.go"
        }
    },
    "common_googler": {
        "Category": "common",
        "Command": "googler",
        "P-Summary": "search googl command line",
        "P-Tasks": "disabl automat spell correct help interact mode perform in-plac self-upgrad search googl open first result web browser search googl keyword search one site keyword show googl search result json format show n search result default 10",
        "Summary": "Search Google from command line.",
        "Task-Script": {
            "Disable automatic spelling correction": "googler -x {{keyword}}",
            "For more help in interactive mode": "?",
            "Perform in-place self-upgrade": "googler -u",
            "Search Google and open the first result in web browser": "googler -j {{keyword}}",
            "Search Google for a keyword": "googler {{keyword}}",
            "Search one site for a keyword": "googler -w {{site}} {{keyword}}",
            "Show Google search result in JSON format": "googler --json {{keyword}}",
            "Show N search results (default 10)": "googler -n {{N}} {{keyword}}"
        }
    },
    "common_gopass": {
        "Category": "common",
        "Command": "gopass",
        "P-Summary": "standard unix password manag team\nwritten go",
        "P-Tasks": "creat new entri initialis configur set mount share git store search interact use keyword search use keyword show particular password entri show store sync mount store",
        "Summary": "Standard Unix Password Manager for Teams. Written in Go.",
        "Task-Script": {
            "Create a new entry": "gopass new",
            "Initialise the configuration settings": "gopass init",
            "Mount a shared git store": "gopass mounts add {{store_name}} {{git_repo_url}}",
            "Search interactively using a keyword": "gopass show {{keyword}}",
            "Search using a keyword": "gopass find {{keyword}}",
            "Show a particular password entry": "gopass {{store_name|path/to/directory|email@email.com}}",
            "Show all stores": "gopass mounts",
            "Sync all mounted stores": "gopass sync"
        }
    },
    "common_gops": {
        "Category": "common",
        "Command": "gops",
        "P-Summary": "cli tool list diagnos go process current run system",
        "P-Tasks": "display process tree print go process run local print inform process print current runtim memori statist print current stack trace target program",
        "Summary": "CLI tool which lists and diagnoses Go processes currently running on your system.",
        "Task-Script": {
            "Display a process tree": "gops tree",
            "Print all go processes running locally": "gops",
            "Print more information about a process": "gops {{pid}}",
            "Print the current runtime memory statistics": "gops memstats {{pid|addr}}",
            "Print the current stack trace from a target program": "gops stack {{pid|addr}}"
        }
    },
    "common_goreload": {
        "Category": "common",
        "Command": "goreload",
        "P-Summary": "live reload util go program",
        "P-Tasks": "reload whenev file chang set custom log prefix default goreload set name binari file watch default goreload",
        "Summary": "Live reload utility for Go programs.",
        "Task-Script": {
            "Reload whenever any file changes": "goreload --all",
            "Set a custom log prefix (defaults to \"goreload\")": "goreload --logPrefix {{prefix}} {{file}}.go",
            "Set the name of the binary file to watch (defaults to \".goreload\")": "goreload -b {{path/to/binary}} {{file}}.go"
        }
    },
    "common_gotty": {
        "Category": "common",
        "Command": "gotty",
        "P-Summary": "share termin web applic",
        "P-Tasks": "share result command share credenti basic auth share write permiss",
        "Summary": "Share your terminal as a web application.",
        "Task-Script": {
            "Share result of command": "gotty {{command}}",
            "Share with credential (Basic Auth)": "gotty -w -c {{username}}:{{password}} {{shell}}",
            "Share with write permission": "gotty -w {{shell}}"
        }
    },
    "common_gource": {
        "Category": "common",
        "Command": "gource",
        "P-Summary": "render anim tree diagram git svn mercuri bazaar repositori\nshow file directori creat modifi remov time",
        "P-Tasks": "run gourc directori repositori root directori root sought run gourc current directori custom output resolut set custom time scale anim set titl anim set fullscreen mode custom background color set long day anim combin -c provid",
        "Summary": "Renders an animated tree diagram of Git, SVN, Mercurial and Bazaar repositories.\nIt shows files and directories being created, modified or removed over time.",
        "Task-Script": {
            "Run gource in a directory (if it isn't the repository's root directory, the root is sought up from there)": "gource {{path/to/repository}}",
            "Run gource in the current directory, with a custom output resolution": "gource -{{width}}x{{height}}",
            "Set a custom time scale for the animation": "gource -c {{time_scale_multiplier}}",
            "Set a title for the animation": "gource --title {{title}}",
            "Set fullscreen mode and a custom background color": "gource -f -b {{hex_color_code}}",
            "Set how long each day should be in the animation (this combines with -c, if provided)": "gource -s {{seconds}}"
        }
    },
    "common_gox": {
        "Category": "common",
        "Command": "gox",
        "P-Summary": "tool cross-compil go program",
        "P-Tasks": "compil go program current directori oper system architectur combin compil current directori particular oper system compil current directori singl oper system architectur combin download compil go program remot url",
        "Summary": "A tool for cross-compiling Go programs.",
        "Task-Script": {
            "Compile Go program in the current directory for all operating systems and architecture combinations": "gox",
            "Compile current directory for a particular operating system": "gox -os=\"{{os}}\"",
            "Compile current directory for a single operating system and architecture combination": "gox -osarch=\"{{os}}/{{arch}}\"",
            "Download and compile a Go program from a remote URL": "gox {{url_1}} {{url_2}}"
        }
    },
    "common_gpg": {
        "Category": "common",
        "Command": "gpg",
        "P-Summary": "gnu privaci guard 2",
        "P-Tasks": "decrypt specifi file write result standard output encrypt specifi file specifi recipi write output new file gpg append encrypt specifi file passphras write output new file gpg append export privat key specifi email address standard output export public key specifi email address standard output import public key list import key",
        "Summary": "GNU Privacy Guard 2.",
        "Task-Script": {
            "Decrypt a specified file, writing the result to the standard output": "gpg2 --decrypt {{path/to/doc.txt.gpg}}",
            "Encrypt a specified file for a specified recipient, writing the output to a new file with `.gpg` appended": "gpg2 --encrypt --recipient {{alice@example.com}} {{path/to/doc.txt}}",
            "Encrypt a specified file with only a passphrase, writing the output to a new file with `.gpg` appended": "gpg2 --symmetric {{path/to/doc.txt}}",
            "Export the private key with a specified email address to the standard output": "gpg2 --export-secret-keys --armor {{alice@example.com}}",
            "Export the public key of a specified email address to the standard output": "gpg2 --export --armor {{alice@example.com}}",
            "Import a public key": "gpg2 --import {{path/to/public_key.gpg}}",
            "List imported keys": "gpg2 --list-keys"
        }
    },
    "common_gpg-zip": {
        "Category": "common",
        "Command": "gpg-zip",
        "P-Summary": "encrypt file directori archiv use gpg",
        "P-Tasks": "decrypt archiv gpg directori name encrypt directori archiv gpg use passphras list content encrypt archiv gpg",
        "Summary": "Encrypt files and directories in an archive using GPG.",
        "Task-Script": {
            "Decrypt archive.gpg into a directory of the same name": "gpg-zip --decrypt {{path/to/archive.gpg}}",
            "Encrypt a directory into archive.gpg using a passphrase": "gpg-zip --symmetric --output {{archive.gpg}} {{path/to/directory}}",
            "List the contents of the encrypted archive.gpg": "gpg-zip --list-archive {{path/to/archive.gpg}}"
        }
    },
    "common_gpgv": {
        "Category": "common",
        "Command": "gpgv",
        "P-Summary": "verifi openpgp signatur",
        "P-Tasks": "add file list keyr singl export key also count keyr verifi sign file verifi sign file use detach signatur",
        "Summary": "Verify OpenPGP signatures.",
        "Task-Script": {
            "Add a file to the list of keyrings (a single exported key also counts as a keyring)": "gpgv --keyring {{./alice.keyring}} {{path/to/signature}} {{path/to/file}}",
            "Verify a signed file": "gpgv {{path/to/file}}",
            "Verify a signed file using a detached signature": "gpgv {{path/to/signature}} {{path/to/file}}"
        }
    },
    "common_gplusplus": {
        "Category": "common",
        "Command": "gplusplus",
        "P-Summary": "compil c++ sourc file\npart gcc gnu compil collect",
        "P-Tasks": "choos languag standard compil c++98 c++11 c++14 c++17 compil sourc code file execut binari display almost error warn includ librari locat differ path sourc file",
        "Summary": "Compiles C++ source files.\nPart of GCC (GNU Compiler Collection).",
        "Task-Script": {
            "Choose a language standard to compile for(C++98/C++11/C++14/C++17)": "g++ {{source.cpp}} -std={{language_standard}} -o {{output_executable}}",
            "Compile a source code file into an executable binary": "g++ {{source.cpp}} -o {{output_executable}}",
            "Display (almost) all errors and warnings": "g++ {{source.cpp}} -Wall -o {{output_executable}}",
            "Include libraries located at a different path than the source file": "g++ {{source.cpp}} -o {{output_executable}} -I{{header_path}} -L{{library_path}} -l{{library_name}}"
        }
    },
    "common_gradle": {
        "Category": "common",
        "Command": "gradle",
        "P-Summary": "gradl open sourc build autom system",
        "P-Tasks": "clear build directori compil packag compil releas packag exclud test task run offlin mode prevent gradl access network build",
        "Summary": "Gradle is an open source build automation system.",
        "Task-Script": {
            "Clear the build directory": "gradle clean",
            "Compile a package": "gradle build",
            "Compile and Release package": "gradle assembleRelease",
            "Exclude test task": "gradle build -x {{test}}",
            "Run in offline mode to prevent gradle from accessing the network during builds": "gradle build --offline"
        }
    },
    "common_grep": {
        "Category": "common",
        "Command": "grep",
        "P-Summary": "match pattern input text\nsupport simpl pattern regular express",
        "P-Tasks": "invert match exclud specif string print 3 line c ontext around b efor fter match print file name correspond line number match search pattern r ecurs current directori show match line n umber gnore non-text file search pattern within file search exact string use extend regular express support\n+ case-insensit mode use standard input instead file",
        "Summary": "Matches patterns in input text.\nSupports simple patterns and regular expressions.",
        "Task-Script": {
            "Invert match for excluding specific strings": "grep -v {{search_pattern}}",
            "Print 3 lines of [C]ontext around, [B]efore, or [A]fter each match": "grep -{{C|B|A}} 3 {{search_pattern}} {{path/to/file}}",
            "Print file name with the corresponding line number for each match": "grep -Hn {{search_pattern}} {{path/to/file}}",
            "Search for a pattern [R]ecursively in the current directory, showing matching line [n]umbers, [I]gnoring non-text files": "grep -RIn {{search_pattern}} .",
            "Search for a pattern within a file": "grep {{search_pattern}} {{path/to/file}}",
            "Search for an exact string": "grep -F {{exact_string}} {{path/to/file}}",
            "Use extended regular expressions (supporting `?`, `+`, `{}`, `()` and `|`), in case-insensitive mode": "grep -Ei {{search_pattern}} {{path/to/file}}",
            "Use the standard input instead of a file": "cat {{path/to/file}} | grep {{search_pattern}}"
        }
    },
    "common_grex": {
        "Category": "common",
        "Command": "grex",
        "P-Summary": "simpl command line tool gener regular express",
        "P-Tasks": "add min max quantifi represent repeat sub-str gener case-insensit regex gener simpl regular express replac digit replac space replac unicod word charact w",
        "Summary": "Simple command line tool to generate regular expressions.",
        "Task-Script": {
            "Add {min, max} quantifier representation for repeating sub-strings": "grex -r {{space_separated_strings}}",
            "Generate a case-insensitive regex": "grex -i {{space_separated_strings}}",
            "Generate a simple regular expression": "grex {{space_separated_strings}}",
            "Replace digits with '\\d'": "grex -d {{space_separated_strings}}",
            "Replace spaces with '\\s'": "grex -s {{space_separated_strings}}",
            "Replace unicode word character with '\\w'": "grex -w {{space_separated_strings}}"
        }
    },
    "common_groff": {
        "Category": "common",
        "Command": "groff",
        "P-Summary": "typeset program read plain text mix format command produc format output\ngnu replac troff nroff unix command text format",
        "P-Tasks": "process roff file use tbl pic preprocessor macro set render man page plain text display result render man page html file render man page use ascii output devic display use pager run groff command preprocessor macro option guess grog util",
        "Summary": "Typesetting program that reads plain text mixed with formatting commands and produces formatted output.\nIt is the GNU replacement for the `troff` and `nroff` Unix commands for text formatting.",
        "Task-Script": {
            "Process a roff file using the `tbl` and `pic` preprocessors, and the `me` macro set": "groff -t -p -me -T utf8 {{foo.me}}",
            "Render a man page as plain text, and display the result": "groff -man -T utf8 {{manpage.1}}",
            "Render a man page into an HTML file": "groff -man -T html {{manpage.1}} > {{page.html}}",
            "Render a man page using the ASCII output device, and display it using a pager": "groff -man -T ascii {{manpage.1}} | less",
            "Run a `groff` command with preprocessor and macro options guessed by the `grog` utility": "eval \"$(grog -T utf8 {{foo.me}})\""
        }
    },
    "common_groups": {
        "Category": "common",
        "Command": "groups",
        "P-Summary": "print group membership user",
        "P-Tasks": "print group membership list user print group membership specif user print group membership current user",
        "Summary": "Print group memberships for a user.",
        "Task-Script": {
            "Print group memberships for a list of users": "groups {{username1}} {{username2}} {{username3}}",
            "Print group memberships for a specific user": "groups {{username}}",
            "Print group memberships for the current user": "groups"
        }
    },
    "common_grpcurl": {
        "Category": "common",
        "Command": "grpcurl",
        "P-Summary": "like curl grpc : cli tool interact grpc server",
        "P-Tasks": "list method particular servic list servic expos server send request header bodi send empti request",
        "Summary": "Like cURL, but for gRPC: CLI tool for interacting with gRPC servers.",
        "Task-Script": {
            "List all methods in a particular service": "grpcurl {{grpc.server.com:443}} list {{my.custom.server.Service}}",
            "List all services exposed by a server": "grpcurl {{grpc.server.com:443}} list",
            "Send a request with a header and a body": "grpcurl -H \"{{Authorization: Bearer $token}}\" -d {{'{\"foo\": \"bar\"}'}} {{grpc.server.com:443}} {{my.custom.server.Service/Method}}",
            "Send an empty request": "grpcurl {{grpc.server.com:443}} {{my.custom.server.Service/Method}}"
        }
    },
    "common_grumphp": {
        "Category": "common",
        "Command": "grumphp",
        "P-Summary": "php compos plugin enabl sourc code qualiti check",
        "P-Tasks": "check everi version file regist git hook trigger pre-commit hook manual",
        "Summary": "A PHP Composer plugin that enables source code quality checks.",
        "Task-Script": {
            "Check every versioned file": "grumphp run",
            "Register the Git hooks": "grumphp git:init",
            "Trigger the pre-commit hook manually": "grumphp git:pre-commit"
        }
    },
    "common_grunt": {
        "Category": "common",
        "Command": "grunt",
        "P-Summary": "javascript task runner autom process",
        "P-Tasks": "list avail option perform dry-run without write file run one specif space-separ task run default task process specifi addit directori scan task specifi altern base path rel file specifi altern configur file",
        "Summary": "A JavaScript task runner for automating processes.",
        "Task-Script": {
            "List all available options": "grunt --help",
            "Perform a dry-run without writing any files": "grunt --no-write",
            "Run one or more specific space-separated task(s)": "grunt {{task_name}}",
            "Run the default task process": "grunt",
            "Specify an additional directory to scan for tasks in": "grunt --tasks {{path/to/directory}}",
            "Specify an alternative base path for relative files": "grunt --base {{path/to/directory}}",
            "Specify an alternative configuration file": "grunt --gruntfile {{path/to/file}}"
        }
    },
    "common_gtop": {
        "Category": "common",
        "Command": "gtop",
        "P-Summary": "system monitor dashboard termin",
        "P-Tasks": "show system stat dashboard sort cpu usag sort memori usag",
        "Summary": "System monitoring dashboard for the terminal.",
        "Task-Script": {
            "Show the system stats dashboard": "gtop",
            "Sort by CPU usage": "c",
            "Sort by memory usage": "m"
        }
    },
    "common_guacd": {
        "Category": "common",
        "Command": "guacd",
        "P-Summary": "apach guacamol proxi daemon\nsupport loader client plugin interfac guacamol protocol arbitrari remot desktop protocol e g\nrdp vnc",
        "P-Tasks": "bind specif port localhost start debug mode keep process foreground start tl support write pid file",
        "Summary": "Apache Guacamole proxy daemon.\nSupport loader for client plugins to interface between the Guacamole protocol and any arbitrary remote desktop protocol (e.g. RDP, VNC, Other).",
        "Task-Script": {
            "Bind to a specific port on localhost": "guacd -b {{127.0.0.1}} -l {{4823}}",
            "Start in debug mode, keeping the process in the foreground": "guacd -f -L {{debug}}",
            "Start with TLS support": "guacd -C {{my-cert.crt}} -K {{my-key.pem}}",
            "Write the PID to a file": "guacd -p {{path/to/file.pid}}"
        }
    },
    "common_guetzli": {
        "Category": "common",
        "Command": "guetzli",
        "P-Summary": "jpeg imag compress util",
        "P-Tasks": "compress jpeg imag compress jpeg imag desir visual qualiti 84-100 creat compress jpeg imag png imag",
        "Summary": "JPEG image compression utility.",
        "Task-Script": {
            "Compress a JPEG image": "guetzli {{input.jpg}} {{output.jpg}}",
            "Compress a JPEG image with desired visual quality (84-100)": "guetzli --quality {{quality_value}} {{input.jpg}} {{output.jpg}}",
            "Create compressed JPEG image from PNG image": "guetzli {{input.png}} {{output.jpg}}"
        }
    },
    "common_guile": {
        "Category": "common",
        "Command": "guile",
        "P-Summary": "guil scheme interpret",
        "P-Tasks": "execut scheme express execut script given scheme file listen port unix domain socket default port 37146 remot repl connect start guil scheme repl",
        "Summary": "Guile Scheme interpreter.",
        "Task-Script": {
            "Execute a Scheme expression": "guile -c \"{{expression}}\"",
            "Execute the script in a given Scheme file": "guile {{script.scm}}",
            "Listen on a port or a Unix domain socket (the default is port 37146) for remote REPL connections": "guile --listen={{port_or_socket}}",
            "Start the Guile Scheme REPL": "guile"
        }
    },
    "common_gulp": {
        "Category": "common",
        "Command": "gulp",
        "P-Summary": "javascript task runner stream build system\ntask defin within gulpfil js project root",
        "P-Tasks": "run individu task run default task",
        "Summary": "JavaScript task runner and streaming build system.\nTasks are defined within gulpfile.js at the project root.",
        "Task-Script": {
            "Run individual tasks": "gulp {{task}} {{othertask}}",
            "Run the default task": "gulp"
        }
    },
    "common_gunicorn": {
        "Category": "common",
        "Command": "gunicorn",
        "P-Summary": "python wsgi http server",
        "P-Tasks": "listen port 8080 localhost run python web app run app http turn live reload use 4 worker process handl request use 4 worker thread handl request",
        "Summary": "Python WSGI HTTP Server.",
        "Task-Script": {
            "Listen on port 8080 on localhost": "gunicorn --bind {{localhost}}:{{8080}} {{import.path:app_object}}",
            "Run Python web app": "gunicorn {{import.path:app_object}}",
            "Run app over HTTPS": "gunicorn --certfile {{cert.pem}} --keyfile {{key.pem}} {{import.path:app_object}}",
            "Turn on live reload": "gunicorn --reload {{import.path:app_object}}",
            "Use 4 worker processes for handling requests": "gunicorn --workers {{4}} {{import.path:app_object}}",
            "Use 4 worker threads for handling requests": "gunicorn --threads {{4}} {{import.path:app_object}}"
        }
    },
    "common_gunzip": {
        "Category": "common",
        "Command": "gunzip",
        "P-Summary": "extract file gzip gz archiv",
        "P-Tasks": "extract file archiv replac origin file exist extract file target destin list content compress file",
        "Summary": "Extract file(s) from a gzip (.gz) archive.",
        "Task-Script": {
            "Extract a file from an archive, replacing the original file if it exists": "gunzip {{archive.tar.gz}}",
            "Extract a file to a target destination": "gunzip -c {{archive.tar.gz}} > {{archive.tar}}",
            "List the contents of a compressed file": "gunzip -l {{file.txt.gz}}"
        }
    },
    "common_gzip": {
        "Category": "common",
        "Command": "gzip",
        "P-Summary": "compress uncompress file gzip compress lz77",
        "P-Tasks": "compress file specifi output filenam compress file replac gzip compress version decompress file replac origin uncompress version decompress gzip file specifi output filenam specifi compress level\n1 fastest worst 9 slowest best default level 6",
        "Summary": "Compress/uncompress files with gzip compression (LZ77).",
        "Task-Script": {
            "Compress a file specifying the output filename": "gzip -c {{file.ext}} > {{compressed_file.ext.gz}}",
            "Compress a file, replacing it with a gzipped compressed version": "gzip {{file.ext}}",
            "Decompress a file, replacing it with the original uncompressed version": "gzip -d {{file.ext}}.gz",
            "Decompress a gzipped file specifying the output filename": "gzip -c -d {{file.ext}}.gz > {{uncompressed_file.ext}}",
            "Specify the compression level. 1=Fastest (Worst), 9=Slowest (Best), Default level is 6": "gzip -9 -c {{file.ext}} > {{compressed_file.ext.gz}}"
        }
    },
    "common_handbrakecli": {
        "Category": "common",
        "Command": "handbrakecli",
        "P-Summary": "command-lin interfac handbrak video convers tool",
        "P-Tasks": "convert video file mkv aac 160kbit audio x264 crf20 video convert avi video mp4 use android preset list avail preset resiz video file 320x240",
        "Summary": "Command-line interface to the HandBrake video conversion tool.",
        "Task-Script": {
            "Convert a video file to MKV (AAC 160kbit audio and x264 CRF20 video)": "handbrakecli -i {{input.avi}} -o {{output.mkv}} -e x264 -q 20 -B 160",
            "Convert an AVI video to MP4 using the Android preset": "handbrakecli --preset=\"Android\" -i {{input.ext}} -o {{output.mp4}}",
            "List available presets": "handbrakecli --preset-list",
            "Resize a video file to 320x240": "handbrakecli -i {{input.mp4}} -o {{output.mp4} -w 320 -l 240"
        }
    },
    "common_hangups": {
        "Category": "common",
        "Command": "hangups",
        "P-Summary": "third parti command line client googl hangout",
        "P-Tasks": "set refresh token hangup start hangup view troubeshoot inform help",
        "Summary": "Third party command line client for Google Hangouts.",
        "Task-Script": {
            "Set a refresh token for hangups": "hangups --token-path {{/path/to/token}}",
            "Start hangups": "hangups",
            "View troubeshooting information and help": "hangups -h"
        }
    },
    "common_haxelib": {
        "Category": "common",
        "Command": "haxelib",
        "P-Summary": "hax librari manag",
        "P-Tasks": "instal hax librari instal develop version librari git repositori search hax librari upgrad instal hax librari",
        "Summary": "Haxe Library Manager.",
        "Task-Script": {
            "Install a Haxe library": "haxelib install {{libname}}",
            "Install the development version of a library from a Git repository": "haxelib git {{libname}} {{git_url}}",
            "Search for a Haxe library": "haxelib search {{keyword}}",
            "Upgrade all installed Haxe libraries": "haxelib upgrade"
        }
    },
    "common_head": {
        "Category": "common",
        "Command": "head",
        "P-Summary": "output first part file",
        "P-Tasks": "output everyth last byte file output everyth last line file output first byte file output first line file",
        "Summary": "Output the first part of files.",
        "Task-Script": {
            "Output everything but the last few bytes of a file": "head -c -{{size_in_bytes}} {{filename}}",
            "Output everything but the last few lines of a file": "head -n -{{count_of_lines}} {{filename}}",
            "Output the first few bytes of a file": "head -c {{size_in_bytes}} {{filename}}",
            "Output the first few lines of a file": "head -n {{count_of_lines}} {{filename}}"
        }
    },
    "common_helm": {
        "Category": "common",
        "Command": "helm",
        "P-Summary": "helm packag manag kubernet",
        "P-Tasks": "add new helm repositori creat helm chart delet helm repositori download helm chart tar archiv instal helm chart list helm repositori updat helm depend updat helm repositori",
        "Summary": "Helm is a package manager for Kubernetes.",
        "Task-Script": {
            "Add a new helm repository": "helm repo add {{repo_name}}",
            "Create a helm chart": "helm create {{chart_name}}",
            "Delete a helm repository": "helm repo remove {{repo_name}}",
            "Download helm chart as a tar archive": "helm get {{chart_release_name}}",
            "Install a helm chart": "helm install {{repo_name}}/{{chart_name}}",
            "List helm repositories": "helm repo list",
            "Update helm dependencies": "helm dependency update",
            "Update helm repositories": "helm repo update"
        }
    },
    "common_help2man": {
        "Category": "common",
        "Command": "help2man",
        "P-Summary": "produc simpl man page execut -- help -- version output",
        "P-Tasks": "display detail help gener man page execut output file instead stdout specifi name paragraph man page specifi section man page default 1",
        "Summary": "Produce simple man pages from an executable's `--help` and `--version` output.",
        "Task-Script": {
            "Display detailed help": "help2man --help",
            "Generate a man page for an executable": "help2man {{executable}}",
            "Output to a file instead of `stdout`": "help2man {{executable}} --output {{path/to/file}}",
            "Specify the \"name\" paragraph in the man page": "help2man {{executable}} --name {{name}}",
            "Specify the section for the man page (defaults to 1)": "help2man {{executable}} --section {{section}}"
        }
    },
    "common_heroku": {
        "Category": "common",
        "Command": "heroku",
        "P-Summary": "creat manag heroku app command line",
        "P-Tasks": "creat heroku app list dyno heroku virtual machin app login heroku account perman destroy app run one-off process insid dyno heroku virtual machin show log app",
        "Summary": "Create and manage Heroku apps from the command line.",
        "Task-Script": {
            "Create a heroku app": "heroku create",
            "List dynos (Heroku virtual machines) for an app": "heroku ps --app {{app_name}}",
            "Login to your heroku account": "heroku login",
            "Permanently destroy an app": "heroku destroy --app {{app_name}}",
            "Run a one-off process inside a dyno (Heroku virtual machine)": "heroku run {{process_name}} --app {{app_name}}",
            "Show logs for an app": "heroku logs --app {{app_name}}"
        }
    },
    "common_hexo": {
        "Category": "common",
        "Command": "hexo",
        "P-Summary": "fast simpl power blog framework",
        "P-Tasks": "clean cach file db json gener file public creat new articl deploy websit gener static file initi websit start local server",
        "Summary": "A fast, simple & powerful blog framework.",
        "Task-Script": {
            "Clean the cache file (`db.json`) and generated files (`public/`)": "hexo clean",
            "Create a new article": "hexo new {{layout}} {{title}}",
            "Deploy the website": "hexo deploy",
            "Generate static files": "hexo generate",
            "Initialize a website": "hexo init {{path/to/directory}}",
            "Start a local server": "hexo server"
        }
    },
    "common_hexyl": {
        "Category": "common",
        "Command": "hexyl",
        "P-Summary": "simpl hex viewer termin\nuse color output distinguish differ categori byte",
        "P-Tasks": "print 512 byte start 1024th byte print byte 512 1024 file print hexadecim represent file print hexadecim represent first n byte file",
        "Summary": "A simple hex viewer for the terminal. Uses colored output to distinguish different categories of bytes.",
        "Task-Script": {
            "Print 512 bytes starting at the 1024th byte": "hexyl -r {{1024}}:+{{512}} {{path/to/file}}",
            "Print bytes 512 through 1024 of a file": "hexyl -r {{512}}:{{1024}} {{path/to/file}}",
            "Print the hexadecimal representation of a file": "hexyl {{path/to/file}}",
            "Print the hexadecimal representation of the first n bytes of a file": "hexyl -n {{n}} {{path/to/file}}"
        }
    },
    "common_hg": {
        "Category": "common",
        "Command": "hg",
        "P-Summary": "command line interfac mercuri distribut sourc control manag system\nsee hg-add hg-commit page addit inform",
        "P-Tasks": "call gener help call help command check mercuri version execut mercuri command",
        "Summary": "A command line interface for Mercurial, a distributed source control management system.\nSee `hg-add`, `hg-commit` and other pages for additional information.",
        "Task-Script": {
            "Call general help": "hg help",
            "Call help on a command": "hg help {{command}}",
            "Check the Mercurial version": "hg --version",
            "Execute Mercurial command": "hg {{command}}"
        }
    },
    "common_hg add": {
        "Category": "common",
        "Command": "hg add",
        "P-Summary": "add specifi file stage area next commit mercuri",
        "P-Tasks": "add unstag file match specifi pattern add unstag file exclud match specifi pattern add file directori stage area perform test-run without perform action recurs add sub-repositori",
        "Summary": "Adds specified files to the staging area for the next commit in Mercurial.",
        "Task-Script": {
            "Add all unstaged files matching a specified pattern": "hg add --include {{pattern}}",
            "Add all unstaged files, excluding those that match a specified pattern": "hg add --exclude {{pattern}}",
            "Add files or directories to the staging area": "hg add {{path/to/file}}",
            "Perform a test-run without performing any actions": "hg add --dry-run",
            "Recursively add sub-repositories": "hg add --subrepos"
        }
    },
    "common_hg branch": {
        "Category": "common",
        "Command": "hg branch",
        "P-Summary": "creat show branch name",
        "P-Tasks": "creat new branch next commit show name current activ branch",
        "Summary": "Create or show a branch name.",
        "Task-Script": {
            "Create a new branch for the next commit": "hg branch {{branch_name}}",
            "Show the name of the currently active branch": "hg branch"
        }
    },
    "common_hg clone": {
        "Category": "common",
        "Command": "hg clone",
        "P-Summary": "creat copi exist repositori new directori",
        "P-Tasks": "clone repositori specif revis tag branch keep entir histori clone repositori specifi directori clone repositori head specif branch ignor later commit clone repositori specif revis without newer histori clone repositori hg directori without check file",
        "Summary": "Create a copy of an existing repository in a new directory.",
        "Task-Script": {
            "Clone a repository to a specific revision, tag or branch, keeping the entire history": "hg clone --updaterev {{revision}} {{remote_repository_source}}",
            "Clone a repository to a specified directory": "hg clone {{remote_repository_source}} {{destination_path}}",
            "Clone a repository to the head of a specific branch, ignoring later commits": "hg clone --branch {{branch}} {{remote_repository_source}}",
            "Clone a repository up to a specific revision without any newer history": "hg clone --rev {{revision}} {{remote_repository_source}}",
            "Clone a repository with only the \".hg\" directory, without checking out files": "hg clone --noupdate {{remote_repository_source}}"
        }
    },
    "common_hg commit": {
        "Category": "common",
        "Command": "hg commit",
        "P-Summary": "commit stage specifi file repositori",
        "P-Tasks": "commit specif file directori commit file match specifi pattern commit file exclud match specifi pattern commit stage file repositori commit use interact mode commit specif messag",
        "Summary": "Commit all staged or specified files to the repository.",
        "Task-Script": {
            "Commit a specific file or directory": "hg commit {{path/to/file_or_directory}}",
            "Commit all files matching a specified pattern": "hg commit --include {{pattern}}",
            "Commit all files, excluding those that match a specified pattern": "hg commit --exclude {{pattern}}",
            "Commit staged files to the repository": "hg commit",
            "Commit using the interactive mode": "hg commit --interactive",
            "Commit with a specific message": "hg commit --message {{message}}"
        }
    },
    "common_hg init": {
        "Category": "common",
        "Command": "hg init",
        "P-Summary": "creat new repositori specifi directori",
        "P-Tasks": "initialis new repositori current directori initialis new repositori specifi directori",
        "Summary": "Create a new repository in the specified directory.",
        "Task-Script": {
            "Initialise a new repository in the current directory": "hg init",
            "Initialise a new repository in the specified directory": "hg init {{path/to/directory}}"
        }
    },
    "common_hg log": {
        "Category": "common",
        "Command": "hg log",
        "P-Summary": "display revis histori repositori",
        "P-Tasks": "display revis commit specif user display entir revis histori repositori display log inform specif revis display revis histori specif branch display revis histori specif date display revis histori ascii graph display revis histori file name match specifi pattern display revis histori exclud file name match specifi pattern",
        "Summary": "Display the revision history of the repository.",
        "Task-Script": {
            "Display revisions committed by a specific user": "hg log --user {{user}}",
            "Display the entire revision history of the repository": "hg log",
            "Display the log information for a specific revision": "hg log --rev {{revision}}",
            "Display the revision history for a specific branch": "hg log --branch {{branch}}",
            "Display the revision history for a specific date": "hg log --date {{date}}",
            "Display the revision history with an ASCII graph": "hg log --graph",
            "Display the revision history with file names matching a specified pattern": "hg log --include {{pattern}}",
            "Display the revision history, excluding file names that match a specified pattern": "hg log --exclude {{pattern}}"
        }
    },
    "common_hg pull": {
        "Category": "common",
        "Command": "hg pull",
        "P-Summary": "pull chang specifi repositori local repositori",
        "P-Tasks": "pull chang even remot repositori unrel pull specifi sourc repositori pull default sourc path specifi specif bookmark pull specifi specif branch pull specifi specif revis changeset pull updat local repositori head remot",
        "Summary": "Pull changes from a specified repository to the local repository.",
        "Task-Script": {
            "Pull changes even when the remote repository is unrelated": "hg pull --force",
            "Pull from a specified source repository": "hg pull {{path/to/source_repository}}",
            "Pull from the \"default\" source path": "hg pull",
            "Specify a specific bookmark to pull": "hg pull --bookmark {{bookmark}}",
            "Specify a specific branch to pull": "hg pull --branch {{branch}}",
            "Specify a specific revision changeset to pull up to": "hg pull --rev {{revision}}",
            "Update the local repository to the head of the remote": "hg pull --update"
        }
    },
    "common_hg push": {
        "Category": "common",
        "Command": "hg push",
        "P-Summary": "push chang local repositori specifi destin",
        "P-Tasks": "push new branch exist disabl default push chang specifi remot repositori push chang default remot path specifi specif bookmark push specifi specif branch push specifi specif revis changeset push",
        "Summary": "Push changes from the local repository to a specified destination.",
        "Task-Script": {
            "Push a new branch if it does not exist (disabled by default)": "hg push --new-branch",
            "Push changes to a specified remote repository": "hg push {{path/to/destination_repository}}",
            "Push changes to the \"default\" remote path": "hg push",
            "Specify a specific bookmark to push": "hg push --bookmark {{bookmark}}",
            "Specify a specific branch to push": "hg push --branch {{branch}}",
            "Specify a specific revision changeset to push": "hg push --rev {{revision}}"
        }
    },
    "common_hg remove": {
        "Category": "common",
        "Command": "hg remove",
        "P-Summary": "remov specifi file stage area",
        "P-Tasks": "recurs remov sub-repositori remov stage file match specifi pattern remov stage file exclud match specifi pattern remov file repositori physic remov remov file directori stage area",
        "Summary": "Remove specified files from the staging area.",
        "Task-Script": {
            "Recursively remove sub-repositories": "hg remove --subrepos",
            "Remove all staged files matching a specified pattern": "hg remove --include {{pattern}}",
            "Remove all staged files, excluding those that match a specified pattern": "hg remove --exclude {{pattern}}",
            "Remove files from the repository that have been physically removed": "hg remove --after",
            "Remove files or directories from the staging area": "hg remove {{path/to/file}}"
        }
    },
    "common_hg root": {
        "Category": "common",
        "Command": "hg root",
        "P-Summary": "display root locat hg repositori",
        "P-Tasks": "display root locat current repositori display root locat specifi repositori",
        "Summary": "Display the root location of a Hg repository.",
        "Task-Script": {
            "Display the root location of the current repository": "hg root",
            "Display the root location of the specified repository": "hg root --cwd {{path/to/directory}}"
        }
    },
    "common_hg serve": {
        "Category": "common",
        "Command": "hg serve",
        "P-Summary": "start standalon mercuri web server brows repositori",
        "P-Tasks": "start web server instanc start web server instanc specifi listen address start web server instanc specifi port start web server instanc use specifi ssl certif bundl start web server instanc use specifi theme see templat directori start web server instanc specif identifi",
        "Summary": "Start a standalone Mercurial web server for browsing repositories.",
        "Task-Script": {
            "Start a web server instance": "hg serve",
            "Start a web server instance on the specified listening address": "hg serve --address {{address}}",
            "Start a web server instance on the specified port": "hg serve --port {{port}}",
            "Start a web server instance using the specified SSL certificate bundle": "hg serve --certificate {{path/to/certificate}}",
            "Start a web server instance using the specified theme (see the templates directory)": "hg serve --style {{style}}",
            "Start a web server instance with a specific identifier": "hg serve --name {{name}}"
        }
    },
    "common_hg status": {
        "Category": "common",
        "Command": "hg status",
        "P-Summary": "show file chang work directori",
        "P-Tasks": "display chang work directori compar specifi changeset display file exclud match specifi glob pattern display ad file display delet track file display file match specifi glob pattern display modifi file display remov file display statu chang file",
        "Summary": "Show files that have changed in the working directory.",
        "Task-Script": {
            "Display changes in the working directory compared to a specified changeset": "hg status --rev {{revision}}",
            "Display files, excluding those that match a specified glob pattern": "hg status --exclude {{pattern}}",
            "Display only added files": "hg status --added",
            "Display only deleted (but tracked) files": "hg status --deleted",
            "Display only files matching a specified glob pattern": "hg status --include {{pattern}}",
            "Display only modified files": "hg status --modified",
            "Display only removed files": "hg status --removed",
            "Display the status of changed files": "hg status"
        }
    },
    "common_hg update": {
        "Category": "common",
        "Command": "hg update",
        "P-Summary": "updat work directori specifi changeset",
        "P-Tasks": "updat discard uncommit chang updat last commit match specifi date updat specifi revis updat tip current branch",
        "Summary": "Update the working directory to a specified changeset.",
        "Task-Script": {
            "Update and discard uncommitted changes": "hg update --clean",
            "Update to the last commit matching a specified date": "hg update --date {{dd-mm-yyyy}}",
            "Update to the specified revision": "hg update --rev {{revision}}",
            "Update to the tip of the current branch": "hg update"
        }
    },
    "common_history": {
        "Category": "common",
        "Command": "history",
        "P-Summary": "command line histori",
        "P-Tasks": "clear command histori list current bash shell delet histori entri specifi offset display command histori list line number display last 20 command overwrit histori file histori current bash shell often combin histori -c purg histori",
        "Summary": "Command Line history.",
        "Task-Script": {
            "Clear the commands history list (only for current `bash` shell)": "history -c",
            "Delete the history entry at the specified offset": "history -d {{offset}}",
            "Display the commands history list with line numbers": "history",
            "Display the last 20 commands": "history {{20}}",
            "Overwrite history file with history of current `bash` shell (often combined with `history -c` to purge history)": "history -w"
        }
    },
    "common_hive": {
        "Category": "common",
        "Command": "hive",
        "P-Summary": "cli tool apach hive",
        "P-Tasks": "run hiveql run hiveql file variabl substitut run hiveql hiveconfig e g\nmapr reduc task 32 start hive interact shell",
        "Summary": "CLI tool for Apache Hive.",
        "Task-Script": {
            "Run HiveQL": "hive -e \"{{hiveql_query}}\"",
            "Run a HiveQL file with a variable substitution": "hive --define {{key}}={{value}} -f {{path/to/file.sql}}",
            "Run a HiveQL with HiveConfig (e.g. `mapred.reduce.tasks=32`)": "hive --hiveconf {{conf_name}}={{conf_value}}",
            "Start a Hive interactive shell": "hive"
        }
    },
    "common_hn": {
        "Category": "common",
        "Command": "hn",
        "P-Summary": "command-lin interfac hacker news",
        "P-Tasks": "view _number_ stori hacker news view stori hacker news view stori hacker news sort submiss date view stori hacker news keep list open select link",
        "Summary": "Command-line interface for Hacker News.",
        "Task-Script": {
            "View _number_ of stories on Hacker News": "hn --limit {{number}}",
            "View stories on Hacker News": "hn",
            "View stories on Hacker News sorted by submission date": "hn --latest",
            "View stories on Hacker News, and keep the list open after selecting a link": "hn --keep-open"
        }
    },
    "common_home-manager": {
        "Category": "common",
        "Command": "home-manager",
        "P-Summary": "manag user environ use nix",
        "P-Tasks": "activ configur switch activ configur defin config nixpkg home nix",
        "Summary": "Manage a user environment using Nix.",
        "Task-Script": {
            "Activate the configuration and switch to it": "home-manager switch",
            "Activate the configuration defined in `~/.config/nixpkgs/home.nix`": "home-manager build"
        }
    },
    "common_host": {
        "Category": "common",
        "Command": "host",
        "P-Summary": "lookup domain name server",
        "P-Tasks": "lookup aaaa mx record domain lookup field cname txt domain revers lookup ip specifi altern dn server queri",
        "Summary": "Lookup Domain Name Server.",
        "Task-Script": {
            "Lookup A, AAAA, and MX records of a domain": "host {{domain}}",
            "Lookup a field (CNAME, TXT,...) of a domain": "host -t {{field}} {{domain}}",
            "Reverse lookup an IP": "host {{ip_address}}",
            "Specify an alternate DNS server to query": "host {{domain}} {{8.8.8.8}}"
        }
    },
    "common_hostapd": {
        "Category": "common",
        "Command": "hostapd",
        "P-Summary": "start access point use wireless interfac",
        "P-Tasks": "start access point start access point fork background",
        "Summary": "Start an access point using a wireless interface.",
        "Task-Script": {
            "Start an access point": "sudo hostapd {{path/to/hostapd.conf}}",
            "Start an access point, forking into the background": "sudo hostapd -B {{path/to/hostapd.conf}}"
        }
    },
    "common_hostess": {
        "Category": "common",
        "Command": "hostess",
        "P-Summary": "idempot command-lin util manag etc host file",
        "P-Tasks": "add domain point machin host file disabl domain remov complet list domain target ip statu remov domain host file",
        "Summary": "An idempotent command-line utility for managing your /etc/hosts file.",
        "Task-Script": {
            "Add a domain pointing to your machine to your hosts file": "hostess add {{local.example.com}} {{127.0.0.1}}",
            "Disable a domain (but don't remove it completely)": "hostess off {{local.example.com}}",
            "List domains, target ips and on/off status": "hostess list",
            "Remove a domain from your hosts file": "hostess del {{local.example.com}}"
        }
    },
    "common_hostid": {
        "Category": "common",
        "Command": "hostid",
        "P-Summary": "print numer identifi current host necessarili ip address",
        "P-Tasks": "display numer identifi current host hexadecim",
        "Summary": "Prints the numeric identifier for the current host (not necessarily the IP address).",
        "Task-Script": {
            "Display the numeric identifier for the current host in hexadecimal": "hostid"
        }
    },
    "common_hping": {
        "Category": "common",
        "Command": "hping",
        "P-Summary": "command-lin orient tcp ip packet assembl analyz\ninspir ping command",
        "P-Tasks": "perform charg test port 80 ping ip address tcp specif port ping ip address udp port 80 ping localhost tcp scan set tcp port specif ip address",
        "Summary": "Command-line oriented TCP/IP packet assembler and analyzer.\nInspired by the `ping` command.",
        "Task-Script": {
            "Perform a charge test on port 80": "hping3 --flood -p {{80}} -S {{192.168.1.1}}",
            "Ping an IP address over TCP on a specific port": "hping3 -p {{80}} -S {{192.168.1.1}}",
            "Ping an IP address over UDP on port 80": "hping3 --udp -p {{80}} -S {{192.168.1.1}}",
            "Ping localhost over TCP": "hping3 {{localhost}}",
            "Scan a set of TCP ports on a specific IP address": "hping3 --scan {{80,3000,9000}} -S {{192.168.1.1}}"
        }
    },
    "common_hr": {
        "Category": "common",
        "Command": "hr",
        "P-Summary": "print horizont rule termin",
        "P-Tasks": "print horizont rule print horizont rule custom string print multilin horizont rule",
        "Summary": "Print a horizontal rule in the terminal.",
        "Task-Script": {
            "Print a horizontal rule": "hr",
            "Print a horizontal rule with a custom string": "hr {{string}}",
            "Print a multiline horizontal rule": "hr {{string_a}} {{string_b}} {{string_c}}"
        }
    },
    "common_hsd-cli": {
        "Category": "common",
        "Command": "hsd-cli",
        "P-Summary": "command line rest tool handshak blockchain",
        "P-Tasks": "broadcast local transact execut rpc command reset chain specifi block retriev mempool snapshot retriev inform current server view block height hash view coin hash index address view transact address hash",
        "Summary": "The command line REST tool for the Handshake blockchain.",
        "Task-Script": {
            "Broadcast a local transaction": "hsd-cli broadcast {{transaction_hex}}",
            "Execute an RPC command": "hsd-cli rpc {{command}} {{args}}",
            "Reset the chain to the specified block": "hsd-cli reset {{height_or_hash}}",
            "Retrieve a mempool snapshot": "hsd-cli mempool",
            "Retrieve information about the current server": "hsd-cli info",
            "View a block by height or hash": "hsd-cli block {{height_or_hash}}",
            "View a coin by its hash index or address": "hsd-cli coin {{hash_index_or_address}}",
            "View a transaction by address or hash": "hsd-cli tx {{address_or_hash}}"
        }
    },
    "common_hsw-cli": {
        "Category": "common",
        "Command": "hsw-cli",
        "P-Summary": "command line rest tool handshak wallet",
        "P-Tasks": "lock current wallet send transact specifi coin amount address unlock current wallet timeout second view detail transact view current wallet balanc view current wallet detail view current wallet pend transact view current wallet transact histori",
        "Summary": "The command line REST tool for the Handshake wallet.",
        "Task-Script": {
            "Lock the current wallet": "hsw-cli lock",
            "Send a transaction with the specified coin amount to an address": "hsw-cli send {{address}} {{1.05}}",
            "Unlock the current wallet (timeout in seconds)": "hsw-cli unlock {{passphrase}} {{timeout}}",
            "View details about a transaction": "hsw-cli tx {{transaction_hash}}",
            "View the current wallet's balance": "hsw-cli balance",
            "View the current wallet's details": "hsw-cli get",
            "View the current wallet's pending transactions": "hsw-cli pending",
            "View the current wallet's transaction history": "hsw-cli history"
        }
    },
    "common_html5validator": {
        "Category": "common",
        "Command": "html5validator",
        "P-Summary": "command line tool test html5 valid",
        "P-Tasks": "ignor specif directori name match multipl file use glob pattern output log specif verbos level output result specif format show warn well error valid specif file valid html file specif directori",
        "Summary": "A command line tool for testing HTML5 validity.",
        "Task-Script": {
            "Ignore specific directory names": "html5validator --root {{path/to/directory}} --blacklist \"{{node_modules vendor}}\"",
            "Match multiple files using a glob pattern": "html5validator --root {{path/to/directory}} --match \"{{*.html *.php}}\"",
            "Output the log at a specific verbosity level": "html5validator --root {{path/to/directory}} --log {{debug|info|warning}}",
            "Output the results in a specific format": "html5validator --format {{gnu|xml|json|text}} {{path/to/file}}",
            "Show warnings as well as errors": "html5validator --show-warnings {{path/to/file}}",
            "Validate a specific file": "html5validator {{path/to/file}}",
            "Validate all HTML files in a specific directory": "html5validator --root {{path/to/directory}}"
        }
    },
    "common_htpasswd": {
        "Category": "common",
        "Command": "htpasswd",
        "P-Summary": "creat manag htpasswd file protect web server directori use basic authent",
        "P-Tasks": "add user htpasswd file batch mode without interact password prompt script usag add user htpasswd file updat exist user creat overwrit htpasswd file delet user htpasswd file display string usernam plain text password md5 verifi user password",
        "Summary": "Create and manage htpasswd files to protect web server directories using basic authentication.",
        "Task-Script": {
            "Add user to htpasswd file in batch mode without an interactive password prompt (for script usage)": "htpasswd -b {{path/to/file}} {{username}} {{password}}",
            "Add user to htpasswd file or update existing user": "htpasswd {{path/to/file}} {{username}}",
            "Create/overwrite htpasswd file": "htpasswd -c {{path/to/file}} {{username}}",
            "Delete user from htpasswd file": "htpasswd -D {{path/to/file}} {{username}}",
            "Display a string with username (plain text) and password (md5)": "htpasswd -nbm {{username}} {{password}}",
            "Verify user password": "htpasswd -v {{path/to/file}} {{username}}"
        }
    },
    "common_http": {
        "Category": "common",
        "Command": "http",
        "P-Summary": "httpie : http client aim easier use curl",
        "P-Tasks": "download url file includ extra header pass user name password server authent send json object send form-encod data specifi http method specifi raw request bodi via stdin",
        "Summary": "HTTPie: HTTP client, aims to be easier to use than cURL.",
        "Task-Script": {
            "Download a URL to a file": "http -d {{example.org}}",
            "Include an extra header": "http {{example.org}} {{X-MyHeader:123}}",
            "Pass a user name and password for server authentication": "http -a {{username:password}} {{example.org}}",
            "Send JSON object": "http {{example.org}} {{name='bob'}}",
            "Send form-encoded data": "http -f {{example.org}} {{name='bob'}} {{profile_picture@'bob.png'}}",
            "Specify an HTTP method": "http {{HEAD}} {{example.org}}",
            "Specify raw request body via `stdin`": "cat {{data.txt}} | http PUT {{example.org}}"
        }
    },
    "common_httpflow": {
        "Category": "common",
        "Command": "httpflow",
        "P-Summary": "command line util captur dump http stream",
        "P-Tasks": "captur traffic interfac read packet pcap format binari file use bpf-style captur filter result use regexp filter request url write output directori",
        "Summary": "A command line utility to capture and dump HTTP streams.",
        "Task-Script": {
            "Capture traffic on all interfaces": "httpflow -i {{any}}",
            "Read packets from pcap format binary file": "httpflow -r {{out.cap}}",
            "Use a bpf-style capture to filter the results": "httpflow {{host httpbin.org or host baidu.com}}",
            "Use a regexp to filter requests by urls": "httpflow -u '{{regex}}'",
            "Write the output to a directory": "httpflow -w {{path/to/directory}}"
        }
    },
    "common_httping": {
        "Category": "common",
        "Command": "httping",
        "P-Summary": "measur latenc throughput web server",
        "P-Tasks": "ping specifi url ping web server host port ping web server host use http basic authent ping web server host use tl connect",
        "Summary": "Measure the latency and throughput of a web server.",
        "Task-Script": {
            "Ping the specified url": "httping -g {{url}}",
            "Ping the web server on `host` and `port`": "httping -h {{host}} -p {{port}}",
            "Ping the web server on `host` using HTTP basic authentication": "httping -g http://{{host}} -U {{username}} -P {{password}}",
            "Ping the web server on `host` using a TLS connection": "httping -l -g https://{{host}}"
        }
    },
    "common_httpry": {
        "Category": "common",
        "Command": "httpry",
        "P-Summary": "lightweight packet sniffer display log http traffic\nrun real-tim display traffic pars daemon process log output file",
        "P-Tasks": "filter output comma-separ list http verb listen specif interfac save output binari pcap format file read input captur file filter ip run daemon process save output file",
        "Summary": "A lightweight packet sniffer for displaying and logging HTTP traffic.\nIt can be run in real-time displaying the traffic as it is parsed, or as a daemon process that logs to an output file.",
        "Task-Script": {
            "Filter output by a comma-separated list of HTTP verbs": "httpry -m {{get|post|put|head|options|delete|trace|connect|patch}}",
            "Listen on a specific interface and save output to a binary pcap format file": "httpry {{eth0}} -b {{path/to/file.pcap}}",
            "Read from an input capture file and filter by IP": "httpry -r {{path/to/file.log}} '{{host 192.168.5.25}}'",
            "Run as daemon process": "httpry -d -o {{path/to/file.log}}",
            "Save output to a file": "httpry -o {{path/to/file.log}}"
        }
    },
    "common_hub": {
        "Category": "common",
        "Command": "hub",
        "P-Summary": "wrapper git add command work github-bas project\nset instruct hub alia one use git run hub command",
        "P-Tasks": "clone repositori use repositori name rather full url clone anoth user repositori use github usernam repositori name creat pr current alreadi push branch reus messag first commit creat fork current repositori clone anoth user github profil creat new branch content pull request switch push current local branch github creat pr origin repositori upload current local-onli repositori github account",
        "Summary": "A wrapper for git that adds commands for working with GitHub-based projects.\nIf set up as instructed by `hub alias`, one can use `git` to run `hub` commands.",
        "Task-Script": {
            "Clone a repository you own, using just the repository name rather than the full URL": "hub clone {{repo_name}}",
            "Clone another user's repository, using their github username and the repository name": "hub clone {{username}}/{{repo_name}}",
            "Create a PR of the current (already pushed) branch, reusing the message from the first commit": "hub pull-request --no-edit",
            "Create a fork of the current repository (cloned from another user) under your github profile": "hub fork",
            "Create a new branch with the contents of a pull request and switch to it": "hub pr checkout {{pr_number}}",
            "Push the current local branch to github and create a PR for it in the original repository": "hub push {{remote_name}} && hub pull-request",
            "Upload the current (local-only) repository to your github account": "hub create"
        }
    },
    "common_hugo": {
        "Category": "common",
        "Command": "hugo",
        "P-Summary": "template-bas static site gener\nuse modul compon theme",
        "P-Tasks": "build site includ page mark draft build site given directori build site\npublic directori build site start webserv serv automat reload page edit creat new hugo site creat new hugo theme theme may also download http : theme gohugo io creat new page",
        "Summary": "Template-based static site generator. Uses modules, components, and themes.",
        "Task-Script": {
            "Build a site including pages that are marked as a \"draft\"": "hugo --buildDrafts",
            "Build a site to a given directory": "hugo --destination {{path/to/destination}}",
            "Build a site to the `./public/` directory": "hugo",
            "Build a site, start up a webserver to serve it, and automatically reload when pages are edited": "hugo server",
            "Create a new Hugo site": "hugo new site {{path/to/site}}",
            "Create a new Hugo theme (themes may also be downloaded from https://themes.gohugo.io/)": "hugo new theme {{theme_name}}",
            "Create a new page": "hugo new {{section_name}}/{{filename}}"
        }
    },
    "common_hunspell": {
        "Category": "common",
        "Command": "hunspell",
        "P-Summary": "check spell",
        "P-Tasks": "check spell file check spell file en_u dictionari list misspel word file",
        "Summary": "Check spelling.",
        "Task-Script": {
            "Check the spelling of a file": "hunspell {{path/to/file}}",
            "Check the spelling of a file with the en_US dictionary": "hunspell -d {{en_US}} {{path/to/file}}",
            "List misspelled words in a file": "hunspell -l {{path/to/file}}"
        }
    },
    "common_hydra": {
        "Category": "common",
        "Command": "hydra",
        "P-Summary": "onlin password guess tool\nprotocol support includ ftp http smtp snmp xmpp ssh",
        "P-Tasks": "guess ftp credenti use usernam password list specifi number thread guess imap credenti rang host use list colon-separ usernam password pair guess mysql credenti use usernam password list exit usernam password pair found guess pop3 credenti list host use usernam password list exit usernam password pair found guess rdp credenti use usernam password list show attempt guess ssh credenti use given usernam list password guess telnet credenti use list usernam singl password specifi non-standard port ipv6 start hydra wizard",
        "Summary": "Online password guessing tool.\nProtocols supported include FTP, HTTP(S), SMTP, SNMP, XMPP, SSH, and more.",
        "Task-Script": {
            "Guess FTP credentials using usernames and passwords lists, specifying the number of threads": "hydra -L {{path/to/usernames.txt}} -P {{path/to/wordlist.txt}} -t {{n_tasks}} {{host_ip}} {{ftp}}",
            "Guess IMAP credentials on a range of hosts using a list of colon-separated username/password pairs": "hydra -C {{path/to/username_password_pairs.txt}} {{imap://[host_range_cidr]}}",
            "Guess MySQL credentials using a username and a passwords list, exiting when a username/password pair is found": "hydra -l {{username}} -P {{path/to/wordlist.txt}} -f {{host_ip}} {{mysql}}",
            "Guess POP3 credentials on a list of hosts using usernames and passwords lists, exiting when a username/password pair is found": "hydra -L {{path/to/usernames.txt}} -P {{path/to/wordlist.txt}} -M {{path/to/hosts.txt}} -F {{pop3}}",
            "Guess RDP credentials using a username and a passwords list, showing each attempt": "hydra -l {{username}} -P {{path/to/wordlist.txt}} -V {{rdp://host_ip}}",
            "Guess SSH credentials using a given username and a list of passwords": "hydra -l {{username}} -P {{path/to/wordlist.txt}} {{host_ip}} {{ssh}}",
            "Guess Telnet credentials using a list of usernames and a single password, specifying a non-standard port and IPv6": "hydra -L {{path/to/usernames.txt}} -p {{password}} -s {{port}} -6 {{host_ip}} {{telnet}}",
            "Start Hydra's wizard": "hydra-wizard"
        }
    },
    "common_hyperfine": {
        "Category": "common",
        "Command": "hyperfine",
        "P-Summary": "command-lin benchmark tool",
        "P-Tasks": "chang minimum number benchmark run perform benchmark warmup run basic benchmark perform least 10 run run benchmark singl paramet chang run run command benchmark run clear cach etc\nrun compar benchmark",
        "Summary": "A command-line benchmarking tool.",
        "Task-Script": {
            "Change minimum number of benchmarking runs": "hyperfine --min-runs {{7}} '{{make}}'",
            "Perform benchmark with warmup": "hyperfine --warmup {{5}} '{{make}}'",
            "Run a basic benchmark, performing at least 10 runs": "hyperfine '{{make}}'",
            "Run a benchmark where a single parameter changes for each run": "hyperfine --prepare '{{make clean}}' --parameter-scan {{num_threads}} {{1}} {{10}} '{{make -j {num_threads}}}'",
            "Run a command before each benchmark run (to clear caches, etc.)": "hyperfine --prepare '{{make clean}}' '{{make}}'",
            "Run a comparative benchmark": "hyperfine '{{make target1}}' '{{make target2}}'"
        }
    },
    "common_iconv": {
        "Category": "common",
        "Command": "iconv",
        "P-Summary": "convert text one encod anoth",
        "P-Tasks": "convert file specif encod print stdout convert file current local encod output file list support encod",
        "Summary": "Converts text from one encoding to another.",
        "Task-Script": {
            "Convert file to a specific encoding, and print to `stdout`": "iconv -f {{from_encoding}} -t {{to_encoding}} {{input_file}}",
            "Convert file to the current locale's encoding, and output to a file": "iconv -f {{from_encoding}} {{input_file}} > {{output_file}}",
            "List supported encodings": "iconv -l"
        }
    },
    "common_id": {
        "Category": "common",
        "Command": "id",
        "P-Summary": "display current user group ident",
        "P-Tasks": "display arbitrari user id uid group id gid group belong display current user id uid group id gid group belong display current group ident number display current user ident number",
        "Summary": "Display current user and group identity.",
        "Task-Script": {
            "Display an arbitrary user's id (UID), group id (GID) and groups to which they belong": "id {{username}}",
            "Display current user's id (UID), group id (GID) and groups to which they belong": "id",
            "Display the current group identity as a number": "id -g",
            "Display the current user identity as a number": "id -u"
        }
    },
    "common_id3tag": {
        "Category": "common",
        "Command": "id3tag",
        "P-Summary": "tool read write manipul id3v1 id3v2 tag mp3 file",
        "P-Tasks": "get help set album titl mp3 file current directori set artist titl tag mp3 file",
        "Summary": "Tool for reading, writing, and manipulating ID3v1 and ID3v2 tags of MP3 files.",
        "Task-Script": {
            "Get more help": "id3tag --help",
            "Set album title of all MP3 files in the current directory": "id3tag --album={{album}} {{*.mp3}}",
            "Set artist and title tag of an MP3 file": "id3tag --artist={{artist}} --title={{title}} {{path/to/file.mp3}}"
        }
    },
    "common_identify": {
        "Category": "common",
        "Command": "identify",
        "P-Summary": "command line util imag magick project describ format characterist one imag file",
        "P-Tasks": "collect dimens jpeg file current directori",
        "Summary": "Command line utility of Image Magick project to describe the format and characteristics of one or more image files.",
        "Task-Script": {
            "Collect dimensions of all jpeg files under current directory": "identify -format \"%f,%w,%h\\n\" *.{{jpg}} > {{filelist.csv}}"
        }
    },
    "common_iex": {
        "Category": "common",
        "Command": "iex",
        "P-Summary": "iex interact shell elixir",
        "P-Tasks": "start session rememb histori start interact session start load mix project file",
        "Summary": "IEx is the interactive shell for Elixir.",
        "Task-Script": {
            "Start a session that remembers history": "iex --erl \"-kernel shell_history enabled\"",
            "Start an interactive session": "iex",
            "Start and load Mix project files": "iex -S mix"
        }
    },
    "common_if": {
        "Category": "common",
        "Command": "if",
        "P-Summary": "simpl shell condit",
        "P-Tasks": "echo differ thing depend command success full syntax directori exist list avail condit test file exist test given variabl empti",
        "Summary": "Simple shell conditional.",
        "Task-Script": {
            "Echo a different thing depending on a command's success": "{{command}} && echo \"success\" || echo \"failure\"",
            "Full if syntax": "if {{condition}}; then echo \"true\"; else echo \"false\"; fi",
            "If directory not exists": "if [[ ! -d {{path/to/directory}} ]]; then echo \"true\"; else echo \"false\"; fi",
            "List available if conditions": "help test",
            "Test if a file exists": "if [[ -e {{filename}} ]]; then echo \"true\"; else echo \"false\"; fi",
            "Test if a given variable is empty": "if [[ -z $GIT_BRANCH ]]; then echo \"true\"; else echo \"false\"; fi"
        }
    },
    "common_ifconfig": {
        "Category": "common",
        "Command": "ifconfig",
        "P-Summary": "network interfac configur",
        "P-Tasks": "assign ip address eth0 interfac disabl eth0 interfac display detail interfac includ disabl interfac enabl eth0 interfac view network set ethernet adapt",
        "Summary": "Network Interface Configurator.",
        "Task-Script": {
            "Assign IP address to eth0 interface": "ifconfig eth0 {{ip_address}}",
            "Disable eth0 interface": "ifconfig eth0 down",
            "Display details of all interfaces, including disabled interfaces": "ifconfig -a",
            "Enable eth0 interface": "ifconfig eth0 up",
            "View network settings of an ethernet adapter": "ifconfig eth0"
        }
    },
    "common_ignite": {
        "Category": "common",
        "Command": "ignite",
        "P-Summary": "cli react nativ boilerpl plugin gener",
        "P-Tasks": "add ignit plugin project creat new react nativ project gener file plugin remov ignit plugin project",
        "Summary": "A CLI for React Native boilerplates, plugins, generators, and more.",
        "Task-Script": {
            "Add an Ignite plugin to the project": "ignite add {{plugin_name}}",
            "Create a new React Native project": "ignite new {{project_name}}",
            "Generate file from a plugin": "ignite generate {{plugin_name}} {{filename}}",
            "Remove an Ignite plugin from the project": "ignite remove {{plugin_name}}"
        }
    },
    "common_imapsync": {
        "Category": "common",
        "Command": "imapsync",
        "P-Summary": "email imap tool sync copi migrat email mailbox two imap server one way without duplic",
        "P-Tasks": "synchron imap account host1 host2",
        "Summary": "Email IMAP tool for syncing, copying and migrating email mailboxes between two imap servers, one way, and without duplicates.",
        "Task-Script": {
            "Synchronize imap account between host1 and host2": "imapsync --host1 {{host1}} --user1 {{user1}} --password1 {{secret1}} --host2 {{host2}} --user2 {{user2}} --password2 {{secret2}}"
        }
    },
    "common_import": {
        "Category": "common",
        "Command": "import",
        "P-Summary": "captur x server screen save imag file\npart imagemagick librari",
        "P-Tasks": "captur specif window given id display xwininfo jpeg format captur content remot x server screen png imag format captur entir x server screen postscript imag format",
        "Summary": "Capture some or all of an X server screen, and save the image to a file.\nPart of the ImageMagick library.",
        "Task-Script": {
            "Capture a specific window, given its ID as displayed by `xwininfo`, into the JPEG format": "import -window {{window_id}} {{output.jpg}}",
            "Capture contents of a remote X server screen in the PNG image format": "import -window root -display {{remote_host}}:{screen}.{display} {{output.png}}",
            "Capture the entire X server screen in the PostScript image format": "import -window root {{output.postscript}}"
        }
    },
    "common_in2csv": {
        "Category": "common",
        "Command": "in2csv",
        "P-Summary": "convert variou tabular data format csv\ninclud csvkit",
        "P-Tasks": "convert dbf file csv file convert specif sheet xlsx file csv convert xl file csv pipe json file in2csv",
        "Summary": "Converts various tabular data formats into CSV.\nIncluded in csvkit.",
        "Task-Script": {
            "Convert a DBF file to a CSV file": "in2csv {{data.dbf}} > {{data.csv}}",
            "Convert a specific sheet from an XLSX file to CSV": "in2csv --sheet={{sheet_name}} {{data.xlsx}}",
            "Convert an XLS file to CSV": "in2csv {{data.xls}}",
            "Pipe a JSON file to in2csv": "cat {{data.json}} | in2csv -f json > {{data.csv}}"
        }
    },
    "common_indent": {
        "Category": "common",
        "Command": "indent",
        "P-Summary": "chang appear c c++ program insert delet whitespac",
        "P-Tasks": "format c c++ sourc accord gnu style save indent version differ file format c c++ sourc accord linux style guid automat back origin file replac indent version format c c++ sourc accord style kernigan ritchi k r tab 3 space per indent wrap line 120 charact",
        "Summary": "Change the appearance of a C/C++ program by inserting or deleting whitespace.",
        "Task-Script": {
            "Format C/C++ source according to the GNU style, saving the indented version to a different file": "indent --gnu-style {{path/to/source.c}} -o {{path/to/indented_source.c}}",
            "Format C/C++ source according to the Linux style guide, automatically back up the original files, and replace with the indented versions": "indent --linux-style {{path/to/source.c}} {{path/to/another_source.c}}",
            "Format C/C++ source according to the style of Kernigan & Ritchie (K&R), no tabs, 3 spaces per indent, and wrap lines at 120 characters": "indent --k-and-r-style --indent-level3 --no-tabs --line-length120  {{path/to/source.c}} -o {{path/to/indented_source.c}}"
        }
    },
    "common_infection": {
        "Category": "common",
        "Command": "infection",
        "P-Summary": "mutat test framework php",
        "P-Tasks": "analys code use configur file creat one exist display mutat code appli mutat line code cover test specifi minimum mutat score indic msi specifi minimum cover code msi specifi log verbos use specif number thread use specif test framework default phpunit",
        "Summary": "A mutation testing framework for PHP.",
        "Task-Script": {
            "Analyse code using the configuration file (or create one if it does not exist)": "infection",
            "Display the mutation code that has been applied": "infection --show-mutations",
            "Only mutate lines of code that are covered by tests": "infection --only-covered",
            "Specify a minimum Mutation Score Indicator (MSI)": "infection --min-msi {{percentage}}",
            "Specify a minimum covered code MSI": "infection --min-covered-msi {{percentage}}",
            "Specify the log verbosity": "infection --log-verbosity {{default|all|none}}",
            "Use a specific number of threads": "infection --threads {{number_of_threads}}",
            "Use a specific test framework (defaults to phpunit)": "infection --test-framework {{phpunit|phpspec}}"
        }
    },
    "common_influx": {
        "Category": "common",
        "Command": "influx",
        "P-Summary": "influxdb command-lin client",
        "P-Tasks": "connect specif host connect influxdb run localhost credenti connect specif usernam prompt password execut given command return output specif format use specif databas",
        "Summary": "InfluxDB command-line client.",
        "Task-Script": {
            "Connect to a specific host": "influx -host {{hostname}}",
            "Connect to an InfluxDB running on localhost with no credentials": "influx",
            "Connect with a specific username (will prompt for a password)": "influx -username {{username}} -password \"\"",
            "Execute a given command": "influx -execute \"{{influxql_command}}\"",
            "Return output in a specific format": "influx -execute \"{{influxql_command}}\" -format {{json|csv|column}}",
            "Use a specific database": "influx -database {{database_name}}"
        }
    },
    "common_info": {
        "Category": "common",
        "Command": "info",
        "P-Summary": "read document store info format",
        "P-Tasks": "start read given menu item node top-level directori start read second menu item within first menu item manual start read top-level directori menu",
        "Summary": "Reads documentation stored in the info format.",
        "Task-Script": {
            "Start reading at given menu item node from top-level directory": "info {{menu_item}}",
            "Start reading at second menu item within first menu item manual": "info {{first_menu_item}} {{second_menu_item}}",
            "Start reading top-level directory menu": "info"
        }
    },
    "common_initdb": {
        "Category": "common",
        "Command": "initdb",
        "P-Summary": "creat postgresql databas disk",
        "P-Tasks": "creat databas usr local var postgr",
        "Summary": "Create a PostgreSQL database on disk.",
        "Task-Script": {
            "Create a database at /usr/local/var/postgres": "initdb -D /usr/local/var/postgres"
        }
    },
    "common_inkscape": {
        "Category": "common",
        "Command": "inkscape",
        "P-Summary": "svg scalabl vector graphic edit program\ninkscap version 0 92 x use -e instead -o",
        "P-Tasks": "duplic object id path123 rotat duplic 90 degre save file quit inkscap export singl object given id bitmap export svg document pdf convert text path export svg file bitmap 600x400 pixel aspect ratio distort may occur export svg file bitmap default format png default resolut 96 dpi export draw bound box object svg file bitmap open svg file inkscap gui",
        "Summary": "An SVG (Scalable Vector Graphics) editing program.\nFor Inkscape versions up to 0.92.x, use -e instead of -o.",
        "Task-Script": {
            "Duplicate the object with id=\"path123\", rotate the duplicate 90 degrees, save the file, and quit Inkscape": "inkscape {{filename.svg}} --select=path123 --verb=\"{{EditDuplicate;ObjectRotate90;FileSave;FileQuit}}\"",
            "Export a single object, given its ID, into a bitmap": "inkscape {{filename.svg}} -i {{id}} -o {{object.png}}",
            "Export an SVG document to PDF, converting all texts to paths": "inkscape {{filename.svg}} -o {{filename.pdf}} --export-text-to-path",
            "Export an SVG file into a bitmap of 600x400 pixels (aspect ratio distortion may occur)": "inkscape {{filename.svg}} -o {{filename.png}} -w {{600}} -h {{400}}",
            "Export an SVG file into a bitmap with the default format (PNG) and the default resolution (96 DPI)": "inkscape {{filename.svg}} -o {{filename.png}}",
            "Export the drawing (bounding box of all objects) of an SVG file into a bitmap": "inkscape {{filename.svg}} -o {{filename.png}} -D",
            "Open an SVG file in the Inkscape GUI": "inkscape {{filename.svg}}"
        }
    },
    "common_inkview": {
        "Category": "common",
        "Command": "inkview",
        "P-Summary": "inkscap graphic svg preview\nalso function slideshow viewer",
        "P-Tasks": "preview svg preview multipl svg use arrow key navig",
        "Summary": "Inkscape graphical SVG previewer.\nAlso functions as a slideshow viewer.",
        "Task-Script": {
            "Preview an SVG": "inkview {{path/to/file.svg}}",
            "Preview multiple SVGs (use arrow keys to navigate)": "inkview {{path/to/file_a.svg}} {{path/to/file_b.svg}} {{path/to/file_c.svg}}"
        }
    },
    "common_install": {
        "Category": "common",
        "Command": "install",
        "P-Summary": "copi file set attribut\ncopi file often execut system locat like usr local bin give appropri permiss ownership",
        "P-Tasks": "copi file appli access modif time sourc destin copi file destin copi file destin set mode copi file destin set group ownership copi file destin set ownership",
        "Summary": "Copy files and set attributes.\nCopy files (often executable) to a system location like `/usr/local/bin`, give them the appropriate permissions/ownership.",
        "Task-Script": {
            "Copy files and apply access/modification times of source to destination": "install -p {{path/to/source}} {{path/to/destination}}",
            "Copy files to destination": "install {{path/to/source}} {{path/to/destination}}",
            "Copy files to destination, setting their `mode`": "install -m {{+x}} {{path/to/source}} {{path/to/destination}}",
            "Copy files to destination, setting their group ownership": "install -g {{user}} {{path/to/source}} {{path/to/destination}}",
            "Copy files to destination, setting their ownership": "install -o {{user}} {{path/to/source}} {{path/to/destination}}"
        }
    },
    "common_interdiff": {
        "Category": "common",
        "Command": "interdiff",
        "P-Summary": "show differ two diff file",
        "P-Tasks": "compar diff file compar diff file ignor whitespac",
        "Summary": "Show differences between two diff files.",
        "Task-Script": {
            "Compare diff files": "interdiff {{old_file}} {{new_file}}",
            "Compare diff files, ignoring whitespace": "interdiff -w {{old_file}} {{new_file}}"
        }
    },
    "common_ionic": {
        "Category": "common",
        "Command": "ionic",
        "P-Summary": "framework build hybrid mobil app",
        "P-Tasks": "check health ionic app creat new project gener new app compon direct page pipe provid tab run app android io devic show version ionic cordova environ etc\nstart local dev server app dev test",
        "Summary": "A framework to build hybrid mobile apps.",
        "Task-Script": {
            "Check the health of a ionic app": "ionic doctor {{check}}",
            "Create a new project": "ionic start",
            "Generate new app component, directive, page, pipe, provider or tabs": "ionic g {{page}}",
            "Run app on an android/ios device": "ionic cordova run {{android|ios}} --device",
            "Show versions of ionic, cordova, environment, etc.": "ionic info",
            "Start a local dev server for app dev/testing": "ionic serve"
        }
    },
    "common_ionice": {
        "Category": "common",
        "Command": "ionice",
        "P-Summary": "get set program schedul class prioriti\nschedul class : 1 realtim 2 best-effort 3 idl\nprioriti level : 0 highest - 7 lowest",
        "P-Tasks": "print schedul class prioriti run process run command custom schedul class prioriti set schedul class run process",
        "Summary": "Get or set program I/O scheduling class and priority.\nScheduling classes: 1 (realtime), 2 (best-effort), 3 (idle).\nPriority levels: 0 (the highest) - 7 (the lowest).",
        "Task-Script": {
            "Print the I/O scheduling class and priority of a running process": "ionice -p {{pid}}",
            "Run a command with custom I/O scheduling class and priority": "ionice -c {{scheduling_class}} -n {{priority}} {{command}}",
            "Set I/O scheduling class of a running process": "ionice -c {{scheduling_class}} -p {{pid}}"
        }
    },
    "common_ioping": {
        "Category": "common",
        "Command": "ioping",
        "P-Summary": "monitor latenc real time",
        "P-Tasks": "measur disk seek rate dev sda measur disk sequenti speed dev sda measur latenc tmp use 10 request 1 megabyt show disk latenc use default valu current directori",
        "Summary": "Monitor I/O latency in real time.",
        "Task-Script": {
            "Measure disk seek rate on /dev/sda": "ioping -R /dev/sda",
            "Measure disk sequential speed on /dev/sda": "ioping -RL /dev/sda",
            "Measure latency on /tmp using 10 requests of 1 megabyte each": "ioping -c 10 -s 1M /tmp",
            "Show disk I/O latency using the default values and the current directory": "ioping ."
        }
    },
    "common_iotop": {
        "Category": "common",
        "Command": "iotop",
        "P-Summary": "display tabl current usag process thread",
        "P-Tasks": "show usag non-interact mode show usag given user show usag given pid show accumul instead bandwidth show usag process default show thread show process thread actual start top-lik monitor",
        "Summary": "Display a table of current I/O usage by processes or threads.",
        "Task-Script": {
            "Show I/O usage in non-interactive mode": "iotop -b",
            "Show I/O usage of a given user": "iotop -u {{user}}",
            "Show I/O usage of given PID(s)": "iotop -p {{PID}}",
            "Show accumulated I/O instead of bandwidth": "iotop -a",
            "Show only I/O usage of processes(Default is to show all threads)": "iotop -P",
            "Show only processes or threads actually doing I/O": "iotop -o",
            "Start top-like I/O monitor": "iotop"
        }
    },
    "common_ipcs": {
        "Category": "common",
        "Command": "ipcs",
        "P-Summary": "display inform resourc use ipc inter-process commun",
        "P-Tasks": "gener inform ipc specif inform messag queue id 32768",
        "Summary": "Display information about resources used in IPC (Inter-process Communication).",
        "Task-Script": {
            "General information about all the IPC": "ipcs -a",
            "Specific information about the Message Queue which has the id 32768": "ipcs -qi 32768"
        }
    },
    "common_iperf": {
        "Category": "common",
        "Command": "iperf",
        "P-Summary": "measur network bandwidth comput",
        "P-Tasks": "run client run client everi 2 second run client use udp mode run client 5 parallel thread run server run server use udp mode set server port listen 5001",
        "Summary": "Measure network bandwidth between computers.",
        "Task-Script": {
            "Run on client": "iperf -c {{server_address}}",
            "Run on client every 2 seconds": "iperf -c {{server_address}} -i {{2}}",
            "Run on client using UDP mode": "iperf -u -c {{server_address}} -p {{5001}}",
            "Run on client with 5 parallel threads": "iperf -c {{server_address}} -P {{5}}",
            "Run on server": "iperf -s",
            "Run on server using UDP mode and set server port to listen on 5001": "iperf -u -s -p {{5001}}"
        }
    },
    "common_iperf3": {
        "Category": "common",
        "Command": "iperf3",
        "P-Summary": "traffic gener test network bandwidth",
        "P-Tasks": "revers direct test\nserver send data client run iperf3 server specif port run iperf3 server run iperf3 multipl parallel stream start bandwidth test",
        "Summary": "Traffic generator for testing network bandwidth.",
        "Task-Script": {
            "Reverse direction of the test. Server sends data to the client": "iperf3 -c {{server}} -R",
            "Run an iperf3 server on a specific port": "iperf3 -s -p {{port}}",
            "Run iperf3 as a server": "iperf3 -s",
            "Run iperf3 in multiple parallel streams": "iperf3 -c {{server}} -P {{streams}}",
            "Start bandwidth test": "iperf3 -c {{server}}"
        }
    },
    "common_ipfs": {
        "Category": "common",
        "Command": "ipfs",
        "P-Summary": "inter planetari file system\npeer-to-p hypermedia protocol\naim make web open",
        "P-Tasks": "add directori file recurs local filesystem print rel hash add file local filesystem pin print rel hash display pin file pin remot file local remov unpin file local storag save remot file give name pin unpin file local storag",
        "Summary": "Inter Planetary File System.\nA peer-to-peer hypermedia protocol. Aims to make the web more open.",
        "Task-Script": {
            "Add a directory and its files recursively from local to the filesystem and print the relative hash": "ipfs add -r {{directory}}",
            "Add a file from local to the filesystem, pin it and print the relative hash": "ipfs add {{filename}}",
            "Display pinned files": "ipfs pin ls",
            "Pin a remote file locally": "ipfs pin add {{hash}}",
            "Remove unpinned files from local storage": "ipfs repo gc",
            "Save a remote file and give it a name but not pin it": "ipfs get {{hash}} -o {{filename}}",
            "Unpin a file from the local storage": "ipfs pin rm {{hash}}"
        }
    },
    "common_irssi": {
        "Category": "common",
        "Command": "irssi",
        "P-Summary": "text base irc client",
        "P-Tasks": "chang activ window start 1 exit applic cleanli quit server join channel open irssi connect server nicknam open irssi connect specif server given port view help",
        "Summary": "Text based IRC client.",
        "Task-Script": {
            "Change active window (starts at 1)": "/win {{window_number}}",
            "Exit the application cleanly and quitting any server(s)": "/quit",
            "Join a channel": "/join {{#channelname}}",
            "Open irssi and connect to a server with a nickname": "irssi -n {{nickname}} -c {{irc.example.com}}",
            "Open irssi and connect with a specific server on a given port": "irssi -c {{irc.example.com}} -p {{port}}",
            "View the help": "irssi --help"
        }
    },
    "common_is-up": {
        "Category": "common",
        "Command": "is-up",
        "P-Summary": "check whether websit",
        "P-Tasks": "check statu specifi websit",
        "Summary": "Check whether a website is up or down.",
        "Task-Script": {
            "Check the status of the specified website": "is-up {{example.com}}"
        }
    },
    "common_iverilog": {
        "Category": "common",
        "Command": "iverilog",
        "P-Summary": "preprocess compil verilog hdl ieee-1364 code execut program simul",
        "P-Tasks": "also display warn compil sourc file execut compil run explicitli use vvp runtim compil use verilog librari file differ path preprocess verilog code without compil",
        "Summary": "Preprocesses and compiles Verilog HDL (IEEE-1364) code, into executable programs for simulation.",
        "Task-Script": {
            "Also display all warnings": "iverilog {{source.v}} -Wall -o {{executable}}",
            "Compile a source file into an executable": "iverilog {{source.v}} -o {{executable}}",
            "Compile and run explicitly using the VVP runtime": "iverilog -o {{execuable}} -tvvp {{source.v}}",
            "Compile using Verilog library files from a different path": "iverilog {{source.v}} -o {{executable}} -I{{path/to/library_directory}}",
            "Preprocess Verilog code without compiling": "iverilog -E {{source.v}}"
        }
    },
    "common_jar": {
        "Category": "common",
        "Command": "jar",
        "P-Summary": "java applic librari packag",
        "P-Tasks": "list jar war file content list jar war file content verbos output recurs archiv file current directori jar file unzip jar war file current directori",
        "Summary": "Java Applications/Libraries Packager.",
        "Task-Script": {
            "List a .jar/.war file content": "jar tf {{path/to/file.jar}}",
            "List a .jar/.war file content with verbose output": "jar tvf {{path/to/file.jar}}",
            "Recursively archive all files in the current directory into a .jar file": "jar cf {{file.jar}} *",
            "Unzip .jar/.war file to the current directory": "jar -xvf {{file.jar}}"
        }
    },
    "common_jarsigner": {
        "Category": "common",
        "Command": "jarsigner",
        "P-Summary": "sign verifi java archiv jar file",
        "P-Tasks": "sign jar file sign jar file specif algorithm verifi signatur jar file",
        "Summary": "Sign and verify Java Archive (JAR) files.",
        "Task-Script": {
            "Sign a JAR file": "jarsigner {{path/to/file.jar}} {{keystore_alias}}",
            "Sign a JAR file with a specific algorithm": "jarsigner -sigalg {{algorithm}} {{path/to/file.jar}} {{keystore_alias}}",
            "Verify the signature of a JAR file": "jarsigner -verify {{path/to/file.jar}}"
        }
    },
    "common_java": {
        "Category": "common",
        "Command": "java",
        "P-Summary": "java applic launcher",
        "P-Tasks": "display jdk jre hotspot version display usag inform java command execut jar program execut jar program debug wait connect port 5005 execut java class file contain main method use class name",
        "Summary": "Java Application Launcher.",
        "Task-Script": {
            "Display JDK, JRE and HotSpot versions": "java -version",
            "Display usage information for the java command": "java -help",
            "Execute a .jar program": "java -jar {{filename.jar}}",
            "Execute a .jar program with debug waiting to connect on port 5005": "java -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005 -jar {{filename.jar}}",
            "Execute a java .class file that contains a main method by using just the class name": "java {{classname}}"
        }
    },
    "common_javac": {
        "Category": "common",
        "Command": "javac",
        "P-Summary": "java applic compil",
        "P-Tasks": "compil java file compil java file place result class file specif directori compil java file current directori compil sever java file",
        "Summary": "Java Application Compiler.",
        "Task-Script": {
            "Compile a .java file": "javac {{file.java}}",
            "Compile a .java file and place the resulting class file in a specific directory": "javac -d {{path/to/some/directory}} {{file.java}}",
            "Compile all .java files in current directory": "javac {{*.java}}",
            "Compile several .java files": "javac {{file1.java}} {{file2.java}} {{file3.java}}"
        }
    },
    "common_javadoc": {
        "Category": "common",
        "Command": "javadoc",
        "P-Summary": "gener java api document html format sourc code",
        "P-Tasks": "gener document exclud packag gener document java sourc code save result directori gener document specif encod",
        "Summary": "Generate Java API documentation in HTML format from source code.",
        "Task-Script": {
            "Generate documentation excluding some packages": "javadoc -exclude {{package_list}} {{path/to/java_source_code}}",
            "Generate documentation for Java source code and save the result in a directory": "javadoc -d {{path/to/directory/}} {{path/to/java_source_code}}",
            "Generate documentation with a specific encoding": "javadoc -docencoding {{UTF-8}} {{path/to/java_source_code}}"
        }
    },
    "common_jc": {
        "Category": "common",
        "Command": "jc",
        "P-Summary": "util convert output multipl command json",
        "P-Tasks": "convert command output json via magic syntax convert command output json via pipe output pretti json via magic syntax output pretti json via pipe",
        "Summary": "A utility to convert the output of multiple commands to JSON.",
        "Task-Script": {
            "Convert command output to JSON via magic syntax": "jc {{ifconfig}}",
            "Convert command output to JSON via pipe": "{{ifconfig}} | jc {{--ifconfig}}",
            "Output pretty JSON via magic syntax": "jc -p {{ifconfig}}",
            "Output pretty JSON via pipe": "{{ifconfig}} | jc {{--ifconfig}} -p"
        }
    },
    "common_jcal": {
        "Category": "common",
        "Command": "jcal",
        "P-Summary": "display calendar inform jalali format current day highlight",
        "P-Tasks": "display calendar specif month year display calendar specif year 4 digit display calendar current month display previou current next month",
        "Summary": "Display calendar information in the Jalali format, with the current day highlighted.",
        "Task-Script": {
            "Display a calendar for a specific month and year": "jcal {{year}} {{month}}",
            "Display a calendar for a specific year (4 digits)": "jcal {{year}}",
            "Display a calendar for the current month": "jcal",
            "Display the previous, current, and next months": "jcal -3"
        }
    },
    "common_jdupes": {
        "Category": "common",
        "Command": "jdupes",
        "P-Summary": "power duplic file finder enhanc fork fdupe",
        "P-Tasks": "search singl directori search directori recurs search directori recurs let user choos file preserv search multipl directori search multipl directori follow subdirector directory2 directory1 search multipl directori keep directori order result",
        "Summary": "A powerful duplicate file finder and an enhanced fork of fdupes.",
        "Task-Script": {
            "Search a single directory": "jdupes {{directory}}",
            "Search all directories recursively": "jdupes --recurse {{directory}}",
            "Search directory recursively and let user choose files to preserve": "jdupes --delete --recurse {{directory}}",
            "Search multiple directories": "jdupes {{directory1}} {{directory2}}",
            "Search multiple directories and follow subdirectores under directory2, not directory1": "jdupes {{directory1}} --recurse: {{directory2}}",
            "Search multiple directories and keep the directory order in result": "jdupes -O {{directory1}} {{directory2}} {{directory3}}"
        }
    },
    "common_jekyll": {
        "Category": "common",
        "Command": "jekyll",
        "P-Summary": "simpl blog-awar static site gener",
        "P-Tasks": "clean site remov site output cach folder without build enabl increment regener enabl verbos output gener develop server run http : localhost:4000 gener current directori\n_site",
        "Summary": "A simple, blog-aware, static site generator.",
        "Task-Script": {
            "Clean the site (removes site output and cache folder) without building": "jekyll clean",
            "Enable incremental regeneration": "jekyll serve --incremental",
            "Enable verbose output": "jekyll serve --verbose",
            "Generate a development server that will run at http://localhost:4000/": "jekyll serve",
            "Generate the current directory into \"./_site\"": "jekyll build"
        }
    },
    "common_jenv": {
        "Category": "common",
        "Command": "jenv",
        "P-Summary": "command line tool manag java_hom environ variabl",
        "P-Tasks": "add java version jenv display manag jdk display current jdk version use enabl jenv plugin set jdk version current shell session set global jdk version",
        "Summary": "Command line tool to manage the \"JAVA_HOME\" environment variable.",
        "Task-Script": {
            "Add a java version to jEnv": "jenv add {{path/to/jdk_home}}",
            "Display all managed JDKs": "jenv versions",
            "Display the current JDK version used": "jenv version",
            "Enable a jEnv plugin": "jenv enable-plugin {{plugin_name}}",
            "Set the JDK version for the current shell session": "jenv shell {{java_version}}",
            "Set the global JDK version": "jenv global {{java_version}}"
        }
    },
    "common_jest": {
        "Category": "common",
        "Command": "jest",
        "P-Summary": "zero-configur javascript test platform",
        "P-Tasks": "run avail test run test suit relat given sourc file run test suit relat uncommit file run test suit file whose path match given regex pattern run test whose name match given regex pattern show help watch file chang automat re-run relat test",
        "Summary": "A zero-configuration JavaScript testing platform.",
        "Task-Script": {
            "Run all available tests": "jest",
            "Run test suites related to a given source file": "jest --findRelatedTests {{path/to/source_file.js}}",
            "Run test suites related to all uncommitted files": "jest --onlyChanged",
            "Run the test suites from files whose paths match the given regex patterns": "jest {{test_file1}} {{path/to/test_file2.js}}",
            "Run the tests whose names match the given regex pattern": "jest --testNamePattern {{spec_name}}",
            "Show help": "jest --help",
            "Watch files for changes and automatically re-run related tests": "jest --watch"
        }
    },
    "common_jhat": {
        "Category": "common",
        "Command": "jhat",
        "P-Summary": "java heap analysi tool",
        "P-Tasks": "analyz dump let jhat use 8gb ram 2-4x dump size recommend analyz heap dump jmap view via http port 7000 analyz heap dump specifi altern port http server",
        "Summary": "Java Heap Analysis Tool.",
        "Task-Script": {
            "Analyze a dump letting jhat use up to 8GB RAM (2-4x dump size recommended)": "jhat -J-mx8G {{dump_file.bin}}",
            "Analyze a heap dump (from jmap), view via http on port 7000": "jhat {{dump_file.bin}}",
            "Analyze a heap dump, specifying an alternate port for the http server": "jhat -p {{port}} {{dump_file.bin}}"
        }
    },
    "common_jhipster": {
        "Category": "common",
        "Command": "jhipster",
        "P-Summary": "web applic gener use either monolith microservic architectur",
        "P-Tasks": "add new entiti gener project appli lastest jhipster updat project gener ci cd pipelin applic gener kubernet configur applic gener simpl backend project gener simpl frontend project gener simpl full-stack project monolith microservic import jdl file configur applic see : http : start jhipster tech jdl-studio",
        "Summary": "Web application generator using either monolithic or microservices architecture.",
        "Task-Script": {
            "Add a new entity to a generated project": "jhipster entity {{entity_name}}",
            "Apply lastest JHipster updates to the project": "jhipster upgrade",
            "Generate a CI/CD pipeline for your application": "jhipster ci-cd",
            "Generate a Kubernetes configuration for your application": "jhipster kubernetes",
            "Generate a simple backend project": "jhipster --skip-client",
            "Generate a simple frontend project": "jhipster --skip-server",
            "Generate a simple full-stack project (monolithic or microservices)": "jhipster",
            "Import a JDL file to configure your application (see: https://start.jhipster.tech/jdl-studio/)": "jhipster import-jdl {{first_file.jh second_file.jh ... n_file.jh}}"
        }
    },
    "common_jigsaw": {
        "Category": "common",
        "Command": "jigsaw",
        "P-Summary": "laravel-bas static site builder php",
        "P-Tasks": "build site develop build site product initialis project initialis project use starter templat preview site build_loc directori preview site build_product directori",
        "Summary": "A Laravel-based static site builder for PHP.",
        "Task-Script": {
            "Build the site for development": "jigsaw build",
            "Build the site for production": "jigsaw build production",
            "Initialise a project": "jigsaw init",
            "Initialise a project using a starter template": "jigsaw init {{template_name}}",
            "Preview the site from the \"build_local\" directory": "jigsaw serve",
            "Preview the site from the \"build_production\" directory": "jigsaw serve {{build_production}}"
        }
    },
    "common_jmap": {
        "Category": "common",
        "Command": "jmap",
        "P-Summary": "java memori map tool",
        "P-Tasks": "dump content heap binari file analysi jhat print heap summari inform print histogram heap usag type print share object map java process output like pmap",
        "Summary": "Java Memory Map Tool.",
        "Task-Script": {
            "Dump contents of the heap into a binary file for analysis with jhat": "jmap -dump:format=b,file={{filename}} {{java_pid}}",
            "Print heap summary information": "jmap -heap {{filename.jar}} {{java_pid}}",
            "Print histogram of heap usage by type": "jmap -histo {{java_pid}}",
            "Print shared object mappings for a java process (output like pmap)": "jmap {{java_pid}}"
        }
    },
    "common_jobs": {
        "Category": "common",
        "Command": "jobs",
        "P-Summary": "display statu job current session",
        "P-Tasks": "show process id job show statu process id job show statu particular job show statu job",
        "Summary": "Display status of jobs in the current session.",
        "Task-Script": {
            "Show process IDs of all jobs": "jobs -p",
            "Show status and process IDs of all jobs": "jobs -l",
            "Show status of a particular job": "jobs {{job_id}}",
            "Show status of all jobs": "jobs"
        }
    },
    "common_john": {
        "Category": "common",
        "Command": "john",
        "P-Summary": "password cracker",
        "P-Tasks": "crack password hash crack password hash enabl word mangl rule crack password hash use custom wordlist crack password hash use specif hash format display user crack password user identifi multipl file list avail hash format restor interrupt crack session state file e g\nmycrack rec show password crack",
        "Summary": "Password cracker.",
        "Task-Script": {
            "Crack password hashes": "john {{path/to/hashes.txt}}",
            "Crack password hashes, enabling word mangling rules": "john --rules {{path/to/hashes.txt}}",
            "Crack password hashes, using a custom wordlist": "john --wordlist={{path/to/wordlist.txt}} {{path/to/hashes.txt}}",
            "Crack password hashes, using a specific hash format": "john --format={{md5crypt}} {{path/to/hashes.txt}}",
            "Display users' cracked passwords by user identifier from multiple files": "john --show --users={{user_ids}} {{path/to/hashes*}} {{path/to/other/hashes*}}",
            "List available hash formats": "john --list=formats",
            "Restore an interrupted cracking session from a state file, e.g. `mycrack.rec`": "john --restore={{path/to/mycrack.rec}}",
            "Show passwords cracked": "john --show {{path/to/hashes.txt}}"
        }
    },
    "common_join": {
        "Category": "common",
        "Command": "join",
        "P-Summary": "join line two sort file common field",
        "P-Tasks": "join field3 file1 field1 file2 join two file first default field join two file use comma instead space field separ produc line unpair line file1",
        "Summary": "Join lines of two sorted files on a common field.",
        "Task-Script": {
            "Join field3 of file1 with field1 of file2": "join -1 {{3}} -2 {{1}} {{file1}} {{file2}}",
            "Join two files on the first (default) field": "join {{file1}} {{file2}}",
            "Join two files using a comma (instead of a space) as the field separator": "join -t {{','}} {{file1}} {{file2}}",
            "Produce a line for each unpairable line for file1": "join -a {{1}} {{file1}} {{file2}}"
        }
    },
    "common_jp2a": {
        "Category": "common",
        "Command": "jp2a",
        "P-Summary": "convert jpeg imag ascii",
        "P-Tasks": "color ascii output read jpeg imag url print ascii read jpeg imag file print ascii specifi charact use ascii output write ascii output html file format suitabl view web browser write ascii output file",
        "Summary": "Convert JPEG images to ASCII.",
        "Task-Script": {
            "Colorize the ASCII output": "jp2a --colors {{path/to/image.jpeg}}",
            "Read JPEG image from a URL and print in ASCII": "jp2a {{www.example.com/image.jpeg}}",
            "Read JPEG image from a file and print in ASCII": "jp2a {{path/to/image.jpeg}}",
            "Specify characters to be used for the ASCII output": "jp2a --chars='{{..-ooxx@@}}' {{path/to/image.jpeg}}",
            "Write the ASCII output in HTML file format, suitable for viewing in web browsers": "jp2a --html --output={{path/to/output_file.html}} {{path/to/image.jpeg}}",
            "Write the ASCII output into a file": "jp2a --output={{path/to/output_file.txt}} {{path/to/image.jpeg}}"
        }
    },
    "common_jpegoptim": {
        "Category": "common",
        "Command": "jpegoptim",
        "P-Summary": "optimis jpeg imag",
        "P-Tasks": "forc output imag progress forc output imag fix maximum files optimis jpeg imag strip non-essenti data optimis set jpeg imag retain associ data",
        "Summary": "Optimise JPEG images.",
        "Task-Script": {
            "Force the output images to be progressive": "jpegoptim --all-progressive {{image1.jpeg}} {{image2.jpeg}} {{imageN.jpeg}}",
            "Force the output images to have a fixed maximum filesize": "jpegoptim --size={{250k}} {{image1.jpeg}} {{image2.jpeg}} {{imageN.jpeg}}",
            "Optimise JPEG images, stripping all non-essential data": "jpegoptim --strip-all {{image1.jpeg}} {{image2.jpeg}} {{imageN.jpeg}}",
            "Optimise a set of JPEG images, retaining all associated data": "jpegoptim {{image1.jpeg}} {{image2.jpeg}} {{imageN.jpeg}}"
        }
    },
    "common_jps": {
        "Category": "common",
        "Command": "jps",
        "P-Summary": "show jvm process statu current user",
        "P-Tasks": "display argument pass jvm display argument pass process display full packag name process list jvm process list jvm process pid",
        "Summary": "Show JVM Process Status of current user.",
        "Task-Script": {
            "Display the arguments passed to the JVM": "jps -v",
            "Display the arguments passed to the processes": "jps -m",
            "Display the full package name of all processes": "jps -l",
            "List all JVM processes": "jps",
            "List all JVM processes with only PID": "jps -q"
        }
    },
    "common_jq": {
        "Category": "common",
        "Command": "jq",
        "P-Summary": "command-lin json processor use domain-specif languag",
        "P-Tasks": "combin multipl filter output json file pretty-print format output element array valu object json file output first element json file output valu given key element json text stdin output valu given key first element json text stdin output valu given key string disabl json output output valu multipl key new json object assum input json key key_nam other_key_nam read json object file array output invers jq",
        "Summary": "A command-line JSON processor that uses a domain-specific language.",
        "Task-Script": {
            "Combine multiple filters": "cat {{file.json}} | jq 'unique | sort | reverse'",
            "Output a JSON file, in pretty-print format": "jq . {{file.json}}",
            "Output all elements from arrays (or all the values from objects) in a JSON file": "jq '.[]' {{file.json}}",
            "Output the first element in a JSON file": "jq '.[0]' {{file.json}}",
            "Output the value of a given key of each element in a JSON text from `stdin`": "cat {{file.json}} | jq 'map(.{{key_name}})'",
            "Output the value of a given key of the first element in a JSON text from `stdin`": "cat {{file.json}} | jq '.[0].{{key_name}}'",
            "Output the value of a given key to a string (and disable JSON output)": "cat {{file.json}} | jq --raw-output '\"some text: \\(.{{key_name}})\"'",
            "Output the value of multiple keys as a new JSON object (assuming the input JSON has the keys `key_name` and `other_key_name`)": "cat {{file.json}} | jq '{{{my_new_key}}: .{{key_name}}, {{my_other_key}}: .{{other_key_name}}}'",
            "Read JSON objects from a file into an array, and output it (inverse of `jq .[]`)": "jq --slurp . {{file.json}}"
        }
    },
    "common_jrnl": {
        "Category": "common",
        "Command": "jrnl",
        "P-Summary": "simpl journal applic command line",
        "P-Tasks": "edit entri tag texa histori insert new entri editor quickli insert new entri view everyth happen start last year start last march view last ten entri",
        "Summary": "A simple journal application for your command line.",
        "Task-Script": {
            "Edit all entries tagged with \"texas\" and \"history\"": "jrnl {{@texas}} -and {{@history}} --edit",
            "Insert a new entry with your editor": "jrnl",
            "Quickly insert a new entry": "jrnl {{today at 3am}}: {{title}}. {{content}}",
            "View everything that happened from the start of last year to the start of last march": "jrnl -from \"{{last year}}\" -until {{march}}",
            "View the last ten entries": "jrnl -n {{10}}"
        }
    },
    "common_json5": {
        "Category": "common",
        "Command": "json5",
        "P-Summary": "command-lin tool convert json5 file json",
        "P-Tasks": "convert json5 stdin json stdout convert json5 file json output stdout convert json5 file specifi json file specifi number space indent tab valid json5 file view avail option",
        "Summary": "A command-line tool for converting JSON5 files to JSON.",
        "Task-Script": {
            "Convert JSON5 stdin to JSON `stdout`": "echo {{input}} | json5",
            "Convert a JSON5 file to JSON and output to `stdout`": "json5 {{path/to/input_file.json5}}",
            "Convert a JSON5 file to the specified JSON file": "json5 {{path/to/input_file.json5}} --out-file {{path/to/output_file.json}}",
            "Specify the number of spaces to indent by (or \"t\" for tabs)": "json5 --space {{indent_amount}}",
            "Validate a JSON5 file": "json5 {{path/to/input_file.json5}} --validate",
            "View available options": "json5 --help"
        }
    },
    "common_jstack": {
        "Category": "common",
        "Command": "jstack",
        "P-Summary": "java stack trace tool",
        "P-Tasks": "print java stack trace thread java process print mix mode java c++ stack trace thread java process print stack trace java core dump",
        "Summary": "Java Stack Trace Tool.",
        "Task-Script": {
            "Print java stack traces for all threads in a java process": "jstack {{java_pid}}",
            "Print mixed mode (java/c++) stack traces for all threads in a java process": "jstack -m {{java_pid}}",
            "Print stack traces from java core dump": "jstack {{/usr/bin/java}} {{file.core}}"
        }
    },
    "common_julia": {
        "Category": "common",
        "Command": "julia",
        "P-Summary": "high-level high-perform dynam program languag technic comput",
        "P-Tasks": "evalu string contain julia code evalu string julia code pass argument evalu express print result execut julia program exit execut julia program take argument start julia parallel mode use n worker process start julia repl session",
        "Summary": "A high-level, high-performance dynamic programming language for technical computing.",
        "Task-Script": {
            "Evaluate a string containing Julia code": "julia -e '{{julia_code}}'",
            "Evaluate a string of Julia code, passing arguments to it": "julia -e '{{for x in ARGS; println(x); end}}' {{arguments}}",
            "Evaluate an expression and print the result": "julia -E '{{(1 - cos(pi/4))/2}}'",
            "Execute a Julia program and exit": "julia {{program.jl}}",
            "Execute a Julia program that takes arguments": "julia {{program.jl}} {{arguments}}",
            "Start Julia in parallel mode, using N worker processes": "julia -p {{N}}",
            "Start a Julia REPL session": "julia"
        }
    },
    "common_jupyter": {
        "Category": "common",
        "Command": "jupyter",
        "P-Summary": "web applic creat share document contain code visual note\nprimarili use data analysi scientif comput machin learn",
        "P-Tasks": "export specif jupyt notebook anoth format list current run notebook server open specif jupyt notebook start jupyterlab instal current directori start jupyt notebook server current directori start server specif port stop current run server",
        "Summary": "Web application to create and share documents that contain code, visualizations and notes.\nPrimarily used for data analysis, scientific computing and machine learning.",
        "Task-Script": {
            "Export a specific Jupyter notebook into another format": "jupyter nbconvert --to {{html|markdown|pdf|script}} {{example.ipynb}}",
            "List currently running notebook servers": "jupyter notebook list",
            "Open a specific Jupyter notebook": "jupyter notebook {{example.ipynb}}",
            "Start JupyterLab, if installed, in the current directory": "jupyter lab",
            "Start a Jupyter notebook server in the current directory": "jupyter notebook",
            "Start a server on a specific port": "jupyter notebook --port={{port}}",
            "Stop the currently running server": "jupyter notebook stop"
        }
    },
    "common_jupytext": {
        "Category": "common",
        "Command": "jupytext",
        "P-Summary": "tool convert jupyt notebook plain text document back",
        "P-Tasks": "convert md file notebook run convert py file notebook output convert notebook py file turn notebook pair ipynb py notebook updat pair represent notebook updat input cell notebook preserv output metadata",
        "Summary": "Tool to convert Jupyter notebooks to plain text documents, and back again.",
        "Task-Script": {
            "Convert a `.md` file to a notebook and run it": "jupytext --to notebook --execute {{notebook.md}}",
            "Convert a `.py` file to a notebook with no outputs": "jupytext --to notebook {{notebook.py}}",
            "Convert a notebook to a `.py` file": "jupytext --to py {{notebook.ipynb}}",
            "Turn a notebook into a paired `.ipynb`/`.py` notebook": "jupytext --set-formats ipynb,py {{notebook.ipynb}}",
            "Update all paired representations of a notebook": "jupytext --sync {{notebook.ipynb}}",
            "Update the input cells in a notebook and preserve outputs and metadata": "jupytext --update --to notebook {{notebook.py}}"
        }
    },
    "common_jwt": {
        "Category": "common",
        "Command": "jwt",
        "P-Summary": "command line tool work json web token jwt\nencrypt algorithm avail hs256 hs384 hs512 rs256 rs384 rs512 es256 es384\ninform : http : github com mike-engel jwt-cli",
        "P-Tasks": "decod jwt decod jwt json string encod json string jwt encod key pair payload jwt",
        "Summary": "A command line tool to work with JSON Web Tokens (JWTs).\nEncryption algorithms available are HS256,HS384, HS512, RS256, RS384, RS512, ES256, ES384.\nFor more information: <https://github.com/mike-engel/jwt-cli>.",
        "Task-Script": {
            "Decode a JWT": "jwt decode {{jwt_string}}",
            "Decode a JWT as a JSON string": "jwt decode -j {{jwt_string}}",
            "Encode a JSON string to a JWT": "jwt encode --alg {{HS256}} --secret {{1234567890}} '{{json_string}}'",
            "Encode key pair payload to JWT": "jwt encode --alg {{HS256}} --secret {{1234567890}} -P key=value"
        }
    },
    "common_k6": {
        "Category": "common",
        "Command": "k6",
        "P-Summary": "open sourc load test tool saa engin team",
        "P-Tasks": "login cloud servic use secret token run load test local run load test local discard respons bodi significantli faster run load test local use influxdb store result run load test local use base javascript compat mode significantli faster run load test local given environ variabl run load test local given number virtual user durat run load test cloud infrastructur",
        "Summary": "Open source load testing tool and SaaS for engineering teams.",
        "Task-Script": {
            "Login to cloud service using secret token": "k6 login cloud --token {{secret}}",
            "Run load test locally": "k6 run {{script.js}}",
            "Run load test locally and discard response bodies (significantly faster)": "k6 run --discard-response-bodies {{script.js}}",
            "Run load test locally using InfluxDB to store results": "k6 run --out influxdb={{http://localhost:8086/k6db}} {{script.js}}",
            "Run load test locally using the base javascript compatibility mode (significantly faster)": "k6 run --compatibility-mode=base {{script.js}}",
            "Run load test locally with a given environment variable": "k6 run -e {{HOSTNAME=example.com}} {{script.js}}",
            "Run load test locally with a given number of virtual users and duration": "k6 run --vus {{10}} --duration {{30s}} {{script.js}}",
            "Run load test on cloud infrastructure": "k6 cloud {{script.js}}"
        }
    },
    "common_k8s-unused-secret-detector": {
        "Category": "common",
        "Command": "k8s-unused-secret-detector",
        "P-Summary": "command line interfac tool detect unus kubernet secret",
        "P-Tasks": "delet unus secret specif namespac detect unus secret detect unus secret specif namespac",
        "Summary": "Command line interface tool for detecting unused Kubernetes secrets.",
        "Task-Script": {
            "Delete unused secrets in a specific namespace": "k8s-unused-secret-detector -n {{namespace}} | kubectl delete secret -n {{namespace}}",
            "Detect unused secrets": "k8s-unused-secret-detector",
            "Detect unused secrets in a specific namespace": "k8s-unused-secret-detector -n {{namespace}}"
        }
    },
    "common_k8sec": {
        "Category": "common",
        "Command": "k8sec",
        "P-Summary": "command line interfac tool manag kubernet secret",
        "P-Tasks": "dump secret file list specif secret base64-encod string list secret load secret file set base64-encod valu set secret valu unset secret",
        "Summary": "Command line interface tool to manage Kubernetes secrets.",
        "Task-Script": {
            "Dump secrets to a file": "k8sec dump -f {{path/to/file}} {{secret_name}}",
            "List a specific secret as a base64-encoded string": "k8sec list {{secret_name}} --base64",
            "List all secrets": "k8sec list",
            "Load secrets from a file": "k8sec load -f {{path/to/file}} {{secret_name}}",
            "Set a base64-encoded value": "k8sec set --base64 {{secret_name}} {{key=encoded_value}}",
            "Set a secret's value": "k8sec set {{secret_name}} {{key=value}}",
            "Unset a secret": "k8sec unset {{secret_name}}"
        }
    },
    "common_kafkacat": {
        "Category": "common",
        "Command": "kafkacat",
        "P-Summary": "apach kafka produc consum tool",
        "P-Tasks": "consum messag kafka consum group consum messag start newest offset consum messag start oldest offset exit last messag receiv get offset topic partit specif point time list metadata specif topic list metadata topic broker publish messag read stdin publish messag read file",
        "Summary": "Apache Kafka producer and consumer tool.",
        "Task-Script": {
            "Consume messages as a Kafka consumer group": "kafkacat -G {{group_id}} {{topic}} -b {{brokers}}",
            "Consume messages starting with the newest offset": "kafkacat -C -t {{topic}} -b {{brokers}}",
            "Consume messages starting with the oldest offset and exit after the last message is received": "kafkacat -C -t {{topic}} -b {{brokers}} -o beginning -e",
            "Get offset for a topic/partition for a specific point in time": "kafkacat -Q -t {{topic}}:{{partition}}:{{unix_timestamp}} -b {{brokers}}",
            "List metadata for a specific topic": "kafkacat -L -t {{topic}} -b {{brokers}}",
            "List metadata for all topics and brokers": "kafkacat -L -b {{brokers}}",
            "Publish message by reading from `stdin`": "echo {{message}} | kafkacat -P -t {{topic}} -b {{brokers}}",
            "Publish messages by reading from a file": "kafkacat -P -t {{topic}} -b {{brokers}} {{path/to/file}}"
        }
    },
    "common_kaggle": {
        "Category": "common",
        "Command": "kaggle",
        "P-Summary": "offici cli kaggl implement python 3",
        "P-Tasks": "download specif file competit dataset view current configur valu",
        "Summary": "Official CLI for Kaggle implemented in Python 3.",
        "Task-Script": {
            "Download a specific file from a competition dataset": "kaggle competitions download {{competition}} -f {{filename}}",
            "View current configuration values": "kaggle config view"
        }
    },
    "common_kahlan": {
        "Category": "common",
        "Command": "kahlan",
        "P-Summary": "unit behaviour driven develop test framework php",
        "P-Tasks": "run specif spec directori run specif output use report run specif use specif configur file run specif code coverag detail 0 4",
        "Summary": "A unit and Behaviour Driven Development test framework for PHP.",
        "Task-Script": {
            "Run all specifications in the \"spec\" directory": "kahlan",
            "Run specifications and output using a reporter": "kahlan --reporter={{dot|bar|json|tap|verbose}}",
            "Run specifications using a specific configuration file": "kahlan --config={{path/to/configuration_file}}",
            "Run specifications with code coverage (detail can be between 0 and 4)": "kahlan --coverage={{detail_level}}"
        }
    },
    "common_kak": {
        "Category": "common",
        "Command": "kak",
        "P-Summary": "kakoun mode-bas code editor implement multipl select paradigm\ndata select simultan edit differ locat use multipl select user also connect session collabor edit",
        "P-Tasks": "enter insert mode normal mode write text file escap insert mode go back normal mode insert content file open file enter normal mode execut command replac instanc foo current file bar save current file search number select first two un-select secondari select keep main one",
        "Summary": "Kakoune is a mode-based code editor implementing the \"multiple selections\" paradigm.\nData can be selected and simultaneously edited in different locations, using multiple selections; users can also connect to the same session for collaborative editing.",
        "Task-Script": {
            "Enter insert mode from normal mode, to write text into the file": "i",
            "Escape insert mode, to go back to normal mode": "<Escape>",
            "Insert the contents of a file": "!cat {{path/to/file}}<Enter>",
            "Open a file and enter normal mode, to execute commands": "kak {{path/to/file}}",
            "Replace all instances of \"foo\" in the current file with \"bar\"": "%s{{foo}}<Enter>c{{bar}}<Escape>",
            "Save the current file": ":w<Enter>",
            "Search for numbers and select the first two": "/\\d+<Enter>N",
            "Un-select all secondary selections, and keep only the main one": "<Space>"
        }
    },
    "common_keepass2": {
        "Category": "common",
        "Command": "keepass2",
        "P-Summary": "light-weight password manag",
        "P-Tasks": "start keepass 2 open specif password databas start keepass 2 open recently-open password databas use specif key file open password databas",
        "Summary": "A light-weight password manager.",
        "Task-Script": {
            "Start KeePass 2, opening a specific password database": "keepass2 {{path/to/database.kbdx}}",
            "Start KeePass 2, opening the most recently-opened password database": "keepass2",
            "Use a specific key file to open a password database": "keepass2 {{path/to/database.kbdx}} -keyfile:{{path/to/key/file.key}}"
        }
    },
    "common_keybase": {
        "Category": "common",
        "Command": "keybase",
        "P-Summary": "key directori map social media ident encrypt key publicli audit manner",
        "P-Tasks": "add new proof decrypt file encrypt file follow anoth user revok current devic log delet local data sign file verifi sign file",
        "Summary": "Key directory that maps social media identities to encryption keys in a publicly auditable manner.",
        "Task-Script": {
            "Add a new proof": "keybase prove {{service}} {{service_username}}",
            "Decrypt a file": "keybase decrypt --infile {{input_file}} --outfile {{output_file}}",
            "Encrypt a file": "keybase encrypt --infile {{input_file}} --outfile {{output_file}} {{receiver}}",
            "Follow another user": "keybase follow {{username}}",
            "Revoke current device, log out, and delete local data": "keybase deprovision",
            "Sign a file": "keybase sign --infile {{input_file}} --outfile {{output_file}}",
            "Verify a signed file": "keybase verify --infile {{input_file}} --outfile {{output_file}}"
        }
    },
    "common_khal": {
        "Category": "common",
        "Command": "khal",
        "P-Summary": "text-bas calendar schedul applic command line",
        "P-Tasks": "add new event person calendar print calendar list event next three month print event schedul person calendar next seven day print event schedul person calendar tomorrow 10:00 start khal interact mode",
        "Summary": "A text-based calendar and scheduling application for the command line.",
        "Task-Script": {
            "Add new event to personal calendar": "khal new -a {{personal}} {{2020-09-08}} {{18:00}} {{18:30}} \"{{Dentist appointment}}\"",
            "Print a calendar with a list of events for the next three months": "khal calendar",
            "Print all events scheduled in personal calendar for the next seven days": "khal list -a {{personal}} {{today}} {{7d}}",
            "Print all events scheduled not in personal calendar for tomorrow at 10:00": "khal at -d {{personal}} {{tomorrow}} {{10:00}}",
            "Start khal on interactive mode": "ikhal"
        }
    },
    "common_kill": {
        "Category": "common",
        "Command": "kill",
        "P-Summary": "send signal process usual relat stop process\nsignal except sigkil sigstop intercept process perform clean exit",
        "P-Tasks": "list avail signal name use without sig prefix send sigusr1 signal process given gid group id signal oper system immedi termin program get chanc captur signal signal oper system paus program sigcont continu signal receiv termin background job termin program use sighup hang signal\nmani daemon reload instead termin termin program use sigint interrupt signal\ntypic initi user press ctrl + c termin program use default sigterm termin signal",
        "Summary": "Sends a signal to a process, usually related to stopping the process.\nAll signals except for SIGKILL and SIGSTOP can be intercepted by the process to perform a clean exit.",
        "Task-Script": {
            "List available signal names (to be used without the `SIG` prefix)": "kill -l",
            "Send a `SIGUSR1` signal to all processes with the given GID (group id)": "kill -{{SIGUSR1}} -{{group_id}}",
            "Signal the operating system to immediately terminate a program (which gets no chance to capture the signal)": "kill -{{9|KILL}} {{process_id}}",
            "Signal the operating system to pause a program until a SIGCONT (\"continue\") signal is received": "kill -{{17|STOP}} {{process_id}}",
            "Terminate a background job": "kill %{{job_id}}",
            "Terminate a program using the SIGHUP (hang up) signal. Many daemons will reload instead of terminating": "kill -{{1|HUP}} {{process_id}}",
            "Terminate a program using the SIGINT (interrupt) signal. This is typically initiated by the user pressing `Ctrl + C`": "kill -{{2|INT}} {{process_id}}",
            "Terminate a program using the default SIGTERM (terminate) signal": "kill {{process_id}}"
        }
    },
    "common_killall": {
        "Category": "common",
        "Command": "killall",
        "P-Summary": "send kill signal instanc process name must exact name\nsignal except sigkil sigstop intercept process allow clean exit",
        "P-Tasks": "forc kill process interact ask confirm termin list avail signal name use without sig prefix termin process use sigint interrupt signal signal sent press ctrl + c termin process use default sigterm termin signal",
        "Summary": "Send kill signal to all instances of a process by name (must be exact name).\nAll signals except SIGKILL and SIGSTOP can be intercepted by the process, allowing a clean exit.",
        "Task-Script": {
            "Force kill a process": "killall -KILL {{process_name}}",
            "Interactively ask for confirmation before termination": "killall -i {{process_name}}",
            "List available signal names (to be used without the 'SIG' prefix)": "killall --list",
            "Terminate a process using the SIGINT (interrupt) signal, which is the same signal sent by pressing `Ctrl + C`": "killall -INT {{process_name}}",
            "Terminate a process using the default SIGTERM (terminate) signal": "killall {{process_name}}"
        }
    },
    "common_kind": {
        "Category": "common",
        "Command": "kind",
        "P-Summary": "tool run local kubernet cluster use docker contain node\ndesign test kubernet may use local develop continu integr",
        "P-Tasks": "creat local kubernet cluster delet one cluster export kubeconfig log get detail cluster node kubeconfig",
        "Summary": "Tool for running local Kubernetes clusters using Docker container \"nodes\".\nDesigned for testing Kubernetes itself, but may be used for local development or continuous integration.",
        "Task-Script": {
            "Create a local Kubernetes cluster": "kind create cluster --name {{cluster-name}}",
            "Delete one or more clusters": "kind delete clusters {{cluster-name}}",
            "Export the kubeconfig or the logs": "kind export {{kubeconfig|logs}}",
            "Get details about clusters, nodes, or the kubeconfig": "kind get {{clusters|nodes|kubeconfig}}"
        }
    },
    "common_knife": {
        "Category": "common",
        "Command": "knife",
        "P-Summary": "cli interact chef server local chef repo",
        "P-Tasks": "bootstrap new node edit node edit role list regist node show node upload local cookbook chef server view data bag",
        "Summary": "CLI for interacting with a Chef server from a local Chef repo.",
        "Task-Script": {
            "Bootstrap a new node": "knife bootstrap {{fqdn_or_ip}}",
            "Edit a node": "knife node edit {{node_name}}",
            "Edit a role": "knife role edit {{role_name}}",
            "List all registered nodes": "knife node list",
            "Show a node": "knife node show {{node_name}}",
            "Upload a local cookbook to the Chef server": "knife cookbook upload {{cookbook_name}}",
            "View a data bag": "knife data bag show {{data_bag_name}} {{data_bag_item}}"
        }
    },
    "common_kompose": {
        "Category": "common",
        "Command": "kompose",
        "P-Summary": "tool convert docker-compos applic kubernet",
        "P-Tasks": "convert docker-compos file kubernet resourc file delet instanti servic deploy kubernet deploy docker applic kubernet",
        "Summary": "A tool to convert docker-compose applications to Kubernetes.",
        "Task-Script": {
            "Convert a docker-compose file into Kubernetes resources file": "kompose convert -f {{docker-compose.yml}}",
            "Delete instantiated services/deployments from Kubernetes": "kompose down -f {{docker-compose.yml}}",
            "Deploy a dockerized application to Kubernetes": "kompose up -f {{docker-compose.yml}}"
        }
    },
    "common_kops": {
        "Category": "common",
        "Command": "kops",
        "P-Summary": "creat destroy upgrad maintain kubernet cluster command line",
        "P-Tasks": "creat cluster configur specif creat new ssh public key delet cluster export cluster configur kube config file get cluster configur yaml",
        "Summary": "Create, destroy, upgrade and maintain Kubernetes clusters from the command line.",
        "Task-Script": {
            "Create a cluster from the configuration specification": "kops create cluster -f {{cluster_name.yaml}}",
            "Create a new ssh public key": "kops create secret sshpublickey {{key_name}} -i {{~/.ssh/id_rsa.pub}}",
            "Delete a cluster": "kops delete cluster {{cluster_name}} --yes",
            "Export the cluster configurations into the ~/.kube/config file": "kops export kubecfg {{cluster_name}}",
            "Get the cluster configuration as yaml": "kops get cluster {{cluster_name}} -o yaml"
        }
    },
    "common_kosmorro": {
        "Category": "common",
        "Command": "kosmorro",
        "P-Summary": "comput ephemerid event given date given posit earth",
        "P-Tasks": "gener pdf note : texliv must instal get ephemerid pari franc get ephemerid pari franc utc+2 timezon get ephemerid pari franc june 9th 2020",
        "Summary": "Compute the ephemerides and the events for a given date, at a given position on Earth.",
        "Task-Script": {
            "Generate a PDF (note: TeXLive must be installed)": "kosmorro --format={{pdf}} --output={{path/to/file.pdf}}",
            "Get ephemerides for Paris, France": "kosmorro --latitude={{48.7996}} --longitude={{2.3511}}",
            "Get ephemerides for Paris, France, in the UTC+2 timezone": "kosmorro --latitude={{48.7996}} --longitude={{2.3511}} --timezone={{2}}",
            "Get ephemerides for Paris, France, on June 9th, 2020": "kosmorro --latitude={{48.7996}} --longitude={{2.3511}} --date={{2020-06-09}}"
        }
    },
    "common_kotlin": {
        "Category": "common",
        "Command": "kotlin",
        "P-Summary": "kotlin applic launcher",
        "P-Tasks": "display kotlin jvm version run jar file",
        "Summary": "Kotlin Application Launcher.",
        "Task-Script": {
            "Display Kotlin and JVM version": "kotlin -version",
            "Run a jar file": "kotlin {{filename.jar}}"
        }
    },
    "common_ksh": {
        "Category": "common",
        "Command": "ksh",
        "P-Summary": "korn shell\nbash sh -compat command line interpret",
        "P-Tasks": "execut command run command file run command file print execut start interact command line interpret",
        "Summary": "Korn Shell.\n`bash` and `sh`-compatible command line interpreter.",
        "Task-Script": {
            "Execute a command": "ksh -c {{command}}",
            "Run commands from a file": "ksh {{file}}",
            "Run commands from a file and print them as they are executed": "ksh -x {{file}}",
            "Start interactive command line interpreter": "ksh"
        }
    },
    "common_kube-capacity": {
        "Category": "common",
        "Command": "kube-capacity",
        "P-Summary": "simpl cli provid overview resourc request limit util kubernet cluster\ncombin best part kubectl top kubectl describ cli focus cluster resourc",
        "P-Tasks": "includ pod includ util output list node total cpu memori resourc request limit",
        "Summary": "A simple CLI that provides an overview of the resource requests, limits, and utilization in a Kubernetes cluster.\nCombine the best parts of `kubectl top` and `kubectl describe` into a CLI focused on cluster resources.",
        "Task-Script": {
            "Include pods": "kube-capacity -p",
            "Include utilization": "kube-capacity -u",
            "Output a list of nodes with the total CPU and Memory resource requests and limits": "kube-capacity"
        }
    },
    "common_kube-fzf": {
        "Category": "common",
        "Command": "kube-fzf",
        "P-Summary": "shell command command line fuzzi search kubernet pod\nsee also kubectl relat command",
        "P-Tasks": "describ pod exec pod contain get pod detail namespac get pod detail current namespac port-forward pod tail pod log",
        "Summary": "Shell commands for command line fuzzy searching of Kubernetes Pods.\nSee also `kubectl` for related commands.",
        "Task-Script": {
            "Describe a pod": "describepod",
            "Exec into a pod's container": "execpod {{shell_command}}",
            "Get pod details (from all namespaces)": "findpod -a",
            "Get pod details (from current namespace)": "findpod",
            "Port-forward a pod": "pfpod {{port_number}}",
            "Tail pod logs": "tailpod"
        }
    },
    "common_kubeadm": {
        "Category": "common",
        "Command": "kubeadm",
        "P-Summary": "command line interfac creat manag kubernet cluster",
        "P-Tasks": "bootstrap kubernet worker node join cluster check kubernet cluster upgrad version avail creat kubernet master node creat new bootstrap token ttl 12 hour revert chang made host kubeadm init kubeadm join upgrad kubernet cluster specifi version view kubeadm configmap contain cluster configur",
        "Summary": "Command line interface for creating and managing Kubernetes clusters.",
        "Task-Script": {
            "Bootstrap a Kubernetes worker node and join it to a cluster": "kubeadm join --token {{token}}",
            "Check if the Kubernetes cluster is upgradeable and which versions are available": "kubeadm upgrade plan",
            "Create a Kubernetes master node": "kubeadm init",
            "Create a new bootstrap token with a TTL of 12 hours": "kubeadm token create --ttl {{12h0m0s}}",
            "Revert changes made to the host by 'kubeadm init' or 'kubeadm join'": "kubeadm reset",
            "Upgrade Kubernetes cluster to a specified version": "kubeadm upgrade apply {{version}}",
            "View the kubeadm ConfigMap containing the cluster's configuration": "kubeadm config view"
        }
    },
    "common_kubectl": {
        "Category": "common",
        "Command": "kubectl",
        "P-Summary": "command line interfac run command kubernet cluster",
        "P-Tasks": "display explan specif field display resourc cpu memori storag usag node pod list inform resourc detail list resourc differ type print address master cluster servic print log contain pod specifi resourc run command exist pod updat specifi pod label unhealthi valu true",
        "Summary": "Command line interface for running commands against Kubernetes clusters.",
        "Task-Script": {
            "Display an explanation of a specific field": "kubectl explain {{pods.spec.containers}}",
            "Display resource (CPU/Memory/Storage) usage of nodes or pods": "kubectl top {{pod|node}}",
            "List all information about a resource with more details": "kubectl get {{pod|service|deployment|ingress|...}} -o wide",
            "List all resources with different types": "kubectl get all",
            "Print the address of the master and cluster services": "kubectl cluster-info",
            "Print the logs for a container in a pod or specified resource": "kubectl logs {{pod_name}}",
            "Run command in an existing pod": "kubectl exec {{pod_name}} -- {{ls /}}",
            "Update specified pod with the label 'unhealthy' and the value 'true'": "kubectl label pods {{name}} unhealthy=true"
        }
    },
    "common_kubectl describe": {
        "Category": "common",
        "Command": "kubectl describe",
        "P-Summary": "show detail kubernet object resourc",
        "P-Tasks": "show detail kubernet object defin yaml manifest show detail node namespac show detail pod namespac show detail specif node namespac show detail specif pod namespac",
        "Summary": "Show details of Kubernetes objects and resources.",
        "Task-Script": {
            "Show details of Kubernetes objects defined in a YAML manifest": "kubectl describe -f {{path/to/manifest}}.yaml",
            "Show details of nodes in a namespace": "kubectl describe nodes -n {{namespace}}",
            "Show details of pods in a namespace": "kubectl describe pods -n {{namespace}}",
            "Show the details of a specific node in a namespace": "kubectl describe nodes {{node_name}} -n {{namespace}}",
            "Show the details of a specific pod in a namespace": "kubectl describe pods {{pod_name}} -n {{namespace}}"
        }
    },
    "common_kubectl get": {
        "Category": "common",
        "Command": "kubectl get",
        "P-Summary": "get kubernet object resourc",
        "P-Tasks": "get kubernet object defin yaml manifest get namespac current cluster get deploy specifi namespac get node specifi namespac get pod specifi namespac get servic specifi namespac",
        "Summary": "Get Kubernetes objects and resources.",
        "Task-Script": {
            "Get Kubernetes objects defined in a YAML manifest": "kubectl get -f {{path/to/manifest}}.yaml",
            "Get all namespaces in the current cluster": "kubectl get namespaces",
            "Get deployments in a specified namespace": "kubectl get deployments -n {{namespace}}",
            "Get nodes in a specified namespace": "kubectl get nodes -n {{namespace}}",
            "Get pods in a specified namespace": "kubectl get pods -n {{namespace}}",
            "Get services in a specified namespace": "kubectl get services -n {{namespace}}"
        }
    },
    "common_kubectx": {
        "Category": "common",
        "Command": "kubectx",
        "P-Summary": "util manag switch kubectl context",
        "P-Tasks": "delet name context list context switch name context switch previou context",
        "Summary": "Utility to manage and switch between `kubectl` contexts.",
        "Task-Script": {
            "Delete a named context": "kubectx -d {{name}}",
            "List the contexts": "kubectx",
            "Switch to a named context": "kubectx {{name}}",
            "Switch to the previous context": "kubectx -"
        }
    },
    "common_kubens": {
        "Category": "common",
        "Command": "kubens",
        "P-Summary": "util switch kubernet namespac",
        "P-Tasks": "chang activ namespac list namespac switch previou namespac",
        "Summary": "Utility to switch between Kubernetes namespaces.",
        "Task-Script": {
            "Change the active namespace": "kubens {{name}}",
            "List the namespaces": "kubens",
            "Switch to the previous namespace": "kubens -"
        }
    },
    "common_kubetail": {
        "Category": "common",
        "Command": "kubetail",
        "P-Summary": "util tail multipl kubernet pod log time",
        "P-Tasks": "tail specif contain multipl pod tail log multipl pod whose name start my_app one go tail multipl applic time separ comma tail multipl contain multipl pod",
        "Summary": "Utility to tail multiple Kubernetes pod logs at the same time.",
        "Task-Script": {
            "Tail only a specific container from multiple pods": "kubetail {{my_app}} -c {{my_container}}",
            "Tail the logs of multiple pods (whose name starts with \"my_app\") in one go": "kubetail {{my_app}}",
            "To tail multiple applications at the same time separate them by comma": "kubetail {{my_app_1}},{{my_app_2}}",
            "To tail multiple containers from multiple pods": "kubetail {{my_app}} -c {{my_container_1}} -c {{my_container_2}}"
        }
    },
    "common_kustomize": {
        "Category": "common",
        "Command": "kustomize",
        "P-Summary": "kustom tool easili deploy resourc kubernet",
        "P-Tasks": "build kustom file deploy kubectl creat kustom file resourc namespac search kubernet resourc current directori ad kustom file set imag kustom file",
        "Summary": "Kustomize is a tool to easily deploy resources for Kubernetes.",
        "Task-Script": {
            "Build kustomization file and deploy it with `kubectl`": "kustomize build . | kubectl apply -f -",
            "Create kustomization file with resources and namespace": "kustomize create --resources {{deployment.yaml,service.yaml}} --namespace {{staging}}",
            "Search for kubernetes resources in the current directory to be added to the kustomization file": "kustomize create --autodetect",
            "Set an image in the kustomization file": "kustomize edit set image {{busybox=alpine:3.6}}"
        }
    },
    "common_laravel": {
        "Category": "common",
        "Command": "laravel",
        "P-Summary": "command line instal laravel framework",
        "P-Tasks": "creat new laravel applic instal laravel jetstream scaffold instal laravel jetstream scaffold specif stack instal laravel jetstream scaffold support team list avail instal command overwrit directori alreadi exist use latest develop releas",
        "Summary": "A command line installer for the Laravel framework.",
        "Task-Script": {
            "Create a new Laravel application": "laravel new {{name}}",
            "Install the Laravel Jetstream scaffolding": "laravel new {{name}} --jet",
            "Install the Laravel Jetstream scaffolding with a specific stack": "laravel new {{name}} --jet --stack {{livewire|inertia}}",
            "Install the Laravel Jetstream scaffolding with support for teams": "laravel new {{name}} --jet --teams",
            "List the available installer commands": "laravel list",
            "Overwrite if the directory already exists": "laravel new {{name}} --force",
            "Use the latest development release": "laravel new {{name}} --dev"
        }
    },
    "common_laravel-zero": {
        "Category": "common",
        "Command": "laravel-zero",
        "P-Summary": "command line instal laravel zero framework",
        "P-Tasks": "creat new laravel zero applic list avail instal command updat instal latest version",
        "Summary": "A command line installer for the Laravel Zero framework.",
        "Task-Script": {
            "Create a new Laravel Zero application": "laravel-zero new {{name}}",
            "List the available installer commands": "laravel-zero list",
            "Update the installer to the latest version": "laravel-zero self-update"
        }
    },
    "common_last": {
        "Category": "common",
        "Command": "last",
        "P-Summary": "view last log user",
        "P-Tasks": "print full date time entri display hostnam column last prevent truncat specifi mani last login show view login specif user show ip address instead hostnam view record reboot e last login pseudo user reboot view record shutdown e last login pseudo user shutdown view last login durat inform read var log wtmp",
        "Summary": "View the last logged in users.",
        "Task-Script": {
            "Print the full date and time for entries and then display the hostname column last to prevent truncation": "last -F -a",
            "Specify how many of the last logins to show": "last -n {{login_count}}",
            "View all logins by a specific user and show the ip address instead of the hostname": "last {{username}} -i",
            "View all recorded reboots (i.e., the last logins of the pseudo user \"reboot\")": "last reboot",
            "View all recorded shutdowns (i.e., the last logins of the pseudo user \"shutdown\")": "last shutdown",
            "View last logins, their duration and other information as read from /var/log/wtmp": "last"
        }
    },
    "common_latexmk": {
        "Category": "common",
        "Command": "latexmk",
        "P-Summary": "compil latex sourc file finish document\nautomat multipl run need",
        "P-Tasks": "clean temporari tex file current directori clean temporari tex file creat specif tex file compil dvi devic independ file document everi sourc compil dvi document specif sourc file compil pdf document forc gener document even error",
        "Summary": "Compile LaTeX source files into finished documents.\nAutomatically does multiple runs when needed.",
        "Task-Script": {
            "Clean up all temporary tex files in the current directory": "latexmk -c",
            "Clean up temporary tex files created for a specific tex file": "latexmk -c {{source.tex}}",
            "Compile a dvi (DeVice Independent file) document from every source": "latexmk",
            "Compile a dvi document from a specific source file": "latexmk {{source.tex}}",
            "Compile a pdf document": "latexmk -pdf {{source.tex}}",
            "Force the generation of a document even if there are errors": "latexmk -f {{source.tex}}"
        }
    },
    "common_ldapsearch": {
        "Category": "common",
        "Command": "ldapsearch",
        "P-Summary": "cli util queri ldap directori",
        "P-Tasks": "combin multipl boolean logic filter invert filter queri ldap server item member given group return object displaynam valu queri ldap server no-newlin password file item member given group return object displaynam valu return 5 item match given filter return item member least 1 specifi group return item part multipl group return display name item wait 7 second respons",
        "Summary": "CLI utility for querying an LDAP directory.",
        "Task-Script": {
            "Combine multiple boolean logic filters": "ldapsearch -D '{{admin_DN}}' -w '{{password}}' -h {{ldap_host}} '(&({{memberOf=group1}})({{memberOf=group2}})(!({{memberOf=group3}})))' displayName",
            "Invert the filter": "ldapsearch -D '{{admin_DN}}' -w '{{password}}' -h {{ldap_host}} -b {{base_ou}} '(!(memberOf={{group1}}))' displayName",
            "Query an LDAP server for all items that are a member of the given group and return the object's displayName value": "ldapsearch -D '{{admin_DN}}' -w '{{password}}' -h {{ldap_host}} -b {{base_ou}} '{{memberOf=group1}}' displayName",
            "Query an LDAP server with a no-newline password file for all items that are a member of the given group and return the object's displayName value": "ldapsearch -D '{{admin_DN}}' -y '{{password_file}}' -h {{ldap_host}} -b {{base_ou}} '{{memberOf=group1}}' displayName",
            "Return 5 items that match the given filter": "ldapsearch -D '{{admin_DN}}' -w '{{password}}' -h {{ldap_host}} -b {{base_ou}} '{{memberOf=group1}}' -z 5 displayName",
            "Return all items that are members of at least 1 of the specified groups": "ldapsearch -D '{{admin_DN}}' -w '{{password}}' -h {{ldap_host}} '(|({{memberOf=group1}})({{memberOf=group1}})({{memberOf=group3}}))' displayName",
            "Return all items that are part of multiple groups, returning the display name for each item": "ldapsearch -D '{{admin_DN}}' -w '{{password}}' -h {{ldap_host}} '(&({{memberOf=group1}})({{memberOf=group2}})({{memberOf=group3}}))' \"displayName\"",
            "Wait up to 7 seconds for a response": "ldapsearch -D '{{admin_DN}}' -w '{{password}}' -h {{ldap_host}} -b {{base_ou}} '{{memberOf=group1}}' -l 7 displayName"
        }
    },
    "common_leave": {
        "Category": "common",
        "Command": "leave",
        "P-Summary": "remind time leav\nremov remind use kill pidof leav",
        "P-Tasks": "remind leav noon remind leav 4 hour 4 minut set remind given time set remind specif amount time",
        "Summary": "Remind when it's time to leave.\nTo remove reminders use `kill $(pidof leave)`.",
        "Task-Script": {
            "Remind to leave at noon": "leave {{1200}}",
            "Remind to leave in 4 hours and 4 minutes": "leave +{{0404}}",
            "Set a reminder at a given time": "leave {{time_to_leave}}",
            "Set a reminder in a specific amount of time": "leave +{{amount_of_time}}"
        }
    },
    "common_lebab": {
        "Category": "common",
        "Command": "lebab",
        "P-Summary": "javascript modern transpil code es6 es7\ntransform must provid exampl",
        "P-Tasks": "display list avail transform replac js file in-plac specifi directori glob file transpil file stdout transpil file specifi output file transpil use one comma-separ transform",
        "Summary": "A JavaScript modernizer for transpiling code to ES6/ES7.\nTransformations must be provided for all examples.",
        "Task-Script": {
            "Display a list of the available transformations": "lebab --help",
            "Replace all `.js` files in-place in the specified directory, glob or file": "lebab --replace {{directory|glob|file}}",
            "Transpile a file to `stdout`": "lebab {{path/to/input_file}}",
            "Transpile a file to the specified output file": "lebab {{path/to/input_file}} --out-file {{path/to/output_file}}",
            "Transpile using one or more comma-separated transformations": "lebab --transform {{transformation}}"
        }
    },
    "common_lein": {
        "Category": "common",
        "Command": "lein",
        "P-Summary": "manag clojur project declar configur",
        "P-Tasks": "gener scaffold new project base templat packag project file depend jar file run project -main function option arg run project test start repl session either project standalon",
        "Summary": "Manage clojure projects with declarative configuration.",
        "Task-Script": {
            "Generate scaffolding for a new project based on a template": "lein new {{template_name}} {{project_name}}",
            "Package up the project files and all its dependencies into a jar file": "lein uberjar",
            "Run the project's \"-main\" function with optional args": "lein run {{args}}",
            "Run the project's tests": "lein test",
            "Start a REPL session either with the project or standalone": "lein repl"
        }
    },
    "common_less": {
        "Category": "common",
        "Command": "less",
        "P-Summary": "open file interact read allow scroll search",
        "P-Tasks": "backward search string press n n go next previou match exit follow output current open file forward search string press n n go next previou match go end start file open file open current file editor page",
        "Summary": "Open a file for interactive reading, allowing scrolling and search.",
        "Task-Script": {
            "Backward search for a string (press `n`/`N` to go to next/previous match)": "?{{something}}",
            "Exit": "q",
            "Follow the output of the currently opened file": "F",
            "Forward search for a string (press `n`/`N` to go to next/previous match)": "/{{something}}",
            "Go to end / start of file": "G (end), g (start)",
            "Open a file": "less {{source_file}}",
            "Open the current file in an editor": "v",
            "Page down / up": "<Space> (down), b (up)"
        }
    },
    "common_lex": {
        "Category": "common",
        "Command": "lex",
        "P-Summary": "lexic analys gener\ngiven specif lexic analys gener c code implement",
        "P-Tasks": "compil c file gener lex gener analys lex file specifi output file",
        "Summary": "Lexical analyser generator.\nGiven the specification for a lexical analyser, generates C code implementing it.",
        "Task-Script": {
            "Compile a C file generated by Lex": "cc {{path/to/lex.yy.c}} --output {{executable}}",
            "Generate an analyser from a Lex file": "lex {{analyser.l}}",
            "Specify the output file": "lex {{analyser.l}} --outfile {{analyser.c}}"
        }
    },
    "common_license": {
        "Category": "common",
        "Command": "license",
        "P-Summary": "creat licens file open-sourc project",
        "P-Tasks": "gener licens save file gener licens custom author name year list avail licens print licens stdout use default auto-detect author name current year",
        "Summary": "Create license files for open-source projects.",
        "Task-Script": {
            "Generate a license and save it to a file": "license -o {{filename}} {{license_name}}",
            "Generate a license with custom author name and year": "license --name {{author}} --year {{release_year}} {{license_name}}",
            "List all available licenses": "license ls",
            "Print a license to `stdout`, using the defaults (auto-detected author name, and current year)": "license {{license_name}}"
        }
    },
    "common_light-arionum-cli": {
        "Category": "common",
        "Command": "light-arionum-cli",
        "P-Summary": "php light wallet arionum cryptocurr",
        "P-Tasks": "display inform specif transact display inform current address transact display inform current block display balanc current address display balanc specifi address export current wallet inform gener new public privat key pair send transact option messag",
        "Summary": "The PHP light wallet for the Arionum cryptocurrency.",
        "Task-Script": {
            "Display information about a specific transaction": "light-arionum-cli transaction {{transaction_id}}",
            "Display information about the current address' transactions": "light-arionum-cli transactions",
            "Display information about the current block": "light-arionum-cli block",
            "Display the balance of the current address": "light-arionum-cli balance",
            "Display the balance of the specified address": "light-arionum-cli balance {{address}}",
            "Export the current wallet information": "light-arionum-cli export",
            "Generate a new public/private key pair": "light-arionum-cli",
            "Send a transaction with an optional message": "light-arionum-cli send {{address}} {{value}} {{optional_message}}"
        }
    },
    "common_lilypond": {
        "Category": "common",
        "Command": "lilypond",
        "P-Summary": "typeset music produc midi file",
        "P-Tasks": "compil lilypond file pdf compil specifi format compil specifi file also specifi output filenam compil specifi file suppress progress updat show current version lilypond",
        "Summary": "Typeset music and/or produce MIDI from file.",
        "Task-Script": {
            "Compile a lilypond file into a PDF": "lilypond {{path/to/file}}",
            "Compile into the specified format": "lilypond --formats={{format_dump}} {{path/to/file}}",
            "Compile the specified file, and also specify the output filename": "lilypond --output={{path/to/output_file}} {{path/to/input_file}}",
            "Compile the specified file, suppressing progress updates": "lilypond -s {{path/to/file}}",
            "Show the current version of lilypond": "lilypond --version"
        }
    },
    "common_link": {
        "Category": "common",
        "Command": "link",
        "P-Summary": "creat hard link exist file\noption see ln command",
        "P-Tasks": "creat hard link new file exist file",
        "Summary": "Create a hard link to an existing file.\nFor more options, see the `ln` command.",
        "Task-Script": {
            "Create a hard link from a new file to an existing file": "link {{path/to/existing_file}} {{path/to/new_file}}"
        }
    },
    "common_linkchecker": {
        "Category": "common",
        "Command": "linkchecker",
        "P-Summary": "command line client check html document websit broken link",
        "P-Tasks": "also check url point extern domain find broken link http : exampl com ignor url match specif regex output result csv file",
        "Summary": "Command line client to check HTML documents and websites for broken links.",
        "Task-Script": {
            "Also check URLs that point to external domains": "linkchecker --check-extern {{https://example.com/}}",
            "Find broken links on https://example.com/": "linkchecker {{https://example.com/}}",
            "Ignore URLs that match a specific regex": "linkchecker --ignore-url {{regex}} {{https://example.com/}}",
            "Output results to a CSV file": "linkchecker --file-output {{csv}}/{{path/to/file}} {{https://example.com/}}"
        }
    },
    "common_live-server": {
        "Category": "common",
        "Command": "live-server",
        "P-Summary": "simpl develop http server live reload capabl",
        "P-Tasks": "proxi request rout url serv index html file reload chang specifi given file serv specifi port default 8080 serv file",
        "Summary": "A simple development http server with live reload capability.",
        "Task-Script": {
            "Proxy all requests for ROUTE to URL": "live-server --proxy={{/}}:{{http:localhost:3000}}",
            "Serve an index.html file and reload on changes": "live-server",
            "Specify a given file to serve": "live-server --open={{about.html}}",
            "Specify a port (default is 8080) from which to serve a file": "live-server --port={{8081}}"
        }
    },
    "common_ln": {
        "Category": "common",
        "Command": "ln",
        "P-Summary": "creat link file directori",
        "P-Tasks": "creat hard link file creat symbol link file directori overwrit exist symbol point differ file",
        "Summary": "Creates links to files and directories.",
        "Task-Script": {
            "Create a hard link to a file": "ln {{path/to/file}} {{path/to/hardlink}}",
            "Create a symbolic link to a file or directory": "ln -s {{path/to/file_or_directory}} {{path/to/symlink}}",
            "Overwrite an existing symbolic to point to a different file": "ln -sf {{path/to/new_file}} {{path/to/symlink}}"
        }
    },
    "common_loc": {
        "Category": "common",
        "Command": "loc",
        "P-Summary": "tool written rust count line code",
        "P-Tasks": "print line code current directori print line code target directori print line code stat individu file print line code without gitignor etc\nfile e g\ntwo -u flag addit count hidden file dir",
        "Summary": "Tool written in Rust that counts lines of code.",
        "Task-Script": {
            "Print lines of code in the current directory": "loc",
            "Print lines of code in the target directory": "loc {{path/to/directory}}",
            "Print lines of code with stats for individual files": "loc --files",
            "Print lines of code without .gitignore (etc.) files (e.g. two -u flags will additionally count hidden files and dirs)": "loc -u"
        }
    },
    "common_locust": {
        "Category": "common",
        "Command": "locust",
        "P-Summary": "load-test tool determin number concurr user system handl",
        "P-Tasks": "connect locust slave master connect locust slave master differ machin load-test exampl com web interfac use locustfil py run test without web interfac spawn 1 user second 100 user start locust master mode use differ test file",
        "Summary": "Load-testing tool to determine number of concurrent users a system can handle.",
        "Task-Script": {
            "Connect locust slave to master": "locust --slave --host={{http://example.com}}",
            "Connect locust slave to master on a different machine": "locust --slave --master-host={{master_hostname}} --host={{http://example.com}}",
            "Load-test \"example.com\" with web interface using locustfile.py": "locust --host={{http://example.com}}",
            "Run test without web interface, spawning 1 user a second until there are 100 users": "locust --no-web --clients={{100}} --hatch-rate={{1}} --host={{http://example.com}}",
            "Start locust in master mode": "locust --master --host={{http://example.com}}",
            "Use a different test file": "locust --locustfile={{test_file.py}} --host={{http://example.com}}"
        }
    },
    "common_logname": {
        "Category": "common",
        "Command": "logname",
        "P-Summary": "show user login name",
        "P-Tasks": "display current log user name",
        "Summary": "Shows the user's login name.",
        "Task-Script": {
            "Display the currently logged in user's name": "logname"
        }
    },
    "common_logstash": {
        "Category": "common",
        "Command": "logstash",
        "P-Summary": "etl extract transform load tool\ncommonli use load data variou sourc like databas log file elasticsearch",
        "P-Tasks": "check valid logstash configur run logstash use configur run logstash basic inlin configur string",
        "Summary": "An ETL (extract, transform and load) tool.\nCommonly used to load data from various sources, like databases and log files, into elasticsearch.",
        "Task-Script": {
            "Check validity of a logstash configuration": "logstash --configtest --config {{logstash_config.conf}}",
            "Run logstash using configuration": "sudo logstash --config {{logstash_config.conf}}",
            "Run logstash with the most basic inline configuration string": "sudo logstash -e 'input {} filter {} output {}'"
        }
    },
    "common_lolcat": {
        "Category": "common",
        "Command": "lolcat",
        "P-Summary": "put rainbow everyth cat consol",
        "P-Tasks": "print file consol rainbow color print file consol 24-bit truecolor rainbow color print file consol anim rainbow color print result text-produc command rainbow color",
        "Summary": "Put a rainbow in everything you `cat` to the console.",
        "Task-Script": {
            "Print a file to the console in rainbow colors": "lolcat {{path/to/file}}",
            "Print a file to the console with 24-bit (truecolor) rainbow colors": "lolcat -t {{path/to/file}}",
            "Print a file to the console with animated rainbow colors": "lolcat -a {{path/to/file}}",
            "Print the result of a text-producing command in rainbow colors": "{{fortune}} | lolcat"
        }
    },
    "common_lorem": {
        "Category": "common",
        "Command": "lorem",
        "P-Summary": "creat less random lorem ipsum text",
        "P-Tasks": "print 10 line goeth faust print 40 random charact boccacio decameron print 5 sentenc poe raven print specifi number word",
        "Summary": "Create more or less random lorem ipsum text.",
        "Task-Script": {
            "Print 10 lines of Goethe's Faust": "lorem -l {{10}} --faust",
            "Print 40 random characters from Boccacio's Decameron": "lorem --randomize -c {{40}} --decamerone",
            "Print 5 sentences of Poe's Raven": "lorem -s {{5}} --raven",
            "Print the specified number of words": "lorem -n {{20}}"
        }
    },
    "common_lp": {
        "Category": "common",
        "Command": "lp",
        "P-Summary": "print file",
        "P-Tasks": "print n copi file default printer replac n desir number copi print file name printer see lpstat command print file default printer print certain page default printer print page 1 3-5 16 print output command default printer see lpstat command resum print job",
        "Summary": "Print files.",
        "Task-Script": {
            "Print N copies of file to default printer (replace N with desired number of copies)": "lp -n {{N}} {{path/to/filename}}",
            "Print a file to a named printer (see `lpstat` command)": "lp -d {{printer_name}} {{path/to/filename}}",
            "Print a file to the default printer": "lp {{path/to/filename}}",
            "Print only certain pages to the default printer (print pages 1, 3-5, and 16)": "lp -P 1,3-5,16 {{path/to/filename}}",
            "Print the output of a command to the default printer (see `lpstat` command)": "echo \"test\" | lp",
            "Resume printing a job": "lp -i {{job_id}} -H resume"
        }
    },
    "common_lpass": {
        "Category": "common",
        "Command": "lpass",
        "P-Summary": "command line interfac lastpass password manag",
        "P-Tasks": "gener new password gmail com identifi myinbox add lastpass list site group categori login lastpass account enter master password prompt show login statu show password specifi entri",
        "Summary": "Command line interface for the LastPass password manager.",
        "Task-Script": {
            "Generate a new password for \"gmail.com\" with identifier \"myinbox\" and add to LastPass": "lpass generate --username {{username}} --url {{gmail.com}} {{myinbox}} {{password_length}}",
            "List all sites grouped by category": "lpass ls",
            "Login to your LastPass account, by entering your master password when prompted": "lpass login {{username}}",
            "Show login status": "lpass status",
            "Show password for a specified entry": "lpass show {{myinbox}} --password"
        }
    },
    "common_lpr": {
        "Category": "common",
        "Command": "lpr",
        "P-Summary": "cup tool print file\nsee also lpstat lpadmin list configur printer",
        "P-Tasks": "print 2 copi print file default printer print doubl side landscap print doubl side portrait print multipl page per sheet print name printer set page size option may avail depend setup",
        "Summary": "CUPS tool for printing files.\nSee also `lpstat` and `lpadmin` for listing and configuring printers.",
        "Task-Script": {
            "Print 2 copies": "lpr -# {{2}} {{path/to/file}}",
            "Print a file to the default printer": "lpr {{path/to/file}}",
            "Print double sided in landscape": "lpr -o sides={{two-sided-short-edge}} {{path/to/file}}",
            "Print double sided in portrait": "lpr -o sides={{two-sided-long-edge}} {{path/to/file}}",
            "Print multiple pages per sheet": "lpr -o number-up={{2|4|6|9|16}} {{path/to/file}}",
            "Print to a named printer": "lpr -P {{printer}} {{path/to/file}}",
            "Set page size (more options may be available depending on setup)": "lpr -o media={{a4|letter|legal}} {{path/to/file}}"
        }
    },
    "common_lpstat": {
        "Category": "common",
        "Command": "lpstat",
        "P-Summary": "show statu inform printer",
        "P-Tasks": "display avail statu inform list printer present machin whether enabl print show list print job queu specifi user show default printer",
        "Summary": "Show status information about printers.",
        "Task-Script": {
            "Display all available status information": "lpstat -t",
            "List printers present on the machine and whether they are enabled for printing": "lpstat -p",
            "Show a list of print jobs queued by the specified user": "lpstat -u {{user}}",
            "Show the default printer": "lpstat -d"
        }
    },
    "common_ls": {
        "Category": "common",
        "Command": "ls",
        "P-Summary": "list directori content",
        "P-Tasks": "list file includ hidden file list file trail ad directori name list file one per line long format list permiss ownership size modif date file long format list file sort modif date oldest first long format list sort size descend long format list size display use human readabl unit kb mb gb",
        "Summary": "List directory contents.",
        "Task-Script": {
            "List all files, including hidden files": "ls -a",
            "List all files, with trailing `/` added to directory names": "ls -F",
            "List files one per line": "ls -1",
            "Long format list (permissions, ownership, size and modification date) of all files": "ls -la",
            "Long format list of all files, sorted by modification date (oldest first)": "ls -ltr",
            "Long format list sorted by size (descending)": "ls -lS",
            "Long format list with size displayed using human readable units (KB, MB, GB)": "ls -lh"
        }
    },
    "common_lsof": {
        "Category": "common",
        "Command": "lsof",
        "P-Summary": "list open file correspond process\nnote : root privileg sudo requir list file open other",
        "P-Tasks": "find process listen local tcp port find process open local internet port find process given file open list file open specif process given pid list file open given command process list file open given user list open file directori output process id pid",
        "Summary": "Lists open files and the corresponding processes.\nNote: Root privileges (or sudo) is required to list files opened by others.",
        "Task-Script": {
            "Find the process that is listening on a local TCP port": "lsof -iTCP:{{port}} -sTCP:LISTEN",
            "Find the process that opened a local internet port": "lsof -i :{{port}}",
            "Find the processes that have a given file open": "lsof {{path/to/file}}",
            "List files opened by a specific process, given its PID": "lsof -p {{PID}}",
            "List files opened by the given command or process": "lsof -c {{process_or_command_name}}",
            "List files opened by the given user": "lsof -u {{username}}",
            "List open files in a directory": "lsof +D {{path/to/directory}}",
            "Only output the process ID (PID)": "lsof -t {{path/to/file}}"
        }
    },
    "common_lt": {
        "Category": "common",
        "Command": "lt",
        "P-Summary": "localtunnel expos localhost world easi test share",
        "P-Tasks": "open tunnel url default web browser print basic request info request specif subdomain specifi upstream server forward start tunnel specif port",
        "Summary": "Localtunnel exposes your localhost to the world for easy testing and sharing.",
        "Task-Script": {
            "Open the tunnel URL in the default web browser": "lt --port {{8000}} --open",
            "Print basic request info": "lt --port {{8000}} --print-requests",
            "Request a specific subdomain": "lt --port {{8000}} --subdomain {{subdomain}}",
            "Specify the upstream server doing the forwarding": "lt --port {{8000}} --host {{host}}",
            "Start tunnel from a specific port": "lt --port {{8000}}"
        }
    },
    "common_lua": {
        "Category": "common",
        "Command": "lua",
        "P-Summary": "power light-weight embedd program languag",
        "P-Tasks": "execut lua express execut lua script start interact lua shell",
        "Summary": "A powerful, light-weight embeddable programming language.",
        "Task-Script": {
            "Execute a Lua expression": "lua -e '{{print( \"Hello World\" )}}",
            "Execute a Lua script": "lua {{script_name.lua}} {{--optional-argument}}",
            "Start an interactive Lua shell": "lua"
        }
    },
    "common_luac": {
        "Category": "common",
        "Command": "luac",
        "P-Summary": "lua bytecod compil",
        "P-Tasks": "compil lua sourc file lua bytecod includ debug symbol output",
        "Summary": "Lua bytecode compiler.",
        "Task-Script": {
            "Compile a Lua source file to Lua bytecode": "luac -o {{byte_code.luac}} {{source.lua}}",
            "Do not include debug symbols in the output": "luac -s -o {{byte_code.luac}} {{source.lua}}"
        }
    },
    "common_lumen": {
        "Category": "common",
        "Command": "lumen",
        "P-Summary": "command line instal lumen micro-framework",
        "P-Tasks": "creat new lumen applic list avail instal command",
        "Summary": "A command line installer for the Lumen micro-framework.",
        "Task-Script": {
            "Create a new Lumen application": "lumen new {{application_name}}",
            "List the available installer commands": "lumen list"
        }
    },
    "common_lwp-request": {
        "Category": "common",
        "Command": "lwp-request",
        "P-Summary": "simpl command-lin http client\nbuilt libwww-perl",
        "P-Tasks": "make request print request header make request print respons header statu chain make request http authent make request custom user agent make simpl get request upload file post request",
        "Summary": "Simple command-line HTTP client.\nBuilt with libwww-perl.",
        "Task-Script": {
            "Make a request and print request headers": "lwp-request -U -m {{METHOD}} {{http://example.com/some/path}}",
            "Make a request and print response headers and status chain": "lwp-request -E -m {{METHOD}} {{http://example.com/some/path}}",
            "Make a request with HTTP authentication": "lwp-request -C {{username}}:{{password}} -m {{METHOD}} {{http://example.com/some/path}}",
            "Make a request with a custom user agent": "lwp-request -H 'User-Agent: {{user_agent}} -m {{METHOD}} {{http://example.com/some/path}}",
            "Make a simple GET request": "lwp-request -m GET {{http://example.com/some/path}}",
            "Upload a file with a POST request": "cat {{/path/to/file}} | lwp-request -m POST {{http://example.com/some/path}}"
        }
    },
    "common_lz4": {
        "Category": "common",
        "Command": "lz4",
        "P-Summary": "compress decompress lz4 file",
        "P-Tasks": "compress file compress file use best compress decompress file decompress file write stdout decompress unpack directori content packag compress directori content",
        "Summary": "Compress or decompress .lz4 files.",
        "Task-Script": {
            "Compress a file": "lz4 {{file}}",
            "Compress a file using the best compression": "lz4 -9 {{file}}",
            "Decompress a file": "lz4 -d {{file.lz4}}",
            "Decompress a file and write to `stdout`": "lz4 -dc {{file.lz4}}",
            "Decompress and unpack a directory and its contents": "lz4 -d {{dir.tar.lz4}} | tar -xv",
            "Package and compress a directory and its contents": "tar cvf - {{path/to/dir}} | lz4 - {{dir.tar.lz4}}"
        }
    },
    "common_lzop": {
        "Category": "common",
        "Command": "lzop",
        "P-Summary": "compress decompress file lzo compress",
        "P-Tasks": "compress file new file lzo suffix compress file specif compress level\n0 worst 9 best default level 3 decompress file",
        "Summary": "Compress or decompress files with LZO compression.",
        "Task-Script": {
            "Compress a file into a new file with the .lzo suffix": "lzop {{file}}",
            "Compress a file, while specifing the compression level. 0 = Worst, 9 = Best (Default level is 3)": "lzop -{{level}} {{file}}",
            "Decompress a file": "lzop -d {{file}}.lzo"
        }
    },
    "common_m4": {
        "Category": "common",
        "Command": "m4",
        "P-Summary": "macro processor",
        "P-Tasks": "defin macro process file process macro file",
        "Summary": "Macro processor.",
        "Task-Script": {
            "Define a macro before processing files": "m4 -D{{macro_name}}={{macro_value}} {{path/to/file}}",
            "Process macros in a file": "m4 {{path/to/file}}"
        }
    },
    "common_magento": {
        "Category": "common",
        "Command": "magento",
        "P-Summary": "cli manag magento php framework",
        "P-Tasks": "deploy static asset disabl mainten mode disabl one space-separ modul enabl mainten mode enabl one space-separ modul list avail command updat code depend inject configur updat databas enabl modul",
        "Summary": "A CLI for managing the Magento PHP framework.",
        "Task-Script": {
            "Deploy static assets": "magento setup:static-content:deploy",
            "Disable maintenance mode": "magento maintenance:disable",
            "Disable one or more space-separated modules": "magento module:disable {{module(s)}}",
            "Enable maintenance mode": "magento maintenance:enable",
            "Enable one or more space-separated modules": "magento module:enable {{module(s)}}",
            "List all available commands": "magento list",
            "Update code and dependency injection configuration": "magento setup:di:compile",
            "Update the database after enabling modules": "magento setup:upgrade"
        }
    },
    "common_magick": {
        "Category": "common",
        "Command": "magick",
        "P-Summary": "creat edit compos convert bitmap imag\nimagemagick version 7+\nsee convert version 6",
        "P-Tasks": "convert file type convert imag individu pdf page creat gif use imag creat checkerboard pattern resiz imag make new copi",
        "Summary": "Create, edit, compose, or convert bitmap images.\nImageMagick version 7+. See `convert` for versions 6 and below.",
        "Task-Script": {
            "Convert file type": "magick {{image.png}} {{image.jpg}}",
            "Convert images to individual PDF pages": "magick {{*.jpg}} +adjoin {{page-%d.pdf}}",
            "Create a GIF using images": "magick {{*.jpg}} {{images.gif}}",
            "Create checkerboard pattern": "magick -size {{640x480}} pattern:checkerboard {{checkerboard.png}}",
            "Resize an image, making a new copy": "magick convert -resize {{100x100}} {{image.jpg}} {{image.jpg}}"
        }
    },
    "common_mail": {
        "Category": "common",
        "Command": "mail",
        "P-Summary": "command oper user mailbox argument given\nsend email messag bodi built standard input",
        "P-Tasks": "send tar gz file attach send type email messag\ncommandlin continu press enter key\ninput cc email-id option press enter key\ninput messag text multi-lin\npress ctrl-d key complet messag text send email contain file content",
        "Summary": "The command operates on the user's mailbox if no argument is given.\nTo send an email the message body is built from standard input.",
        "Task-Script": {
            "Send a tar.gz file as an attachment": "tar cvzf - {{path/to/directory1 path/to/directory2}} | uuencode {{data.tar.gz}} | mail --subject=\"{{subject line}}\" {{to_user@example.com}}",
            "Send a typed email message. The commandline below continues after pressing Enter key. Input CC email-id (optional) press Enter key. Input message text (can be multi-line). Press \"Ctrl-D\" key to complete the message text": "mail --subject=\"{{subject line}}\" {{to_user@example.com}}",
            "Send an email that contains file content": "mail --subject=\"{{$HOSTNAME filename.txt}}\" {{to_user@example.com}} < {{path/to/filename.txt}}"
        }
    },
    "common_mailx": {
        "Category": "common",
        "Command": "mailx",
        "P-Summary": "send receiv mail",
        "P-Tasks": "send mail content type command end ctrl+d send mail specifi sender address send mail recipi cc anoth address send mail attach send mail content pass anoth command send mail content read file",
        "Summary": "Send and receive mail.",
        "Task-Script": {
            "Send mail (the content should be typed after the command, and ended with `Ctrl+D`)": "mailx -s \"{{subject}}\" {{to_addr}}",
            "Send mail specifying the sender address": "mailx -s \"{{subject}}\" -r {{from_addr}} {{to_addr}}",
            "Send mail to a recipient and CC to another address": "mailx -s \"{{subject}}\" -c {{cc_addr}} {{to_addr}}",
            "Send mail with an attachment": "mailx -a {{file}} -s \"{{subject}}\" {{to_addr}}",
            "Send mail with content passed from another command": "echo \"{{content}}\" | mailx -s \"{{subject}}\" {{to_addr}}",
            "Send mail with content read from a file": "mailx -s \"{{subject}}\" {{to_addr}} < {{content.txt}}"
        }
    },
    "common_make": {
        "Category": "common",
        "Command": "make",
        "P-Summary": "task runner target describ makefil\nmostli use control compil execut sourc code",
        "P-Tasks": "call specif target call specif target execut 4 job time parallel call first target specifi makefil usual name execut make anoth directori forc make target even sourc file unchang use specif makefil",
        "Summary": "Task runner for targets described in Makefile.\nMostly used to control the compilation of an executable from source code.",
        "Task-Script": {
            "Call a specific target": "make {{target}}",
            "Call a specific target, executing 4 jobs at a time in parallel": "make -j{{4}} {{target}}",
            "Call the first target specified in the Makefile (usually named \"all\")": "make",
            "Execute make from another directory": "make --directory {{directory}}",
            "Force making of a target, even if source files are unchanged": "make --always-make {{target}}",
            "Use a specific Makefile": "make --file {{file}}"
        }
    },
    "common_makebuildserver": {
        "Category": "common",
        "Command": "makebuildserver",
        "P-Summary": "creat f-droid build server virtual machin",
        "P-Tasks": "creat new virtual machin updat exist one avail forc creat fresh virtual machin",
        "Summary": "Create an F-Droid build server virtual machine.",
        "Task-Script": {
            "Create a new virtual machine or update an existing one (if available)": "makebuildserver",
            "Force creating a fresh virtual machine": "makebuildserver --clean"
        }
    },
    "common_makensis": {
        "Category": "common",
        "Command": "makensis",
        "P-Summary": "cross-platform compil nsi instal\ncompil nsi script window instal execut",
        "P-Tasks": "compil nsi script compil nsi script strict mode treat warn error print help specif command",
        "Summary": "Cross-platform compiler for NSIS installers.\nIt compiles a NSIS script into a Windows installer executable.",
        "Task-Script": {
            "Compile a NSIS script": "makensis {{path/to/file.nsi}}",
            "Compile a NSIS script in strict mode (treat warnings as errors)": "makensis -WX {{path/to/file.nsi}}",
            "Print help for a specific command": "makensis -CMDHELP {{command}}"
        }
    },
    "common_makepasswd": {
        "Category": "common",
        "Command": "makepasswd",
        "P-Summary": "gener encrypt password",
        "P-Tasks": "gener 10 charact long password gener 5 10 charact long password gener password contain charact b r gener random password 8 10 charact long contain letter number",
        "Summary": "Generate and encrypt passwords.",
        "Task-Script": {
            "Generate a 10 characters long password": "makepasswd --chars {{10}}",
            "Generate a 5 to 10 characters long password": "makepasswd --minchars {{5}} --maxchars {{10}}",
            "Generate a password containing only the characters \"b\", \"a\" or \"r\"": "makepasswd --string {{bar}}",
            "Generate a random password (8 to 10 characters long, containing letters and numbers)": "makepasswd"
        }
    },
    "common_man": {
        "Category": "common",
        "Command": "man",
        "P-Summary": "format display manual page",
        "P-Tasks": "display locat manpag rather manpag display man page command display man page command section 7 display path search manpag search manpag contain search string",
        "Summary": "Format and display manual pages.",
        "Task-Script": {
            "Display the location of a manpage rather than the manpage itself": "man -w {{command}}",
            "Display the man page for a command": "man {{command}}",
            "Display the man page for a command from section 7": "man {{command}}.{{7}}",
            "Display the path searched for manpages": "man --path",
            "Search for manpages containing a search string": "man -k \"{{search string}}\""
        }
    },
    "common_mat2": {
        "Category": "common",
        "Command": "mat2",
        "P-Summary": "anonymis variou file format remov metadata",
        "P-Tasks": "list support file format partial remov metadata file remov metadata file remov metadata file print detail output consol show metadata file without remov",
        "Summary": "Anonymise various file formats by removing metadata.",
        "Task-Script": {
            "List supported file formats": "mat2 --list",
            "Partially remove metadata from a file": "mat2 --lightweight {{path/to/file}}",
            "Remove metadata from a file": "mat2 {{path/to/file}}",
            "Remove metadata from a file and print detailed output to the console": "mat2 --verbose {{path/to/file}}",
            "Show metadata in a file without removing it": "mat2 --show {{path/to/file}}"
        }
    },
    "common_matlab": {
        "Category": "common",
        "Command": "matlab",
        "P-Summary": "numer comput environ mathwork",
        "P-Tasks": "execut matlab statement run matlab script run without splash screen startup",
        "Summary": "Numerical computation environment by MathWorks.",
        "Task-Script": {
            "Execute a MATLAB statement": "matlab -r \"{{matlab_statement}}\"",
            "Run a MATLAB script": "matlab -r \"run({{path/to/script.m}})\"",
            "Run without splash screen during startup": "matlab -nosplash"
        }
    },
    "common_mc": {
        "Category": "common",
        "Command": "mc",
        "P-Summary": "midnight command termin base file manag\nnavig directori structur use arrow key mous type command termin",
        "P-Tasks": "start black white start mc",
        "Summary": "Midnight Commander, a terminal based file manager.\nNavigate the directory structure using the arrow keys, the mouse or by typing the commands into the terminal.",
        "Task-Script": {
            "Start in black and white": "mc -b",
            "Start mc": "mc"
        }
    },
    "common_md5sum": {
        "Category": "common",
        "Command": "md5sum",
        "P-Summary": "calcul md5 cryptograph checksum",
        "P-Tasks": "calcul md5 checksum multipl file calcul md5 checksum file read file md5sum verifi file match checksum",
        "Summary": "Calculate MD5 cryptographic checksums.",
        "Task-Script": {
            "Calculate MD5 checksums for multiple files": "md5sum {{filename1}} {{filename2}}",
            "Calculate the MD5 checksum for a file": "md5sum {{filename1}}",
            "Read a file of MD5SUMs and verify all files have matching checksums": "md5sum -c {{filename.md5}}"
        }
    },
    "common_mdp": {
        "Category": "common",
        "Command": "mdp",
        "P-Summary": "command-lin base tool make present markdown file",
        "P-Tasks": "disabl fade transit disabl transpar transpar termin invert font color use termin light background launch present termin markdown file",
        "Summary": "A command-line based tool to make presentations from markdown files.",
        "Task-Script": {
            "Disable fading transitions": "mdp --nofade {{presentation.md}}",
            "Disable transparency in transparent terminals": "mdp --notrans {{presentation.md}}",
            "Invert font colors to use in terminals with light background": "mdp --invert {{presentation.md}}",
            "Launch a presentation in the terminal from a markdown file": "mdp {{presentation.md}}"
        }
    },
    "common_mediainfo": {
        "Category": "common",
        "Command": "mediainfo",
        "P-Summary": "display metadata video audio file",
        "P-Tasks": "display metadata given file consol display list metadata attribut extract store output given file along display consol",
        "Summary": "Display metadata from video and audio files.",
        "Task-Script": {
            "Display metadata for a given file in the console": "mediainfo {{file}}",
            "Display the list of metadata attributes that can be extracted": "mediainfo --Info-Parameters",
            "Store the output to a given file along with displaying in the console": "mediainfo --Logfile={{out.txt}} {{file}}"
        }
    },
    "common_meld": {
        "Category": "common",
        "Command": "meld",
        "P-Summary": "graphic dif merg tool",
        "P-Tasks": "compar 2 directori compar 2 file compar 3 file compar multipl set file open comparison new tab pre-exist meld instanc start meld",
        "Summary": "Graphical diffing and merging tool.",
        "Task-Script": {
            "Compare 2 directories": "meld {{path/to/directory_1}} {{path/to/directory_2}}",
            "Compare 2 files": "meld {{path/to/file_1}} {{path/to/file_2}}",
            "Compare 3 files": "meld {{path/to/file_1}} {{path/to/file_2}} {{path/to/file_3}}",
            "Compare multiple sets of files": "meld --diff {{path/to/file_1}} {{path/to/file_2}} --diff {{path/to/file_3}} {{path/to/file_4}}",
            "Open a comparison as a new tab in a pre-existing meld instance": "meld --newtab {{path/to/file_1}} {{path/to/file_2}}",
            "Start meld": "meld"
        }
    },
    "common_mesg": {
        "Category": "common",
        "Command": "mesg",
        "P-Summary": "check set termin abil receiv messag user usual write command\nsee also write",
        "P-Tasks": "check termin open write messag disabl receiv messag write command enabl receiv messag write command",
        "Summary": "Check or set a terminal's ability to receive messages from other users, usually from the write command.\nSee also `write`.",
        "Task-Script": {
            "Check terminal's openness to write messages": "mesg",
            "Disable receiving messages from the write command": "mesg n",
            "Enable receiving messages from the write command": "mesg y"
        }
    },
    "common_meshlabserver": {
        "Category": "common",
        "Command": "meshlabserver",
        "P-Summary": "command line interfac meshlab 3d mesh process softwar",
        "P-Tasks": "convert wrl file file includ vertex face normal output mesh convert stl file obj file dump list avail process filter file process 3d file use filter script creat meshlab gui filter show current filter script save script process 3d file use filter script write output filter log file",
        "Summary": "Command line interface for the MeshLab 3D mesh processing software.",
        "Task-Script": {
            "Convert a WRL file to a OFF file, including the vertex and face normals in the output mesh": "meshlabserver -i {{input.wrl}} -o {{output.off}} -om vn fn",
            "Convert an STL file to an OBJ file": "meshlabserver -i {{input.stl}} -o {{output.obj}}",
            "Dump a list of all the available processing filters into a file": "meshlabserver -d {{filename}}",
            "Process a 3D file using a filter script created in the MeshLab GUI (Filters > Show current filter script > Save Script)": "meshlabserver -i {{input.ply}} -o {{output.ply}} -s {{filter_script.mlx}}",
            "Process a 3D file using a filter script, writing the output of the filters into a log file": "meshlabserver -i {{input.x3d}} -o {{output.x3d}} -s {{filter_script.mlx}} -l {{logfile}}"
        }
    },
    "common_meson": {
        "Category": "common",
        "Command": "meson",
        "P-Summary": "scons-lik build system use python front-end languag ninja build backend",
        "P-Tasks": "build project configur builddir default valu gener c project given name version show help show version info",
        "Summary": "SCons-like build system that uses python as a front-end language and Ninja as a building backend.",
        "Task-Script": {
            "Build the project": "meson compile -C {{path/to/build_dir}}",
            "Configure builddir with default values": "meson setup {{build_dir}}",
            "Generate a c project with a given name and version": "meson init --language={{c}} --name={{myproject}} --version={{0.1}}",
            "Show the help": "meson --help",
            "Show version info": "meson --version"
        }
    },
    "common_meteor": {
        "Category": "common",
        "Command": "meteor",
        "P-Summary": "full-stack javascript platform build web applic",
        "P-Tasks": "add packag project creat product build project tarbal given directori creat project given directori display list packag project current use remov packag project run meteor project root directori develop mode",
        "Summary": "Full-stack javascript platform for building web applications.",
        "Task-Script": {
            "Add a package to the project": "meteor add {{package_name}}",
            "Create a production build of the project as a tarball under the given directory": "meteor build {{path/to/directory}}",
            "Create a project under the given directory": "meteor create {{path/to/directory}}",
            "Display the list of packages the project is currently using": "meteor list",
            "Remove a package from the project": "meteor remove {{package_name}}",
            "Run a meteor project from its root directory in development mode": "meteor"
        }
    },
    "common_micro": {
        "Category": "common",
        "Command": "micro",
        "P-Summary": "micro modern intuit terminal-bas text editor\nuse keyboard also mous navig select text",
        "P-Tasks": "cut entir line execut command open file perform substitut whole file quit search pattern file press ctrl + n ctrl + p go next previou match",
        "Summary": "Micro is a modern and intuitive terminal-based text editor.\nYou can use your keyboard, but also your mouse to navigate and/or select text.",
        "Task-Script": {
            "Cut the entire line": "Ctrl + K",
            "Execute a command": "Ctrl + E {{command}} <Enter>",
            "Open a file": "micro {{file}}",
            "Perform a substitution in the whole file": "Ctrl + E replaceall \"{{pattern}}\" \"{{replacement}}\" <Enter>",
            "Quit": "Ctrl + Q",
            "Search for a pattern in the file (press `Ctrl + N`/`Ctrl + P` to go to next/previous match)": "Ctrl + F \"{{pattern}}\" <Enter>"
        }
    },
    "common_middleman": {
        "Category": "common",
        "Command": "middleman",
        "P-Summary": "static site gener written rubi",
        "P-Tasks": "build project current directori prepar deploy creat new middleman project deploy middleman project current directori start local server current project specifi port start local server current project port 4567",
        "Summary": "Static site generator written in Ruby.",
        "Task-Script": {
            "Build the project in the current directory to prepare for deployment": "bundle exec middleman build",
            "Create a new Middleman project": "middleman init \"{{project_name}}\"",
            "Deploy the Middleman project in the current directory": "middleman deploy",
            "Start local server for current project on a specified port": "middleman server -p \"{{port}}\"",
            "Start local server for current project on port 4567": "middleman server"
        }
    },
    "common_minetest": {
        "Category": "common",
        "Command": "minetest",
        "P-Summary": "multiplay infinite-world block sandbox\nsee also minetestserv server-onli binari",
        "P-Tasks": "write error consol start minetest client mode start minetest server mode write log specif file",
        "Summary": "Multiplayer infinite-world block sandbox.\nSee also `minetestserver`, the server-only binary.",
        "Task-Script": {
            "Only write errors to the console": "minetest --quiet",
            "Start minetest in client mode": "minetest",
            "Start minetest in server mode": "minetest --server",
            "Write logs to a specific file": "minetest --logfile {{path/to/file}}"
        }
    },
    "common_minetestserver": {
        "Category": "common",
        "Command": "minetestserver",
        "P-Summary": "multiplay infinite-world block sandbox server\nsee also minetest graphic client",
        "P-Tasks": "list avail world list avail game id listen specif port migrat differ data backend specifi game use specifi world name load start interact termin start server start server",
        "Summary": "Multiplayer infinite-world block sandbox server.\nSee also `minetest`, the graphical client.",
        "Task-Script": {
            "List available worlds": "minetestserver --world list",
            "List the available game IDs": "minetestserver --gameid list",
            "Listen on a specific port": "minetestserver --port {{34567}}",
            "Migrate to a different data backend": "minetestserver --migrate {{sqlite3|leveldb|redis}}",
            "Specify a game to use": "minetestserver --gameid {{game_id}}",
            "Specify the world name to load": "minetestserver --world {{world_name}}",
            "Start an interactive terminal after starting the server": "minetestserver --terminal",
            "Start the server": "minetestserver"
        }
    },
    "common_minikube": {
        "Category": "common",
        "Command": "minikube",
        "P-Summary": "tool run kubernet local",
        "P-Tasks": "access servic name my_servic expos via node port get url delet cluster get ip address cluster open kubernet dashboard browser start cluster stop run cluster",
        "Summary": "Tool to run Kubernetes locally.",
        "Task-Script": {
            "Access a service named my_service exposed via a node port and get the url": "minikube service {{my_service}} --url",
            "Delete the cluster": "minikube delete",
            "Get the IP address of the cluster": "minikube ip",
            "Open kubernetes dashboard in a browser": "minikube dashboard",
            "Start the cluster": "minikube start",
            "Stop the running cluster": "minikube stop"
        }
    },
    "common_mitmdump": {
        "Category": "common",
        "Command": "mitmdump",
        "P-Summary": "view record programmat transform http traffic\ncommand-lin counterpart mitmproxi",
        "P-Tasks": "filter save traffic file post request replay save traffic file start proxi save output file",
        "Summary": "View, record, and programmatically transform HTTP traffic.\nThe command-line counterpart to mitmproxy.",
        "Task-Script": {
            "Filter a saved traffic file to just POST requests": "mitmdump -nr {{input_filename}} -w {{output_filename}} \"{{~m post}}\"",
            "Replay a saved traffic file": "mitmdump -nc {{filename}}",
            "Start a proxy and save all output to a file": "mitmdump -w {{filename}}"
        }
    },
    "common_mitmproxy": {
        "Category": "common",
        "Command": "mitmproxy",
        "P-Summary": "interact man-in-the-middl http proxi",
        "P-Tasks": "start mitmproxi bound custom address port start mitmproxi default set",
        "Summary": "An interactive man-in-the-middle HTTP proxy.",
        "Task-Script": {
            "Start mitmproxy bound to custom address and port": "mitmproxy -b {{ip_address}} -p {{port}}",
            "Start mitmproxy with default settings": "mitmproxy"
        }
    },
    "common_mix": {
        "Category": "common",
        "Command": "mix",
        "P-Summary": "mix build tool provid task creat compil test elixir project manag depend",
        "P-Tasks": "compil project creat new project execut particular file list mix command run project test",
        "Summary": "Mix is a build tool that provides tasks for creating, compiling, and testing Elixir projects, managing its dependencies, and more.",
        "Task-Script": {
            "Compile project": "mix compile",
            "Create a new project": "mix new {{project_name}}",
            "Execute a particular file": "mix run {{my_script.exs}}",
            "List all mix commands": "mix help",
            "Run project tests": "mix test"
        }
    },
    "common_mkcert": {
        "Category": "common",
        "Command": "mkcert",
        "P-Summary": "tool make locally-trust develop certif",
        "P-Tasks": "gener certif privat key given domain gener certif privat key multipl domain gener wildcard certif privat key given domain subdomain instal local ca system trust store uninstal local ca",
        "Summary": "Tool for making locally-trusted development certificates.",
        "Task-Script": {
            "Generate certificate and private key for a given domain": "mkcert {{example.org}}",
            "Generate certificate and private key for multiple domains": "mkcert {{example.org}} {{myapp.dev}} {{127.0.0.1}}",
            "Generate wildcard certificate and private key for a given domain and its subdomains": "mkcert \"{{*.example.it}}\"",
            "Install the local CA in the system trust store": "mkcert -install",
            "Uninstall the local CA": "mkcert -uninstall"
        }
    },
    "common_mkdir": {
        "Category": "common",
        "Command": "mkdir",
        "P-Summary": "creat directori",
        "P-Tasks": "creat directori current directori given path creat directori recurs use creat nest dir",
        "Summary": "Creates a directory.",
        "Task-Script": {
            "Create a directory in current directory or given path": "mkdir {{directory}}",
            "Create directories recursively (useful for creating nested dirs)": "mkdir -p {{path/to/directory}}"
        }
    },
    "common_mkfifo": {
        "Category": "common",
        "Command": "mkfifo",
        "P-Summary": "make fifo name pipe",
        "P-Tasks": "creat name pipe given path",
        "Summary": "Makes FIFOs (named pipes).",
        "Task-Script": {
            "Create a named pipe at a given path": "mkfifo {{path/to/pipe}}"
        }
    },
    "common_mktemp": {
        "Category": "common",
        "Command": "mktemp",
        "P-Summary": "creat temporari file directori",
        "P-Tasks": "creat temporari directori return absolut path creat temporari file specifi suffix creat empti temporari file return absolut path",
        "Summary": "Create a temporary file or directory.",
        "Task-Script": {
            "Create a temporary directory and return the absolute path to it": "mktemp -d",
            "Create a temporary file with a specified suffix": "mktemp --suffix \"{{.txt}}\"",
            "Create an empty temporary file and return the absolute path to it": "mktemp"
        }
    },
    "common_mktorrent": {
        "Category": "common",
        "Command": "mktorrent",
        "P-Summary": "cli util creat bittorr metainfo file",
        "P-Tasks": "creat privat torrent 2 21 kb piec size creat torrent 2 21 kb piec size creat torrent comment creat torrent multipl tracker creat torrent web seed url",
        "Summary": "A CLI utility to create BitTorrent metainfo files.",
        "Task-Script": {
            "Create a private torrent with a 2^21 KB piece size": "mktorrent -p -a {{tracker_announce_url}} -l {{21}} -o {{path/to/example.torrent}} {{path/to/file_or_directory}}",
            "Create a torrent with 2^21 KB as the piece size": "mktorrent -a {{tracker_announce_url}} -l {{21}} -o {{path/to/example.torrent}} {{path/to/file_or_directory}}",
            "Create a torrent with a comment": "mktorrent -c \"{{comment}}\" -a {{tracker_announce_url}} -l {{21}} -o {{path/to/example.torrent}} {{path/to/file_or_directory}}",
            "Create a torrent with multiple trackers": "mktorrent -a {{tracker_announce_url,tracker_announce_url_2}} -l {{21}} -o {{path/to/example.torrent}} {{path/to/file_or_directory}}",
            "Create a torrent with web seed URLs": "mktorrent -a {{tracker_announce_url}} -w {{web_seed_url}} -l {{21}} -o {{path/to/example.torrent}} {{path/to/file_or_directory}}"
        }
    },
    "common_mlr": {
        "Category": "common",
        "Command": "mlr",
        "P-Summary": "miller like awk sed cut join sort name-index data csv tsv tabular json",
        "P-Tasks": "convert csv json perform calcul display calcul filter line compress csv file treat number string pretty-print csv file tabular format receiv json format output vertic json receiv json data pretti print output sort alphabet field sort descend numer order field",
        "Summary": "Miller is like `awk`, `sed`, `cut`, `join`, and `sort` for name-indexed data such as CSV, TSV, and tabular JSON.",
        "Task-Script": {
            "Convert CSV to JSON, performing calculations and display those calculations": "mlr --icsv --ojson put '${{newField1}} = ${{oldFieldA}}/${{oldFieldB}}' {{example.csv}}",
            "Filter lines of a compressed CSV file treating numbers as strings": "mlr --prepipe 'gunzip' --csv filter -S '${{fieldName}} =~ \"{{regexp}}\"' {{example.csv.gz}}",
            "Pretty-print a CSV file in a tabular format": "mlr --icsv --opprint cat {{example.csv}}",
            "Receive JSON and format the output as vertical JSON": "echo '{\"hello\":\"world\", \"foo\":\"bar\"}' | mlr --ijson --ojson --jvstack cat",
            "Receive JSON data and pretty print the output": "echo '{\"hello\":\"world\"}' | mlr --ijson --opprint cat",
            "Sort alphabetically on a field": "mlr --icsv --opprint sort -f {{field}} {{example.csv}}",
            "Sort in descending numerical order on a field": "mlr --icsv --opprint sort -nr {{field}} {{example.csv}}"
        }
    },
    "common_mmdc": {
        "Category": "common",
        "Command": "mmdc",
        "P-Summary": "cli mermaid diagram gener tool domain-specif languag\nmermaid definit file taken input svg png pdf file gener output",
        "P-Tasks": "convert file specifi format automat determin file extens specifi background color chart e g\nlime d8064f transpar specifi theme chart",
        "Summary": "CLI for mermaid, a diagram generation tool with a domain-specific language.\nA mermaid definition file is taken as input and a SVG, PNG, or PDF file is generated as output.",
        "Task-Script": {
            "Convert a file to the specified format (automatically determined from the file extension)": "mmdc --input {{input.mmd}} --output {{output.svg}}",
            "Specify the background color of the chart (e.g. `lime`, `\"#D8064F\"`, or `transparent`)": "mmdc --input {{input.mmd}} --output {{output.svg}} --backgroundColor {{color}}",
            "Specify the theme of the chart": "mmdc --input {{input.mmd}} --output {{output.svg}} --theme {{forest|dark|neutral|default}}"
        }
    },
    "common_mmls": {
        "Category": "common",
        "Command": "mmls",
        "P-Summary": "display partit layout volum system",
        "P-Tasks": "display nest partit tabl display partit tabl split ewf imag display partit tabl store imag file display partit tabl addit column partit size",
        "Summary": "Display the partition layout of a volume system.",
        "Task-Script": {
            "Display nested partition tables": "mmls -t {{nested_table_type}} -o {{offset}} {{path/to/image_file}}",
            "Display the partition table in a split EWF image": "mmls -i ewf {{image.e01}} {{image.e02}}",
            "Display the partition table stored in an image file": "mmls {{path/to/image_file}}",
            "Display the partition table with an additional column for the partition size": "mmls -B -i {{path/to/image_file}}"
        }
    },
    "common_mmv": {
        "Category": "common",
        "Command": "mmv",
        "P-Summary": "move renam file bulk",
        "P-Tasks": "append txt file one file convert date filenam m-d-i format d-m-i format copi report6part4 txt\nfrench rapport6partie4 txt along similarli name file renam file certain extens differ extens",
        "Summary": "Move and rename files in bulk.",
        "Task-Script": {
            "Append all .txt files into one file": "mmv -a \"{{*.txt}}\" \"{{all.txt}}\"",
            "Convert dates in filenames from \"M-D-Y\" format to \"D-M-Y\" format": "mmv \"{{[0-1][0-9]-[0-3][0-9]-[0-9][0-9][0-9][0-9].txt}}\" \"{{#3#4-#1#2-#5#6#7#8.txt}}\"",
            "Copy report6part4.txt to ./french/rapport6partie4.txt along with all similarly named files": "mmv -c \"{{report*part*.txt}}\" \"{{./french/rapport#1partie#2.txt}}\"",
            "Rename all files with a certain extension to a different extension": "mmv \"*{{.old_extension}}\" \"#1{{.new_extension}}\""
        }
    },
    "common_mocha": {
        "Category": "common",
        "Command": "mocha",
        "P-Summary": "execut mocha javascript test runner",
        "P-Tasks": "run test contain specif locat run test chang javascript file current directori initi run test match specif grep pattern run test specif report run test default configur configur mocha opt",
        "Summary": "Execute Mocha JavaScript test runner.",
        "Task-Script": {
            "Run tests contained at a specific location": "mocha {{directory/with/tests}}",
            "Run tests on changes to JavaScript files in the current directory and once initially": "mocha --watch",
            "Run tests that match a specific grep pattern": "mocha --grep {{^regex$}}",
            "Run tests with a specific reporter": "mocha --reporter {{reporter}}",
            "Run tests with default configuration or as configured in `mocha.opts`": "mocha"
        }
    },
    "common_mogrify": {
        "Category": "common",
        "Command": "mogrify",
        "P-Summary": "perform oper multipl imag resiz crop flip ad effect\nchang appli directli origin file",
        "P-Tasks": "convert png imag directori jpeg doubl bright imag file current directori halv satur imag file current directori resiz jpeg imag directori 50 initi size resiz imag start dsc 800x600",
        "Summary": "Perform operations on multiple images, such as resizing, cropping, flipping, and adding effects.\nChanges are applied directly to the original file.",
        "Task-Script": {
            "Convert all PNG images in the directory to JPEG": "mogrify -format {{jpg}} {{*.png}}",
            "Double the brightness of all image files in the current directory": "mogrify -modulate {{200}} {{*}}",
            "Halve the saturation of all image files in the current directory": "mogrify -modulate {{100,50}} {{*}}",
            "Resize all JPEG images in the directory to 50% of their initial size": "mogrify -resize {{50%}} {{*.jpg}}",
            "Resize all images starting with \"DSC\" to 800x600": "mogrify -resize {{800x600}} {{DSC*}}"
        }
    },
    "common_molecule": {
        "Category": "common",
        "Command": "molecule",
        "P-Summary": "molecul help test ansibl role",
        "P-Tasks": "configur instanc creat new ansibl role login instanc run test start instanc",
        "Summary": "Molecule helps testing ansible roles.",
        "Task-Script": {
            "Configure the instance": "molecule converge",
            "Create a new ansible role": "molecule init role --role-name {{role_name}}",
            "Login into the instance": "molecule login",
            "Run tests": "molecule test",
            "Start the instance": "molecule create"
        }
    },
    "common_mongo": {
        "Category": "common",
        "Command": "mongo",
        "P-Summary": "mongodb interact shell client",
        "P-Tasks": "connect databas connect databas run given host given port connect databas given usernam user prompt password evalu javascript express databas",
        "Summary": "MongoDB interactive shell client.",
        "Task-Script": {
            "Connect to a database": "mongo {{database}}",
            "Connect to a database running on a given host on a given port": "mongo --host {{host}} --port {{port}} {{database}}",
            "Connect to a database with a given username; user will be prompted for password": "mongo --username {{username}} {{database}} --password",
            "Evaluate a javascript expression on the database": "mongo --eval '{{JSON.stringify(db.foo.findOne())}}' {{database}}"
        }
    },
    "common_mongod": {
        "Category": "common",
        "Command": "mongod",
        "P-Summary": "mongodb databas server",
        "P-Tasks": "specifi config file specifi databas profil level\n0 1 slow oper 2 specifi port listen",
        "Summary": "The MongoDB database server.",
        "Task-Script": {
            "Specify a config file": "mongod --config {{filename}}",
            "Specify database profiling level. 0 is off, 1 is only slow operations, 2 is all": "mongod --profile {{0|1|2}}",
            "Specify the port to listen on": "mongod --port {{port}}"
        }
    },
    "common_mongodump": {
        "Category": "common",
        "Command": "mongodump",
        "P-Summary": "util export content mongodb instanc",
        "P-Tasks": "connect given host run given port creat dump creat dump given collect within given databas creat dump given databas creat dump given databas given usernam user prompt password creat dump databas place file insid directori call dump specifi output locat dump",
        "Summary": "Utility to export the contents of a MongoDB instance.",
        "Task-Script": {
            "Connect to a given host running on a given port, and create a dump": "mongodump --host {{host}} --port {{port}}",
            "Create a dump of a given collection within a given database": "mongodump --collection {{collection_name}} --db {{database_name}}",
            "Create a dump of a given database": "mongodump --db {{database_name}}",
            "Create a dump of a given database with a given username; user will be prompted for password": "mongodump --username {{username}} {{database}} --password",
            "Create a dump of all databases (this will place the files inside a directory called \"dump\")": "mongodump",
            "Specify an output location for the dump": "mongodump --out {{path/to/directory}}"
        }
    },
    "common_mongorestore": {
        "Category": "common",
        "Command": "mongorestore",
        "P-Summary": "util import collect databas binari dump mongodb instanc",
        "P-Tasks": "import bson data dump directori mongodb databas import bson data dump directori given databas mongodb server host run given port user authent user prompt password import collect bson file mongodb databas import collect bson file given databas mongodb server host run given port user authent user prompt password",
        "Summary": "Utility to import a collection or database from a binary dump into a MongoDB instance.",
        "Task-Script": {
            "Import a bson data dump from a directory to a MongoDB database": "mongorestore --db {{database_name}} {{path/to/directory}}",
            "Import a bson data dump from a directory to a given database in a MongoDB server host, running at a given port, with user authentication (user will be prompted for password)": "mongorestore --host {{database_host:port}} --db {{database_name}} --username {{username}} {{path/to/directory}} --password",
            "Import a collection from a bson file to a MongoDB database": "mongorestore --db {{database_name}} {{path/to/file}}",
            "Import a collection from a bson file to a given database in a MongoDB server host, running at a given port, with user authentication (user will be prompted for password)": "mongorestore --host {{database_host:port}} --db {{database_name}} --username {{username}} {{path/to/file}} --password"
        }
    },
    "common_monodevelop": {
        "Category": "common",
        "Command": "monodevelop",
        "P-Summary": "cross platform ide c f",
        "P-Tasks": "disabl redirect stdout stderr log file enabl perform monitor forc open new window instead switch exist one open specif file open specif file caret specif posit start monodevelop",
        "Summary": "Cross platform IDE for C#, F# and more.",
        "Task-Script": {
            "Disable redirection of `stdout` and stderr to a log file": "monodevelop --no-redirect",
            "Enable performance monitoring": "monodevelop --perf-log",
            "Force opening a new window instead of switching to an existing one": "monodevelop --new-window",
            "Open a specific file": "monodevelop {{path/to/file}}",
            "Open a specific file with the caret at a specific position": "monodevelop {{path/to/file}};{{line_number}};{{column_number}}",
            "Start Monodevelop": "monodevelop"
        }
    },
    "common_monodis": {
        "Category": "common",
        "Command": "monodis",
        "P-Summary": "mono common intermedi languag cil disassembl",
        "P-Tasks": "disassembl assembl textual cil extract embed resourc current directori list method assembl list refer assembl save output file show list resourc embed within assembl show inform assembl",
        "Summary": "The Mono Common Intermediate Language (CIL) disassembler.",
        "Task-Script": {
            "Disassemble an assembly to textual CIL": "monodis {{path/to/assembly.exe}}",
            "Extract all the embedded resources to the current directory": "monodis --mresources {{path/to/assembly.dll}}",
            "List all the methods in an assembly": "monodis --method {{path/to/assembly.exe}}",
            "List the references of an assembly": "monodis --assemblyref {{path/to/assembly.exe}}",
            "Save the output to a file": "monodis --output={{path/to/output.il}} {{path/to/assembly.exe}}",
            "Show a list of resources embedded within an assembly": "monodis --manifest {{path/to/assembly.dll}}",
            "Show information about an assembly": "monodis --assembly {{path/to/assembly.dll}}"
        }
    },
    "common_monop": {
        "Category": "common",
        "Command": "monop",
        "P-Summary": "find display signatur type method insid net assembl",
        "P-Tasks": "hide obsolet member list assembl specifi assembl refer list type assembl show member defin specifi type show privat member show structur type built-in net framework show structur type specif assembl",
        "Summary": "Finds and displays signatures of Types and methods inside .NET assemblies.",
        "Task-Script": {
            "Hide obsolete members": "monop -r:{{path/to/assembly.dll}} --filter-obsolete {{Namespace.Path.To.Type}}",
            "List the other assemblies that a specified assembly references": "monop -r:{{path/to/assembly.dll}} --refs",
            "List the types in an assembly": "monop -r:{{path/to/assembly.exe}}",
            "Only show members defined in the specified Type": "monop -r:{{path/to/assembly.dll}} --only-declared {{Namespace.Path.To.Type}}",
            "Show private members": "monop -r:{{path/to/assembly.dll}} --private {{Namespace.Path.To.Type}}",
            "Show the structure of a Type built-in of the .NET Framework": "monop {{System.String}}",
            "Show the structure of a Type in a specific assembly": "monop -r:{{path/to/assembly.dll}} {{Namespace.Path.To.Type}}"
        }
    },
    "common_montage": {
        "Category": "common",
        "Command": "montage",
        "P-Summary": "imagemagick imag montag tool\ntile imag customis grid",
        "P-Tasks": "limit number row column grid caus input imag overflow multipl output montag resiz crop imag complet fill grid cell tile set grid cell size resiz imag fit tile tile imag grid automat calcul grid cell size largest imag tile imag grid automat resiz imag larger grid cell size",
        "Summary": "Imagemagick image montage tool.\nTiles images into a customisable grid.",
        "Task-Script": {
            "Limit the number of rows and columns in the grid, causing input images to overflow into multiple output montages": "montage {{image1.png}} {{image2.jpg}} {{imageN.png}} -geometry +0+0 -tile 2x3 montage_%d.jpg",
            "Resize and crop images to completely fill their grid cells before tiling": "montage {{image1.png}} {{image2.jpg}} {{imageN.png}} -geometry +0+0 -resize 640x480^ -gravity center -crop 640x480+0+0 montage.jpg",
            "Set the grid cell size and resize images to fit it before tiling": "montage {{image1.png}} {{image2.jpg}} {{imageN.png}} -geometry 640x480+0+0 montage.jpg",
            "Tile images into a grid, automatically calculating the grid cell size from the largest image": "montage {{image1.png}} {{image2.jpg}} {{imageN.png}} -geometry +0+0 montage.jpg",
            "Tile images into a grid, automatically resizing images larger than the grid cell size": "montage {{image1.png}} {{image2.jpg}} {{imageN.png}} montage.jpg"
        }
    },
    "common_more": {
        "Category": "common",
        "Command": "more",
        "P-Summary": "open file interact read allow scroll search forward direct",
        "P-Tasks": "exit open file page search string press n go next match",
        "Summary": "Open a file for interactive reading, allowing scrolling and search (in forward direction only).",
        "Task-Script": {
            "Exit": "q",
            "Open a file": "more {{source_file}}",
            "Page down": "<Space>",
            "Search for a string (press `n` to go to the next match)": "/{{something}}"
        }
    },
    "common_moro": {
        "Category": "common",
        "Command": "moro",
        "P-Summary": "track work time",
        "P-Tasks": "add note current work day invok moro without paramet second time set current time end work day invok moro without paramet set current time start work day show report time log note work day record show report time log note current work day specifi custom time end work day specifi custom time start work day",
        "Summary": "Track work time.",
        "Task-Script": {
            "Add a note on the current working day": "moro note {{3 hours on project Foo}}",
            "Invoke `moro` without parameters a second time, to set the current time at the end of the working day": "moro",
            "Invoke `moro` without parameters, to set the current time as the start of the working day": "moro",
            "Show a report of time logs and notes for all working days on record": "moro report --all",
            "Show a report of time logs and notes for the current working day": "moro report",
            "Specify a custom time for the end of the working day": "moro bye {{17:30}}",
            "Specify a custom time for the start of the working day": "moro hi {{09:30}}"
        }
    },
    "common_mosh": {
        "Category": "common",
        "Command": "mosh",
        "P-Summary": "mobil shell mosh robust respons replac ssh\nmosh persist connect remot server roam network",
        "P-Tasks": "connect remot server connect remot server use specif port connect remot server specif ident privat key run command remot server select mosh udp port use remote_host behind nat usag mosh-serv binari outsid standard path",
        "Summary": "Mobile Shell (`mosh`) is a robust and responsive replacement for SSH.\n`mosh` persists connections to remote servers while roaming between networks.",
        "Task-Script": {
            "Connect to a remote server": "mosh {{username}}@{{remote_host}}",
            "Connect to a remote server using a specific port": "mosh --ssh=\"ssh -p {{2222}}\" {{username}}@{{remote_host}}",
            "Connect to a remote server with a specific identity (private key)": "mosh --ssh=\"ssh -i {{/path/to/key_file}}\" {{username}}@{{remote_host}}",
            "Run a command on a remote server": "mosh {{remote_host}} -- {{command -with -flags}}",
            "Select Mosh UDP port (useful when `{{remote_host}}` is behind a NAT)": "mosh -p {{124}} {{username}}@{{remote_host}}",
            "Usage when `mosh-server` binary is outside standard path": "mosh --server={{/path/to/bin/}}mosh-server {{remote_host}}"
        }
    },
    "common_mosquitto": {
        "Category": "common",
        "Command": "mosquitto",
        "P-Summary": "mqtt broker",
        "P-Tasks": "daemon fork background listen specif port specifi configur file use start mosquitto",
        "Summary": "An MQTT broker.",
        "Task-Script": {
            "Daemonize by forking into the background": "mosquitto --daemon",
            "Listen on a specific port": "mosquitto --port {{8883}}",
            "Specify a configuration file to use": "mosquitto --config-file {{path/to/file.conf}}",
            "Start mosquitto": "mosquitto"
        }
    },
    "common_mosquitto_passwd": {
        "Category": "common",
        "Command": "mosquitto_passwd",
        "P-Summary": "manag password file mosquitto\nsee also mosquitto mqtt server manag",
        "P-Tasks": "add new user password file prompt enter password creat password file alreadi exist delet specifi usernam instead upgrad old plain-text password file hash password file",
        "Summary": "Manage password files for mosquitto.\nSee also `mosquitto`, the MQTT server that this manages.",
        "Task-Script": {
            "Add a new user to a password file (will prompt to enter the password)": "mosquitto_passwd {{path/to/password_file}} {{username}}",
            "Create the password file if it doesn't already exist": "mosquitto_passwd -c {{path/to/password_file}} {{username}}",
            "Delete the specified username instead": "mosquitto_passwd -D {{path/to/password_file}} {{username}}",
            "Upgrade an old plain-text password file to a hashed password file": "mosquitto_passwd -U {{path/to/password_file}}"
        }
    },
    "common_mosquitto_pub": {
        "Category": "common",
        "Command": "mosquitto_pub",
        "P-Summary": "simpl mqtt version 3 1 1 client publish singl messag topic exit",
        "P-Tasks": "publish temperatur valu 32 topic sensor temperatur 192 168 1 1 default localhost qualiti servic qo set 1 publish light switch statu retain messag topic switch kitchen_light statu remot host may long period time light switch event publish timestamp temperatur data topic sensor temperatur remot host non-standard port read newlin delimit data stdin messag publish sensor temperatur topic send content file data txt messag publish sensor temperatur topic send content file data txt read stdin send entir input messag publish sensor temperatur topic",
        "Summary": "A simple MQTT version 3.1.1 client that will publish a single message on a topic and exit.",
        "Task-Script": {
            "Publish a temperature value of 32 on the topic `sensors/temperature` to 192.168.1.1 (defaults to `localhost`) with Quality of Service (`QoS`) set to 1": "mosquitto_pub -h {{192.168.1.1}} -t {{sensors/temperature}} -m {{32}} -q {{1}}",
            "Publish light switch status and retain the message on the topic `switches/kitchen_lights/status` to a remote host because there may be a long period of time between light switch events": "mosquitto_pub -r -h \"{{iot.eclipse.org}}\" -t {{switches/kitchen_lights/status}} -m \"{{on}}\"",
            "Publish timestamp and temperature data on the topic `sensors/temperature` to a remote host on a non-standard port": "mosquitto_pub -h {{192.168.1.1}} -p {{1885}} -t {{sensors/temperature}} -m \"{{1266193804 32}}\"",
            "Read newline delimited data from `stdin` as a message and publish it to `sensors/temperature` topic": "{{echo data.txt}} | mosquitto_pub -t {{sensors/temperature}} -l",
            "Send the contents of a file (`data.txt`) as a message and publish it to `sensors/temperature` topic": "mosquitto_pub -t {{sensors/temperature}} -f {{data.txt}}",
            "Send the contents of a file (`data.txt`), by reading from `stdin` and send the entire input as a message and publish it to `sensors/temperature` topic": "mosquitto_pub -t {{sensors/temperature}} -s < {{data.txt}}"
        }
    },
    "common_mosquitto_sub": {
        "Category": "common",
        "Command": "mosquitto_sub",
        "P-Summary": "simpl mqtt version 3 1 1 client subscrib topic print messag receiv",
        "P-Tasks": "subscrib broker statu messag publish iot eclips org port 1885 print publish messag verbos subscrib multipl topic match given pattern\n+ take metric name subscrib topic sensor temperatur inform qualiti servic qo set 1 default hostnam localhost port 1883",
        "Summary": "A simple MQTT version 3.1.1 client that will subscribe to topics and print the messages that it receives.",
        "Task-Script": {
            "Subscribe to all broker status messages publishing on `iot.eclipse.org` port `1885` and print published messages verbosely": "mosquitto_sub -v -h \"iot.eclipse.org\" -p 1885 -t {{\\$SYS/#}}",
            "Subscribe to multiple topics matching a given pattern. (+ takes any metric name)": "mosquitto_sub -t {{sensors/machines/+/temperature/+}}",
            "Subscribe to the topic `sensors/temperature` information with Quality of Service (`QoS`) set to 1. (The default hostname is `localhost` and port `1883`)": "mosquitto_sub -t {{sensors/temperature}} -q {{1}}"
        }
    },
    "common_most": {
        "Category": "common",
        "Command": "most",
        "P-Summary": "open one sever file interact read allow scroll search",
        "P-Tasks": "edit current file exit jump 100th line move open file open file open file first occurr string open sever file split current window half",
        "Summary": "Open one or several files for interactive reading, allowing scrolling and search.",
        "Task-Script": {
            "Edit current file": "e",
            "Exit": "Q",
            "Jump to the 100th line": "{{100}}j",
            "Move through opened files": ":O n",
            "Open a file": "most {{path/to/file}}",
            "Open a file at the first occurrence of \"string\"": "most {{file}} +/{{string}}",
            "Open several files": "most {{path/to/file1}} {{path/to/file2}}",
            "Split the current window in half": "<CTRL-x> o"
        }
    },
    "common_mount": {
        "Category": "common",
        "Command": "mount",
        "P-Summary": "provid access entir filesystem one directori",
        "P-Tasks": "mount cd-rom devic filetyp iso9660 cdrom readonli mount devic directori mount directori anoth directori mount specif filesystem describ etc fstab e g\ndev sda1 my_driv ext2 default 0 2 mount filesystem defin etc fstab show mount filesystem",
        "Summary": "Provides access to an entire filesystem in one directory.",
        "Task-Script": {
            "Mount a CD-ROM device (with the filetype ISO9660) to /cdrom (readonly)": "mount -t {{iso9660}} -o ro {{/dev/cdrom}} {{/cdrom}}",
            "Mount a device to a directory": "mount -t {{filesystem_type}} {{path/to/device_file}} {{path/to/target_directory}}",
            "Mount a directory to another directory": "mount --bind {{path/to/old_dir}} {{path/to/new_dir}}",
            "Mount a specific filesystem described in /etc/fstab (e.g. \"/dev/sda1 /my_drive ext2 defaults 0 2\")": "mount {{/my_drive}}",
            "Mount all the filesystem defined in /etc/fstab": "mount -a",
            "Show all mounted filesystems": "mount"
        }
    },
    "common_mp4box": {
        "Category": "common",
        "Command": "mp4box",
        "P-Summary": "mpeg-4 system toolbox - mux stream mp4 contain",
        "P-Tasks": "add srt subtitl file mp4 file combin audio one file video anoth display inform exist mp4 file",
        "Summary": "MPEG-4 Systems Toolbox - Muxes streams into MP4 container.",
        "Task-Script": {
            "Add an SRT subtitle file into an MP4 file": "mp4box -add {{input_subs.srt}}:lang=eng -add {{input.mp4}} {{output.mp4}}",
            "Combine audio from one file and video from another": "mp4box -add {{input1.mp4}}#audio -add {{input2.mp4}}#video {{output.mp4}",
            "Display information about an existing MP4 file": "mp4box -info {{filename}}"
        }
    },
    "common_mpc": {
        "Category": "common",
        "Command": "mpc",
        "P-Summary": "music player client\nprogram control music player daemon mpd",
        "P-Tasks": "forward rewind current play song play next song play previou song show inform current play song stop play toggl play paus",
        "Summary": "Music Player Client.\nProgram for controlling the Music Player Daemon (MPD).",
        "Task-Script": {
            "Forward or rewind the currently playing song": "mpc [+-]{{seconds}}",
            "Play next song": "mpc next",
            "Play previous song": "mpc prev",
            "Show information about the currently playing song": "mpc status",
            "Stop playing": "mpc stop",
            "Toggle play/pause": "mpc toggle"
        }
    },
    "common_mpg321": {
        "Category": "common",
        "Command": "mpg321",
        "P-Summary": "high perform mpeg 1 0 2 0 2 5 audio player layer 1 2 3 mpg321 written sometim 1999 drop-in replac previous non-fre mpg123 player",
        "P-Tasks": "enabl basic key - increas decreas volum n - skip song - mute unmut\nplay play directori recurs play file current folder subfold randomli interrupt basic key enabl play audio sourc exactli n time n 0 mean forev play file randomli interrupt shuffl file play",
        "Summary": "High Performance MPEG 1.0/2.0/2.5 Audio Player for Layer 1, 2, and 3.\nMpg321 was written (sometime in 1999) to be a drop-in replacement for the (previously) non-free mpg123 player.",
        "Task-Script": {
            "Enable Basic Keys ( `*` or `/` - Increase or decrease volume, `n` - Skip song, `m` - Mute/unmute.) while playing": "mpg321 -K {{path/to/file_a|URL}} {{path/to/file_b|URL}} {{...}}",
            "Play a directory recursively": "mpg321 -B {{path/to/directory}}",
            "Play all files in the current folder and subfolders, randomly (until interrupted), with Basic Keys enabled": "mpg321 -B -Z -K .",
            "Play an audio source exactly N times (N=0 means forever)": "mpg321 -l {{N}} {{path/to/file_a|URL}} {{path/to/file_b|URL}} {{...}}",
            "Play files randomly until interrupted": "mpg321 -Z {{path/to/file_a|URL}} {{path/to/file_b|URL}} {{...}}",
            "Shuffle the files before playing them once": "mpg321 -z {{path/to/file_a|URL}} {{path/to/file_b|URL}} {{...}}"
        }
    },
    "common_mpv": {
        "Category": "common",
        "Command": "mpv",
        "P-Summary": "audio video player base mplayer",
        "P-Tasks": "decreas increas playback speed 10 display output webcam video input devic jump backward forward 1 minut jump backward forward 5 second play file specifi speed 0 01 100 default 1 play file use profil defin mpv conf file play video audio file play video audio file url",
        "Summary": "A audio/video player based on MPlayer.",
        "Task-Script": {
            "Decrease or increase playback speed by 10 %": "[ <or> ]",
            "Display the output of webcam or other video input device": "mpv /dev/{{video0}}",
            "Jump backward/forward 1 minute": "DOWN <or> UP",
            "Jump backward/forward 5 seconds": "LEFT <or> RIGHT",
            "Play a file at a specified speed (0.01 to 100, default 1)": "mpv --speed {{speed}} {{file}}",
            "Play a file using a profile defined in the `mpv.conf` file": "mpv --profile {{profile_name}} {{file}}",
            "Play a video or audio file": "mpv {{file}}",
            "Play a video or audio file from an URL": "mpv '{{https://www.youtube.com/watch?v=dQw4w9WgXcQ}}'"
        }
    },
    "common_mr": {
        "Category": "common",
        "Command": "mr",
        "P-Summary": "myrepo manag version control repositori",
        "P-Tasks": "checkout repositori latest version print statu repositori regist repositori updat repositori 5 concur job",
        "Summary": "Myrepos manages all your version control repositories at once.",
        "Task-Script": {
            "Checkout all repositories to the latest version": "mr checkout",
            "Print the status of all repositories": "mr status",
            "Register a repository": "mr register",
            "Update repositories in 5 concurent jobs": "mr -j{{5}} update"
        }
    },
    "common_msbuild": {
        "Category": "common",
        "Command": "msbuild",
        "P-Summary": "microsoft build tool visual studio project solut",
        "P-Tasks": "build specif project file build first project file current directori display detail help inform display detail inform end log project configur set one semicolon-separ properti set one semicolon-separ target build set build tool version use",
        "Summary": "The Microsoft build tool for Visual Studio project solutions.",
        "Task-Script": {
            "Build a specific project file": "msbuild {{path/to/project_file}}",
            "Build the first project file in the current directory": "msbuild",
            "Display detailed help information": "msbuild /help",
            "Display detailed information at the end of the log about how the project was configured": "msbuild {{path/to/project_file}} /detailedsummary",
            "Set one or more semicolon-separated properties": "msbuild {{path/to/project_file}} /property:{{name=value}}",
            "Set one or more semicolon-separated targets to build": "msbuild {{path/to/project_file}} /target:{{targets}}",
            "Set the build tools version to use": "msbuild {{path/to/project_file}} /toolsversion:{{version}}"
        }
    },
    "common_msfvenom": {
        "Category": "common",
        "Command": "msfvenom",
        "P-Summary": "manual gener payload metasploit",
        "P-Tasks": "creat elf binari revers tcp handler creat exe binari revers tcp handler list format list payload show payload option",
        "Summary": "Manually generate payloads for metasploit.",
        "Task-Script": {
            "Create an ELF binary with a reverse TCP handler": "msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST={{local_ip}} LPORT={{local_port}} -f elf > {{path/to/binary}}",
            "Create an EXE binary with a reverse TCP handler": "msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST={{local_ip}} LPORT={{local_port}} -f exe > {{path/to/binary.exe}}",
            "List formats": "msfvenom -l formats",
            "List payloads": "msfvenom -l payloads",
            "Show payload options": "msfvenom -p {{payload}} --list-options"
        }
    },
    "common_msmtp": {
        "Category": "common",
        "Command": "msmtp",
        "P-Summary": "smtp client\nread text standard input send smtp server",
        "P-Tasks": "send email use specif account configur msmtprc send email use default account configur msmtprc send email without configur account\npassword specifi msmtprc file",
        "Summary": "An SMTP client.\nIt reads text from standard input and sends it to an SMTP server.",
        "Task-Script": {
            "Send an email using a specific account configured in `~/.msmtprc`": "echo \"{{Hello world}}\" | msmtp --account={{account_name}} {{to@example.org}}",
            "Send an email using the default account configured in `~/.msmtprc`": "echo \"{{Hello world}}\" | msmtp {{to@example.org}}",
            "Send an email without a configured account. The password should be specified in the `~/.msmtprc` file": "echo \"{{Hello world}}\" | msmtp --host={{localhost}} --port={{999}} --from={{from@example.org}} {{to@example.org}}"
        }
    },
    "common_mtr": {
        "Category": "common",
        "Command": "mtr",
        "P-Summary": "matt tracerout : combin tracerout ping tool",
        "P-Tasks": "disabl ip address host name map forc ip ipv4 ipv6 gener output ping hop 10 time tracerout host continu ping intermediari hop wait given time second send anoth packet hop",
        "Summary": "Matt's Traceroute: combined traceroute and ping tool.",
        "Task-Script": {
            "Disable IP address and host name mapping": "mtr -n {{host}}",
            "Force IP IPv4 or IPV6": "mtr -4 {{host}}",
            "Generate output after pinging each hop 10 times": "mtr -w {{host}}",
            "Traceroute to a host and continuously ping all intermediary hops": "mtr {{host}}",
            "Wait for a given time (in seconds) before sending another packet to the same hop": "mtr -i {{seconds}} {{host}}"
        }
    },
    "common_multipass": {
        "Category": "common",
        "Command": "multipass",
        "P-Summary": "cli manag ubuntu virtual machin use nativ hypervisor",
        "P-Tasks": "delet instanc name launch new instanc set name use cloud-init configur file list creat instanc properti list alias use launch instanc mount directori specif instanc open shell prompt specif instanc name show properti instanc start specif instanc name",
        "Summary": "CLI to manage Ubuntu virtual machines using native hypervisors.",
        "Task-Script": {
            "Delete an instance by name": "multipass delete {{instance_name}}",
            "Launch a new instance, set its name and use a cloud-init configuration file": "multipass launch -n {{instance_name}} --cloud-init {{configuration_file}}",
            "List all the created instances and some of their properties": "multipass list",
            "List the aliases that can be used to launch an instance": "multipass find",
            "Mount a directory into a specific instance": "multipass mount {{path/to/local/directory}} {{instance_name}}:{{path/to/target/directory}}",
            "Open a shell prompt on a specific instance by name": "multipass shell {{instance_name}}",
            "Show the properties of an instance": "multipass info {{instance_name}}",
            "Start a specific instance by name": "multipass start {{instance_name}}"
        }
    },
    "common_multitail": {
        "Category": "common",
        "Command": "multitail",
        "P-Summary": "extens tail",
        "P-Tasks": "automat add new file window show 5 logfil merg 2 put 2 column one left column tail file directori singl stream tail file match pattern singl stream",
        "Summary": "Extension of tail.",
        "Task-Script": {
            "Automatically add new files to a window": "multitail -Q {{pattern}}",
            "Show 5 logfiles while merging 2 and put them in 2 columns with only one in the left column": "multitail -s 2 -sn 1,3 {{mergefile}} -I {{file1}} {{file2}} {{file3}} {{file4}}",
            "Tail all files in a directory in a single stream": "multitail -Q 1 '{{directory}}/*'",
            "Tail all files matching a pattern in a single stream": "multitail -Q 1 '{{pattern}}'"
        }
    },
    "common_mutool": {
        "Category": "common",
        "Command": "mutool",
        "P-Summary": "convert pdf file queri inform extract data",
        "P-Tasks": "concaten two pdf convert page 1-10 10 png imag convert page 2 3 5 pdf text standard output extract imag font resourc embed pdf current directori queri inform content embed pdf",
        "Summary": "Convert PDF files, query information and extract data.",
        "Task-Script": {
            "Concatenate two PDFs": "mutool merge -o {{output.pdf}} {{input1.pdf}} {{input2.pdf}}",
            "Convert pages 1-10 into 10 PNG images": "mutool convert -o {{image%d.png}} {{file.pdf}} {{1-10}}",
            "Convert pages 2, 3 and 5 of a PDF into text in the standard output": "mutool draw -F {{txt}} {{file.pdf}} {{2,3,5}}",
            "Extract all images, fonts and resources embedded in a PDF out into the current directory": "mutool extract {{input.pdf}}",
            "Query information about all content embedded in a PDF": "mutool info {{input.pdf}}"
        }
    },
    "common_mutt": {
        "Category": "common",
        "Command": "mutt",
        "P-Summary": "command-lin email client",
        "P-Tasks": "open specifi mailbox send email specifi subject cc recipi send email file attach specifi draft file contain header bodi messag rfc 5322 format specifi file includ messag bodi",
        "Summary": "Command-line email client.",
        "Task-Script": {
            "Open the specified mailbox": "mutt -f {{mailbox}}",
            "Send an email and specify a subject and a cc recipient": "mutt -s {{subject}} -c {{cc@example.com}} {{recipient@example.com}}",
            "Send an email with files attached": "mutt -a {{file1}} {{file2}} -- {{recipient@example.com}}",
            "Specify a draft file containing the header and the body of the message, in RFC 5322 format": "mutt -H {{file}} {{recipient@example.com}}",
            "Specify a file to include as the message body": "mutt -i {{file}} {{recipient@example.com}}"
        }
    },
    "common_mv": {
        "Category": "common",
        "Command": "mv",
        "P-Summary": "move renam file directori",
        "P-Tasks": "overwrit exist file target prompt confirm overwrit exist file move file arbitrari locat move file verbos mode show file move prompt confirm overwrit exist file regardless file permiss",
        "Summary": "Move or rename files and directories.",
        "Task-Script": {
            "Do not overwrite existing files at the target": "mv -n {{source}} {{target}}",
            "Do not prompt for confirmation before overwriting existing files": "mv -f {{source}} {{target}}",
            "Move files in arbitrary locations": "mv {{source}} {{target}}",
            "Move files in verbose mode, showing files after they are moved": "mv -v {{source}} {{target}}",
            "Prompt for confirmation before overwriting existing files, regardless of file permissions": "mv -i {{source}} {{target}}"
        }
    },
    "common_mvn": {
        "Category": "common",
        "Command": "mvn",
        "P-Summary": "apach maven\ntool build manag java-bas project",
        "P-Tasks": "clean packag code given build profil compil project compil packag compil code distribut format jar compil packag skip unit test delet build artifact target directori clean invok packag phase instal built packag local maven repositori\ninvok compil packag command run class main method",
        "Summary": "Apache Maven.\nTool for building and managing Java-based projects.",
        "Task-Script": {
            "Clean and then package the code with a given build profile": "mvn clean -P{{profile}} package",
            "Compile a project": "mvn compile",
            "Compile and package the compiled code in its distributable format, such as a `jar`": "mvn package",
            "Compile and package, skipping unit tests": "mvn package -Dmaven.test.skip=true",
            "Delete build artifacts from the target directory": "mvn clean",
            "Do a clean and then invoke the package phase": "mvn clean package",
            "Install the built package in local maven repository. (This will invoke the compile and package commands too)": "mvn install",
            "Run a class with a main method": "mvn exec:java -Dexec.mainClass=\"{{com.example.Main}}\" -Dexec.args=\"{{arg1 arg2}}\""
        }
    },
    "common_mycli": {
        "Category": "common",
        "Command": "mycli",
        "P-Summary": "command line client mysql auto-complet syntax highlight",
        "P-Tasks": "connect databas user prompt password connect databas anoth host connect local databas port 3306 use current user usernam",
        "Summary": "A command line client for MySQL that can do auto-completion and syntax highlighting.",
        "Task-Script": {
            "Connect to a database (user will be prompted for a password)": "mycli -u {{username}} {{database_name}}",
            "Connect to a database on another host": "mycli -h {{database_host}} -P {{port}} -u {{username}} {{database_name}}",
            "Connect to a local database on port 3306, using the current user's username": "mycli {{database_name}}"
        }
    },
    "common_mysql": {
        "Category": "common",
        "Command": "mysql",
        "P-Summary": "mysql command-lin tool",
        "P-Tasks": "connect databas connect databas anoth host connect databas unix socket connect databas user prompt password execut sql statement script file batch file restor databas backup creat mysqldump user prompt password restor databas backup user prompt password",
        "Summary": "The MySQL command-line tool.",
        "Task-Script": {
            "Connect to a database": "mysql {{database_name}}",
            "Connect to a database on another host": "mysql -h {{database_host}} {{database_name}}",
            "Connect to a database through a Unix socket": "mysql --socket {{path/to/socket.sock}}",
            "Connect to a database, user will be prompted for a password": "mysql -u {{user}} --password {{database_name}}",
            "Execute SQL statements in a script file (batch file)": "mysql -e \"source {{filename.sql}}\" {{database_name}}",
            "Restore a database from a backup created with `mysqldump` (user will be prompted for a password)": "mysql --user {{user}} --password {{database_name}} < {{path/to/backup.sql}}",
            "Restore all databases from a backup (user will be prompted for a password)": "mysql --user {{user}} --password < {{path/to/backup.sql}}"
        }
    },
    "common_mysqldump": {
        "Category": "common",
        "Command": "mysqldump",
        "P-Summary": "backup mysql databas\nsee also mysql restor databas",
        "P-Tasks": "backup databas redirect output file user prompt password creat backup user prompt password",
        "Summary": "Backups MySQL databases.\nSee also `mysql` for restoring databases.",
        "Task-Script": {
            "Backup all databases redirecting the output to a file (user will be prompted for a password)": "mysqldump --user {{user}} --password --all-databases > {{path/to/file.sql}}",
            "Create a backup (user will be prompted for a password)": "mysqldump --user {{user}} --password {{database_name}} -r {{path/to/file.sql}}"
        }
    },
    "common_mytop": {
        "Category": "common",
        "Command": "mytop",
        "P-Summary": "display mysql server perform info like top",
        "P-Tasks": "connect specifi usernam user prompt password connect specifi usernam password show idl sleep thread start mytop",
        "Summary": "Display MySQL server performance info like `top`.",
        "Task-Script": {
            "Connect with a specified username (the user will be prompted for a password)": "mytop -u {{user}} --prompt",
            "Connect with a specified username and password": "mytop -u {{user}} -p {{password}}",
            "Do not show any idle (sleeping) threads": "mytop -u {{user}} -p {{password}} --noidle",
            "Start mytop": "mytop"
        }
    },
    "common_nano": {
        "Category": "common",
        "Command": "nano",
        "P-Summary": "simpl easi use command-lin text editor\nenhanc free pico clone",
        "P-Tasks": "modif backup separ current_file_nam enabl smooth scroll indent new line previou line indent open file posit cursor specifi line column open specif file",
        "Summary": "Simple, easy to use command-line text editor. An enhanced, free Pico clone.",
        "Task-Script": {
            "Before modification, backup separately as `{{current_file_name}}~`": "nano -B {{filename}}",
            "Enable smooth scrolling": "nano -S {{filename}}",
            "Indent new lines to the previous lines' indentation": "nano -i {{filename}}",
            "Open a file positioning the cursor at the specified line and column": "nano +{{line}},{{column}} {{path/to/file}}",
            "Open a specific file": "nano {{path/to/file}}"
        }
    },
    "common_nasm": {
        "Category": "common",
        "Command": "nasm",
        "P-Summary": "netwid assembl portabl 80x86 assembl",
        "P-Tasks": "add directori must written trail slash includ file search path assembl assembl sourc asm binari file output_fil specifi format assembl sourc asm binari file sourc default raw binari format assembl gener assembl list file list valid output format along basic nasm help",
        "Summary": "The Netwide Assembler, a portable 80x86 assembler.",
        "Task-Script": {
            "Add a directory (must be written with trailing slash) to the include file search path before assembling": "nasm -i {{/path/to/include_dir/}} {{source.asm}}",
            "Assemble `source.asm` into a binary file `output_file`, in the specified format": "nasm -f {{format}} {{source.asm}} -o {{output_file}}",
            "Assemble `source.asm` into a binary file `source`, in the (default) raw binary format": "nasm {{source.asm}}",
            "Assemble and generate an assembly listing file": "nasm -l {{list_file}} {{source.asm}}",
            "List valid output formats (along with basic nasm help)": "nasm -hf"
        }
    },
    "common_nativefier": {
        "Category": "common",
        "Command": "nativefier",
        "P-Summary": "command-lin tool creat desktop app web site minim configur",
        "P-Tasks": "creat desktop app custom name make desktop app websit use custom icon png",
        "Summary": "Command-line tool to create a desktop app for any web site with minimal configuration.",
        "Task-Script": {
            "Create a desktop app with a custom name": "nativefier --name {{name}} {{url}}",
            "Make a desktop app for a website": "nativefier {{url}}",
            "Use a custom icon, should be a PNG": "nativefier --icon {{path/to/icon.png}} {{url}}"
        }
    },
    "common_nc": {
        "Category": "common",
        "Command": "nc",
        "P-Summary": "netcat versatil util work tcp udp data",
        "P-Tasks": "act proxi forward data local tcp port given remot host client stay eof connect certain port write port listen specifi port print data receiv receiv file scan open port specifi host serv file server stay client detach set timeout",
        "Summary": "Netcat is a versatile utility for working with TCP or UDP data.",
        "Task-Script": {
            "Act as proxy and forward data from a local TCP port to the given remote host": "nc -l {{local_port}} | nc {{hostname}} {{remote_port}}",
            "Client stay up after EOF": "nc -q {{timeout}} {{ip_address}}",
            "Connect to a certain port (you can then write to this port)": "nc {{ip_address}} {{port}}",
            "Listen on a specified port and print any data received": "nc -l {{port}}",
            "Receive a file": "nc {{ip_address}} {{port}} > {{file}}",
            "Scan the open ports of a specified host": "nc -v -z {{ip_address}} {{port}}",
            "Serve a file": "nc -l {{port}} < {{file}}",
            "Server stay up after client detach": "nc -k -l {{port}}",
            "Set a timeout": "nc -w {{timeout_in_seconds}} {{ipaddress}} {{port}}"
        }
    },
    "common_ncmpcpp": {
        "Category": "common",
        "Command": "ncmpcpp",
        "P-Summary": "command line music player client music player daemon",
        "P-Tasks": "connect music player daemon given host port display metadata current song consol use differ set key bind file use specifi configur file",
        "Summary": "A command line music player client for the Music Player Daemon.",
        "Task-Script": {
            "Connect to a music player daemon on a given host and port": "ncmpcpp --host {{ip}} --port {{port}}",
            "Display metadata of the current song to console": "ncmpcpp --current-song",
            "Use a different set of key bindings from a file": "ncmpcpp --bindings {{file}}",
            "Use a specified configuration file": "ncmpcpp --config {{file}}"
        }
    },
    "common_ned": {
        "Category": "common",
        "Command": "ned",
        "P-Summary": "like grep power replac capabl\nunlik sed restrict line orient edit",
        "P-Tasks": "preview result find replac without updat target file recurs search start current directori ignor case replac chang case replac use number group refer search alway show color output search ignor certain file search never show color output simpl replac",
        "Summary": "Is like `grep` but with powerful replace capabilities.\nUnlike `sed`, as it isn't restricted to line oriented editing.",
        "Task-Script": {
            "Preview results of a find and replace without updating the target files": "ned '{{^[sb]ad}}' --replace '{{happy}}' --stdout {{.}}",
            "Recursively search starting in the current directory, ignoring case": "ned --ignore-case --recursive '{{^[dl]og}}' {{.}}",
            "Replace changing case": "ned '{{([a-z]+) dog}}' --case-replacements --replace '{{\\U$1\\E! dog}}' --stdout {{.}}",
            "Replace using numbered group references": "ned '{{the ([a-z]+) dog and the ([a-z]+) dog}}' --replace '{{the $2 dog and the $1 dog}}' {{.}}",
            "Search always showing colored output": "ned --colors '{{^[dl]og}}' {{.}}",
            "Search ignoring certain files": "ned --recursive --exclude '{{*.htm}}' '{{^[dl]og}}' {{.}}",
            "Search never showing colored output": "ned --colors=never '{{^[dl]og}}' {{.}}",
            "Simple replace": "ned '{{dog}}' --replace '{{cat}}' {{.}}"
        }
    },
    "common_neofetch": {
        "Category": "common",
        "Command": "neofetch",
        "P-Summary": "cli tool display inform oper system softwar hardwar",
        "P-Tasks": "enabl disabl cpu brand output hide show os architectur return default config creat first time program run trigger info line appear output infonam function name config file e g\nmemori",
        "Summary": "CLI tool to display information about your operating system, software and hardware.",
        "Task-Script": {
            "Enable/Disable CPU brand in output": "neofetch --cpu_brand {{on|off}}",
            "Hide/Show OS architecture": "neofetch --os_arch {{on|off}}",
            "Return the default config, and create it if it's the first time the program runs": "neofetch",
            "Trigger an info line from appearing in the output, where 'infoname' is the function name in the config file, e.g. memory": "neofetch --{{enable|disable}} {{infoname}}"
        }
    },
    "common_netlify": {
        "Category": "common",
        "Command": "netlify",
        "P-Summary": "deploy site configur continu deploy netlifi platform",
        "P-Tasks": "configur continu deploy new exist site deploy content directori netlifi login netlifi account start local dev server",
        "Summary": "Deploy sites and configure continuous deployment to the Netlify platform.",
        "Task-Script": {
            "Configure continuous deployment for a new or an existing site": "netlify init",
            "Deploy the contents of a directory to Netlify": "netlify deploy",
            "Login to the Netlify account": "netlify login",
            "Start a local dev server": "netlify dev"
        }
    },
    "common_newman": {
        "Category": "common",
        "Command": "newman",
        "P-Summary": "collect runner postman",
        "P-Tasks": "run collect url run collect file",
        "Summary": "Collection runner for Postman.",
        "Task-Script": {
            "Run a collection (from a URL)": "newman run {{https://www.getpostman.com/collections/631643-f695cab7-6878-eb55-7943-ad88e1ccfd65-JsLv}}",
            "Run a collection (from a file)": "newman run {{path/to/collection.json}}"
        }
    },
    "common_newsboat": {
        "Category": "common",
        "Command": "newsboat",
        "P-Summary": "rss atom feed reader text termin",
        "P-Tasks": "altern add feed manual first import feed url opml file see keyboard shortcut relev visibl statu line start newsboat refresh feed startup",
        "Summary": "An RSS/Atom feed reader for text terminals.",
        "Task-Script": {
            "Alternatively, add feeds manually": "echo {{http://example.com/path/to/feed}} >> \"${HOME}/.newsboat/urls\"",
            "First import feed URLs from an OPML file": "newsboat -i {{my-feeds.xml}}",
            "See keyboard shortcuts (the most relevant are visible in the status line)": "?",
            "Start newsboat and refresh all feeds on startup": "newsboat -r"
        }
    },
    "common_nextflow": {
        "Category": "common",
        "Command": "nextflow",
        "P-Summary": "tool run comput pipelin\nmostli use bioinformat workflow",
        "P-Tasks": "list download project pull latest version remot workflow bitbucket remov cach intermedi file specif run run pipelin use cach result previou run run specif releas remot workflow github run given work directori intermedi file save execut report show detail previou run current directori updat nextflow",
        "Summary": "Tool for running computational pipelines. Mostly used for bioinformatics workflows.",
        "Task-Script": {
            "List all downloaded projects": "nextflow list",
            "Pull the latest version of a remote workflow from Bitbucket": "nextflow pull {{user/repo}} -hub bitbucket",
            "Remove cache and intermediate files for a specific run": "nextflow clean -force {{run_name}}",
            "Run a pipeline, use cached results from previous runs": "nextflow run {{main.nf}} -resume",
            "Run a specific release of a remote workflow from GitHub": "nextflow run {{user/repo}} -revision {{release_tag}}",
            "Run with a given work directory for intermediate files, save execution report": "nextflow run {{workflow}} -work-dir {{/path/to/directory}} -with-report {{report.html}}",
            "Show details of previous runs in current directory": "nextflow log",
            "Update Nextflow": "nextflow self-update"
        }
    },
    "common_nf-core": {
        "Category": "common",
        "Command": "nf-core",
        "P-Summary": "nf-core framework tool creat check develop best-practic guidelin nextflow",
        "P-Tasks": "bump softwar version pipelin recip creat new pipelin skeleton download nf-core pipelin offlin use launch nf-core pipelin lint pipelin code list exist pipelin nf-core",
        "Summary": "The nf-core framework tools, to create, check and develop best-practice guidelines for Nextflow.",
        "Task-Script": {
            "Bump software versions in pipeline recipe": "nf-core bump-version {{path/to/directory}} {{new_version}}",
            "Create a new pipeline skeleton": "nf-core create",
            "Download an nf-core pipeline for offline use": "nf-core download {{pipeline_name}}",
            "Launch an nf-core pipeline": "nf-core launch {{pipeline_name}}",
            "Lint the pipeline code": "nf-core lint {{path/to/directory}}",
            "List existing pipelines on nf-core": "nf-core list"
        }
    },
    "common_ng": {
        "Category": "common",
        "Command": "ng",
        "P-Summary": "command line interfac cli creat manag angular applic",
        "P-Tasks": "add new class one applic add new compon one applic add new direct one applic build applic check version current angular instal creat new angular applic insid directori run applic follow command root directori run unit test",
        "Summary": "Command Line Interface (CLI) for creating and managing Angular applications.",
        "Task-Script": {
            "Add a new class to one's application": "ng generate class {{class_name}}",
            "Add a new component to one's application": "ng generate component {{component_name}}",
            "Add a new directive to one's application": "ng generate directive {{directive_name}}",
            "Build the application": "ng build",
            "Check the version of your current Angular installation": "ng version",
            "Create a new Angular application inside a directory": "ng new {{project_name}}",
            "Run the application with the following command in its root directory": "ng serve",
            "Run unit tests": "ng test"
        }
    },
    "common_nginx": {
        "Category": "common",
        "Command": "nginx",
        "P-Summary": "nginx web server",
        "P-Tasks": "reload configur send signal downtim start server custom config file start server prefix rel path config file start server default config file test configur without affect run server",
        "Summary": "Nginx web server.",
        "Task-Script": {
            "Reload the configuration by sending a signal with no downtime": "nginx -s reload",
            "Start server with a custom config file": "nginx -c {{config_file}}",
            "Start server with a prefix for all relative paths in the config file": "nginx -c {{config_file}} -p {{prefix/for/relative/paths}}",
            "Start server with the default config file": "nginx",
            "Test the configuration without affecting the running server": "nginx -t"
        }
    },
    "common_ngrep": {
        "Category": "common",
        "Command": "ngrep",
        "P-Summary": "filter network traffic packet use regular express",
        "P-Tasks": "captur traffic cross port 22 interfac eth0 captur traffic host captur traffic specif interfac captur traffic interfac filter keyword user-ag : interfac eth0",
        "Summary": "Filter network traffic packets using regular expressions.",
        "Task-Script": {
            "Capture traffic crossing port 22 of interface eth0": "ngrep -d {{eth0}} port {{22}}",
            "Capture traffic from or to a host": "ngrep host {{www.example.com}}",
            "Capture traffic of a specific interface": "ngrep -d {{eth0}}",
            "Capture traffic of all interfaces": "ngrep -d any",
            "Filter keyword 'User-Agent:' of interface eth0": "ngrep -d {{eth0}} '{{User-Agent:}}'"
        }
    },
    "common_ngrok": {
        "Category": "common",
        "Command": "ngrok",
        "P-Summary": "revers proxi creat secur tunnel public endpoint local run web servic",
        "P-Tasks": "expos tcp traffic given port expos tl traffic specif host port expos local http servic given port expos local http servic specif host expos local http server",
        "Summary": "Reverse proxy that creates a secure tunnel from a public endpoint to a locally running web service.",
        "Task-Script": {
            "Expose TCP traffic on a given port": "ngrok tcp {{22}}",
            "Expose TLS traffic for a specific host and port": "ngrok tls -hostname={{foo.com}} {{443}}",
            "Expose a local HTTP service on a given port": "ngrok http {{80}}",
            "Expose a local HTTP service on a specific host": "ngrok http {{foo.dev}}:{{80}}",
            "Expose a local HTTPS server": "ngrok http https://localhost"
        }
    },
    "common_nice": {
        "Category": "common",
        "Command": "nice",
        "P-Summary": "execut program custom schedul prioriti nice\nnice valu rang -20 highest prioriti 19 lowest",
        "P-Tasks": "launch program alter prioriti",
        "Summary": "Execute a program with a custom scheduling priority (niceness).\nNiceness values range from -20 (the highest priority) to 19 (the lowest).",
        "Task-Script": {
            "Launch a program with altered priority": "nice -n {{niceness_value}} {{command}}"
        }
    },
    "common_nikto": {
        "Category": "common",
        "Command": "nikto",
        "P-Summary": "web server scanner perform test web server multipl item",
        "P-Tasks": "perform basic nikto scan target host scan multipl port scan session scan port protocol full url syntax specifi port number perform basic scan updat latest plugin databas",
        "Summary": "Web server scanner which performs tests against web servers for multiple items.",
        "Task-Script": {
            "Perform a basic Nikto scan against a target host": "perl nikto.pl -h {{192.168.0.1}}",
            "Scan multiple ports in the same scanning session": "perl nikto.pl -h {{192.168.0.1}} -p {{80,88,443}}",
            "Scan ports and protocols with full URL syntax": "perl nikto.pl -h {{https://192.168.0.1:443/}}",
            "Specify the port number when performing a basic scan": "perl nikto.pl -h {{192.168.0.1}} -p {{443}}",
            "Update to the latest plugins and databases": "perl nikto.pl -update"
        }
    },
    "common_nim": {
        "Category": "common",
        "Command": "nim",
        "P-Summary": "nim compil\nprocess compil link nim languag sourc file",
        "P-Tasks": "build releas binari optim low file size compil sourc file compil sourc file releas optim enabl compil run sourc file gener html document modul output place current directori",
        "Summary": "The Nim compiler.\nProcesses, compiles and links Nim language source files.",
        "Task-Script": {
            "Build a release binary optimized for low file size": "nim compile -d:release --opt:size {{file.nim}}",
            "Compile a source file": "nim compile {{file.nim}}",
            "Compile a source file with release optimizations enabled": "nim compile -d:release {{file.nim}}",
            "Compile and run a source file": "nim compile -r {{file.nim}}",
            "Generate HTML documentation for a module (output will be placed in the current directory)": "nim doc {{file.nim}}"
        }
    },
    "common_nimble": {
        "Category": "common",
        "Command": "nimble",
        "P-Summary": "packag manag nim program languag\nmanag nim project depend",
        "P-Tasks": "build nimbl packag creat new nimbl packag current directori instal nimbl packag instal packag list instal packag search packag",
        "Summary": "Package manager for the Nim programming language.\nManage Nim projects and their dependencies.",
        "Task-Script": {
            "Build a Nimble package": "nimble build",
            "Create a new Nimble package in the current directory": "nimble init",
            "Install a Nimble package": "nimble install",
            "Install a package": "nimble install {{package_name}}",
            "List installed packages": "nimble list -i",
            "Search for packages": "nimble search {{search_string}}"
        }
    },
    "common_ninja": {
        "Category": "common",
        "Command": "ninja",
        "P-Summary": "build system design fast",
        "P-Tasks": "build program given directori build current directori show help show target e g\ninstal uninstal",
        "Summary": "A Build system designed to be fast.",
        "Task-Script": {
            "Build a program in a given directory": "ninja -C {{path/to/directory}}",
            "Build in the current directory": "ninja",
            "Show help": "ninja -h",
            "Show targets (e.g. `install` and `uninstall`)": "ninja -t targets"
        }
    },
    "common_nix": {
        "Category": "common",
        "Command": "nix",
        "P-Summary": "util nix languag store",
        "P-Tasks": "optimis nix store disk usag combin duplic file search packag via name descript start nix shell specifi packag avail start interact environ evalu nix express upgrad nix latest stabl version",
        "Summary": "Utilities for the Nix language and store.",
        "Task-Script": {
            "Optimise Nix store disk usage by combining duplicate files": "nix optimise-store",
            "Search for a package via its name or description": "nix search {{search_term}}",
            "Start a Nix shell with the specified packages available": "nix run {{nixpkgs.pkg1 nixpkgs.pkg2 nixpkgs.pkg3...}}",
            "Start an interactive environment for evaluating Nix expressions": "nix repl",
            "Upgrade Nix to the latest stable version": "nix upgrade-nix"
        }
    },
    "common_nix-build": {
        "Category": "common",
        "Command": "nix-build",
        "P-Summary": "build nix express",
        "P-Tasks": "build nix express build sandbox nix express non-nixo",
        "Summary": "Build a Nix expression.",
        "Task-Script": {
            "Build a Nix expression": "nix-build --attr {{expression_name}}",
            "Build a sandboxed Nix expression (on non-nixOS)": "nix-build --attr {{expression_name}} --option sandbox true"
        }
    },
    "common_nix-collect-garbage": {
        "Category": "common",
        "Command": "nix-collect-garbage",
        "P-Summary": "delet unus unreach nix store path\ngener list use nix-env -- list-gener",
        "P-Tasks": "delet store path older 30 day delet store path unus current gener profil simul delet old store path",
        "Summary": "Delete unused and unreachable nix store paths.\nGenerations can be listed using `nix-env --list-generations`.",
        "Task-Script": {
            "Delete all store paths older than 30 days": "sudo nix-collect-garbage --delete-older-than {{30d}}",
            "Delete all store paths unused by current generations of each profile": "sudo nix-collect-garbage --delete-old",
            "Simulate the deletion of old store paths": "sudo nix-collect-garbage --delete-old --dry-run"
        }
    },
    "common_nix-env": {
        "Category": "common",
        "Command": "nix-env",
        "P-Summary": "manipul queri nix user environ",
        "P-Tasks": "instal packag url instal packag list instal packag queri avail packag queri instal packag uninstal packag upgrad packag upgrad one packag",
        "Summary": "Manipulate or query Nix user environments.",
        "Task-Script": {
            "Install a package from a URL": "nix-env -i {{pkg_name}} --file {{example.com}}",
            "Install package": "nix-env -iA nixpkgs.{{pkg_name}}",
            "List all installed packages": "nix-env -q",
            "Query available packages": "nix-env -qa {{search_term}}",
            "Query installed packages": "nix-env -q {{search_term}}",
            "Uninstall package": "nix-env -e {{pkg_name}}",
            "Upgrade all packages": "nix-env -u",
            "Upgrade one package": "nix-env -u {{pkg_name}}"
        }
    },
    "common_nkf": {
        "Category": "common",
        "Command": "nkf",
        "P-Summary": "network kanji filter\nconvert kanji code one encod anoth",
        "P-Tasks": "convert shift_ji encod convert utf-8 encod convert utf-8 encod overwrit file decrypt mime file overwrit set new line code crlf overwrit window type set new line code lf overwrit unix type",
        "Summary": "Network kanji filter.\nConverts kanji code from one encoding to another.",
        "Task-Script": {
            "Convert to SHIFT_JIS encoding": "nkf -s {{path/to/file.txt}}",
            "Convert to UTF-8 encoding": "nkf -w {{path/to/file.txt}}",
            "Convert to UTF-8 encoding and overwrite the file": "nkf -w --overwrite {{path/to/file.txt}}",
            "Decrypt mime file and overwrite": "nkf -m --overwrite {{path/to/file.txt}}",
            "Set new line code to CRLF and overwrite (windows type)": "nkf -c --overwrite {{path/to/file.txt}}",
            "Set new line code to LF and overwrite (unix type)": "nkf -d --overwrite {{path/to/file.txt}}"
        }
    },
    "common_nl": {
        "Category": "common",
        "Command": "nl",
        "P-Summary": "util number line either file standard input",
        "P-Tasks": "number line includ blank line number non-blank line file number bodi line match basic regular express bre pattern number line printabl text read standard output",
        "Summary": "A utility for numbering lines, either from a file, or from standard input.",
        "Task-Script": {
            "Number all lines including blank lines": "nl -b a {{file}}",
            "Number non-blank lines in a file": "nl {{file}}",
            "Number only the body lines that match a basic regular expression (BRE) pattern": "nl -b p'FooBar[0-9]' {{file}}",
            "Number only the lines with printable text": "nl -t {{file}}",
            "Read from standard output": "cat {{file}} | nl {{options}} -"
        }
    },
    "common_nmap": {
        "Category": "common",
        "Command": "nmap",
        "P-Summary": "network explor tool secur port scanner\nfeatur activ nmap run privileg",
        "P-Tasks": "also enabl script servic detect os fingerprint tracerout assum good network connect speed execut check ip address guess remot host oper system like also run default 1000-port tcp scan host seem perform tcp udp scan use -su udp -sz sctp -so ip perform tl cipher scan host determin support cipher ssl tl protocol perform full port servic version detect scan default nse script activ host determin weak info scan specif list port use -p- port 1-65535 tri determin whether specifi host name",
        "Summary": "Network exploration tool and security / port scanner.\nSome features only activate when Nmap is run with privileges.",
        "Task-Script": {
            "Also enable scripts, service detection, OS fingerprinting and traceroute": "nmap -A {{address_or_addresses}}",
            "Assume good network connection and speed up execution": "nmap -T4 {{address_or_addresses}}",
            "Check if an IP address is up, and guess the remote host's operating system": "nmap -O {{ip_or_hostname}}",
            "Like above, but also run a default 1000-port TCP scan if host seems up": "nmap {{ip_or_hostname}} {{optional_another_address}}",
            "Perform TCP and UDP scanning (use -sU for UDP only, -sZ for SCTP, -sO for IP)": "nmap -sSU {{address_or_addresses}}",
            "Perform TLS cipher scan against a host to determine supported ciphers and SSL/TLS protocols": "nmap --script ssl-enum-ciphers {{address_or_addresses}} -p 443",
            "Perform full port, service, version detection scan with all default NSE scripts active against a host to determin weaknesses and info": "nmap -sC -sV {{address_or_addresses}}",
            "Scan a specific list of ports (use -p- for all ports 1-65535)": "nmap -p {{port1,port2,…,portN}} {{address_or_addresses}}",
            "Try to determine whether the specified hosts are up and what are their names": "nmap -sn {{ip_or_hostname}} {{optional_another_address}}"
        }
    },
    "common_node": {
        "Category": "common",
        "Command": "node",
        "P-Summary": "server-sid javascript platform node js",
        "P-Tasks": "activ inspector paus execut debugg connect sourc code fulli pars evalu javascript code pass argument evalu print result use see node depend version run javascript file start repl interact shell",
        "Summary": "Server-side JavaScript platform (Node.js).",
        "Task-Script": {
            "Activate inspector, pausing execution until a debugger is connected once source code is fully parsed": "node --no-lazy --inspect-brk {{path/to/file}}",
            "Evaluate JavaScript code by passing it as an argument": "node -e \"{{code}}\"",
            "Evaluate and print result, useful to see node's dependencies versions": "node -p \"{{process.versions}}\"",
            "Run a JavaScript file": "node {{path/to/file}}",
            "Start a REPL (interactive shell)": "node"
        }
    },
    "common_nodemon": {
        "Category": "common",
        "Command": "nodemon",
        "P-Summary": "watch file automat restart node applic chang detect",
        "P-Tasks": "execut specifi file watch specif file chang ignor specif file manual restart nodemon note nodemon must alreadi activ work pass argument node applic run non-nod script",
        "Summary": "Watch files and automatically restart a node application when changes are detected.",
        "Task-Script": {
            "Execute the specified file and watch a specific file for changes": "nodemon --inspect {{path/to/file.js}}",
            "Ignore specific files": "nodemon --ignore {{path/to/file_or_directory}}",
            "Manually restart nodemon (note nodemon must already be active for this to work)": "rs",
            "Pass arguments to the node application": "nodemon {{path/to/file.js}} {{arguments}}",
            "Run non-node scripts": "nodemon --exec \"{{python --verbose}}\" {{path/to/file.py}}"
        }
    },
    "common_nodenv": {
        "Category": "common",
        "Command": "nodenv",
        "P-Summary": "tool manag nodej version",
        "P-Tasks": "display list avail version display node js version current directori display locat node js instal command e g\nnpm instal specif version node js use specif version node js across whole system use specif version node js directori",
        "Summary": "A tool to manage NodeJS versions.",
        "Task-Script": {
            "Display a list of available versions": "nodenv install --list",
            "Display the Node.js version for the current directory": "nodenv version",
            "Display the location of a Node.js installed command (e.g. `npm`)": "nodenv which {{command}}",
            "Install a specific version of Node.js": "nodenv install {{version}}",
            "Use a specific version of Node.js across the whole system": "nodenv global {{version}}",
            "Use a specific version of Node.js with a directory": "nodenv local {{version}}"
        }
    },
    "common_nohup": {
        "Category": "common",
        "Command": "nohup",
        "P-Summary": "allow process live termin get kill",
        "P-Tasks": "run process live beyond termin",
        "Summary": "Allows for a process to live when the terminal gets killed.",
        "Task-Script": {
            "Run process that can live beyond the terminal": "nohup {{command options}}"
        }
    },
    "common_nokogiri": {
        "Category": "common",
        "Command": "nokogiri",
        "P-Summary": "html xml sax reader parser",
        "P-Tasks": "load specif initialis file pars pars specif type pars content url file pars use specif encod valid use relax ng file",
        "Summary": "An HTML, XML, SAX and Reader parser.",
        "Task-Script": {
            "Load a specific initialisation file before parsing": "nokogiri {{url|path/to/file}} -C {{path/to/config_file}}",
            "Parse as a specific type": "nokogiri {{url|path/to/file}} --type {{xml|html}}",
            "Parse the contents of a url or file": "nokogiri {{url|path/to/file}}",
            "Parse using a specific encoding": "nokogiri {{url|path/to/file}} --encoding {{encoding}}",
            "Validate using a RELAX NG file": "nokogiri {{url|path/to/file}} --rng {{url|path/to/file}}"
        }
    },
    "common_nomad": {
        "Category": "common",
        "Command": "nomad",
        "P-Summary": "distribut highli avail datacenter-awar schedul",
        "P-Tasks": "follow log specif alloc plan job execut cluster run job cluster show detail statu inform specif job show statu job current run cluster show statu node cluster show statu storag volum valid job file",
        "Summary": "Distributed, highly available, datacenter-aware scheduler.",
        "Task-Script": {
            "Follow the logs of a specific allocation": "nomad alloc logs {{alloc_id}}",
            "Plan a job for execution on the cluster": "nomad job plan {{path/to/file.nomad}}",
            "Run a job on the cluster": "nomad job run {{path/to/file.nomad}}",
            "Show the detailed status information about a specific job": "nomad job status {{job_name}}",
            "Show the status of jobs currently running on the cluster": "nomad job status",
            "Show the status of nodes in the cluster": "nomad node status",
            "Show the status of storage volumes": "nomad volume status",
            "Validate a job file": "nomad job validate {{path/to/file.nomad}}"
        }
    },
    "common_noti": {
        "Category": "common",
        "Command": "noti",
        "P-Summary": "monitor process trigger banner notif",
        "P-Tasks": "display notif even put command watch display notif tar finish compress file monitor process pid trigger notif pid disappear",
        "Summary": "Monitor a process and trigger a banner notification.",
        "Task-Script": {
            "Display a notification even when you put it after the command to watch": "{{command_to_watch}}; noti",
            "Display a notification when tar finishes compressing files": "noti {{tar -cjf example.tar.bz2 example/}}",
            "Monitor a process by PID and trigger a notification when the PID disappears": "noti -w {{process_id}}"
        }
    },
    "common_notmuch": {
        "Category": "common",
        "Command": "notmuch",
        "P-Summary": "command-lin base program index search read tag larg collect email messag\ninform : http : notmuchmail org manpag",
        "P-Tasks": "add tag messag match search term configur first use count messag match given search term creat repli templat set messag limit number search result x remov tag messag match search term search messag match given search term",
        "Summary": "Command-line based program for indexing, searching, reading, and tagging large collections of email messages.\nMore Information: <https://notmuchmail.org/manpages/>.",
        "Task-Script": {
            "Add a tag for all messages matching a search term": "notmuch tag +{{custom_tag}} \"{{search_term}}\"",
            "Configure for first use": "notmuch setup",
            "Count messages matching the given search term": "notmuch count --output={{messages|threads}} \"{{search_term}}\"",
            "Create a reply template for a set of messages": "notmuch reply --format={{default|headers-only}} --reply-to={{sender|all}} \"{{search_term}}\"",
            "Limit the number of search results to X": "notmuch search --format={{json|text}} --output={{summary|threads|messages|files|tags}} --limit={{X}} \"{{search_term}}\"",
            "Remove a tag for all messages matching a search term": "notmuch tag -{{custom_tag}} \"{{search_term}}\"",
            "Search for messages matching the given search term": "notmuch search --format={{json|text}} --output={{summary|threads|messages|files|tags}} \"{{search_term}}\""
        }
    },
    "common_now": {
        "Category": "common",
        "Command": "now",
        "P-Summary": "cloud platform serverless deploy",
        "P-Tasks": "deploy current directori display list deploy display inform relat deploy initi exampl project new directori creat log account creat new one remov deploy",
        "Summary": "Cloud platform for serverless deployment.",
        "Task-Script": {
            "Deploy the current directory": "now",
            "Display a list of deployments": "now list",
            "Display information related to a deployment": "now inspect {{deployment_url}}",
            "Initialize an example project (a new directory will be created)": "now init",
            "Log in into an account or create a new one": "now login",
            "Remove a deployment": "now remove {{deployment_id}}"
        }
    },
    "common_npm": {
        "Category": "common",
        "Command": "npm",
        "P-Summary": "javascript node js packag manag\nmanag node js project modul depend",
        "P-Tasks": "download packag add list dev depend packag json download packag instal global download specif version packag add list depend packag json download packag list depend packag json interact creat packag json file list top-level global instal modul print tree locally-instal depend uninstal packag remov list depend packag json",
        "Summary": "JavaScript and Node.js package manager.\nManage Node.js projects and their module dependencies.",
        "Task-Script": {
            "Download a package and add it to the list of dev dependencies in package.json": "npm install {{module_name}} --save-dev",
            "Download a package and install it globally": "npm install -g {{module_name}}",
            "Download a specific version of a package and add it to the list of dependencies in package.json": "npm install {{module_name}}@{{version}}",
            "Download all the packages listed as dependencies in package.json": "npm install",
            "Interactively create a package.json file": "npm init",
            "List top-level globally installed modules": "npm list -g --depth={{0}}",
            "Print a tree of locally-installed dependencies": "npm list",
            "Uninstall a package and remove it from the list of dependencies in package.json": "npm uninstall {{module_name}}"
        }
    },
    "common_npm-check": {
        "Category": "common",
        "Command": "npm-check",
        "P-Summary": "check outdat incorrect unus npm packag depend",
        "P-Tasks": "display report outdat incorrect unus depend check unus packag interact updat out-of-d packag updat everyth without prompt",
        "Summary": "Check for outdated, incorrect, and unused npm package dependencies.",
        "Task-Script": {
            "Display a report of outdated, incorrect, and unused dependencies": "npm-check",
            "Don't check for unused packages": "npm-check --skip-unused",
            "Interactively update out-of-date packages": "npm-check --update",
            "Update everything without prompting": "npm-check --update-all"
        }
    },
    "common_npm-why": {
        "Category": "common",
        "Command": "npm-why",
        "P-Summary": "identifi npm packag instal",
        "P-Tasks": "show npm packag instal",
        "Summary": "Identifies why an npm package is installed.",
        "Task-Script": {
            "Show why an npm package is installed": "npm-why {{package-name}}"
        }
    },
    "common_nproc": {
        "Category": "common",
        "Command": "nproc",
        "P-Summary": "print number process unit normal cpu avail",
        "P-Tasks": "display number avail process unit display number instal process unit includ inact one possibl subtract given number unit return valu",
        "Summary": "Print the number of processing units (normally CPUs) available.",
        "Task-Script": {
            "Display the number of available processing units": "nproc",
            "Display the number of installed processing units, including any inactive ones": "nproc --all",
            "If possible, subtract a given number of units from the returned value": "nproc --ignore {{count}}"
        }
    },
    "common_npx": {
        "Category": "common",
        "Command": "npx",
        "P-Summary": "execut binari npm packag",
        "P-Tasks": "execut binari given npm modul case packag multipl binari specifi packag name along binari view help content",
        "Summary": "Execute binaries from `npm` packages.",
        "Task-Script": {
            "Execute the binary from a given npm module": "npx {{module_name}}",
            "In case a package has multiple binaries, specify the package name along with the binary": "npx -p {{package_name}} {{module_name}}",
            "View help contents": "npx --help"
        }
    },
    "common_nrm": {
        "Category": "common",
        "Command": "nrm",
        "P-Summary": "npm registri manag\nhelp easili switch differ npm registri",
        "P-Tasks": "add custom registri chang particular registri delet registri list registri show respons time registri",
        "Summary": "NPM registry manager.\nHelps to easily switch between different npm registries.",
        "Task-Script": {
            "Add a custom registry": "nrm add {{registry}} {{url}}",
            "Change to a particular registry": "nrm use {{registry}}",
            "Delete a registry": "nrm del {{registry}}",
            "List all registries": "nrm ls",
            "Show the response time for all registries": "nrm test"
        }
    },
    "common_nslookup": {
        "Category": "common",
        "Command": "nslookup",
        "P-Summary": "queri name server variou domain record",
        "P-Tasks": "queri given name server ns record domain queri given name server whole zone file zone transfer domain use tcp protocol queri given name server specif port number txt record domain queri avail record use tcp protocol queri mail server mx record domain show detail transact queri revers lookup ptr record ip address queri system default name server ip address record domain",
        "Summary": "Query name server(s) for various domain records.",
        "Task-Script": {
            "Query a given name server for a NS record of the domain": "nslookup -type=NS {{example.com}} {{8.8.8.8}}",
            "Query a given name server for the whole zone file (zone transfer) of the domain using TCP protocol": "nslookup -vc -type=AXFR {{example.com}} {{name_server}}",
            "Query a given name server on a specific port number for a TXT record of the domain": "nslookup -port={{port_number}} -type=TXT {{example.com}} {{name_server}}",
            "Query for ANY available records using TCP protocol": "nslookup -vc -type=ANY {{example.com}}",
            "Query for a mail server (MX record) of the domain, showing details of the transaction": "nslookup -type=MX -debug {{example.com}}",
            "Query for a reverse lookup (PTR record) of an IP address": "nslookup -type=PTR {{54.240.162.118}}",
            "Query your system's default name server for an IP address (A record) of the domain": "nslookup {{example.com}}"
        }
    },
    "common_numfmt": {
        "Category": "common",
        "Command": "numfmt",
        "P-Summary": "convert number human-read string",
        "P-Tasks": "convert 1 5k si unit 1500 convert 5th field 1-index iec unit without convert header convert iec unit pad 5 charact left align",
        "Summary": "Convert numbers to and from human-readable strings.",
        "Task-Script": {
            "Convert 1.5K (SI Units) to 1500": "numfmt --from={{si}} {{1.5K}}",
            "Convert 5th field (1-indexed) to IEC Units without converting header": "ls -l | numfmt --header={{1}} --field={{5}} --to={{iec}}",
            "Convert to IEC units, pad with 5 characters, left aligned": "du -s * | numfmt --to={{iec}} --format=\"{{%-5f}}\""
        }
    },
    "common_nvidia-smi": {
        "Category": "common",
        "Command": "nvidia-smi",
        "P-Summary": "aid manag monitor nvidia gpu devic",
        "P-Tasks": "display inform avail gpu process use display detail gpu inform monitor overal gpu usag 1-second updat interv",
        "Summary": "Aid the management and monitoring of NVIDIA GPU devices.",
        "Task-Script": {
            "Display information on all available GPUs and processes using them": "nvidia-smi",
            "Display more detailed GPU information": "nvidia-smi --query",
            "Monitor overall GPU usage with 1-second update interval": "nvidia-smi dmon"
        }
    },
    "common_nvim": {
        "Category": "common",
        "Command": "nvim",
        "P-Summary": "neovim programm text editor base vim provid sever mode differ kind text manipul\npress enter edit mode\nesc goe back normal mode allow regular text insert",
        "P-Tasks": "copi yank cut delet current line past p enter text edit mode insert mode open file perform regex substitut whole file quit without save save write file quit search pattern file press n n go next previou match undo last oper",
        "Summary": "Neovim, a programmer's text editor based on Vim, provides several modes for different kinds of text manipulation.\nPressing `i` enters edit mode. `<Esc>` goes back to normal mode, which doesn't allow regular text insertion.",
        "Task-Script": {
            "Copy (\"yank\") or cut (\"delete\") the current line (paste it with `P`)": "<Esc>{{yy|dd}}",
            "Enter text editing mode (insert mode)": "<Esc>i",
            "Open a file": "nvim {{file}}",
            "Perform a regex substitution in the whole file": "<Esc>:%s/{{pattern}}/{{replacement}}/g<Enter>",
            "Quit without saving": "<Esc>:q!<Enter>",
            "Save (write) the file, and quit": "<Esc>:wq<Enter>",
            "Search for a pattern in the file (press `n`/`N` to go to next/previous match)": "<Esc>/{{search_pattern}}<Enter>",
            "Undo the last operation": "<Esc>u"
        }
    },
    "common_nvm": {
        "Category": "common",
        "Command": "nvm",
        "P-Summary": "instal uninstal switch node js version\nsupport version number like 0 12 v4 2 label like stabl system etc",
        "P-Tasks": "execut script specif version node js instal specif version node js launch repl specif version node js list avail node js version highlight default one set default node js version uninstal given node js version use specif version node js current shell",
        "Summary": "Install, uninstall or switch between Node.js versions.\nSupports version numbers like \"0.12\" or \"v4.2\", and labels like \"stable\", \"system\", etc.",
        "Task-Script": {
            "Execute a script in a specific version of Node.js": "nvm exec {{node_version}} node {{app.js}}",
            "Install a specific version of Node.js": "nvm install {{node_version}}",
            "Launch the REPL of a specific version of Node.js": "nvm run {{node_version}} --version",
            "List all available Node.js versions and highlight the default one": "nvm list",
            "Set the default Node.js version": "nvm alias default {{node_version}}",
            "Uninstall a given Node.js version": "nvm uninstall {{node_version}}",
            "Use a specific version of Node.js in the current shell": "nvm use {{node_version}}"
        }
    },
    "common_objdump": {
        "Category": "common",
        "Command": "objdump",
        "P-Summary": "view inform object file",
        "P-Tasks": "display complet binari hex dump section display dis-assembl output execut section display file header inform",
        "Summary": "View information about object files.",
        "Task-Script": {
            "Display a complete binary hex dump of all sections": "objdump -s {{binary}}",
            "Display the dis-assembled output of executable sections": "objdump -d {{binary}}",
            "Display the file header information": "objdump -f {{binary}}"
        }
    },
    "common_obs": {
        "Category": "common",
        "Command": "obs",
        "P-Summary": "open broadcast softwar\nvideo record livestream program",
        "P-Tasks": "automat start record video launch automat start stream launch automat start replay buffer launch launch ob launch ob portabl mode make log verbos debug minimis system tray launch",
        "Summary": "Open Broadcaster Software.\nVideo recording and livestreaming program.",
        "Task-Script": {
            "Automatically start recording a video on launch": "obs --startrecording",
            "Automatically start streaming on launch": "obs --startstreaming",
            "Automatically start the replay buffer on launch": "obs --startreplaybuffer",
            "Launch OBS": "obs",
            "Launch OBS in portable mode": "obs --portable",
            "Make the log more verbose (for debugging)": "obs --verbose",
            "Minimise to the system tray on launch": "obs --minimize-to-tray"
        }
    },
    "common_oc": {
        "Category": "common",
        "Command": "oc",
        "P-Summary": "openshift contain platform cli\nallow applic contain manag",
        "P-Tasks": "add new applic project creat new project list pod project log openshift contain platform server logout current session open remot shell session contain switch exist project",
        "Summary": "The OpenShift Container Platform CLI.\nAllows for application and container management.",
        "Task-Script": {
            "Add a new application to a project": "oc new-app {{repo_url}} --name {{application}}",
            "Create a new project": "oc new-project {{project_name}}",
            "List pods in a project": "oc get pods",
            "Log in to the OpenShift Container Platform server": "oc login",
            "Logout from the current session": "oc logout",
            "Open a remote shell session to a container": "oc rsh {{pod_name}}",
            "Switch to an existing project": "oc project {{project_name}}"
        }
    },
    "common_ocaml": {
        "Category": "common",
        "Command": "ocaml",
        "P-Summary": "ocaml repl read-evaluate-print-loop\ninterpret ocaml command",
        "P-Tasks": "read ocaml command file execut read ocaml command user execut",
        "Summary": "The OCaml repl (read-evaluate-print-loop).\nInterprets Ocaml commands.",
        "Task-Script": {
            "Read OCaml commands from a file and execute them": "ocaml {{path/to/file.ml}}",
            "Read OCaml commands from the user and execute them": "ocaml"
        }
    },
    "common_ocamlc": {
        "Category": "common",
        "Command": "ocamlc",
        "P-Summary": "ocaml bytecod compil\nproduc execut runnabl ocaml interpret",
        "P-Tasks": "automat gener modul signatur interfac file creat binari sourc file creat name binari sourc file",
        "Summary": "The OCaml bytecode compiler.\nProduces executables runnable by the OCaml interpreter.",
        "Task-Script": {
            "Automatically generate a module signature (interface) file": "ocamlc -i {{path/to/source_file.ml}}",
            "Create a binary from a source file": "ocamlc {{path/to/source_file.ml}}",
            "Create a named binary from a source file": "ocamlc -o {{path/to/binary}} {{path/to/source_file.ml}}"
        }
    },
    "common_ocamlfind": {
        "Category": "common",
        "Command": "ocamlfind",
        "P-Summary": "findlib packag manag ocaml\nsimplifi link execut extern librari",
        "P-Tasks": "compil sourc file bytecod binari link packag compil sourc file nativ binari link packag cross-compil differ platform",
        "Summary": "The findlib package manager for OCaml.\nSimplifies linking executables with external libraries.",
        "Task-Script": {
            "Compile a source file to a bytecode binary and link with packages": "ocamlfind ocamlc -package {{package1}},{{package2}} -linkpkg -o {{executable}} {{source_file.ml}}",
            "Compile a source file to a native binary and link with packages": "ocamlfind ocamlopt -package {{package1}},{{package2}} -linkpkg -o {{executable}} {{source_file.ml}}",
            "Cross-compile for a different platform": "ocamlfind -toolchain {{cross-toolchain}} ocamlopt -o {{executable}} {{source_file.ml}}"
        }
    },
    "common_ocamlopt": {
        "Category": "common",
        "Command": "ocamlopt",
        "P-Summary": "ocaml nativ code compil\nproduc nativ execut e g\nelf linux",
        "P-Tasks": "compil sourc file compil debug enabl",
        "Summary": "The OCaml native code compiler.\nProduces native executables, e.g. ELF on Linux.",
        "Task-Script": {
            "Compile a source file": "ocamlopt -o {{path/to/binary}} {{path/to/source_file.ml}}",
            "Compile with debugging enabled": "ocamlopt -g -o {{path/to/binary}} {{path/to/source_file.ml}}"
        }
    },
    "common_od": {
        "Category": "common",
        "Command": "od",
        "P-Summary": "display file content octal decim hexadecim format\noption display byte offset printabl represent line",
        "P-Tasks": "display file hexadecim format 1-byte unit 4 byte per line display file hexadecim format 2-byte unit byte offset decim format display file hexadecim format along charact represent print byte offset display file verbos mode e\nwithout replac duplic line display file use default set : octal format 8 byte per line byte offset octal duplic line replac read 100 byte file start 500th byte",
        "Summary": "Display file contents in octal, decimal or hexadecimal format.\nOptionally display the byte offsets and/or printable representation for each line.",
        "Task-Script": {
            "Display file in hexadecimal format (1-byte units), and 4 bytes per line": "od --format={{x1}} --width={{4}} -v {{path/to/file}}",
            "Display file in hexadecimal format (2-byte units), with byte offsets in decimal format": "od --format={{x}} --address-radix={{d}} -v {{path/to/file}}",
            "Display file in hexadecimal format along with its character representation, and do not print byte offsets": "od --format={{xz}} --address-radix={{n}} -v {{path/to/file}}",
            "Display file in verbose mode, i.e. without replacing duplicate lines with `*`": "od -v {{path/to/file}}",
            "Display file using default settings: octal format, 8 bytes per line, byte offsets in octal, and duplicate lines replaced with `*`": "od {{path/to/file}}",
            "Read only 100 bytes of a file starting from the 500th byte": "od --read-bytes {{100}} --skip-bytes={{500}} -v {{path/to/file}}"
        }
    },
    "common_odps": {
        "Category": "common",
        "Command": "odps",
        "P-Summary": "aliyun odp open data process servic command line tool",
        "P-Tasks": "describ partit describ tabl show tabl partit show tabl current project start command line custom configur file switch current project",
        "Summary": "Aliyun ODPS (Open Data Processing Service) command line tool.",
        "Task-Script": {
            "Describe a partition": "desc {{table_name}} partition ({{partition_spec}});",
            "Describe a table": "desc {{table_name}};",
            "Show table partitions": "show partitions {{table_name}};",
            "Show tables in the current project": "show tables;",
            "Start the command line with a custom configuration file": "odpscmd --config={{odps_config.ini}}",
            "Switch current project": "use {{project_name}};"
        }
    },
    "common_odps auth": {
        "Category": "common",
        "Command": "odps auth",
        "P-Summary": "user author odp open data process servic",
        "P-Tasks": "add user current project creat user role describ author role grant role user grant set author role grant set author user show author user",
        "Summary": "User authorities in ODPS (Open Data Processing Service).",
        "Task-Script": {
            "Add a user to the current project": "add user {{username}};",
            "Create a user role": "create role {{role_name}};",
            "Describe authorities of a role": "desc role {{role_name}};",
            "Grant a role to a user": "grant {{role_name}} to {{username}};",
            "Grant a set of authorities to a role": "grant {{action_list}} on {{object_type}} {{object_name}} to role {{role_name}};",
            "Grant a set of authorities to a user": "grant {{action_list}} on {{object_type}} {{object_name}} to user {{username}};",
            "Show authorities of a user": "show grants for {{username}};"
        }
    },
    "common_odps func": {
        "Category": "common",
        "Command": "odps func",
        "P-Summary": "manag function odp open data process servic",
        "P-Tasks": "creat java function use jar resourc creat python function use py resourc delet function show function current project",
        "Summary": "Manage functions in ODPS (Open Data Processing Service).",
        "Task-Script": {
            "Create a Java function using a .jar resource": "create function {{func_name}} as {{path.to.package.Func}} using '{{package.jar}}';",
            "Create a Python function using a .py resource": "create function {{func_name}} as {{script.Func}} using '{{script.py}}';",
            "Delete a function": "drop function {{func_name}};",
            "Show functions in the current project": "list functions;"
        }
    },
    "common_odps inst": {
        "Category": "common",
        "Command": "odps inst",
        "P-Summary": "manag instanc odp open data process servic",
        "P-Tasks": "check statu instanc describ detail instanc kill instanc show instanc creat current user wait termin instanc print log progress inform",
        "Summary": "Manage instances in ODPS (Open Data Processing Service).",
        "Task-Script": {
            "Check the status of an instance": "status {{instance_id}};",
            "Describe the details of an instance": "desc instance {{instance_id}};",
            "Kill an instance": "kill {{instance_id}};",
            "Show instances created by current user": "show instances;",
            "Wait on the termination of an instance, printing log and progress information until then": "wait {{instance_id}};"
        }
    },
    "common_odps resource": {
        "Category": "common",
        "Command": "odps resource",
        "P-Summary": "manag resourc odp open data process servic",
        "P-Tasks": "add jar resourc add py resourc add archiv resourc add file resourc delet resourc show resourc current project",
        "Summary": "Manage resources in ODPS (Open Data Processing Service).",
        "Task-Script": {
            "Add .jar resource": "add jar {{package.jar}};",
            "Add .py resource": "add py {{script.py}};",
            "Add archive resource": "add archive {{archive.tar.gz}} as {{alias}};",
            "Add file resource": "add file {{filename}} as {{alias}};",
            "Delete resource": "drop resource {{resource_name}};",
            "Show resources in the current project": "list resources;"
        }
    },
    "common_odps table": {
        "Category": "common",
        "Command": "odps table",
        "P-Summary": "creat modifi tabl odp open data process servic",
        "P-Tasks": "add partit tabl creat tabl base definit anoth tabl creat tabl partit lifecycl delet partit tabl delet tabl",
        "Summary": "Create and modify tables in ODPS (Open Data Processing Service).",
        "Task-Script": {
            "Add partition to a table": "alter table {{table_name}} add partition ({{partition_spec}});",
            "Create a table based on the definition of another table": "create table {{table_name}} like {{another_table}};",
            "Create a table with partition and lifecycle": "create table {{table_name}} ({{col}} {{type}}) partitioned by ({{col}} {{type}}) lifecycle {{days}};",
            "Delete partition from a table": "alter table {{table_name}} drop partition ({{partition_spec}});",
            "Delete table": "drop table {{table_name}};"
        }
    },
    "common_odps tunnel": {
        "Category": "common",
        "Command": "odps tunnel",
        "P-Summary": "data tunnel odp open data process servic",
        "P-Tasks": "download tabl local file upload local file tabl partit upload tabl specifi field record delimit upload tabl use multipl thread",
        "Summary": "Data tunnel in ODPS (Open Data Processing Service).",
        "Task-Script": {
            "Download table to local file": "tunnel download {{table_name}} {{file}};",
            "Upload local file to a table partition": "tunnel upload {{file}} {{table_name}}/{{partition_spec}};",
            "Upload table specifying field and record delimiters": "tunnel upload {{file}} {{table_name}} -fd {{field_delim}} -rd {{record_delim}};",
            "Upload table using multiple threads": "tunnel upload {{file}} {{table_name}} -threads {{num}};"
        }
    },
    "common_ogr2ogr": {
        "Category": "common",
        "Command": "ogr2ogr",
        "P-Summary": "convert simpl featur data file format",
        "P-Tasks": "chang coordin refer system geopackag epsg:4326 epsg:3857 clip layer geopackag file given bound box convert csv file geopackag specifi name coordin column assign coordin refer system convert shapefil geopackag load geopackag postgi databas",
        "Summary": "Convert Simple Features data between file formats.",
        "Task-Script": {
            "Change coordinate reference system of a GeoPackage from `EPSG:4326` to `EPSG:3857`": "ogr2ogr -s_srs {{EPSG:4326}} -t_srs {{EPSG:3857}} -f GPKG {{output}}.gpkg {{input}}.gpkg",
            "Clip layers of a GeoPackage file to the given bounding box": "ogr2ogr -spat {{min_x}} {{min_y}} {{max_x}} {{max_y}} -f GPKG {{output}}.gpkg {{input}}.gpkg",
            "Convert a CSV file into a GeoPackage, specifying the names of the coordinate columns and assigning a coordinate reference system": "ogr2ogr -f GPKG {{output}}.gpkg {{input}}.csv -oo X_POSSIBLE_NAMES={{longitude}} -oo Y_POSSIBLE_NAMES={{latitude}} -a_srs {{EPSG:4326}}",
            "Convert a Shapefile into a GeoPackage": "ogr2ogr -f GPKG {{output}}.gpkg {{input}}.shp",
            "Load a GeoPackage into a PostGIS database": "ogr2ogr -f \"PostgreSQL\" PG:dbname=\"{{database_name}}\" {{input}}.gpkg"
        }
    },
    "common_ogrinfo": {
        "Category": "common",
        "Command": "ogrinfo",
        "P-Summary": "list inform ogr-support data sourc",
        "P-Tasks": "get detail inform specif layer geopackag list layer geopackag show summari inform specif layer geopackag",
        "Summary": "List information about an OGR-supported data source.",
        "Task-Script": {
            "Get detailed information about a specific layer of a GeoPackage": "ogrinfo {{input}}.gpkg {{layer_name}}",
            "List layers of a GeoPackage": "ogrinfo {{input}}.gpkg",
            "Only show summary information about a specific layer of a GeoPackage": "ogrinfo -so {{input}}.gpkg {{layer_name}}"
        }
    },
    "common_ohdear-cli": {
        "Category": "common",
        "Command": "ohdear-cli",
        "P-Summary": "unoffici oh dear cli written laravel zero",
        "P-Tasks": "add new site oh dear display list site current statu display detail specif site display detail current authent user",
        "Summary": "An unofficial Oh Dear CLI written with Laravel Zero.",
        "Task-Script": {
            "Add a new site to Oh Dear": "ohdear-cli sites:add {{url}}",
            "Display a list of sites and their current status": "ohdear-cli sites:list",
            "Display details about a specific site": "ohdear-cli sites:show {{site_id}}",
            "Display details about the currently authenticated user": "ohdear-cli me"
        }
    },
    "common_omf": {
        "Category": "common",
        "Command": "omf",
        "P-Summary": "oh fish fishshel framework\ninstal packag extend modifi fish shell",
        "P-Tasks": "appli theme instal one packag list avail theme list instal packag remov theme packag uninstal oh fish",
        "Summary": "Oh My Fish, the Fishshell Framework.\nInstall packages to extend and modify the fish shell.",
        "Task-Script": {
            "Apply a theme": "omf theme {{name}}",
            "Install one or more packages": "omf install {{name}}",
            "List available themes": "omf theme",
            "List installed packages": "omf list",
            "Remove a theme or package": "omf remove {{name}}",
            "Uninstall Oh My Fish": "omf destroy"
        }
    },
    "common_opam": {
        "Category": "common",
        "Command": "opam",
        "P-Summary": "ocaml packag manag\nmanag ocaml compil tool librari",
        "P-Tasks": "display command display detail inform packag initi opam first use instal packag depend list instal packag search packag updat local packag databas upgrad instal packag",
        "Summary": "OCaml Package Manager.\nManage OCaml compilers, tools and libraries.",
        "Task-Script": {
            "Display all commands": "opam help",
            "Display detailed information about a package": "opam show {{package_name}}",
            "Initialize opam for first use": "opam init",
            "Install a package and all of its dependencies": "opam install {{package_name}}",
            "List all installed packages": "opam list",
            "Search for packages": "opam search {{package_name}}",
            "Update the local package database": "opam update",
            "Upgrade all installed packages": "opam upgrade"
        }
    },
    "common_openconnect": {
        "Category": "common",
        "Command": "openconnect",
        "P-Summary": "vpn client cisco anyconnect vpn other",
        "P-Tasks": "connect server connect server authent specif ssl client certif connect server fork background connect server read option config file termin connect run background",
        "Summary": "A VPN client, for Cisco AnyConnect VPNs and others.",
        "Task-Script": {
            "Connect to a server": "openconnect {{vpn.example.org}}",
            "Connect to a server and authenticate with a specific SSL client certificate": "openconnect --certificate={{path/to/file}} {{vpn.example.org}}",
            "Connect to a server, forking into the background": "openconnect --background {{vpn.example.org}}",
            "Connect to a server, reading options from a config file": "openconnect --config={{path/to/file}} {{vpn.example.org}}",
            "Terminate the connection that is running in the background": "killall -SIGINT openconnect"
        }
    },
    "common_openssl": {
        "Category": "common",
        "Command": "openssl",
        "P-Summary": "openssl cryptograph toolkit",
        "P-Tasks": "display certif expir date display certif inform display certif present ssl tl server display complet certif chain http server display start expiri date domain certif gener 2048bit rsa privat key save file gener certif sign request sent certif author gener self-sign certif certif sign request valid number day",
        "Summary": "OpenSSL cryptographic toolkit.",
        "Task-Script": {
            "Display a certificate's expiration date": "openssl x509 -enddate -noout -in {{filename.pem}}",
            "Display certificate information": "openssl x509 -in {{filename.crt}} -noout -text",
            "Display the certificate presented by an SSL/TLS server": "openssl s_client -connect {{host}}:{{port}} </dev/null",
            "Display the complete certificate chain of an HTTPS server": "openssl s_client -connect {{host}}:443 -showcerts </dev/null",
            "Display the start and expiry dates for a domain's certificate": "openssl s_client -connect {{host}}:{{port}} 2>/dev/null | openssl x509 -noout -dates",
            "Generate a 2048bit RSA private key and save it to a file": "openssl genrsa -out {{filename.key}} 2048",
            "Generate a certificate signing request to be sent to a certificate authority": "openssl req -new -sha256 -key {{filename.key}} -out {{filename.csr}}",
            "Generate a self-signed certificate from a certificate signing request valid for some number of days": "openssl x509 -req -days {{days}} -in {{filename.csr}} -signkey {{filename.key}} -out {{filename.crt}}"
        }
    },
    "common_openssl genrsa": {
        "Category": "common",
        "Command": "openssl genrsa",
        "P-Summary": "openssl command gener rsa privat key",
        "P-Tasks": "gener rsa privat key encrypt aes256 prompt passphras gener rsa privat key 2048 bit stdout save rsa privat key arbitrari number bit output file",
        "Summary": "OpenSSL command to generate RSA private keys.",
        "Task-Script": {
            "Generate an RSA private key and encrypt it with AES256 (you will be prompted for a passphrase)": "openssl genrsa {{-aes256}}",
            "Generate an RSA private key of 2048 bits to stdout": "openssl genrsa",
            "Save an RSA private key of an arbitrary number of bits to the output file": "openssl genrsa -out {{output_file.key}} {{1234}}"
        }
    },
    "common_openvpn": {
        "Category": "common",
        "Command": "openvpn",
        "P-Summary": "openvpn client daemon binari",
        "P-Tasks": "connect server use config file connect await bob exampl com host static key bob exampl com connect await bob exampl com host without encrypt creat cryptograph key save file tri set peer-to-p tunnel bob exampl com host static key tri set insecur peer-to-p tunnel bob exampl com host",
        "Summary": "OpenVPN client and daemon binary.",
        "Task-Script": {
            "Connect to server using a config file": "sudo openvpn {{path/to/client.conf}}",
            "Connect to the awaiting bob.example.com host with the same static key as on bob.example.com": "sudo openvpn --remote {{bob.example.com}} --dev {{tun1}} --ifconfig {{10.4.0.2}} {{10.4.0.1}} --secret {{path/to/key}}",
            "Connect to the awaiting bob.example.com host without encryption": "sudo openvpn --remote {{bob.example.com}} --dev {{tun1}} --ifconfig {{10.4.0.2}} {{10.4.0.1}}",
            "Create a cryptographic key and save it to file": "openvpn --genkey --secret {{path/to/key}}",
            "Try to set up a peer-to-peer tunnel on bob.example.com host with a static key": "sudo openvpn --remote {{alice.example.com}} --dev {{tun1}} --ifconfig {{10.4.0.1}} {{10.4.0.2}} --secret {{path/to/key}}",
            "Try to set up an insecure peer-to-peer tunnel on bob.example.com host": "sudo openvpn --remote {{alice.example.com}} --dev {{tun1}} --ifconfig {{10.4.0.1}} {{10.4.0.2}}"
        }
    },
    "common_opt": {
        "Category": "common",
        "Command": "opt",
        "P-Summary": "tool take llvm sourc file run specifi optim analys",
        "P-Tasks": "optim program level 2 output result anoth file output control flow graph function dot file run optim analysi bitcod file",
        "Summary": "A tool that takes LLVM source files and runs specified optimizations and/or analyses on them.",
        "Task-Script": {
            "Optimize the program at level 2 and output the result to another file": "opt -O2 {{path/to/file.bc}} -S -o {{path/to/output_file.bc}}",
            "Output the Control Flow Graph of a function to a \"dot\" file": "opt {{-dot-cfg}} -S {{path/to/file.bc}} -disable-output",
            "Run an optimization or analysis on a bitcode file": "opt -{{passname}} {{path/to/file.bc}} -S -o {{file_opt.bc}}"
        }
    },
    "common_optipng": {
        "Category": "common",
        "Command": "optipng",
        "P-Summary": "png imag file optim util",
        "P-Tasks": "compress png add interlac compress png preserv metadata includ file timestamp compress png remov metadata compress png best compress compress png default set compress png fastest compress",
        "Summary": "PNG image file optimization utility.",
        "Task-Script": {
            "Compress a PNG and add interlacing": "optipng -i {{1}} {{path/to/file.png}}",
            "Compress a PNG and preserve all metadata (including file timestamps)": "optipng -preserve {{path/to/file.png}}",
            "Compress a PNG and remove all metadata": "optipng -strip all {{path/to/file.png}}",
            "Compress a PNG with best compression": "optipng -o{{7}} {{path/to/file.png}}",
            "Compress a PNG with default settings": "optipng {{path/to/file.png}}",
            "Compress a PNG with fastest compression": "optipng -o{{0}} {{path/to/file.png}}"
        }
    },
    "common_opusenc": {
        "Category": "common",
        "Command": "opusenc",
        "P-Summary": "convert wav flac audio opu",
        "P-Tasks": "convert 5 1 surround sound audio highest qualiti level convert wav opu use default option convert speech audio lowest qualiti level convert stereo audio highest qualiti level",
        "Summary": "Convert WAV or FLAC audio to Opus.",
        "Task-Script": {
            "Convert 5.1 surround sound audio at the highest quality level": "opusenc --bitrate {{1536}} {{path/to/input.flac}} {{path/to/output}}.opus",
            "Convert WAV to Opus using default options": "opusenc {{path/to/input.wav}} {{path/to/output}}.opus",
            "Convert speech audio at the lowest quality level": "opusenc {{path/to/input.wav}} --downmix-mono --bitrate {{6}} {{path/to/out}}.opus",
            "Convert stereo audio at the highest quality level": "opusenc --bitrate {{512}} {{path/to/input.wav}} {{path/to/output}}.opus"
        }
    },
    "common_p4": {
        "Category": "common",
        "Command": "p4",
        "P-Summary": "perforc version control system",
        "P-Tasks": "copi file depot client workspac creat client creat edit changelist descript display list file modifi changelist log perforc servic open file edit open new file add depot submit changelist depot",
        "Summary": "Perforce Version Control System.",
        "Task-Script": {
            "Copy files from depot into the client workspace": "p4 sync",
            "Create a client": "p4 client",
            "Create or edit changelist description": "p4 change",
            "Display list of files modified by changelist": "p4 describe -c {{changelist_number}}",
            "Log in to the Perforce service": "p4 login -a",
            "Open a file to edit": "p4 edit -c {{changelist_number}} {{filename}}",
            "Open a new file to add it to the depot": "p4 add",
            "Submit a changelist to the depot": "p4 submit -c {{changelist_number}}"
        }
    },
    "common_p5": {
        "Category": "common",
        "Command": "p5",
        "P-Summary": "p5j templat builder sketch manag",
        "P-Tasks": "creat new p5 collect gener new p5 project run collect directori run p5 manag server updat librari latest version",
        "Summary": "P5js template builder and sketch manager.",
        "Task-Script": {
            "Create a new p5 collection": "p5 new {{collection_name}}",
            "Generate a new p5 project (should be run from collection directory)": "p5 generate {{project_name}}",
            "Run the p5 manager server": "p5 server",
            "Update libraries to their latest versions": "p5 update"
        }
    },
    "common_p7zip": {
        "Category": "common",
        "Command": "p7zip",
        "P-Summary": "wrapper 7-zip file archiv high compress ratio\nintern execut either 7za 7zr command",
        "P-Tasks": "archiv file keep input file archiv file replac 7zip compress version decompress file keep input file decompress file replac origin uncompress version skip check forc compress decompress",
        "Summary": "Wrapper of 7-Zip file archiver with high compression ratio.\nInternally executes either 7za or 7zr command.",
        "Task-Script": {
            "Archive a file keeping the input file": "p7zip -k {{path/to/file}}",
            "Archive a file, replacing it with a 7zipped compressed version": "p7zip {{path/to/file}}",
            "Decompress a file keeping the input file": "p7zip -d -k {{compressed.ext}}.7z",
            "Decompress a file, replacing it with the original uncompressed version": "p7zip -d {{compressed.ext}}.7z",
            "Skip some checks and force compression or decompression": "p7zip -f {{path/to/file}}"
        }
    },
    "common_paci": {
        "Category": "common",
        "Command": "paci",
        "P-Summary": "packag manag bash script",
        "P-Tasks": "configur behaviour instal packag search given packag updat packag updat list avail packag version recommend run paci command",
        "Summary": "A package manager for bash scripts.",
        "Task-Script": {
            "Configure its behaviour": "paci configure",
            "Install a package": "paci install {{package}}",
            "Search for a given package": "paci search {{package}}",
            "Update a package": "paci update {{package}}",
            "Update the list of available packages and versions (it's recommended to run this before other `paci` commands)": "paci refresh"
        }
    },
    "common_packer": {
        "Category": "common",
        "Command": "packer",
        "P-Summary": "build autom machin imag",
        "P-Tasks": "build imag check syntax packer imag config",
        "Summary": "Build automated machine images.",
        "Task-Script": {
            "Build an image": "packer build {{path/to/config.json}}",
            "Check the syntax of a Packer image config": "packer validate {{path/to/config.json}}"
        }
    },
    "common_pactl": {
        "Category": "common",
        "Command": "pactl",
        "P-Summary": "control run pulseaudio sound server",
        "P-Tasks": "chang default sink output 1 number retriev via list subcommand list sink type - sink output sink-input activ audio stream move sink-input 627 sink 1 set volum sink 1 75 toggl mute default sink use special name default_sink",
        "Summary": "Control a running PulseAudio sound server.",
        "Task-Script": {
            "Change the default sink (output) to 1 (the number can be retrieved via the `list` subcommand)": "pactl set-default-sink {{1}}",
            "List all sinks (or other types - sinks are outputs and sink-inputs are active audio streams)": "pactl list {{sinks}} short",
            "Move sink-input 627 to sink 1": "pactl move-sink-input {{627}} {{1}}",
            "Set the volume of sink 1 to 75%": "pactl set-sink-volume {{1}} {{0.75}}",
            "Toggle mute on the default sink (using the special name `@DEFAULT_SINK@`)": "pactl set-sink-mute {{@DEFAULT_SINK@}} toggle"
        }
    },
    "common_pageres": {
        "Category": "common",
        "Command": "pageres",
        "P-Summary": "captur screenshot websit variou resolut",
        "P-Tasks": "captur screenshot local file captur specif element page hide specif element provid custom filenam templat provid specif option url overrid global option take multipl screenshot multipl url differ resolut",
        "Summary": "Capture screenshots of websites in various resolutions.",
        "Task-Script": {
            "Capture a screenshot of a local file": "pageres {{local_file_path.html}} {{1366x768}}",
            "Capture a specific element on a page": "pageres {{https://example.com/}} {{1366x768}} --selector='{{.page-header}}'",
            "Hide a specific element": "pageres {{https://example.com/}} {{1366x768}} --hide='{{.page-header}}'",
            "Provide a custom filename template": "pageres {{https://example.com/}} {{1024x768}} --filename={{'<%= date %> - <%= url %>'}}",
            "Provide specific options for a URL, overriding global options": "pageres [{{https://example.com/}} {{1366x768}} --no-crop] [{{https://example2.com/}} {{1024x768}}] --crop",
            "Take multiple screenshots of multiple URLs at different resolutions": "pageres {{https://example.com/}} {{https://example2.com/}} {{1366x768}} {{1600x900}}"
        }
    },
    "common_pamixer": {
        "Category": "common",
        "Command": "pamixer",
        "P-Summary": "simpl command-lin mixer pulseaudio",
        "P-Tasks": "decreas volum sourc 5 increas volum default sink 5 list sink sourc correspond id mute default sink use -- unmut instead unmut set volum 75 default sink toggl mute sink default use allow boost option increas decreas set volum 100",
        "Summary": "A simple command-line mixer for PulseAudio.",
        "Task-Script": {
            "Decrease the volume on a source by 5%": "pamixer --decrease {{5}} --source {{ID}}",
            "Increase the volume on default sink by 5%": "pamixer --increase {{5}}",
            "List all sinks and sources with their corresponding IDs": "pamixer --list-sinks --list-sources",
            "Mute the default sink (use `--unmute` instead to unmute)": "pamixer --mute",
            "Set the volume to 75% on the default sink": "pamixer --set-volume {{75}}",
            "Toggle mute on a sink other than the default": "pamixer --toggle-mute --sink {{ID}}",
            "Use the allow boost option to increase, decrease, or set the volume above 100%": "pamixer --set-volume {{105}} --allow-boost"
        }
    },
    "common_pandoc": {
        "Category": "common",
        "Command": "pandoc",
        "P-Summary": "convert document variou format",
        "P-Tasks": "convert file pdf output format determin file extens convert standalon file appropri header footer latex html etc\nforc convers use specif format list support input format list support output format",
        "Summary": "Convert documents between various formats.",
        "Task-Script": {
            "Convert file to pdf (the output format is determined by file extension)": "pandoc {{input.md}} -o {{output.pdf}}",
            "Convert to a standalone file with the appropriate headers/footers (for LaTeX, HTML, etc.)": "pandoc {{input.md}} -s -o {{output.tex}}",
            "Force conversion to use a specific format": "pandoc {{input.docx}} --to {{gfm}} -o {{output.md}}",
            "List all supported input formats": "pandoc --list-input-formats",
            "List all supported output formats": "pandoc --list-output-formats"
        }
    },
    "common_parallel": {
        "Category": "common",
        "Command": "parallel",
        "P-Summary": "run command multipl cpu core",
        "P-Tasks": "break stdin 1m block feed block stdin new command convert jpg imag png use replac string gzip sever file use core parallel xarg cram mani arg possibl onto one command read argument stdin run 4 job run multipl machin via ssh",
        "Summary": "Run commands on multiple CPU cores.",
        "Task-Script": {
            "Break stdin into ~1M blocks, feed each block to `stdin` of new command": "cat {{big_file.txt}} | parallel --pipe --block 1M {{command}}",
            "Convert JPG images to PNG using replacement strings": "parallel convert {} {.}.png ::: *.jpg",
            "Gzip several files at once, using all cores": "parallel gzip ::: {{file1}} {{file2}} {{file3}}",
            "Parallel xargs, cram as many args as possible onto one command": "{{args}} | parallel -X {{command}}",
            "Read arguments from `stdin`, run 4 jobs at once": "ls *.txt | parallel -j4 gzip",
            "Run on multiple machines via SSH": "parallel -S {{machine1}},{{machine2}} {{command}} ::: {{arg1}} {{arg2}}"
        }
    },
    "common_parallel-lint": {
        "Category": "common",
        "Command": "parallel-lint",
        "P-Summary": "tool check syntax php file parallel",
        "P-Tasks": "lint directori output result json lint directori show git blame result row contain error lint directori file use comma-separ list extens lint directori use specifi number parallel process lint directori exclud specifi directori lint specif directori",
        "Summary": "A tool to check the syntax of PHP files in parallel.",
        "Task-Script": {
            "Lint a directory and output the results as JSON": "parallel-lint --json {{path/to/directory}}",
            "Lint a directory and show Git Blame results for rows containing errors": "parallel-lint --blame {{path/to/directory}}",
            "Lint a directory of files using a comma-separated list of extension(s)": "parallel-lint -e {{php,html,phpt}} {{path/to/directory}}",
            "Lint a directory using the specified number of parallel processes": "parallel-lint -j {{processes}} {{path/to/directory}}",
            "Lint a directory, excluding the specified directory": "parallel-lint --exclude {{path/to/excluded_directory}} {{path/to/directory}}",
            "Lint a specific directory": "parallel-lint {{path/to/directory}}"
        }
    },
    "common_parquet-tools": {
        "Category": "common",
        "Command": "parquet-tools",
        "P-Summary": "tool show inspect manipul parquet file",
        "P-Tasks": "concaten sever parquet file target one display content parquet file display first line parquet file print column offset index parquet file print content metadata parquet file print count row parquet file print metadata parquet file print schema parquet file",
        "Summary": "A tool to show, inspect and manipulate Parquet file.",
        "Task-Script": {
            "Concatenate several Parquet files into the target one": "parquet-tools merge {{path/to/parquet1}} {{path/to/parquet2}} {{path/to/target_parquet}}",
            "Display the content of a Parquet file": "parquet-tools cat {{path/to/parquet}}",
            "Display the first few lines of a Parquet file": "parquet-tools head {{path/to/parquet}}",
            "Print the column and offset indexes of a Parquet file": "parquet-tools column-index {{path/to/parquet}}",
            "Print the content and metadata of a Parquet file": "parquet-tools dump {{path/to/parquet}}",
            "Print the count of rows in a Parquet file": "parquet-tools rowcount {{path/to/parquet}}",
            "Print the metadata of a Parquet file": "parquet-tools meta {{path/to/parquet}}",
            "Print the schema of a Parquet file": "parquet-tools schema {{path/to/parquet}}"
        }
    },
    "common_particle": {
        "Category": "common",
        "Command": "particle",
        "P-Summary": "command-lin tool interact particl devic",
        "P-Tasks": "compil particl project creat new particl project interact display list devic execut function devic log creat account particl cli updat devic use specif app remot updat devic use latest firmwar via serial",
        "Summary": "A command-line tool for interacting with Particle devices.",
        "Task-Script": {
            "Compile a Particle project": "particle compile {{device_type}} {{path/to/source_code.ino}}",
            "Create a new Particle project interactively": "particle project create",
            "Display a list of devices": "particle list",
            "Execute a function on a device": "particle call {{device_name}} {{function_name}} {{function_arguments}}",
            "Log in or create an account for the Particle CLI": "particle setup",
            "Update a device to use a specific app remotely": "particle flash {{device_name}} {{path/to/program.bin}}",
            "Update a device to use the latest firmware via serial": "particle flash --serial {{path/to/firmware.bin}}"
        }
    },
    "common_pass": {
        "Category": "common",
        "Command": "pass",
        "P-Summary": "tool store read password sensit data\ndata gpg-encrypt manag git repositori",
        "P-Tasks": "copi password first line data file clipboard edit entri gener new random password given length copi clipboard initi re-encrypt storag use one gpg id initi new git repositori chang done pass commit automat list whole store tree save new password addit inform press ctrl + new line complet",
        "Summary": "Tool for storing and reading passwords or other sensitive data.\nAll data is GPG-encrypted, and managed with a git repository.",
        "Task-Script": {
            "Copy a password (first line of the data file) to the clipboard": "pass -c {{path/to/data}}",
            "Edit an entry": "pass edit {{path/to/data}}",
            "Generate a new random password with a given length, and copy it to the clipboard": "pass generate -c {{path/to/data}} {{num}}",
            "Initialize (or re-encrypt) the storage using one or more GPG IDs": "pass init {{gpg_id_1}} {{gpg_id_2}}",
            "Initialize a new Git repository (any changes done by pass will be committed automatically)": "pass git init",
            "List the whole store tree": "pass",
            "Save a new password and additional information (press Ctrl + D on a new line to complete)": "pass insert --multiline {{path/to/data}}"
        }
    },
    "common_pass otp": {
        "Category": "common",
        "Command": "pass otp",
        "P-Summary": "pass extens manag one-time-password otp token",
        "P-Tasks": "copi print 2fa code use otp token pass file display qr code use otp token store pass file print 2fa code use otp token pass file prompt otp secret valu specifi issuer account least one must specifi append exist pass file prompt otpauth uri token append exist pass file prompt otpauth uri token creat new pass file",
        "Summary": "A pass extension for managing one-time-password (OTP) tokens.",
        "Task-Script": {
            "Copy and don't print a 2FA code using the OTP token in a pass file": "pass otp --clip {{path/to/pass}}",
            "Display a QR code using the OTP token stored in a pass file": "pass otp uri --qrcode {{path/to/pass}}",
            "Print a 2FA code using the OTP token in a pass file": "pass otp {{path/to/pass}}",
            "Prompt for an OTP secret value specifying issuer and account (at least one must be specified) and append to existing pass file": "pass otp append --secret --issuer {{issuer_name}} --account {{account_name}} {{path/to/pass}}",
            "Prompt for an otpauth URI token and append to an existing pass file": "pass otp append {{path/to/pass}}",
            "Prompt for an otpauth URI token and create a new pass file": "pass otp insert {{path/to/pass}}"
        }
    },
    "common_passwd": {
        "Category": "common",
        "Command": "passwd",
        "P-Summary": "passwd tool use chang user password",
        "P-Tasks": "chang password current user chang password current user interact chang password specifi user get current statu user make password account blank set name account passwordless",
        "Summary": "Passwd is a tool used to change a user's password.",
        "Task-Script": {
            "Change the password of the current user": "passwd {{new_password}}",
            "Change the password of the current user interactively": "passwd",
            "Change the password of the specified user": "passwd {{username}} {{new_password}}",
            "Get the current status of the user": "passwd -S",
            "Make the password of the account blank (it will set the named account passwordless)": "passwd -d"
        }
    },
    "common_paste": {
        "Category": "common",
        "Command": "paste",
        "P-Summary": "merg line file",
        "P-Tasks": "join line singl line use tab delimit join line singl line use specifi delimit merg two file side side column use tab delimit merg two file side side column use specifi delimit merg two file line ad altern",
        "Summary": "Merge lines of files.",
        "Task-Script": {
            "Join all the lines into a single line, using TAB as delimiter": "paste -s {{file}}",
            "Join all the lines into a single line, using the specified delimiter": "paste -s -d {{delimiter}} {{file}}",
            "Merge two files side by side, each in its column, using TAB as delimiter": "paste {{file1}} {{file2}}",
            "Merge two files side by side, each in its column, using the specified delimiter": "paste -d {{delimiter}} {{file1}} {{file2}}",
            "Merge two files, with lines added alternatively": "paste -d '\\n' {{file1}} {{file2}}"
        }
    },
    "common_pastel": {
        "Category": "common",
        "Command": "pastel",
        "P-Summary": "gener analyz convert manipul color",
        "P-Tasks": "convert color one format anoth\nrgb hsl gener set n visual distinct color get list x11 css color name pick color somewher screen show analyz color termin",
        "Summary": "Generate, analyze, convert and manipulate colors.",
        "Task-Script": {
            "Convert colors from one format to another. Here from RGB to HSL": "pastel format {{hsl}} {{ff8000}}",
            "Generate a set of N visually distinct colors": "pastel distinct {{8}}",
            "Get a list of all X11 / CSS color names": "pastel list",
            "Pick a color from somewhere on the screen": "pastel pick",
            "Show and analyze colors on the terminal": "pastel color \"{{rgb(255,50,127)}}\""
        }
    },
    "common_patch": {
        "Category": "common",
        "Command": "patch",
        "P-Summary": "patch file file diff file\nnote diff file gener diff command",
        "P-Tasks": "appli patch specif file appli patch current directori appli patch use diff file filenam must includ diff file appli revers patch patch file write result differ file",
        "Summary": "Patch a file (or files) with a diff file.\nNote that diff files should be generated by the `diff` command.",
        "Task-Script": {
            "Apply a patch to a specific file": "patch {{path/to/file}} < {{patch.diff}}",
            "Apply a patch to the current directory": "patch -p1 < {{patch.diff}}",
            "Apply a patch using a diff file (filenames must be included in the diff file)": "patch < {{patch.diff}}",
            "Apply the reverse of a patch": "patch -R < {{patch.diff}}",
            "Patch a file writing the result to a different file": "patch {{path/to/input_file}} -o {{path/to/output_file}} < {{patch.diff}}"
        }
    },
    "common_pathchk": {
        "Category": "common",
        "Command": "pathchk",
        "P-Summary": "check valid portabl one pathnam",
        "P-Tasks": "check patham valid current system check pathnam valid wider rang posix compliant system check pathnam valid posix compliant system check empti pathnam lead dash -",
        "Summary": "Check the validity and portability of one or more pathnames.",
        "Task-Script": {
            "Check pathames for validity in the current system": "pathchk {{path1 path2 …}}",
            "Check pathnames for validity on a wider range of POSIX compliant systems": "pathchk -p {{path1 path2 …}}",
            "Check pathnames for validity on all POSIX compliant systems": "pathchk --portability {{path1 path2 …}}",
            "Only check for empty pathnames or leading dashes (-)": "pathchk -P {{path1 path2 …}}"
        }
    },
    "common_pax": {
        "Category": "common",
        "Command": "pax",
        "P-Summary": "archiv copi util",
        "P-Tasks": "copi directori keep origin metadata target must exist creat archiv file creat archiv file use output redirect extract archiv current directori list content gzip archiv list content archiv",
        "Summary": "Archiving and copying utility.",
        "Task-Script": {
            "Copy to a directory, while keeping the original metadata; `target/` must exist": "pax -rw {{path/to/file1}} {{path/to/dir1}} {{path/to/dir2}} {{target/}}",
            "Create an archive from files": "pax -wf {{target.tar}} {{path/to/file1}} {{path/to/file2}} {{path/to/file3}}",
            "Create an archive from files, using output redirection": "pax -w {{path/to/file1}} {{path/to/file2}} {{path/to/file3}} > {{target.tar}}",
            "Extract an archive into the current directory": "pax -rf {{source.tar}}",
            "List the contents of a gzipped archive": "pax -zf {{archive.tar.gz}}",
            "List the contents of an archive": "pax -f {{archive.tar}}"
        }
    },
    "common_pdffonts": {
        "Category": "common",
        "Command": "pdffonts",
        "P-Summary": "portabl document format pdf file font inform viewer",
        "P-Tasks": "print pdf file font inform print addit inform locat font use pdf file convert postscript print addit inform locat font use pdf file raster specifi owner password pdf file bypass secur restrict specifi user password pdf file bypass secur restrict",
        "Summary": "Portable Document Format (PDF) file fonts information viewer.",
        "Task-Script": {
            "Print PDF file fonts information": "pdffonts {{path/to/file.pdf}}",
            "Print additional information on location of the font that will be used when the PDF file is converted to PostScript": "pdffonts -locPS {{path/to/file.pdf}}",
            "Print additional information on location of the font that will be used when the PDF file is rasterized": "pdffonts -loc {{path/to/file.pdf}}",
            "Specify owner password for PDF file to bypass security restrictions": "pdffonts -opw {{password}} {{path/to/file.pdf}}",
            "Specify user password for PDF file to bypass security restrictions": "pdffonts -upw {{password}} {{path/to/file.pdf}}"
        }
    },
    "common_pdfimages": {
        "Category": "common",
        "Command": "pdfimages",
        "P-Summary": "util extract imag pdf",
        "P-Tasks": "extract imag pdf file save png extract imag pdf file includ page number output filenam extract imag page 3 5 list inform imag pdf file",
        "Summary": "Utility for extracting images from PDFs.",
        "Task-Script": {
            "Extract all images from a PDF file and save them as PNGs": "pdfimages -png {{path/to/file.pdf}} {{filename_prefix}}",
            "Extract images from a PDF file and include the page number in the output filenames": "pdfimages -p {{path/to/file.pdf}} {{filename_prefix}}",
            "Extract images from pages 3 to 5": "pdfimages -f {{3}} -l {{5}} {{path/to/file.pdf}} {{filename_prefix}}",
            "List information about all the images in a PDF file": "pdfimages -list {{path/to/file.pdf}}"
        }
    },
    "common_pdfinfo": {
        "Category": "common",
        "Command": "pdfinfo",
        "P-Summary": "portabl document format pdf file inform viewer",
        "P-Tasks": "print pdf file inform specifi owner password pdf file bypass secur restrict specifi user password pdf file bypass secur restrict",
        "Summary": "Portable Document Format (PDF) file information viewer.",
        "Task-Script": {
            "Print PDF file information": "pdfinfo {{path/to/file.pdf}}",
            "Specify owner password for PDF file to bypass security restrictions": "pdfinfo -opw {{password}} {{path/to/file.pdf}}",
            "Specify user password for PDF file to bypass security restrictions": "pdfinfo -upw {{password}} {{path/to/file.pdf}}"
        }
    },
    "common_pdfjoin": {
        "Category": "common",
        "Command": "pdfjoin",
        "P-Summary": "pdf merg util",
        "P-Tasks": "merg subrang two pdf merg two pdf save page 3 5 follow page 1 new pdf",
        "Summary": "PDF merging utility.",
        "Task-Script": {
            "Merge subranges from two PDFs": "pdfjoin {{file1 3-5,1}} {{file2 4-6}} --outfile {{output_file}}",
            "Merge two PDFs": "pdfjoin {{file1}} {{file2}} --outfile {{output_file}}",
            "Save pages 3 to 5 followed by page 1 to a new PDF": "pdfjoin {{file 3-5,1}} --outfile {{output_file}}"
        }
    },
    "common_pdflatex": {
        "Category": "common",
        "Command": "pdflatex",
        "P-Summary": "compil pdf document latex sourc file",
        "P-Tasks": "compil pdf document compil pdf document specifi output directori compil pdf document halt error",
        "Summary": "Compile a pdf document from LaTeX source files.",
        "Task-Script": {
            "Compile a pdf document": "pdflatex {{source.tex}}",
            "Compile a pdf document specifying an output directory": "pdflatex -output-directory={{path/to/directory}} {{source.tex}}",
            "Compile a pdf document, halting on each error": "pdflatex -halt-on-error {{source.tex}}"
        }
    },
    "common_pdfposter": {
        "Category": "common",
        "Command": "pdfposter",
        "P-Summary": "convert large-sheet pdf multipl a4 page print",
        "P-Tasks": "convert a2 poster 4 a4 page scale a4 poster a3 gener 2 a4 page",
        "Summary": "Convert a large-sheeted pdf into multiple A4 pages for printing.",
        "Task-Script": {
            "Convert an A2 poster into 4 A4 pages": "pdfposter --poster-size a2 {{input_file.pdf}} {{output_file.pdf}}",
            "Scale an A4 poster to A3 and then generate 2 A4 pages": "pdfposter --scale 2 {{input_file.pdf}} {{output_file.pdf}}"
        }
    },
    "common_pdfseparate": {
        "Category": "common",
        "Command": "pdfseparate",
        "P-Summary": "portabl document format pdf file page extractor",
        "P-Tasks": "extract page pdf file make separ pdf file page specifi first start page extract specifi last page extract",
        "Summary": "Portable Document Format (PDF) file page extractor.",
        "Task-Script": {
            "Extract pages from PDF file and make a separate PDF file for each page": "pdfseparate {{path/to/source_filename.pdf}} {{path/to/destination_filename-%d.pdf}}",
            "Specify the first/start page for extraction": "pdfseparate -f {{3}} {{path/to/source_filename.pdf}} {{path/to/destination_filename-%d.pdf}}",
            "Specify the last page for extraction": "pdfseparate -l {{10}} {{path/to/source_filename.pdf}} {{path/to/destination_filename-%d.pdf}}"
        }
    },
    "common_pdftk": {
        "Category": "common",
        "Command": "pdftk",
        "P-Summary": "pdf toolkit",
        "P-Tasks": "extract page 1-3 5 6-10 pdf file save anoth one merg concaten list pdf file save result anoth one rotat page 180 degre clockwis rotat third page 90 degre clockwis leav other unchang split page pdf file separ file given filenam output pattern",
        "Summary": "PDF toolkit.",
        "Task-Script": {
            "Extract pages 1-3, 5 and 6-10 from a PDF file and save them as another one": "pdftk {{input.pdf}} cat {{1-3 5 6-10}} output {{output.pdf}}",
            "Merge (concatenate) a list of PDF files and save the result as another one": "pdftk {{file1.pdf file2.pdf ...}} cat output {{output.pdf}}",
            "Rotate all pages by 180 degrees clockwise": "pdftk {{input.pdf}} cat {{1-endsouth}} output {{output.pdf}}",
            "Rotate third page by 90 degrees clockwise and leave others unchanged": "pdftk {{input.pdf}} cat {{1-2 3east 4-end}} output {{output.pdf}}",
            "Split each page of a PDF file into a separate file, with a given filename output pattern": "pdftk {{input.pdf}} burst output {{out_%d.pdf}}"
        }
    },
    "common_pdftocairo": {
        "Category": "common",
        "Command": "pdftocairo",
        "P-Summary": "convert pdf file png jpeg tiff pdf ps ep svg use cairo",
        "P-Tasks": "convert pdf file jpeg convert pdf expand output fill paper convert png crop x pixel top left corner convert png 200ppi resolut convert svg specifi first last page convert convert grayscal tiff set paper size a3",
        "Summary": "Converts PDF files to PNG/JPEG/TIFF/PDF/PS/EPS/SVG using cairo.",
        "Task-Script": {
            "Convert a PDF file to JPEG": "pdftocairo {{path/to/file.pdf}} -jpeg",
            "Convert to PDF expanding the output to fill the paper": "pdftocairo {{path/to/file.pdf}} {{output.pdf}} -pdf -expand",
            "Convert to PNG cropping x and y pixels from the top left corner": "pdftocairo {{path/to/file.pdf}} -png -x {{x_pixels}} -y {{y_pixels}}",
            "Convert to PNG with 200ppi resolution": "pdftocairo {{path/to/file.pdf}} {{output.png}} -png -r 200",
            "Convert to SVG specifying the first/last page to convert": "pdftocairo {{path/to/file.pdf}} {{output.svg}} -svg -f {{first_page}} -l {{last_page}}",
            "Convert to grayscale TIFF setting paper size to A3": "pdftocairo {{path/to/file.pdf}} -tiff -gray -paper A3"
        }
    },
    "common_pdftotext": {
        "Category": "common",
        "Command": "pdftotext",
        "P-Summary": "convert pdf file plain text format",
        "P-Tasks": "convert filenam pdf plain text preserv layout convert filenam pdf plain text print standard output convert filenam pdf plain text save filenam txt convert input pdf plain text save output txt convert page 2 3 4 input pdf plain text save output txt",
        "Summary": "Convert PDF files to plain text format.",
        "Task-Script": {
            "Convert filename.pdf to plain text and preserve the layout": "pdftotext -layout {{filename.pdf}}",
            "Convert filename.pdf to plain text and print it to standard output": "pdftotext {{filename.pdf}} -",
            "Convert filename.pdf to plain text and save it as filename.txt": "pdftotext {{filename.pdf}}",
            "Convert input.pdf to plain text and save it as output.txt": "pdftotext {{input.pdf}} {{output.txt}}",
            "Convert pages 2, 3 and 4 of input.pdf to plain text and save them as output.txt": "pdftotext -f {{2}} -l {{4}} {{input.pdf}} {{output.txt}}"
        }
    },
    "common_pdfunite": {
        "Category": "common",
        "Command": "pdfunite",
        "P-Summary": "pdf merg util",
        "P-Tasks": "merg 2 pdf singl pdf merg directori pdf singl pdf",
        "Summary": "PDF merging utility.",
        "Task-Script": {
            "Merge 2 PDFs into a single PDF": "pdfunite {{path/to/fileA.pdf}} {{path/to/fileB.pdf}} {{path/to/merged_output.pdf}}",
            "Merge a directory of PDFs into a single PDF": "pdfunite {{path/to/directory/*.pdf}} {{path/to/merged_output.pdf}}"
        }
    },
    "common_peerflix": {
        "Category": "common",
        "Command": "peerflix",
        "P-Summary": "stream video- audio-bas torrent media player",
        "P-Tasks": "list streamabl file contain torrent given magnet link stream file torrent airplay stream largest file torrent mplayer subtitl stream largest file torrent given torrent url vlc stream largest media file torrent",
        "Summary": "Stream video- or audio-based torrents to a media player.",
        "Task-Script": {
            "List all streamable files contained in a torrent (given as a magnet link)": "peerflix \"{{magnet:?xt=urn:btih:0123456789abcdef0123456789abcdef01234567}}\" --list",
            "Stream all files from a torrent to Airplay": "peerflix \"{{torrent_url|magnet_link}}\" --all --airplay",
            "Stream the largest file in a torrent to MPlayer, with subtitles": "peerflix \"{{torrent_url|magnet_link}}\" --mplayer --subtitles {{subtitle-file.srt}}",
            "Stream the largest file in a torrent, given as a torrent URL, to VLC": "peerflix \"{{http://example.net/music.torrent}}\" --vlc",
            "Stream the largest media file in a torrent": "peerflix \"{{torrent_url|magnet_link}}\""
        }
    },
    "common_perl": {
        "Category": "common",
        "Command": "perl",
        "P-Summary": "perl 5 languag interpret",
        "P-Tasks": "check syntax error perl script loo p line file edit n-place use find replac e xpression pars execut perl script pars execut perl statement run perl script debug mode use perldebug run find replac express file save origin file given extens run multi-lin find replac express file save result anoth file run regular express stdin print first captur group line",
        "Summary": "The Perl 5 language interpreter.",
        "Task-Script": {
            "Check syntax errors on a Perl script": "perl -c {{script.pl}}",
            "Loo[p] over all lines of a file, editing them [i]n-place using a find/replace [e]xpression": "perl -p -i -e 's/{{find}}/{{replace}}/g' {{filename}}",
            "Parse and execute a Perl script": "perl {{script.pl}}",
            "Parse and execute a Perl statement": "perl -e {{perl_statement}}",
            "Run a Perl script in debug mode, using `perldebug`": "perl -d {{script.pl}}",
            "Run a find/replace expression on a file, saving the original file with a given extension": "perl -p -i'.old' -e 's/{{find}}/{{replace}}/g' {{filename}}",
            "Run a multi-line find/replace expression on a file, and save the result in another file": "perl -p0e 's/{{foo\\nbar}}/{{foobar}}/g' {{input_file}} > {{output_file}}",
            "Run a regular expression on `stdin`, printing out the first capture group for each line": "cat {{path/to/input_file}} | perl -nle 'if (/.*({{foo}}).*/) {print \"$1\"; last;}'"
        }
    },
    "common_pg_ctl": {
        "Category": "common",
        "Command": "pg_ctl",
        "P-Summary": "util control postgresql server databas cluster",
        "P-Tasks": "initi new postgresql databas cluster reload postgresql server configur restart postgresql server start postgresql server stop postgresql server",
        "Summary": "Utility for controlling a PostgreSQL server and database cluster.",
        "Task-Script": {
            "Initialize a new PostgreSQL database cluster": "pg_ctl -D {{data_directory}} init",
            "Reload the PostgreSQL server configuration": "pg_ctl -D {{data_directory}} reload",
            "Restart a PostgreSQL server": "pg_ctl -D {{data_directory}} restart",
            "Start a PostgreSQL server": "pg_ctl -D {{data_directory}} start",
            "Stop a PostgreSQL server": "pg_ctl -D {{data_directory}} stop"
        }
    },
    "common_pg_dump": {
        "Category": "common",
        "Command": "pg_dump",
        "P-Summary": "extract postgresql databas script file archiv file",
        "P-Tasks": "dump databas custom-format archiv file dump databas sql-script file dump databas data sql-script file dump schema data definit sql-script file custom host port custom usernam",
        "Summary": "Extract a PostgreSQL database into a script file or other archive file.",
        "Task-Script": {
            "Dump a database into a custom-format archive file": "pg_dump -Fc {{db_name}} > {{output_file.dump}}",
            "Dump database into a SQL-script file": "pg_dump {{db_name}} > {{output_file.sql}}",
            "Dump only database data into an SQL-script file": "pg_dump -a {{db_name}} > {{path/to/output_file.sql}}",
            "Dump only schema (data definitions) into an SQL-script file": "pg_dump -s {{db_name}} > {{path/to/output_file.sql}}",
            "Same as above, customize host and port": "pg_dump -h {{host}} -p {{port}} {{db_name}} > {{output_file.sql}}",
            "Same as above, customize username": "pg_dump -U {{username}} {{db_name}} > {{output_file.sql}}"
        }
    },
    "common_pg_restore": {
        "Category": "common",
        "Command": "pg_restore",
        "P-Summary": "restor postgresql databas archiv file creat pg_dump",
        "P-Tasks": "clean databas object creat list databas object includ archiv restor archiv exist databas custom host port custom usernam use multipl job restor",
        "Summary": "Restore a PostgreSQL database from an archive file created by pg_dump.",
        "Task-Script": {
            "Clean database objects before creating them": "pg_restore --clean -d {{db_name}} {{archive_file.dump}}",
            "List database objects included in the archive": "pg_restore --list {{archive_file.dump}}",
            "Restore an archive into an existing database": "pg_restore -d {{db_name}} {{archive_file.dump}}",
            "Same as above, customize host and port": "pg_restore -h {{host}} -p {{port}} -d {{db_name}} {{archive_file.dump}}",
            "Same as above, customize username": "pg_restore -U {{username}} -d {{db_name}} {{archive_file.dump}}",
            "Use multiple jobs to do the restoring": "pg_restore -j {{2}} -d {{db_name}} {{archive_file.dump}}"
        }
    },
    "common_pgrep": {
        "Category": "common",
        "Command": "pgrep",
        "P-Summary": "find signal process name",
        "P-Tasks": "return pid run process match command string search process run specif user search full command line paramet instead process name",
        "Summary": "Find or signal process by name.",
        "Task-Script": {
            "Return PIDs of any running processes with a matching command string": "pgrep {{process_name}}",
            "Search for process run by a specific user": "pgrep -u root {{process_name}}",
            "Search full command line with parameters instead of just the process name": "pgrep -f \"{{process_name}} {{parameter}}\""
        }
    },
    "common_phan": {
        "Category": "common",
        "Command": "phan",
        "P-Summary": "static analysi tool php",
        "P-Tasks": "analys one directori analys current directori gener phan configur file use specif level 1 strictest 5 least strict gener phan config php current directori specifi config file default phan config php specifi number parallel process specifi output mode",
        "Summary": "A static analysis tool for PHP.",
        "Task-Script": {
            "Analyse one or more directories": "phan --directory {{path/to/directory}} --directory {{path/to/another_directory}}",
            "Analyse the current directory": "phan",
            "Generate a Phan configuration file using a specific level (1 being strictest to 5 being the least strict)": "phan --init --init-level {{level}}",
            "Generate a `.phan/config.php` in the current directory": "phan --init",
            "Specify a config file (defaults to `.phan/config.php`)": "phan --config-file {{path/to/config.php}}",
            "Specify the number of parallel processes": "phan --processes {{number_of_processes}}",
            "Specify the output mode": "phan --output-mode {{text|verbose|json|csv|codeclimate|checkstyle|pylint|html}}"
        }
    },
    "common_phing": {
        "Category": "common",
        "Command": "phing",
        "P-Summary": "php build tool base apach ant",
        "P-Tasks": "build use verbos output initialis new build file perform specif task perform default task build xml file specifi custom build file path specifi custom listen class specifi log file output specifi custom properti use build",
        "Summary": "A PHP build tool based on Apache Ant.",
        "Task-Script": {
            "Build using verbose output": "phing -verbose {{task_name}}",
            "Initialise a new build file": "phing -i {{path/to/build.xml}}",
            "Perform a specific task": "phing {{task_name}}",
            "Perform the default task in the \"build.xml\" file": "phing",
            "Specify a custom build file path": "phing -f {{path/to/build.xml}} {{task_name}}",
            "Specify a custom listener class": "phing -listener {{class_name}} {{task_name}}",
            "Specify a log file to output to": "phing -b {{path/to/log_file}} {{task_name}}",
            "Specify custom properties to use in the build": "phing -D{{property}}={{value}} {{task_name}}"
        }
    },
    "common_phive": {
        "Category": "common",
        "Command": "phive",
        "P-Summary": "phar instal verif environ secur php applic deploy",
        "P-Tasks": "display list avail alias phar instal specifi phar global instal specifi phar target directori instal specifi phar local directori list avail command remov specifi phar file remov unus phar file updat phar file latest version",
        "Summary": "The Phar Installation and Verification Environment for secure PHP application deployment.",
        "Task-Script": {
            "Display a list of available aliased Phars": "phive list",
            "Install a specified Phar globally": "phive install {{alias|url}} --global",
            "Install a specified Phar to a target directory": "phive install {{alias|url}} --target {{path/to/directory}}",
            "Install a specified Phar to the local directory": "phive install {{alias|url}}",
            "List all available commands": "phive help",
            "Remove a specified Phar file": "phive remove {{alias|url}}",
            "Remove unused Phar files": "phive purge",
            "Update all Phar files to the latest version": "phive update"
        }
    },
    "common_php": {
        "Category": "common",
        "Command": "php",
        "P-Summary": "php command line interfac",
        "P-Tasks": "check syntax e\nlint php script display inform current php configur get list instal php extens pars execut php script run php code note : use\ntag escap doubl quot backslash run php interact start php built-in web server current directori",
        "Summary": "PHP command line interface.",
        "Task-Script": {
            "Check syntax on (i.e. lint) a PHP script": "php -l {{file}}",
            "Display information about the current PHP configuration": "php -i",
            "Get a list of installed PHP extensions": "php -m",
            "Parse and execute a php script": "php {{file}}",
            "Run PHP code (Notes: Don't use <? ?> tags; escape double quotes with backslash)": "php -r \"{{code}}\"",
            "Run PHP interactively": "php -a",
            "Start a PHP built-in web server in the current directory": "php -S {{host:port}}"
        }
    },
    "common_php artisan": {
        "Category": "common",
        "Command": "php artisan",
        "P-Summary": "laravel artisan command line interfac",
        "P-Tasks": "display list avail command gener new eloqu model class migrat factori resourc control start php built-in web server current laravel applic start interact php command line interfac",
        "Summary": "Laravel's Artisan command line interface.",
        "Task-Script": {
            "Display a list of all available commands": "php artisan help",
            "Generate a new Eloquent model class with a migration, factory and resource controller": "php artisan make:model {{ModelName}} --all",
            "Start PHP's built-in web server for the current Laravel application": "php artisan serve",
            "Start an interactive PHP command line interface": "php artisan tinker"
        }
    },
    "common_php yii": {
        "Category": "common",
        "Command": "php yii",
        "P-Summary": "yii framework command line interfac",
        "P-Tasks": "display list avail command gener control view relat file crud action specifi model class start php built-in web server current yii applic",
        "Summary": "Yii Framework's command line interface.",
        "Task-Script": {
            "Display a list of all available commands": "php yii {{help}}",
            "Generate a controller, views and related files for the CRUD actions on the specified model class": "php yii {{gii/crud}} --modelClass={{ModelName}} --controllerClass={{ControllerName}}",
            "Start PHP's built-in web server for the current Yii application": "php yii {{serve}}"
        }
    },
    "common_phpbu": {
        "Category": "common",
        "Command": "phpbu",
        "P-Summary": "backup util framework php",
        "P-Tasks": "run specifi backup run backup use specif configur file run backup use default phpbu xml configur file simul action would perform",
        "Summary": "A backup utility framework for PHP.",
        "Task-Script": {
            "Only run the specified backups": "phpbu --limit={{backup_task_name}}",
            "Run backups using a specific configuration file": "phpbu --configuration={{path/to/configuration_file.xml}}",
            "Run backups using the default \"phpbu.xml\" configuration file": "phpbu",
            "Simulate the actions that would have been performed": "phpbu --simulate"
        }
    },
    "common_phpcbf": {
        "Category": "common",
        "Command": "phpcbf",
        "P-Summary": "fix violat detect phpc",
        "P-Tasks": "comma-separ list file load process display list instal code standard recurs subdirectori fix issu specifi directori default pear standard specifi code standard valid specifi comma-separ file extens includ snif",
        "Summary": "Fix violations detected by phpcs.",
        "Task-Script": {
            "A comma-separated list of files to load before processing": "phpcbf {{path/to/directory}} --bootstrap {{file(s)}}",
            "Display a list of installed coding standards": "phpcbf -i",
            "Don't recurse into subdirectories": "phpcbf {{path/to/directory}} -l",
            "Fix issues in the specified directory (defaults to the PEAR standard)": "phpcbf {{path/to/directory}}",
            "Specify a coding standard to validate against": "phpcbf {{path/to/directory}} --standard {{standard}}",
            "Specify comma-separated file extensions to include when sniffing": "phpcbf {{path/to/directory}} --extensions {{file_extension(s)}}"
        }
    },
    "common_phpcpd": {
        "Category": "common",
        "Command": "phpcpd",
        "P-Summary": "copi past detector php code",
        "P-Tasks": "analys duplic code specif file directori analys use fuzzi match variabl name exclud directori analysi must rel sourc output result php-cpd xml file specifi minimum number ident line default 5 specifi minimum number ident token default 70",
        "Summary": "A copy and paste detector for PHP code.",
        "Task-Script": {
            "Analyse duplicated code for a specific file or directory": "phpcpd {{path/to/file_or_directory}}",
            "Analyse using fuzzy matching for variable names": "phpcpd --fuzzy {{path/to/file_or_directory}}",
            "Exclude a directory from analysis (must be relative to the source)": "phpcpd --exclude {{path/to/excluded_directory}} {{path/to/file_or_directory}}",
            "Output the results to a PHP-CPD XML file": "phpcpd --log-pmd {{path/to/log_file}} {{path/to/file_or_directory}}",
            "Specify a minimum number of identical lines (defaults to 5)": "phpcpd --min-lines {{number_of_lines}} {{path/to/file_or_directory}}",
            "Specify a minimum number of identical tokens (defaults to 70)": "phpcpd --min-tokens {{number_of_tokens}} {{path/to/file_or_directory}}"
        }
    },
    "common_phpcs": {
        "Category": "common",
        "Command": "phpcs",
        "P-Summary": "token php javascript css file detect violat defin set code standard",
        "P-Tasks": "comma-separ list file load process display list instal code standard recurs subdirectori set config variabl use process sniff specifi directori issu default pear standard specifi code standard valid specifi comma-separ file extens includ snif specifi format output report e g\nfull xml json summari",
        "Summary": "Tokenize PHP, JavaScript and CSS files to detect violations of a defined set of coding standards.",
        "Task-Script": {
            "A comma-separated list of files to load before processing": "phpcs {{path/to/directory}} --bootstrap {{file(s)}}",
            "Display a list of installed coding standards": "phpcs -i",
            "Don't recurse into subdirectories": "phpcs {{path/to/directory}} -l",
            "Set config variables to be used during the process": "phpcs {{path/to/directory}} --config-set {{key}} {{value}}",
            "Sniff the specified directory for issues (defaults to the PEAR standard)": "phpcs {{path/to/directory}}",
            "Specify a coding standard to validate against": "phpcs {{path/to/directory}} --standard {{standard}}",
            "Specify comma-separated file extensions to include when sniffing": "phpcs {{path/to/directory}} --extensions {{file_extension(s)}}",
            "Specify the format of the output report (e.g. `full`, `xml`, `json`, `summary`)": "phpcs {{path/to/directory}} --report {{format}}"
        }
    },
    "common_phpenv": {
        "Category": "common",
        "Command": "phpenv",
        "P-Summary": "php version manag develop purpos",
        "P-Tasks": "display current activ php version instal php version global list instal php version refresh shim file php binari known phpenv set global php version set local php version overrid global version unset local php version",
        "Summary": "A PHP version manager for development purposes.",
        "Task-Script": {
            "Display the currently active PHP version": "phpenv version",
            "Install a PHP version globally": "phpenv install {{version}}",
            "List all installed PHP versions": "phpenv versions",
            "Refresh shim files for all PHP binaries known to `phpenv`": "phpenv rehash",
            "Set the global PHP version": "phpenv global {{version}}",
            "Set the local PHP version, which overrides the global version": "phpenv local {{version}}",
            "Unset the local PHP version": "phpenv local --unset"
        }
    },
    "common_phpize": {
        "Category": "common",
        "Command": "phpize",
        "P-Summary": "prepar php extens compil",
        "P-Tasks": "delet file previous creat phpize prepar php extens current directori compil",
        "Summary": "Prepare a PHP extension for compiling.",
        "Task-Script": {
            "Delete files previously created by phpize": "phpize --clean",
            "Prepare the PHP extension in the current directory for compiling": "phpize"
        }
    },
    "common_phploc": {
        "Category": "common",
        "Command": "phploc",
        "P-Summary": "tool quickli measur size analyz structur php project",
        "P-Tasks": "analys directori print result count phpunit test case class test method exclud specif directori analysi exclud specif file comma-separ list glob allow includ specif file comma-separ list glob allow log result specif csv file log result specif xml file",
        "Summary": "A tool for quickly measuring the size and analyzing the structure of a PHP project.",
        "Task-Script": {
            "Analyse a directory and print the result": "phploc {{path/to/directory}}",
            "Count PHPUnit test case classes and test methods": "phploc {{path/to/directory}} --count-tests",
            "Exclude a specific directory from analysis": "phploc {{path/to/directory}} --exclude {{path/to/exclude_directory}}",
            "Exclude specific files from a comma-separated list (globs are allowed)": "phploc {{path/to/directory}} --names-exclude {{files}}",
            "Include only specific files from a comma-separated list (globs are allowed)": "phploc {{path/to/directory}} --names {{files}}",
            "Log the results to a specific CSV file": "phploc {{path/to/directory}} --log-csv {{path/to/file}}",
            "Log the results to a specific XML file": "phploc {{path/to/directory}} --log-xml {{path/to/file}}"
        }
    },
    "common_phpmd": {
        "Category": "common",
        "Command": "phpmd",
        "P-Summary": "php mess detector check common potenti problem",
        "P-Tasks": "display list avail ruleset format exclud specifi comma-separ directori ignor use warning-suppress phpdoc comment includ specifi extens analysi output result file instead stdout scan file directori problem use comma-separ ruleset specifi minimum prioriti threshold rule",
        "Summary": "A PHP mess detector that checks for common potential problems.",
        "Task-Script": {
            "Display a list of available rulesets and formats": "phpmd",
            "Exclude the specified comma-separated directories": "phpmd {{path/to/file_or_directory}} {{xml|text|html}} {{rulesets}} --exclude {{directory_patterns}}",
            "Ignore the use of warning-suppressive PHPDoc comments": "phpmd {{path/to/file_or_directory}} {{xml|text|html}} {{rulesets}} --strict",
            "Include only the specified extensions in analysis": "phpmd {{path/to/file_or_directory}} {{xml|text|html}} {{rulesets}} --suffixes {{extensions}}",
            "Output the results to a file instead of `stdout`": "phpmd {{path/to/file_or_directory}} {{xml|text|html}} {{rulesets}} --reportfile {{path/to/report_file}}",
            "Scan a file or directory for problems using comma-separated rulesets": "phpmd {{path/to/file_or_directory}} {{xml|text|html}} {{rulesets}}",
            "Specify the minimum priority threshold for rules": "phpmd {{path/to/file_or_directory}} {{xml|text|html}} {{rulesets}} --minimumpriority {{priority}}"
        }
    },
    "common_phpspec": {
        "Category": "common",
        "Command": "phpspec",
        "P-Summary": "behaviour driven develop tool php",
        "P-Tasks": "creat specif class disabl code gener prompt enabl fake return valu run singl specif run specif spec directori run specif use specif bootstrap file run specif use specif configur file",
        "Summary": "A Behaviour Driven Development tool for PHP.",
        "Task-Script": {
            "Create a specification for a class": "phpspec describe {{class_name}}",
            "Disable code generation prompts": "phpspec run --no-code-generation",
            "Enable fake return values": "phpspec run --fake",
            "Run a single specification": "phpspec run {{path/to/class_specification_file}}",
            "Run all specifications in the \"spec\" directory": "phpspec run",
            "Run specifications using a specific bootstrap file": "phpspec run -b {{path/to/bootstrap_file}}",
            "Run specifications using a specific configuration file": "phpspec run -c {{path/to/configuration_file}}"
        }
    },
    "common_phpstan": {
        "Category": "common",
        "Command": "phpstan",
        "P-Summary": "php static analysi tool discov bug code",
        "P-Tasks": "analys directori use configur file analys specifi space-separ directori analys use specif rule level 0-7 higher stricter display avail option analysi specifi memori limit analysi specifi autoload file load analys",
        "Summary": "A PHP static analysis tool to discover bugs in code.",
        "Task-Script": {
            "Analyse a directory using a configuration file": "phpstan analyse {{path/to/directory}} --configuration {{path/to/config}}",
            "Analyse the specified space-separated directories": "phpstan analyse {{path/to/directory}}",
            "Analyse using a specific rule level (0-7, higher is stricter)": "phpstan analyse {{path/to/directory}} --level {{level}}",
            "Display available options for analysis": "phpstan analyse --help",
            "Specify a memory limit during analysis": "phpstan analyse {{path/to/directory}} --memory-limit {{memory_limit}}",
            "Specify an autoload file to load before analysing": "phpstan analyse {{path/to/directory}} --autoload-file {{path/to/autoload_file}}"
        }
    },
    "common_phpstorm": {
        "Category": "common",
        "Command": "phpstorm",
        "P-Summary": "cross-platform ide php base jetbrain intellij platform",
        "P-Tasks": "open file open file specif line open specif directori view differ two file",
        "Summary": "A cross-platform IDE for PHP based on the JetBrains IntelliJ platform.",
        "Task-Script": {
            "Open a file": "phpstorm {{path/to/file}}",
            "Open a file at a specific line": "phpstorm --line {{line_number}} {{path/to/file}}",
            "Open a specific directory": "phpstorm {{path/to/directory}}",
            "View the differences between two files": "phpstorm diff {{path/to/left_file}} {{path/to/right_file}}"
        }
    },
    "common_phpunit": {
        "Category": "common",
        "Command": "phpunit",
        "P-Summary": "phpunit command-lin test runner",
        "P-Tasks": "run test gener coverag report html run test annot given group run test specif file run test current directori\nnote : expect phpunit xml",
        "Summary": "PHPUnit command-line test runner.",
        "Task-Script": {
            "Run tests and generate a coverage report in HTML": "phpunit --coverage-html {{directory}}",
            "Run tests annotated with the given group": "phpunit --group {{name}}",
            "Run tests in a specific file": "phpunit {{path/to/TestFile.php}}",
            "Run tests in the current directory. Note: Expects you to have a 'phpunit.xml'": "phpunit"
        }
    },
    "common_piactl": {
        "Category": "common",
        "Command": "piactl",
        "P-Summary": "command line tool privat internet access commerci vpn provid",
        "P-Tasks": "connect privat internet access disconnect privat internet access display current vpn region enabl disabl privat internet access daemon background list avail vpn region log privat internet access log privat internet access set vpn region",
        "Summary": "The command line tool for Private Internet Access, a commercial VPN provider.",
        "Task-Script": {
            "Connect to Private Internet Access": "piactl connect",
            "Disconnect from Private Internet Access": "piactl disconnect",
            "Display the current VPN region": "piactl get region",
            "Enable or disable the Private Internet Access daemon in the background": "piactl background {{enable|disable}}",
            "List all available VPN regions": "piactl get regions",
            "Log in to Private Internet Access": "piactl login {{path/to/login_file}}",
            "Log out of Private Internet Access": "piactl logout",
            "Set your VPN region": "piactl set region {{region}}"
        }
    },
    "common_picard": {
        "Category": "common",
        "Command": "picard",
        "P-Summary": "next gener musicbrainz tag applic",
        "P-Tasks": "display version picard instal open set file start picard",
        "Summary": "Next generation MusicBrainz tagging application.",
        "Task-Script": {
            "Display the version of Picard installed": "picard --long-version",
            "Open a set of files": "picard {{path/to/file1.mp3}} {{path/to/file2.mp3}}",
            "Start Picard": "picard"
        }
    },
    "common_pickle": {
        "Category": "common",
        "Command": "pickle",
        "P-Summary": "php extens instal base compos",
        "P-Tasks": "convert exist pecl extens configur pickl configur file instal specif php extens packag pecl extens releas valid pecl extens",
        "Summary": "A PHP extension installer based on Composer.",
        "Task-Script": {
            "Convert an existing PECL extension configuration to a Pickle configuration file": "pickle convert {{path/to/directory}}",
            "Install a specific PHP extension": "pickle install {{extension_name}}",
            "Package a PECL extension for release": "pickle release {{path/to/directory}}",
            "Validate a PECL extension": "pickle validate {{path/to/directory}}"
        }
    },
    "common_pigz": {
        "Category": "common",
        "Command": "pigz",
        "P-Summary": "multithread zlib compress util",
        "P-Tasks": "compress directori use tar compress file use compress 4 processor compress file use best compress method compress file default option decompress file list content archiv",
        "Summary": "Multithreaded zlib compression utility.",
        "Task-Script": {
            "Compress a directory using tar": "tar cf - {{path/to/directory}} | pigz > {{filename}}.tar.gz",
            "Compress a file using no compression and 4 processors": "pigz -0 -p{{4}} {{filename}}",
            "Compress a file using the best compression method": "pigz -9 {{filename}}",
            "Compress a file with default options": "pigz {{filename}}",
            "Decompress a file": "pigz -d {{archive.gz}}",
            "List the contents of an archive": "pigz -l {{archive.tar.gz}}"
        }
    },
    "common_ping": {
        "Category": "common",
        "Command": "ping",
        "P-Summary": "send icmp echo_request packet network host",
        "P-Tasks": "also display messag respons receiv ping host specif number time ping host ping host ring bell packet receiv termin support ping host without tri lookup symbol name address ping host specifi interv second request default 1 second",
        "Summary": "Send ICMP ECHO_REQUEST packets to network hosts.",
        "Task-Script": {
            "Also display a message if no response was received": "ping -O {{host}}",
            "Ping a host only a specific number of times": "ping -c {{count}} {{host}}",
            "Ping host": "ping {{host}}",
            "Ping host and ring the bell when a packet is received (if your terminal supports it)": "ping -a {{host}}",
            "Ping host without trying to lookup symbolic names for addresses": "ping -n {{host}}",
            "Ping host, specifying the interval in seconds between requests (default is 1 second)": "ping -i {{seconds}} {{host}}"
        }
    },
    "common_ping6": {
        "Category": "common",
        "Command": "ping6",
        "P-Summary": "send icmp echo_request packet network host via ipv6 address",
        "P-Tasks": "ping host ping host ring bell packet receiv termin support ping host specif number time ping host without tri lookup symbol name address ping host specifi interv second request default 1 second",
        "Summary": "Send ICMP ECHO_REQUEST packets to network hosts via IPv6 address.",
        "Task-Script": {
            "Ping a host": "ping6 {{host}}",
            "Ping a host and ring the bell when a packet is received (if your terminal supports it)": "ping6 -a {{host}}",
            "Ping a host only a specific number of times": "ping6 -c {{count}} {{host}}",
            "Ping a host without trying to lookup symbolic names for addresses": "ping6 -n {{host}}",
            "Ping a host, specifying the interval in seconds between requests (default is 1 second)": "ping6 -i {{seconds}} {{host}}"
        }
    },
    "common_pinky": {
        "Category": "common",
        "Command": "pinky",
        "P-Summary": "print user inform use finger protocol",
        "P-Tasks": "display detail current user display detail specif user display detail long format omit column head short format omit user home directori shell long format omit user project file long format",
        "Summary": "Print user information using the `finger` protocol.",
        "Task-Script": {
            "Display details about the current user": "pinky",
            "Display details for a specific user": "pinky {{user}}",
            "Display details in the long format": "pinky {{user}} -l",
            "Omit the column headings in short format": "pinky {{user}} -f",
            "Omit the user's home directory and shell in long format": "pinky {{user}} -lb",
            "Omit the user's project file in long format": "pinky {{user}} -lh"
        }
    },
    "common_pip": {
        "Category": "common",
        "Command": "pip",
        "P-Summary": "python packag manag",
        "P-Tasks": "instal packag instal specif version packag instal packag file save instal packag file show instal packag info uninstal packag upgrad packag",
        "Summary": "Python package manager.",
        "Task-Script": {
            "Install a package": "pip install {{package_name}}",
            "Install a specific version of a package": "pip install {{package_name}}=={{package_version}}",
            "Install packages from file": "pip install -r {{requirements.txt}}",
            "Save installed packages to file": "pip freeze > {{requirements.txt}}",
            "Show installed package info": "pip show {{package_name}}",
            "Uninstall a package": "pip uninstall {{package_name}}",
            "Upgrade a package": "pip install -U {{package_name}}"
        }
    },
    "common_pip3": {
        "Category": "common",
        "Command": "pip3",
        "P-Summary": "python packag manag",
        "P-Tasks": "find avail packag instal packag instal specif version packag instal packag file save list instal packag file show instal packag info uninstal packag upgrad packag",
        "Summary": "Python package manager.",
        "Task-Script": {
            "Find available packages": "pip3 search {{package_name}}",
            "Install a package": "pip3 install {{package_name}}",
            "Install a specific version of a package": "pip3 install {{package_name}}=={{package_version}}",
            "Install packages from a file": "pip3 install --requirements {{requirements.txt}}",
            "Save the list of installed packages to a file": "pip3 freeze > {{requirements.txt}}",
            "Show installed package info": "pip3 show {{package_name}}",
            "Uninstall a package": "pip3 uninstall {{package_name}}",
            "Upgrade a package": "pip3 install --upgrade {{package_name}}"
        }
    },
    "common_pipenv": {
        "Category": "common",
        "Command": "pipenv",
        "P-Summary": "simpl unifi python develop workflow\nmanag packag virtual environ project",
        "P-Tasks": "creat new project creat new project use python 3 gener requir txt project instal packag instal depend project includ dev start shell within creat virtual environ uninstal packag",
        "Summary": "Simple and unified Python development workflow.\nManages packages and the virtual environment for a project.",
        "Task-Script": {
            "Create a new project": "pipenv",
            "Create a new project using Python 3": "pipenv --three",
            "Generate a requirements.txt for a project": "pipenv lock --requirements",
            "Install a package": "pipenv install {{package_name}}",
            "Install all the dependencies for a project (including dev)": "pipenv install --dev",
            "Start a shell within the created virtual environment": "pipenv shell",
            "Uninstall a package": "pipenv uninstall {{package_name}}"
        }
    },
    "common_pipx": {
        "Category": "common",
        "Command": "pipx",
        "P-Summary": "instal run python applic isol environ",
        "P-Tasks": "instal packag virtual environ add entri point path list instal packag run app temporari virtual environ run app temporari virtual environ pakag name differ execut",
        "Summary": "Install and run python applications in isolated environments.",
        "Task-Script": {
            "Install a package in a virtual environment and add entry points to path": "pipx install {{package}}",
            "List installed packages": "pipx list",
            "Run an app in a temporary virtual environment": "pipx run {{pycowsay}} {{moo}}",
            "Run an app in a temporary virtual environment with a pakage name different from the executable": "pipx run --spec {{httpx-cli}} {{httpx}} {{http://www.github.com}}"
        }
    },
    "common_pkill": {
        "Category": "common",
        "Command": "pkill",
        "P-Summary": "signal process name\nmostli use stop process",
        "P-Tasks": "kill process match kill process match full command instead process name send sigusr1 signal process match",
        "Summary": "Signal process by name.\nMostly used for stopping processes.",
        "Task-Script": {
            "Kill all processes which match": "pkill -9 {{process_name}}",
            "Kill all processes which match their full command instead of just the process name": "pkill -9 -f \"{{command_name}}\"",
            "Send SIGUSR1 signal to processes which match": "pkill -USR1 {{process_name}}"
        }
    },
    "common_plantuml": {
        "Category": "common",
        "Command": "plantuml",
        "P-Summary": "creat uml diagram plain text languag render differ format",
        "P-Tasks": "display help render diagram given format e g\npng pdf svg txt render diagram output directori render diagram configur file render diagram directori render diagram default format png",
        "Summary": "Create UML diagrams from a plain text language and render them in different formats.",
        "Task-Script": {
            "Display help": "plantuml -help",
            "Render a diagram in given format (e.g. `png`, `pdf`, `svg`, `txt`)": "plantuml -t {{format}} {{diagram.puml}}",
            "Render a diagram to the output directory": "plantuml -o {{path/to/output}} {{diagram.puml}}",
            "Render a diagram with the configuration file": "plantuml -config {{config.cfg}} {{diagram.puml}}",
            "Render all diagrams of a directory": "plantuml {{path/to/diagrams}}",
            "Render diagrams to default format (PNG)": "plantuml {{diagram1.puml}} {{diagram2.puml}}"
        }
    },
    "common_play": {
        "Category": "common",
        "Command": "play",
        "P-Summary": "audio player sox - sound exchang\nplay audio command line audio format identifi extens",
        "P-Tasks": "play given audio twice speed play given audio file play given audio file play given audio revers",
        "Summary": "Audio player of SoX - Sound eXchange.\nPlays any audio from the command line, with audio formats identified by the extension.",
        "Task-Script": {
            "Play the given audio at twice the speed": "play {{audiofile}} speed 2.0",
            "Play the given audio file": "play {{audiofile}}",
            "Play the given audio files": "play {{audiofile1}} {{audiofile2}}",
            "Play the given audio in reverse": "play {{audiofile}} reverse"
        }
    },
    "common_pm2": {
        "Category": "common",
        "Command": "pm2",
        "P-Summary": "process manag node js\nuse log manag monitor configur process",
        "P-Tasks": "dump process resurrect later launch monitor list process monitor process restart process resurrect previous dump process start process name use later oper stop process",
        "Summary": "Process manager for Node.js.\nUsed for log management, monitoring and configuring processes.",
        "Task-Script": {
            "Dump all processes for resurrecting them later": "pm2 save",
            "Launch monitoring": "pm2 monit",
            "List processes": "pm2 list",
            "Monitor all processes": "pm2 monit",
            "Restart a process": "pm2 restart {{myapp}}",
            "Resurrect previously dumped processes": "pm2 resurrect",
            "Start a process with a name that can be used for later operations": "pm2 start {{app.js}} --name {{myapp}}",
            "Stop a process": "pm2 stop {{myapp}}"
        }
    },
    "common_pngcrush": {
        "Category": "common",
        "Command": "pngcrush",
        "P-Summary": "png imag compress util",
        "P-Tasks": "compress png file 114 avail algorithm pick best result compress png file compress png output directori",
        "Summary": "PNG image compression utility.",
        "Task-Script": {
            "Compress PNG file with all 114 available algorithms and pick the best result": "pngcrush -rem allb -brute -reduce {{in.png}} {{out.png}}",
            "Compress a PNG file": "pngcrush {{in.png}} {{out.png}}",
            "Compress all PNGs and output to directory": "pngcrush -d {{path/to/output}} *.png"
        }
    },
    "common_podman": {
        "Category": "common",
        "Command": "podman",
        "P-Summary": "simpl manag tool pod contain imag\npodman provid docker-cli compar command line\nsimpli put : alia docker podman",
        "P-Tasks": "display log one contain follow log output list contain run stop open shell insid alreadi run contain print inform contain pull imag registri default docker hub remov one stop contain start one contain stop one run contain",
        "Summary": "Simple management tool for pods, containers and images.\nPodman provides a Docker-CLI comparable command line. Simply put: `alias docker=podman`.",
        "Task-Script": {
            "Display the logs of one or more containers and follow log output": "podman logs --follow {{container_name}} {{container_id}}",
            "List all containers (both running and stopped)": "podman ps --all",
            "Open a shell inside of an already running container": "podman exec --interactive --tty {{container_name}} {{sh}}",
            "Print out information about containers": "podman ps",
            "Pull an image from a registry (defaults to the Docker Hub)": "podman pull {{image_name}}:{{image_tag}}",
            "Remove one or more stopped containers": "podman rm {{container_name}} {{container_id}}",
            "Start one or more containers": "podman start {{container_name}} {{container_id}}",
            "Stop one or more running containers": "podman stop {{container_name}} {{container_id}}"
        }
    },
    "common_poetry": {
        "Category": "common",
        "Command": "poetry",
        "P-Summary": "manag python packag depend",
        "P-Tasks": "creat new poetri project directori specif name execut command insid project virtual environ get latest version depend updat poetri lock instal depend subdepend interact initi current directori new poetri project",
        "Summary": "Manage Python packages and dependencies.",
        "Task-Script": {
            "Create a new Poetry project in the directory with a specific name": "poetry new {{project_name}}",
            "Execute a command inside the project's virtual environment": "poetry run {{command}}",
            "Get the latest version of all dependencies and update poetry.lock": "poetry update",
            "Install a dependency and its subdependencies": "poetry add {{dependency}}",
            "Interactively initialize the current directory as a new Poetry project": "poetry init"
        }
    },
    "common_popeye": {
        "Category": "common",
        "Command": "popeye",
        "P-Summary": "util report potenti issu kubernet deploy manifest",
        "P-Tasks": "scan specif namespac scan specif kubernet context scan current kubernet cluster use spinach configur file scan",
        "Summary": "Utility that reports potential issues with Kubernetes deployment manifests.",
        "Task-Script": {
            "Scan a specific namespace": "popeye -n {{namespace}}",
            "Scan specific Kubernetes context": "popeye --context={{context}}",
            "Scan the current Kubernetes cluster": "popeye",
            "Use a spinach configuration file for scanning": "popeye -f {{spinach.yaml}}"
        }
    },
    "common_postcss": {
        "Category": "common",
        "Command": "postcss",
        "P-Summary": "postcss tool transform style js plugin",
        "P-Tasks": "display avail option exampl pars transform css file pars transform css file output specif directori pars transform css file output specif file pars transform css file in-plac specifi custom postcss parser specifi custom postcss syntax watch chang css file",
        "Summary": "PostCSS is a tool for transforming styles with JS plugins.",
        "Task-Script": {
            "Display available options and examples": "postcss --help",
            "Parse and transform a CSS file": "postcss {{path/to/file}}",
            "Parse and transform a CSS file and output to a specific directory": "postcss {{path/to/file}} --dir {{path/to/directory}}",
            "Parse and transform a CSS file and output to a specific file": "postcss {{path/to/file}} --output {{path/to/file}}",
            "Parse and transform a CSS file in-place": "postcss {{path/to/file}} --replace",
            "Specify a custom PostCSS parser": "postcss {{path/to/file}} --parser {{parser}}",
            "Specify a custom PostCSS syntax": "postcss {{path/to/file}} --syntax {{syntax}}",
            "Watch for changes to a CSS file": "postcss {{path/to/file}} --watch"
        }
    },
    "common_powerstat": {
        "Category": "common",
        "Command": "powerstat",
        "P-Summary": "measur power consumpt comput batteri power sourc support rapl interfac",
        "P-Tasks": "enabl statist gather option measur power use intel rapl interfac measur power custom number sampl interv durat measur power default 10 sampl interv 10 second show histogram power measur",
        "Summary": "Measures the power consumption of a computer that has a battery power source or supports the RAPL interface.",
        "Task-Script": {
            "Enable all statistics gathering options": "powerstat -a {{interval}} {{number_of_samples}}",
            "Measure power using Intel's RAPL interface": "powerstat -R {{interval}} {{number_of_samples}}",
            "Measure power with custom number of samples and interval duration": "powerstat {{interval}} {{number_of_samples}}",
            "Measure power with the default of 10 samples with an interval of 10 seconds": "powerstat",
            "Show an histogram of the power measurements": "powerstat -H {{interval}} {{number_of_samples}}"
        }
    },
    "common_pprof": {
        "Category": "common",
        "Command": "pprof",
        "P-Summary": "command-lin tool visual analysi profil data",
        "P-Tasks": "fetch profil http server gener report gener graph open web browser gener text report specif profil file fibbo binari run web server serv web interfac top pprof run pprof interact mode abl manual launch pprof file",
        "Summary": "Command-line tool for visualization and analysis of profile data.",
        "Task-Script": {
            "Fetch a profile from an HTTP server and generate a report": "pprof {{http://localhost:8080/debug/pprof}}",
            "Generate a graph and open it on a web browser": "pprof -svg {{./fibbo}} {{./fibbo-profile.pb.gz}}",
            "Generate a text report from a specific profiling file, on fibbo binary": "pprof -top {{./fibbo}} {{./fibbo-profile.pb.gz}}",
            "Run a web server that serves a web interface on top of `pprof`": "pprof -http={{localhost:8080}} {{./fibbo}} {{./fibbo-profile.pb.gz}}",
            "Run pprof in interactive mode to be able to manually launch `pprof` on a file": "pprof {{./fibbo}} {{./fibbo-profile.pb.gz}}"
        }
    },
    "common_pr": {
        "Category": "common",
        "Command": "pr",
        "P-Summary": "pagin column file print",
        "P-Tasks": "print file togeth one column without header footer print multipl file default header footer print custom center header print offset line truncat custom page width print number line custom date format print begin page 2 page 5 given page length includ header footer",
        "Summary": "Paginate or columnate files for printing.",
        "Task-Script": {
            "Print all files together, one in each column, without a header or footer": "pr -m -T {{file1}} {{file2}} {{file3}}",
            "Print multiple files with a default header and footer": "pr {{file1}} {{file2}} {{file3}}",
            "Print with a custom centered header": "pr -h \"{{header}}\" {{file1}} {{file2}} {{file3}}",
            "Print with an offset for each line and a truncating custom page width": "pr -o {{offset}} -W {{width}} {{file1}} {{file2}} {{file3}}",
            "Print with numbered lines and a custom date format": "pr -n -D \"{{format}}\" {{file1}} {{file2}} {{file3}}",
            "Print, beginning at page 2 up to page 5, with a given page length (including header and footer)": "pr +{{2}}:{{5}} -l {{page_length}} {{file1}} {{file2}} {{file3}}"
        }
    },
    "common_printenv": {
        "Category": "common",
        "Command": "printenv",
        "P-Summary": "print valu specif environ variabl",
        "P-Tasks": "display key-valu pair environ variabl display valu specif variabl display valu variabl end nul instead newlin",
        "Summary": "Print values of all or specific environment variables.",
        "Task-Script": {
            "Display key-value pairs of all environment variables": "printenv",
            "Display the value of a specific variable": "printenv {{HOME}}",
            "Display the value of a variable and end with NUL instead of newline": "printenv --null {{HOME}}"
        }
    },
    "common_printf": {
        "Category": "common",
        "Command": "printf",
        "P-Summary": "format print text",
        "P-Tasks": "print float number unicod euro sign print text messag print text messag compos environ variabl print integ bold blue store format messag variabl work zsh",
        "Summary": "Format and print text.",
        "Task-Script": {
            "Print a float number with the unicode Euro sign": "printf \"{{\\u20AC %.2f\\n}}\" {{123.4}}",
            "Print a text message": "printf \"{{%s\\n}}\" \"{{Hello world}}\"",
            "Print a text message composed with environment variables": "printf \"{{var1: %s\\tvar2: %s\\n}}\" \"{{$VAR1}}\" \"{{$VAR2}}\"",
            "Print an integer in bold blue": "printf \"{{\\e[1;34m%.3d\\e[0m\\n}}\" {{42}}",
            "Store a formatted message in a variable (does not work on zsh)": "printf -v {{myvar}} {{\"This is %s = %d\\n\" \"a year\" 2016}}"
        }
    },
    "common_progpilot": {
        "Category": "common",
        "Command": "progpilot",
        "P-Summary": "php static analysi tool detect secur vulner",
        "P-Tasks": "analys specif file directori analys current directori specifi custom configur file",
        "Summary": "A PHP static analysis tool for detecting security vulnerabilities.",
        "Task-Script": {
            "Analyse a specific file or directory": "progpilot {{path/to/file_or_directory}}",
            "Analyse the current directory": "progpilot",
            "Specify a custom configuration file": "progpilot --configuration {{path/to/configuration.yml}}"
        }
    },
    "common_prosodyctl": {
        "Category": "common",
        "Command": "prosodyctl",
        "P-Summary": "control tool prosodi xmpp server",
        "P-Tasks": "add user prosodi xmpp server perman delet user reload server configur file set user password show statu prosodi server",
        "Summary": "The control tool for the Prosody XMPP server.",
        "Task-Script": {
            "Add a user to the Prosody XMPP server": "sudo prosodyctl adduser {{user@example.com}}",
            "Permanently delete a user": "sudo prosodyctl deluser {{user@example.com}}",
            "Reload the server's configuration files": "sudo prosodyctl reload",
            "Set a user's password": "sudo prosodyctl passwd {{user@example.com}}",
            "Show the status of the Prosody server": "sudo prosodyctl status"
        }
    },
    "common_protoc": {
        "Category": "common",
        "Command": "protoc",
        "P-Summary": "pars googl protobuf proto file gener output specifi languag",
        "P-Tasks": "gener java code proto file import proto file gener python code proto file gener code multipl languag",
        "Summary": "Parse Google Protobuf `.proto` files and generate output in the specified language.",
        "Task-Script": {
            "Generate Java code from a `.proto` file that imports other `.proto` files": "protoc --java_out={{path/to/output_directory}} --proto_path={{path/to/import_search_path}} {{input_file.proto}}",
            "Generate Python code from a `.proto` file": "protoc --python_out={{path/to/output_directory}} {{input_file.proto}}",
            "Generate code for multiple languages": "protoc --csharp_out={{path/to/c#_output_directory}} --js_out={{path/to/js_output_directory}} {{input_file.proto}}"
        }
    },
    "common_ps": {
        "Category": "common",
        "Command": "ps",
        "P-Summary": "inform run process",
        "P-Tasks": "get parent pid process list process current user tree list process current user extra full format list run process list run process includ full command string search process match string sort process memori consumpt",
        "Summary": "Information about running processes.",
        "Task-Script": {
            "Get the parent pid of a process": "ps -o ppid= -p {{pid}}",
            "List all processes of the current user as a tree": "ps --user $(id -u) f",
            "List all processes of the current user in extra full format": "ps --user $(id -u) -F",
            "List all running processes": "ps aux",
            "List all running processes including the full command string": "ps auxww",
            "Search for a process that matches a string": "ps aux | grep {{string}}",
            "Sort processes by memory consumption": "ps --sort size"
        }
    },
    "common_psgrep": {
        "Category": "common",
        "Command": "psgrep",
        "P-Summary": "search run process grep",
        "P-Tasks": "find process line contain specif string find process line contain specif string exclud header search use simplifi format pid user command",
        "Summary": "Search running processes with `grep`.",
        "Task-Script": {
            "Find process lines containing a specific string": "psgrep {{process_name}}",
            "Find process lines containing a specific string, excluding headers": "psgrep -n {{process_name}}",
            "Search using a simplified format (PID, user, command)": "psgrep -s {{process_name}}"
        }
    },
    "common_psql": {
        "Category": "common",
        "Command": "psql",
        "P-Summary": "postgresql command-lin client",
        "P-Tasks": "connect databas given server host run given port given usernam without password prompt connect databas\nconnect localhost use default port 5432 default user current log user connect databas user prompt password execut singl sql queri postgresql command given databas use shell script execut command file given databas",
        "Summary": "PostgreSQL command-line client.",
        "Task-Script": {
            "Connect to database on given server host running on given port with given username, without a password prompt": "psql -h {{host}} -p {{port}} -U {{username}} {{database}}",
            "Connect to database. It connects to localhost using default port 5432 with default user as currently logged in user": "psql {{database}}",
            "Connect to database; user will be prompted for password": "psql -h {{host}} -p {{port}} -U {{username}} -W {{database}}",
            "Execute a single SQL query or PostgreSQL command on the given database (useful in shell scripts)": "psql -c '{{query}}' {{database}}",
            "Execute commands from a file on the given database": "psql {{database}} -f {{file.sql}}"
        }
    },
    "common_pssh": {
        "Category": "common",
        "Command": "pssh",
        "P-Summary": "parallel ssh program",
        "P-Tasks": "run command save output separ file run command root ask root password run command limit number parallel connect 10 run command multipl host specifi new-lin separ file run command two host print output server inlin run command extra ssh argument",
        "Summary": "Parallel SSH program.",
        "Task-Script": {
            "Run a command and save the output to separate files": "pssh -H {{host1}} -H {{host2}} -o {{path/to/output_dir}} {{hostname -i}}",
            "Run a command as root (this asks for the root password)": "pssh -i -h {{path/to/hosts_file}} -A -l {{root_username}} {{hostname -i}}",
            "Run a command limiting the number of parallel connections to 10": "pssh -i -h {{path/to/hosts_file}} -p {{10}} '{{cd dir; ./script.sh; exit}}'",
            "Run a command on multiple hosts, specified in a new-line separated file": "pssh -i -h {{path/to/hosts_file}} {{hostname -i}}",
            "Run a command on two hosts, and print its output on each server inline": "pssh -i -H \"{{host1}} {{host2}}\" {{hostname -i}}",
            "Run a command with extra SSH arguments": "pssh -i -h {{path/to/hosts_file}} -x \"{{-O VisualHostKey=yes}}\" {{hostname -i}}"
        }
    },
    "common_psysh": {
        "Category": "common",
        "Command": "psysh",
        "P-Summary": "runtim develop consol interact debugg repl php",
        "P-Tasks": "open shell specif directori open shell current directori use specif configur file",
        "Summary": "A runtime developer console, interactive debugger and REPL for PHP.",
        "Task-Script": {
            "Open a shell in a specific directory": "psysh --cwd {{path/to/directory}}",
            "Open a shell in the current directory": "psysh",
            "Use a specific configuration file": "psysh --config {{path/to/file}}"
        }
    },
    "common_pt": {
        "Category": "common",
        "Command": "pt",
        "P-Summary": "platinum searcher\ncode search tool similar ag",
        "P-Tasks": "find foo file given extens use regular express find file contain foo display count match file find file contain foo print file highlight match find file contain foo whole word ignor case find file whose content match regular express 2 directori deep",
        "Summary": "Platinum Searcher.\nA code search tool similar to `ag`.",
        "Task-Script": {
            "Find \"foo\" in files with a given extension using a regular expression": "pt -G='{{\\.bar$}}' {{foo}}",
            "Find files containing \"foo\" and display count of matches in each file": "pt -c {{foo}}",
            "Find files containing \"foo\" and print the files with highlighted matches": "pt {{foo}}",
            "Find files containing \"foo\" as a whole word and ignore its case": "pt -wi {{foo}}",
            "Find files whose contents match the regular expression, up to 2 directories deep": "pt --depth={{2}} -e '{{^ba[rz]*$}}'"
        }
    },
    "common_pup": {
        "Category": "common",
        "Command": "pup",
        "P-Summary": "command line html pars tool",
        "P-Tasks": "filter html attribut valu filter html element tag name filter html id print html json print text filter html element children transform raw html file clean indent color format",
        "Summary": "Command line HTML parsing tool.",
        "Task-Script": {
            "Filter HTML by attribute value": "cat {{index.html}} | pup '{{input[type=\"text\"]}}'",
            "Filter HTML by element tag name": "cat {{index.html}} | pup '{{tag}}'",
            "Filter HTML by id": "cat {{index.html}} | pup '{{div#id}}'",
            "Print HTML as JSON": "cat {{index.html}} | pup '{{div}} json{}'",
            "Print all text from the filtered HTML elements and their children": "cat {{index.html}} | pup '{{div}} text{}'",
            "Transform a raw HTML file into a cleaned, indented, and colored format": "cat {{index.html}} | pup --color"
        }
    },
    "common_pv": {
        "Category": "common",
        "Command": "pv",
        "P-Summary": "monitor progress data pipe",
        "P-Tasks": "attach alreadi run process see file read progress filter file see progress amount output data measur speed amount data flow pipe -s option print content file display progress bar read erron file skip error dd conv sync noerror would stop read read specifi amount data rate limit 1k",
        "Summary": "Monitor the progress of data through a pipe.",
        "Task-Script": {
            "Attach to an already running process and see its file reading progress": "pv -d {{PID}}",
            "Filter a file, see both progress and amount of output data": "pv -cN in {{big_text_file}} | grep {{pattern}} | pv -cN out > {{filtered_file}}",
            "Measure the speed and amount of data flow between pipes (`-s` is optional)": "command1 | pv -s {{expected_amount_of_data_for_eta}} | command2",
            "Print the contents of the file and display a progress bar": "pv {{file}}",
            "Read an erroneous file, skip errors as `dd conv=sync,noerror` would": "pv -EE {{path/to/faulty_media}} > image.img",
            "Stop reading after reading specified amount of data, rate limit to 1K/s": "pv -L 1K -S {{maximum_file_size_to_be_read}}"
        }
    },
    "common_pwd": {
        "Category": "common",
        "Command": "pwd",
        "P-Summary": "print name current work directori",
        "P-Tasks": "print current directori print current directori resolv symlink e\nshow physic path",
        "Summary": "Print name of current/working directory.",
        "Task-Script": {
            "Print the current directory": "pwd",
            "Print the current directory, and resolve all symlinks (i.e. show the \"physical\" path)": "pwd -P"
        }
    },
    "common_pycodestyle": {
        "Category": "common",
        "Command": "pycodestyle",
        "P-Summary": "tool check python code pep 8 style convent",
        "P-Tasks": "check style singl file check style multipl file show first occurr error show sourc code error show specif pep 8 text error",
        "Summary": "A tool to check Python code against PEP 8 style conventions.",
        "Task-Script": {
            "Check the style of a single file": "pycodestyle {{file.py}}",
            "Check the style of multiple files": "pycodestyle {{file1.py}} {{file2.py}} {{file3.py}}",
            "Show only the first occurrence of an error": "pycodestyle --first {{file.py}}",
            "Show the source code for each error": "pycodestyle --show-source {{file.py}}",
            "Show the specific PEP 8 text for each error": "pycodestyle --show-pep8 {{file.py}}"
        }
    },
    "common_pyenv": {
        "Category": "common",
        "Command": "pyenv",
        "P-Summary": "switch multipl version python easili",
        "P-Tasks": "instal python version pyenv_root version directori list python version pyenv_root version directori list avail command set python version use global current machin set python version use current directori directori uninstal python version pyenv_root version directori",
        "Summary": "Switch between multiple versions of Python easily.",
        "Task-Script": {
            "Install a Python version under the ${PYENV_ROOT}/versions directory": "pyenv install {{2.7.10}}",
            "List all Python versions under the ${PYENV_ROOT}/versions directory": "pyenv versions",
            "List all available commands": "pyenv commands",
            "Set Python version to be used globally in the current machine": "pyenv global {{2.7.10}}",
            "Set Python version to be used in the current directory and all directories below it": "pyenv local {{2.7.10}}",
            "Uninstall a Python version under the ${PYENV_ROOT}/versions directory": "pyenv uninstall {{2.7.10}}"
        }
    },
    "common_pyenv virtualenv": {
        "Category": "common",
        "Command": "pyenv virtualenv",
        "P-Summary": "creat virtual environ base one instal python distribut",
        "P-Tasks": "activ virtual environ creat new python 3 6 6 virtual environ deactiv virtual environ list exist virtual environ",
        "Summary": "Create virtual environments based on one's installed Python distributions.",
        "Task-Script": {
            "Activate a virtual environment": "pyenv activate {{virtualenv_name}}",
            "Create a new Python 3.6.6 virtual environment": "pyenv virtualenv {{3.6.6}} {{virtualenv_name}}",
            "Deactivate the virtual environment": "pyenv deactivate",
            "List all existing virtual environments": "pyenv virtualenvs"
        }
    },
    "common_pyflakes": {
        "Category": "common",
        "Command": "pyflakes",
        "P-Summary": "check python sourc code file error",
        "P-Tasks": "check python file directori recurs check python file specif directori check singl python file check python file found multipl directori",
        "Summary": "Checks Python source code files for errors.",
        "Task-Script": {
            "Check Python files in a directory recursively": "pyflakes checkRecursive {{path/to/directory}}",
            "Check Python files in a specific directory": "pyflakes checkPath {{path/to/directory}}",
            "Check a single Python file": "pyflakes check {{path/to/file}}.py",
            "Check all Python files found in multiple directories": "pyflakes iterSourceCode {{path/to/directory_1}} {{path/to/directory_2}}"
        }
    },
    "common_pygmentize": {
        "Category": "common",
        "Command": "pygmentize",
        "P-Summary": "python-bas syntax highlight",
        "P-Tasks": "explicitli set languag syntax highlight highlight file syntax print standard output languag infer file extens list avail lexer processor input languag list avail output format output html file addit formatt option full page line number save output file html format",
        "Summary": "Python-based syntax highlighter.",
        "Task-Script": {
            "Explicitly set the language for syntax highlighting": "pygmentize -l {{javascript}} {{input_file}}",
            "Highlight file syntax and print to standard output (language is inferred from the file extension)": "pygmentize {{file.py}}",
            "List available lexers (processors for input languages)": "pygmentize -L lexers",
            "List available output formats": "pygmentize -L formatters",
            "Output an HTML file, with additional formatter options (full page, with line numbers)": "pygmentize -f html -O \"full,linenos=True\" -o {{output_file.html}} {{input_file}}",
            "Save output to a file in HTML format": "pygmentize -f html -o {{output_file.html}} {{input_file.py}}"
        }
    },
    "common_python": {
        "Category": "common",
        "Command": "python",
        "P-Summary": "python languag interpret",
        "P-Tasks": "call python interact shell repl execut python express execut script part interact shell execut script given python file interact debug python script run librari modul script termin option list",
        "Summary": "Python language interpreter.",
        "Task-Script": {
            "Call a Python interactive shell (REPL)": "python",
            "Execute a Python expression": "python -c \"{{expression}}\"",
            "Execute script as part of an interactive shell": "python -i {{script.py}}",
            "Execute script in a given Python file": "python {{script.py}}",
            "Interactively debug a Python script": "python -m pdb {{script.py}}",
            "Run library module as a script (terminates option list)": "python -m {{module}} {{arguments}}"
        }
    },
    "common_q": {
        "Category": "common",
        "Command": "q",
        "P-Summary": "execut sql-like queri csv tsv file",
        "P-Tasks": "format output use output delimit output header line note : command output column name base input file header column alias overridden queri join two file alias f1 f2 exampl column c1 common column queri csv file specifi delimit queri tsv file queri file header row read data stdin - queri repres data stdin",
        "Summary": "Execute SQL-like queries on .csv and .tsv files.",
        "Task-Script": {
            "Format output using an output delimiter with an output header line (note: command will output column names based on the input file header or the column aliases overridden in the query)": "q -D{{delimiter}} -O \"SELECT {{column}} as {{alias}} from {{path/to/file}}\"",
            "Join two files (aliased as `f1` and `f2` in the example) on column `c1`, a common column": "q \"SELECT * FROM {{path/to/file}} f1 JOIN {{path/to/other_file}} f2 ON (f1.c1 = f2.c1)\"",
            "Query .csv file by specifying the delimiter as ','": "q -d',' \"SELECT * from {{path/to/file}}\"",
            "Query .tsv file": "q -t \"SELECT * from {{path/to/file}}\"",
            "Query file with header row": "q -d{{delimiter}} -H \"SELECT * from {{path/to/file}}\"",
            "Read data from stdin; '-' in the query represents the data from `stdin`": "{{output}} | q \"select * from -\""
        }
    },
    "common_qcp": {
        "Category": "common",
        "Command": "qcp",
        "P-Summary": "copi file use default text editor defin filenam",
        "P-Tasks": "copi singl file open editor sourc filenam left target filenam right copi file swap posit sourc target filenam editor copi multipl jpg file",
        "Summary": "Copy files using the default text editor to define the filenames.",
        "Task-Script": {
            "Copy a single file (open an editor with the source filename on the left and the target filename on the right)": "qcp {{source_file}}",
            "Copy files, but swap the positions of the source and the target filenames in the editor": "qcp --option swap {{*.jpg}}",
            "Copy multiple JPG files": "qcp {{*.jpg}}"
        }
    },
    "common_qemu": {
        "Category": "common",
        "Command": "qemu",
        "P-Summary": "gener machin emul virtual\nsupport larg varieti cpu architectur",
        "P-Tasks": "boot qemu instanc live iso imag boot imag emul i386 architectur boot imag emul x64 architectur boot physic devic e g\nusb test bootabl medium specifi amount ram instanc",
        "Summary": "Generic machine emulator and virtualizer.\nSupports a large variety of CPU architectures.",
        "Task-Script": {
            "Boot QEMU instance with a live ISO image": "qemu-system-i386 -hda {{image_name.img}} -cdrom {{os_image.iso}} -boot d",
            "Boot from image emulating i386 architecture": "qemu-system-i386 -hda {{image_name.img}}",
            "Boot from image emulating x64 architecture": "qemu-system-x86_64 -hda {{image_name.img}}",
            "Boot from physical device (e.g. from USB to test bootable medium)": "qemu-system-i386 -hda /dev/{{storage_device}}",
            "Specify amount of RAM for instance": "qemu-system-i386 -m 256 -hda image_name.img -cdrom os-image.iso -boot d"
        }
    },
    "common_qemu-img": {
        "Category": "common",
        "Command": "qemu-img",
        "P-Summary": "tool quick emul virtual hdd imag creation manipul",
        "P-Tasks": "convert vmware vmdk disk imag kvm qcow2 disk imag creat disk imag specif size gigabyt dump alloc state everi sector specifi disk imag increas decreas imag size show inform disk imag",
        "Summary": "Tool for Quick Emulator Virtual HDD image creation and manipulation.",
        "Task-Script": {
            "Convert a VMWare .vmdk disk image to a KVM .qcow2 disk image": "qemu-img convert -O qcow2 {{/path/to/file/foo.vmdk}} {{/path/to/file/foo.qcow2}}",
            "Create disk image with a specific size (in gigabytes)": "qemu-img create {{image_name.img}} {{gigabytes}}G",
            "Dump the allocation state of every sector of the specified disk image": "qemu-img map {{image_name.img}}",
            "Increase or decrease image size": "qemu-img resize {{image_name.img}} {{gigabytes}}G",
            "Show information about a disk image": "qemu-img info {{image_name.img}}"
        }
    },
    "common_qmv": {
        "Category": "common",
        "Command": "qmv",
        "P-Summary": "move file directori use default text editor defin filenam",
        "P-Tasks": "move singl file open editor sourc filenam left target filenam right move file directori insid directori move file swap posit sourc target filenam editor move multipl jpg file move multipl directori",
        "Summary": "Move files and directories using the default text editor to define the filenames.",
        "Task-Script": {
            "Move a single file (open an editor with the source filename on the left and the target filename on the right)": "qmv {{source_file}}",
            "Move all files and directories inside a directory": "qmv --recursive {{path/to/directory}}",
            "Move files, but swap the positions of the source and the target filenames in the editor": "qmv --option swap {{*.jpg}}",
            "Move multiple JPG files": "qmv {{*.jpg}}",
            "Move multiple directories": "qmv -d {{path/to/directory1}} {{path/to/directory2}} {{path/to/directory3}}"
        }
    },
    "common_qpdf": {
        "Category": "common",
        "Command": "qpdf",
        "P-Summary": "versatil pdf transform softwar",
        "P-Tasks": "extract page 1-3 5 6-10 pdf file save anoth one merg concaten page list pdf file save result new pdf merg concaten given page list pdf file save result new pdf remov password password protect file rotat certain page pdf given angl write group n page separ output file given filenam pattern",
        "Summary": "Versatile PDF transformation software.",
        "Task-Script": {
            "Extract pages 1-3, 5 and 6-10 from a PDF file and save them as another one": "qpdf --empty --pages {{input.pdf}} {{1-3,5,6-10}} -- {{output.pdf}}",
            "Merge (concatenate) all the pages of a list of PDF files and save the result as a new PDF": "qpdf --empty --pages {{file1.pdf}} {{file2.pdf}} {{file3.pdf}} -- {{output.pdf}}",
            "Merge (concatenate) given pages from a list of PDF files and save the result as a new PDF": "qpdf --empty --pages {{file1.pdf}} {{1,6-8}} {{file2.pdf}} {{3,4,5}} -- {{output.pdf}}",
            "Remove the password from a password protected file": "qpdf --password={{password}} --decrypt {{input.pdf}} {{output.pdf}}",
            "Rotate certain pages of a pdf with a given angle": "qpdf --rotate={{90:2,4,6}} --rotate={{180:7-8}} {{input.pdf}} {{output.pdf}}",
            "Write each group of n pages to a separate output file with a given filename pattern": "qpdf --split-pages=n {{input.pdf}} {{out_%d.pdf}}"
        }
    },
    "common_qr": {
        "Category": "common",
        "Command": "qr",
        "P-Summary": "gener qr code termin ansi vt-100 escap code",
        "P-Tasks": "gener qr code specifi error correct level default",
        "Summary": "Generate QR codes in the terminal with ANSI VT-100 escape codes.",
        "Task-Script": {
            "Generate a QR code": "echo \"{{data}}\" | qr",
            "Specify the error correction level (defaults to M)": "echo \"{{data}}\" | qr --error-correction={{L|M|Q|H}}"
        }
    },
    "common_qrencode": {
        "Category": "common",
        "Command": "qrencode",
        "P-Summary": "qr code gener\nsupport png ep",
        "P-Tasks": "convert string qr code print termin convert string qr code save output file convert input file qr code save output file convert input pipe qr code print termin",
        "Summary": "QR Code generator. Supports PNG and EPS.",
        "Task-Script": {
            "Convert a string to a QR code and print it in terminal": "qrencode -t ansiutf8 {{string}}",
            "Convert a string to a QR code and save to an output file": "qrencode -o {{path/to/output_file.png}} {{string}}",
            "Convert an input file to a QR code and save to an output file": "qrencode -o {{path/to/output_file.png}} -r {{path/to/input_file}}",
            "Convert input from pipe to a QR code and print it in terminal": "echo {{string}} | qrencode -t ansiutf8"
        }
    },
    "common_quilt": {
        "Category": "common",
        "Command": "quilt",
        "P-Summary": "tool manag seri patch",
        "P-Tasks": "add file current patch edit file refresh current patch chang appli patch seri file creat new patch import exist patch file remov appli patch",
        "Summary": "Tool to manage a series of patches.",
        "Task-Script": {
            "Add a file to the current patch": "quilt add {{path/to/file}}",
            "After editing the file, refresh the current patch with the changes": "quilt refresh",
            "Apply all the patches in the series file": "quilt push -a",
            "Create a new patch": "quilt new {{filename.patch}}",
            "Import an existing patch from a file": "quilt import {{path/to/filename.patch}}",
            "Remove all applied patches": "quilt pop -a"
        }
    },
    "common_quota": {
        "Category": "common",
        "Command": "quota",
        "P-Summary": "display user disk space usag alloc limit",
        "P-Tasks": "print quota group current user member quiet output display quota filesystem usag quota show disk quota anoth user show disk quota human readabl unit current user verbos output also display quota filesystem storag alloc",
        "Summary": "Display users' disk space usage and allocated limits.",
        "Task-Script": {
            "Print quotas for the groups of which the current user is a member": "quota -g",
            "Quiet output (only display quotas on filesystems where usage is over quota)": "quota -q",
            "Show disk quotas for another user": "sudo quota -u {{username}}",
            "Show disk quotas in human readable units for the current user": "quota -s",
            "Verbose output (also display quotas on filesystems where no storage is allocated)": "quota -v"
        }
    },
    "common_r": {
        "Category": "common",
        "Command": "r",
        "P-Summary": "r languag interpret",
        "P-Tasks": "check r version execut file start r interact shell repl",
        "Summary": "R language interpreter.",
        "Task-Script": {
            "Check R version": "R --version",
            "Execute a file": "R -f {{file.R}}",
            "Start an R interactive shell (REPL)": "R"
        }
    },
    "common_r2e": {
        "Category": "common",
        "Command": "r2e",
        "P-Summary": "forward rss feed email address\nrequir configur sendmail smtp setup",
        "P-Tasks": "creat new feed databas send email email address delet feed specifi index list feed send new stori email address subscrib feed",
        "Summary": "Forwards RSS feeds to an email address.\nRequires a configured `sendmail` or smtp setup.",
        "Task-Script": {
            "Create a new feed database that sends email to an email address": "r2e new {{email_address}}",
            "Delete a feed at a specified index": "r2e delete {{index}}",
            "List all feeds": "r2e list",
            "Send new stories to an email address": "r2e run",
            "Subscribe to a feed": "r2e add {{feed_name}} {{feed_URI}}"
        }
    },
    "common_rabin2": {
        "Category": "common",
        "Command": "rabin2",
        "P-Summary": "get inform binari file elf pe java class mach-o - symbol section link librari etc\ncome bundl radare2",
        "P-Tasks": "display gener inform binari architectur type endian display link librari display string contain binari display symbol import librari display output json",
        "Summary": "Get information about binary files (ELF, PE, Java CLASS, Mach-O) - symbols, sections, linked libraries, etc.\nComes bundled with `radare2`.",
        "Task-Script": {
            "Display general information about a binary (architecture, type, endianness)": "rabin2 -I {{path/to/binary}}",
            "Display linked libraries": "rabin2 -l {{path/to/binary}}",
            "Display strings contained in the binary": "rabin2 -z {{path/to/binary}}",
            "Display symbols imported from libraries": "rabin2 -i {{path/to/binary}}",
            "Display the output in JSON": "rabin2 -j -I {{path/to/binary}}"
        }
    },
    "common_radare2": {
        "Category": "common",
        "Command": "radare2",
        "P-Summary": "set revers engin tool",
        "P-Tasks": "debug program dump raw byte current block file open file write mode without pars file format header run script enter interact cli run shell command interact cli show help text command interact cli",
        "Summary": "A set of reverse engineering tools.",
        "Task-Script": {
            "Debug a program": "radare2 -d {{path/to/binary}}",
            "Dump raw bytes of current block to a file": "> pr > {{path/to/file.bin}}",
            "Open a file in write mode without parsing the file format headers": "radare2 -nw {{path/to/binary}}",
            "Run a script before entering the interactive CLI": "radare2 -i {{path/to/script.r2}} {{path/to/binary}}",
            "Run a shell command from the interactive CLI": "> !{{shell_command}}",
            "Show help text for any command in the interactive CLI": "> {{radare2_command}}?"
        }
    },
    "common_rails": {
        "Category": "common",
        "Command": "rails",
        "P-Summary": "server-sid mvc framework written rubi",
        "P-Tasks": "check current version rail creat new rail project open consol interact applic command line start local server current project specifi port start local server current project port 3000",
        "Summary": "A server-side MVC framework written in Ruby.",
        "Task-Script": {
            "Check current version of rails": "rails --version",
            "Create a new rails project": "rails new \"{{project_name}}\"",
            "Open console to interact with application from command line": "rails console",
            "Start local server for current project on a specified port": "rails server -p \"{{port}}\"",
            "Start local server for current project on port 3000": "rails server"
        }
    },
    "common_rails db": {
        "Category": "common",
        "Command": "rails db",
        "P-Summary": "variou database-rel subcommand rubi rail",
        "P-Tasks": "access databas consol creat databas load schema initi seed data creat databas defin current environ destroy databas defin current environ fill current databas data defin db seed rb rollback last migrat run pend migrat view statu migrat file",
        "Summary": "Various database-related subcommands for Ruby on Rails.",
        "Task-Script": {
            "Access the database console": "rails db",
            "Create databases, load the schema, and initialize with seed data": "rails db:setup",
            "Create the databases defined in the current environment": "rails db:create",
            "Destroy the databases defined in the current environment": "rails db:drop",
            "Fill the current database with data defined in db/seeds.rb": "rails db:seed",
            "Rollback the last migration": "rails db:rollback",
            "Run pending migrations": "rails db:migrate",
            "View the status of each migration file": "rails db:migrate:status"
        }
    },
    "common_rails generate": {
        "Category": "common",
        "Command": "rails generate",
        "P-Summary": "gener new rail templat exist project",
        "P-Tasks": "gener new control name post action index show new creat gener new migrat add categori attribut exist model call post gener new model name post attribut titl bodi gener scaffold model name post predefin attribut titl bodi list avail gener",
        "Summary": "Generate new Rails templates in an existing project.",
        "Task-Script": {
            "Generate a new controller named Posts with actions index, show, new and create": "rails generate controller {{Posts}} {{index}} {{show}} {{new}} {{create}}",
            "Generate a new migration that adds a category attribute to an existing model called Post": "rails generate migration {{AddCategoryToPost}} {{category:string}}",
            "Generate a new model named Post with attributes title and body": "rails generate model {{Post}} {{title:string}} {{body:text}}",
            "Generate a scaffold for a model named Post, predefining the attributes title and body": "rails generate scaffold {{Post}} {{title:string}} {{body:text}}",
            "List all available generators": "rails generate"
        }
    },
    "common_rails routes": {
        "Category": "common",
        "Command": "rails routes",
        "P-Summary": "list rout rail applic",
        "P-Tasks": "list rout list rout expand format list rout partial match url helper method name http verb url path list rout map specifi control",
        "Summary": "List routes in a Rails application.",
        "Task-Script": {
            "List all routes": "rails routes",
            "List all routes in an expanded format": "rails routes --expanded",
            "List routes partially matching URL helper method name, HTTP verb, or URL path": "rails routes -g {{posts_path|GET|/posts}}",
            "List routes that map to a specified controller": "rails routes -c {{posts|Posts|Blogs::PostsController}}"
        }
    },
    "common_rainbowstream": {
        "Category": "common",
        "Command": "rainbowstream",
        "P-Summary": "terminal-bas twitter client support realtim tweetstream trend send search favorit user manag\nonlin help h arrow histori tab auto-complet 2-tab suggest",
        "P-Tasks": "favorit tweet given id open rainbowstream perform search given word without hashtag retweet tweet given id id besid time show profil given user show timelin option number tweet display default 5 tweet messag as-i",
        "Summary": "Terminal-based Twitter client supporting realtime tweetstream, trends, sending, search, favorites and user management.\nOnline help with `h`, up and down arrows for history, tab to auto-complete and 2-tab for suggestion.",
        "Task-Script": {
            "Favorite the tweet with given id": "fav {{tweet_id}}",
            "Open rainbowstream": "rainbowstream",
            "Perform a search for a given word (with or without hashtag)": "s {{word}}",
            "Retweet the tweet with given id (id is beside the time)": "rt {{tweet_id}}",
            "Show profile of a given user": "whois @{{user}}",
            "Show your timeline (optional number of tweets to display, default is 5)": "home [{{num_of_last_tweets}}]",
            "Tweet the message as-is": "t {{message}}"
        }
    },
    "common_ranger": {
        "Category": "common",
        "Command": "ranger",
        "P-Summary": "consol file manag vi key bind",
        "P-Tasks": "chang configur directori chang data directori launch ranger print cpu usag statist exit show directori",
        "Summary": "Console file manager with VI key bindings.",
        "Task-Script": {
            "Change the configuration directory": "ranger --confdir={{path/to/directory}}",
            "Change the data directory": "ranger --datadir={{path/to/directory}}",
            "Launch ranger": "ranger",
            "Print CPU usage statistics on exit": "ranger --profile",
            "Show only directories": "ranger --show-only-dirs"
        }
    },
    "common_rapper": {
        "Category": "common",
        "Command": "rapper",
        "P-Summary": "raptor rdf pars util\npart raptor rdf syntax librari",
        "P-Tasks": "convert rdf xml document turtl count number tripl turtl file",
        "Summary": "The Raptor RDF parsing utility.\nPart of the Raptor RDF Syntax Library.",
        "Task-Script": {
            "Convert an RDF/XML document to Turtle": "rapper -i rdfxml -o turtle {{file}}",
            "Count the number of triples in a Turtle file": "rapper -i turtle -c {{file}}"
        }
    },
    "common_rar": {
        "Category": "common",
        "Command": "rar",
        "P-Summary": "rar archiv\nsupport multi-volum archiv option self-extract",
        "P-Tasks": "archiv 1 file archiv directori encrypt file data header password password protect result archiv split archiv part equal size 50m use specif compress level 0-5",
        "Summary": "The RAR archiver. Supports multi-volume archives that can be optionally self-extracting.",
        "Task-Script": {
            "Archive 1 or more files": "rar a {{path/to/archive_name.rar}} {{path/to/file1}} {{path/to/file2}} {{path/to/file3}}",
            "Archive a directory": "rar a {{path/to/archive_name.rar}} {{path/to/directory}}",
            "Encrypt file data and headers with password": "rar a -hp{{password}} {{path/to/archive_name.rar}} {{path/to/file_or_directory}}",
            "Password protect the resulting archive": "rar a -p{{password}} {{path/to/archive_name.rar}} {{path/to/file_or_directory}}",
            "Split the archive into parts of equal size (50M)": "rar a -v{{50M}} -R {{path/to/archive_name.rar}} {{path/to/file_or_directory}}",
            "Use a specific compression level (0-5)": "rar a -m{{compression_level}} {{path/to/archive_name.rar}} {{path/to/file_or_directory}}"
        }
    },
    "common_rbac-lookup": {
        "Category": "common",
        "Command": "rbac-lookup",
        "P-Summary": "find role cluster role attach user servic account group name kubernet cluster",
        "P-Tasks": "view rbac bind match given express view rbac bind view rbac bind along iam role use gke view rbac bind along sourc role bind view rbac bind filter subject",
        "Summary": "Find roles and cluster roles attached to any user, service account or group name in your Kubernetes cluster.",
        "Task-Script": {
            "View RBAC bindings that match a given expression": "rbac-lookup {{search_term}}",
            "View all RBAC bindings": "rbac-lookup",
            "View all RBAC bindings along with IAM roles (if you are using GKE)": "rbac-lookup --gke",
            "View all RBAC bindings along with the source role binding": "rbac-lookup -o wide",
            "View all RBAC bindings filtered by subject": "rbac-lookup -k {{user|group|serviceaccount}}"
        }
    },
    "common_rbash": {
        "Category": "common",
        "Command": "rbash",
        "P-Summary": "restrict bash shell\nsimilar bash shell restrict like chang directori cd set unset path env variabl other",
        "P-Tasks": "execut command print version inform rbash run command file start rbash",
        "Summary": "Restricted Bash shell.\nSimilar to the `bash` shell with some restrictions like changing directories with `cd`, setting/unsetting of PATH, ENV variables and others.",
        "Task-Script": {
            "Execute a command": "rbash -c \"{{command}}\"",
            "Print the version information of rbash": "rbash --version",
            "Run commands from a file": "rbash {{file.sh}}",
            "Start rbash": "rbash"
        }
    },
    "common_rbenv": {
        "Category": "common",
        "Command": "rbenv",
        "P-Summary": "tool easili instal rubi version manag applic environ",
        "P-Tasks": "display list instal version display rubi version contain specifi execut instal one space-separ version rubi show current select rubi version uninstal version rubi use specif version rubi across whole system use specif version rubi applic project directori",
        "Summary": "A tool to easily install Ruby versions and manage application environments.",
        "Task-Script": {
            "Display a list of installed versions": "rbenv versions",
            "Display all ruby versions that contain the specified executable": "rbenv whence {{executable}}",
            "Install one or more space-separated versions of Ruby": "rbenv install {{version(s)}}",
            "Show the currently selected Ruby version": "rbenv version",
            "Uninstall a version of Ruby": "rbenv uninstall {{version}}",
            "Use a specific version of Ruby across the whole system": "rbenv global {{version}}",
            "Use a specific version of Ruby for an application/project directory": "rbenv local {{version}}"
        }
    },
    "common_rbt": {
        "Category": "common",
        "Command": "rbt",
        "P-Summary": "rbtool set command line tool work review board rbcommon",
        "P-Tasks": "display diff sent review board land chang local branch review request patch tree chang review request post chang review board set rbtool talk repositori",
        "Summary": "RBTools is a set of command line tools for working with Review Board and RBCommons.",
        "Task-Script": {
            "Display the diff that will be sent to Review Board": "rbt diff",
            "Land a change in a local branch or on a review request": "rbt land {{branch_name}}",
            "Patch your tree with a change on a review request": "rbt patch {{review_request_id}}",
            "Post changes to Review Board": "rbt post {{change_number}}",
            "Set up RBTool to talk to a repository": "rbt setup-repo"
        }
    },
    "common_rclone": {
        "Category": "common",
        "Command": "rclone",
        "P-Summary": "cli program copi sync move file directori mani cloud servic",
        "P-Tasks": "copi file directori local sourc remot destin copi file directori remot sourc local destin delet remot file directori use -- dry-run test remov actual delet list content directori rclone remot mount rclone remot experiment move file directori local sourc remot destin sync local sourc remot destin chang destin unmount rclone remot ctrl-c fail experiment",
        "Summary": "CLI program to copy/sync/move files and directories to and from many cloud services.",
        "Task-Script": {
            "Copy file or directory from local source to remote destination": "rclone copy {{path/to/source_file_or_directory}} {{remote_name}}:{{path/to/destination_directory}}",
            "Copy file or directory from remote source to local destination": "rclone copy {{remote_name}}:{{path/to/source_file_or_directory}} {{path/to/destination_directory}}",
            "Delete remote file or directory (use `--dry-run` to test, remove it to actually delete)": "rclone --dry-run delete {{remote_name}}:{{path/to/file_or_directory}}",
            "List contents of a directory on an rclone remote": "rclone lsf {{remote_name}}:{{path/to/directory}}",
            "Mount rclone remote (experimental)": "rclone mount {{remote_name}}:{{path/to/directory}} {{path/to/mount_point}}",
            "Move file or directory from local source to remote destination": "rclone move {{path/to/file_or_directory}} {{remote_name}}:{{path/to/directory}}",
            "Sync local source to remote destination, changing the destination only": "rclone sync {{path/to/file_or_directory}} {{remote_name}}:{{path/to/directory}}",
            "Unmount rclone remote if CTRL-C fails (experimental)": "fusermount -u {{path/to/mount_point}}"
        }
    },
    "common_rdfind": {
        "Category": "common",
        "Command": "rdfind",
        "P-Summary": "find file duplic content get rid",
        "P-Tasks": "delet duplic ignor empti file identifi duplic given directori output summari replac duplic hardlink replac duplic symlink soft link",
        "Summary": "Find files with duplicate content and get rid of them.",
        "Task-Script": {
            "Delete all duplicates and do not ignore empty files": "rdfind -deleteduplicates true -ignoreempty false {{path/to/directory}}",
            "Identify all duplicates in a given directory and output a summary": "rdfind -dryrun true {{path/to/directory}}",
            "Replace all duplicates with hardlinks": "rdfind -makehardlinks true {{path/to/directory}}",
            "Replace all duplicates with symlinks/soft links": "rdfind -makesymlinks true {{path/to/directory}}"
        }
    },
    "common_read": {
        "Category": "common",
        "Command": "read",
        "P-Summary": "bash builtin retriev data standard input",
        "P-Tasks": "display prompt input echo type charact silent mode let backslash act escap charact enabl backspac gnu readlin hotkey enter input read specifi number maximum charact read store data type keyboard store next line enter valu array use specif charact delimit instead new line",
        "Summary": "BASH builtin for retrieving data from standard input.",
        "Task-Script": {
            "Display a prompt before the input": "read -p \"{{Enter your input here: }}\" {{variable}}",
            "Do not echo typed characters (silent mode)": "read -s {{variable}}",
            "Do not let backslash (\\) act as an escape character": "read -r {{variable}}",
            "Enable backspace and GNU readline hotkeys when entering input with read": "read -e {{variable}}",
            "Specify the number of maximum characters to be read": "read -n {{character_count}} {{variable}}",
            "Store data that you type from the keyboard": "read {{variable}}",
            "Store each of the next lines you enter as values of an array": "read -a {{array}}",
            "Use a specific character as a delimiter instead of a new line": "read -d {{new_delimiter}} {{variable}}"
        }
    },
    "common_readlink": {
        "Category": "common",
        "Command": "readlink",
        "P-Summary": "follow symlink get symlink inform",
        "P-Tasks": "get absolut path file get actual file symlink point",
        "Summary": "Follow symlinks and get symlink information.",
        "Task-Script": {
            "Get the absolute path to a file": "readlink -f {{filename}}",
            "Get the actual file to which the symlink points": "readlink {{filename}}"
        }
    },
    "common_realpath": {
        "Category": "common",
        "Command": "realpath",
        "P-Summary": "display resolv absolut path file directori",
        "P-Tasks": "disabl symlink expans display absolut path file directori requir path compon exist resolv compon symlink suppress error messag",
        "Summary": "Display the resolved absolute path for a file or directory.",
        "Task-Script": {
            "Disable symlink expansion": "realpath --no-symlinks {{path/to/file_or_directory}}",
            "Display the absolute path for a file or directory": "realpath {{path/to/file_or_directory}}",
            "Require all path components to exist": "realpath --canonicalize-existing {{path/to/file_or_directory}}",
            "Resolve \"..\" components before symlinks": "realpath --logical {{path/to/file_or_directory}}",
            "Suppress error messages": "realpath --quiet {{path/to/file_or_directory}}"
        }
    },
    "common_recsel": {
        "Category": "common",
        "Command": "recsel",
        "P-Summary": "print record recfil : human-edit plain text databas",
        "P-Tasks": "extract name version field use match string given regular express use predic match name version",
        "Summary": "Print records from a recfile: a human-editable, plain text database.",
        "Task-Script": {
            "Extract name and version field": "recsel -p name,version {{data.rec}}",
            "Use \"~\" to match a string with a given regular expression": "recsel -e \"{{field_name}}  ~ '{{pattern_regex}}' {{data.rec}}\"",
            "Use a predicate to match a name and a version": "recsel -e \"name ~ '{{pattern_regex}}' && version ~ '{{pattern_regex}}'\" {{data.rec}}"
        }
    },
    "common_rector": {
        "Category": "common",
        "Command": "rector",
        "P-Summary": "autom tool updat refactor php 5 3+ code",
        "P-Tasks": "display list avail level process directori appli code standard process directori specif level process directori without appli chang dri run process specif directori",
        "Summary": "An automated tool for updating and refactoring PHP 5.3+ code.",
        "Task-Script": {
            "Display a list of available levels": "rector levels",
            "Process a directory and apply coding standards": "rector process {{path/to/directory}} --with-style",
            "Process a directory with a specific level": "rector process {{path/to/directory}} --level {{level_name}}",
            "Process a directory without applying changes (dry run)": "rector process {{path/to/directory}} --dry-run",
            "Process a specific directory": "rector process {{path/to/directory}}"
        }
    },
    "common_redis-cli": {
        "Category": "common",
        "Command": "redis-cli",
        "P-Summary": "open connect redi server",
        "P-Tasks": "connect remot server default port 6379 connect remot server specifi port number connect local server execut redi command specifi password",
        "Summary": "Opens a connection to a Redis server.",
        "Task-Script": {
            "Connect to a remote server on the default port (6379)": "redis-cli -h {{host}}",
            "Connect to a remote server specifying a port number": "redis-cli -h {{host}} -p {{port}}",
            "Connect to the local server": "redis-cli",
            "Execute Redis command": "redis-cli {{redis_command}}",
            "Specify a password": "redis-cli -a {{password}}"
        }
    },
    "common_redis-server": {
        "Category": "common",
        "Command": "redis-server",
        "P-Summary": "persist key-valu databas",
        "P-Tasks": "start redi server custom configur file start redi server verbos log start redi server use default port 6379 write log stdout start redi server use default port background process start redi server use specifi port background process",
        "Summary": "Persistent key-value database.",
        "Task-Script": {
            "Start Redis server with a custom configuration file": "redis-server {{path/to/redis.conf}}",
            "Start Redis server with verbose logging": "redis-server --loglevel {{warning|notice|verbose|debug}}",
            "Start Redis server, using the default port (6379), and write logs to `stdout`": "redis-server",
            "Start Redis server, using the default port, as a background process": "redis-server --daemonize yes",
            "Start Redis server, using the specified port, as a background process": "redis-server --port {{port}} --daemonize yes"
        }
    },
    "common_redshift": {
        "Category": "common",
        "Command": "redshift",
        "P-Summary": "adjust color temperatur screen accord surround",
        "P-Tasks": "turn redshift 5700k temperatur day 3600k night turn redshift 70 screen bright day 40 bright night turn redshift constant unchang color temperatur turn redshift manually-specifi custom locat turn redshift custom gamma level 0 1",
        "Summary": "Adjust the color temperature of your screen according to your surroundings.",
        "Task-Script": {
            "Turn on Redshift with 5700K temperature during day and 3600K at night": "redshift -t {{5700}}:{{3600}}",
            "Turn on Redshift with 70% screen brightness during day and 40% brightness at night": "redshift -b {{0.7}}:{{0.4}}",
            "Turn on Redshift with a constant unchanging color temperature": "redshift -O {{temperature}}",
            "Turn on Redshift with a manually-specified custom location": "redshift -l {{latitude}}:{{longitude}}",
            "Turn on Redshift with custom gamma levels (between 0 and 1)": "redshift -g {{red}}:{{green}}:{{blue}}"
        }
    },
    "common_reflac": {
        "Category": "common",
        "Command": "reflac",
        "P-Summary": "recompress flac file in-plac preserv metadata",
        "P-Tasks": "display filenam process enabl maximum compress slow perserv file modif time recompress directori flac file recurs subdirectori",
        "Summary": "Recompress FLAC files in-place while preserving metadata.",
        "Task-Script": {
            "Display filenames as they are processed": "reflac --verbose {{path/to/directory}}",
            "Enable maximum compression (very slow)": "reflac --best {{path/to/directory}}",
            "Perserve file modification times": "reflac --preserve {{path/to/directory}}",
            "Recompress a directory of FLAC files": "reflac {{path/to/directory}}",
            "Recurse into subdirectories": "reflac --recursive {{path/to/directory}}"
        }
    },
    "common_renice": {
        "Category": "common",
        "Command": "renice",
        "P-Summary": "alter schedul prioriti nice one run process\nnice valu rang -20 favor process 19 least favor process",
        "P-Tasks": "chang prioriti run process chang prioriti process own user chang prioriti process belong process group",
        "Summary": "Alters the scheduling priority/nicenesses of one or more running processes.\nNiceness values range from -20 (most favorable to the process) to 19 (least favorable to the process).",
        "Task-Script": {
            "Change priority of a running process": "renice -n {{niceness_value}} -p {{pid}}",
            "Change priority of all processes owned by a user": "renice -n {{niceness_value}} -u {{user}}",
            "Change priority of all processes that belong to a process group": "renice -n {{niceness_value}} --pgrp {{process_group}}"
        }
    },
    "common_repren": {
        "Category": "common",
        "Command": "repren",
        "P-Summary": "multi-pattern string replac file renam tool",
        "P-Tasks": "case-insensit renam dry-run renam directori jpeg regular express dry-run renam directori png liter string replac find-and-replac content directori csv file find-and-replac renam oper time use pattern file",
        "Summary": "Multi-pattern string replacement and file renaming tool.",
        "Task-Script": {
            "Do a case-insensitive rename": "repren --rename --insensitive --patterns {{path/to/patfile.ext}} *",
            "Do a dry-run renaming a directory of jpegs with a regular expression": "repren --rename --dry-run --from '{{regular_expression}}' --to '{{replacement_string}}' {{*.jpg}} {{*.jpeg}}",
            "Do a dry-run renaming a directory of pngs with a literal string replacement": "repren --dry-run --rename --literal --from '{{find_string}}' --to '{{replacement_string}}' {{*.png}}",
            "Do a find-and-replace on the contents of a directory of csv files": "repren --from '{{([0-9]+) example_string}}' --to '{{replacement_string \\1}}' {{*.csv}}",
            "Do both a find-and-replace and a rename operation at the same time, using a pattern file": "repren --patterns {{path/to/patfile.ext}} --full {{*.txt}}"
        }
    },
    "common_restic": {
        "Category": "common",
        "Command": "restic",
        "P-Summary": "backup program aim fast secur effici",
        "P-Tasks": "backup directori repositori clean repositori keep recent snapshot uniqu backup initi backup repositori specifi local directori restor specif backup snapshot target directori restor specif path specif backup target directori show backup snapshot current store repositori",
        "Summary": "A backup program that aims to be fast, secure and efficient.",
        "Task-Script": {
            "Backup a directory to the repository": "restic -r {{path/to/repository}} backup {{path/to/directory}}",
            "Clean up the repository and keep only the most recent snapshot of each unique backup": "restic forget --keep-last 1 --prune",
            "Initialize a backup repository in the specified local directory": "restic init -r {{path/to/repository}}",
            "Restore a specific backup snapshot to a target directory": "restic -r {{path/to/repository}} restore {{snapshot_id}} {{path/to/target}}",
            "Restore a specific path from a specific backup to a target directory": "restic -r {{path/to/repository}} --include {{path/to/restore}} --target {{path/to/target}} restore {{snapshot_id}}",
            "Show backup snapshots currently stored in the repository": "restic -r {{path/to/repository}} snapshots"
        }
    },
    "common_rev": {
        "Category": "common",
        "Command": "rev",
        "P-Summary": "revers line text",
        "P-Tasks": "revers entir file print stdout revers text string hello",
        "Summary": "Reverse a line of text.",
        "Task-Script": {
            "Reverse an entire file and print to `stdout`": "rev {{file}}",
            "Reverse the text string \"hello\"": "echo \"hello\" | rev"
        }
    },
    "common_ripgrep": {
        "Category": "common",
        "Command": "ripgrep",
        "P-Summary": "recurs line-ori cli search tool\naim faster altern grep",
        "P-Tasks": "list match file use pipe command recurs search current directori regex pattern search liter string pattern search pattern file match glob e g readm\nsearch pattern certain filetyp e g html css etc\nsearch pattern subset directori search pattern includ gitignor hidden file show line match given pattern",
        "Summary": "A recursive line-oriented CLI search tool.\nAims to be a faster alternative to `grep`.",
        "Task-Script": {
            "Only list matched files (useful when piping to other commands)": "rg --files-with-matches {{pattern}}",
            "Recursively search the current directory for a regex pattern": "rg {{pattern}}",
            "Search a literal string pattern": "rg -F {{string}}",
            "Search for a pattern in files matching a glob (e.g., `README.*`)": "rg {{pattern}} -g {{glob}}",
            "Search for a pattern only in a certain filetype (e.g., html, css, etc.)": "rg -t {{filetype}} {{pattern}}",
            "Search for a pattern only in a subset of directories": "rg {{pattern}} {{set_of_subdirs}}",
            "Search for pattern including all .gitignored and hidden files": "rg -uu {{pattern}}",
            "Show lines that do not match the given pattern": "rg --invert-match {{pattern}}"
        }
    },
    "common_rm": {
        "Category": "common",
        "Command": "rm",
        "P-Summary": "remov file directori",
        "P-Tasks": "forcibl remov directori without prompt confirm show error messag interact remov multipl file prompt everi remov recurs remov directori subdirectori remov file arbitrari locat remov file verbos mode print messag remov file",
        "Summary": "Remove files or directories.",
        "Task-Script": {
            "Forcibly remove a directory, without prompting for confirmation or showing error messages": "rm -rf {{path/to/directory}}",
            "Interactively remove multiple files, with a prompt before every removal": "rm -i {{file(s)}}",
            "Recursively remove a directory and all its subdirectories": "rm -r {{path/to/directory}}",
            "Remove files from arbitrary locations": "rm {{path/to/file}} {{path/to/another/file}}",
            "Remove files in verbose mode, printing a message for each removed file": "rm -v {{path/to/directory/*}}"
        }
    },
    "common_rmdir": {
        "Category": "common",
        "Command": "rmdir",
        "P-Summary": "remov directori",
        "P-Tasks": "remov directori provid empti\nuse rm -r remov non-empti directori remov target parent directori use nest dir",
        "Summary": "Removes a directory.",
        "Task-Script": {
            "Remove directory, provided it is empty. Use `rm -r` to remove non-empty directories": "rmdir {{path/to/directory}}",
            "Remove the target and its parent directories (useful for nested dirs)": "rmdir -p {{path/to/directory}}"
        }
    },
    "common_roave-backward-compatibility-check": {
        "Category": "common",
        "Command": "roave-backward-compatibility-check",
        "P-Summary": "tool use verifi backward compat break two version php librari",
        "P-Tasks": "check break chang output markdown check break chang last tag specif refer check break chang sinc specif tag check break chang sinc last tag",
        "Summary": "A tool that can be used to verify backward compatibility breaks between two versions of a PHP library.",
        "Task-Script": {
            "Check for breaking changes and output to markdown": "roave-backward-compatibility-check --format=markdown > {{results.md}}",
            "Check for breaking changes between the last tag and a specific reference": "roave-backward-compatibility-check --to={{git_reference}}",
            "Check for breaking changes since a specific tag": "roave-backward-compatibility-check --from={{git_reference}}",
            "Check for breaking changes since the last tag": "roave-backward-compatibility-check"
        }
    },
    "common_robo": {
        "Category": "common",
        "Command": "robo",
        "P-Summary": "php task runner",
        "P-Tasks": "list avail command run specif command simul run specif command",
        "Summary": "PHP task runner.",
        "Task-Script": {
            "List available commands": "robo list",
            "Run a specific command": "robo {{foo}}",
            "Simulate running a specific command": "robo --simulate {{foo}}"
        }
    },
    "common_roll": {
        "Category": "common",
        "Command": "roll",
        "P-Summary": "roll user-defin dice sequenc",
        "P-Tasks": "roll 1 8-side die add 3 sum result roll 2 12-side dice 2 time show everi roll roll 2 20-side dice result bigger 10 roll 2 5-side dice 3 time show total sum roll 3 6-side dice sum result roll 4 6-side dice keep 3 highest result sum result",
        "Summary": "Rolls a user-defined dice sequence.",
        "Task-Script": {
            "Roll 1 8-sided die, add 3 and sum the results": "roll {{d8 + 3}}",
            "Roll 2 12-sided dice 2 times and show every roll": "roll --verbose {{2{2d12}}}",
            "Roll 2 20-sided dice until the result is bigger than 10": "roll \"{{2d20>10}}\"",
            "Roll 2 5-sided dice 3 times and show the total sum": "roll --sum-series {{3{2d5}}}",
            "Roll 3 6-sided dice and sums the results": "roll {{3d}}",
            "Roll 4 6-sided dice, keep the 3 highest results and sum the results": "roll {{4d6h3}}"
        }
    },
    "common_route": {
        "Category": "common",
        "Command": "route",
        "P-Summary": "use rout cmd set rout tabl",
        "P-Tasks": "add rout rule delet rout rule display inform rout tabl",
        "Summary": "Use route cmd to set the route table.",
        "Task-Script": {
            "Add route rule": "sudo route add -net {{ip_address}} netmask {{netmask_address}} gw {{gw_address}}",
            "Delete route rule": "sudo route del -net {{ip_address}} netmask {{netmask_address}} dev {{gw_address}}",
            "Display the information of route table": "route -n"
        }
    },
    "common_rr": {
        "Category": "common",
        "Command": "rr",
        "P-Summary": "debug tool design record replay program execut",
        "P-Tasks": "record applic replay latest record execut",
        "Summary": "Debugging tool designed to record and replay program execution.",
        "Task-Script": {
            "Record an application": "rr record {{path/to/binary --arg1 --arg2}}",
            "Replay latest recorded execution": "rr replay"
        }
    },
    "common_rspec": {
        "Category": "common",
        "Command": "rspec",
        "P-Summary": "behavior-driven develop test framework written rubi test rubi code",
        "P-Tasks": "initialis rspec config spec helper file run specif directori test run specif test file run specif test file e g\ntest start line 83 run test run multipl test file run spec specif seed",
        "Summary": "Behavior-driven development testing framework written in Ruby to test Ruby code.",
        "Task-Script": {
            "Initialise an .rspec config and a spec helper file": "rspec --init",
            "Run a specific directory of tests": "rspec {{path/to/directory}}",
            "Run a specific test file": "rspec {{path/to/file}}",
            "Run a specific test in a file (e.g. the test starts on line 83)": "rspec {{path/to/file}}:{{83}}",
            "Run all tests": "rspec",
            "Run multiple test files": "rspec {{path/to/file1}} {{path/to/file2}}",
            "Run specs with a specific seed": "rspec --seed {{seed_number}}"
        }
    },
    "common_rsstail": {
        "Category": "common",
        "Command": "rsstail",
        "P-Summary": "tail rss feed",
        "P-Tasks": "includ public date link set updat interv show feed exit show feed revers chronolog order newer bottom show feed given url wait new entri appear bottom",
        "Summary": "`tail` for RSS feeds.",
        "Task-Script": {
            "Include publication date and link": "rsstail -pl -u {{url}}",
            "Set update interval": "rsstail -u {{url}} -i {{interval_in_seconds}}",
            "Show feed and exit": "rsstail -1 -u {{url}}",
            "Show the feed in reverse chronological order (newer at the bottom)": "rsstail -r -u {{url}}",
            "Show the feed of a given url and wait for new entries appearing at the bottom": "rsstail -u {{url}}"
        }
    },
    "common_rsync": {
        "Category": "common",
        "Command": "rsync",
        "P-Summary": "transfer file either remot host two remot host\ntransfer singl file multipl file match pattern",
        "P-Tasks": "transfer directori r ecurs rchive preserv attribut resolv contain soft l ink ignor alreadi transfer file u nless newer transfer directori children remot local transfer directori content directori remot local transfer file local remot host transfer file remot host local transfer file rchive preserv attribut compress z ip mode v erbos h uman-read p rogress transfer file ssh delet local file exist remot host transfer file ssh use differ port default show global progress",
        "Summary": "Transfer files either to or from a remote host (not between two remote hosts).\nCan transfer single files, or multiple files matching a pattern.",
        "Task-Script": {
            "Transfer a directory [r]ecursively, in [a]rchive to preserve attributes, resolving contained soft[l]inks , and ignoring already transferred files [u]nless newer": "rsync -rauL {{remote_host}}:{{path/to/remote_file}} {{path/to/local_directory}}",
            "Transfer a directory and all its children from a remote to local": "rsync -r {{remote_host}}:{{path/to/remote_directory}} {{path/to/local_directory}}",
            "Transfer directory contents (but not the directory itself) from a remote to local": "rsync -r {{remote_host}}:{{path/to/remote_directory}}/ {{path/to/local_directory}}",
            "Transfer file from local to remote host": "rsync {{path/to/local_file}} {{remote_host}}:{{path/to/remote_directory}}",
            "Transfer file from remote host to local": "rsync {{remote_host}}:{{path/to/remote_file}} {{path/to/local_directory}}",
            "Transfer file in [a]rchive (to preserve attributes) and compressed ([z]ipped) mode with [v]erbose and [h]uman-readable [P]rogress": "rsync -azvhP {{path/to/local_file}} {{remote_host}}:{{path/to/remote_directory}}",
            "Transfer file over SSH and delete local files that do not exist on remote host": "rsync -e ssh --delete {{remote_host}}:{{path/to/remote_file}} {{path/to/local_file}}",
            "Transfer file over SSH using a different port than the default and show global progress": "rsync -e 'ssh -p {{port}}' --info=progress2 {{remote_host}}:{{path/to/remote_file}} {{path/to/local_file}}"
        }
    },
    "common_rtmpdump": {
        "Category": "common",
        "Command": "rtmpdump",
        "P-Summary": "tool dump media content stream rtmp protocol",
        "P-Tasks": "download file download file flash player download file server requir referr specifi connect paramet detect correctli",
        "Summary": "A tool to dump media content streamed over the RTMP protocol.",
        "Task-Script": {
            "Download a file": "rtmpdump --rtmp {{rtmp://example.com/path/to/video}} -o {{file.ext}}",
            "Download a file from a Flash player": "rtmpdump --rtmp {{rtmp://example.com/path/to/video}} --swfVfy {{http://example.com/player}} --flashVer \"{{LNX 10,0,32,18}}\" -o {{file.ext}}",
            "Download a file from a server that requires a referrer": "rtmpdump --rtmp {{rtmp://example.com/path/to/video}} --pageUrl {{http://example.com/webpage}} -o {{file.ext}}",
            "Specify connection parameters if they are not detected correctly": "rtmpdump --rtmp {{rtmp://example.com/path/to/video}} --app {{app_name}} --playpath {{path/to/video}} -o {{file.ext}}"
        }
    },
    "common_rtv": {
        "Category": "common",
        "Command": "rtv",
        "P-Summary": "reddit termin viewer\nuse arrow key navig\nright left view return submiss respect",
        "P-Tasks": "expand collaps comment login open subreddit open link open front page open help screen",
        "Summary": "Reddit Terminal Viewer.\nUse arrow keys to navigate. Right and Left to view and return from a submission, respectively.",
        "Task-Script": {
            "Expand/collapse comments": "[space]",
            "Login": "u",
            "Open a subreddit": "/r/{{subreddit_name}}",
            "Open link": "o",
            "Open the front page": "/front",
            "Open the help screen": "?"
        }
    },
    "common_ruby": {
        "Category": "common",
        "Command": "ruby",
        "P-Summary": "rubi program languag interpret",
        "P-Tasks": "check syntax error given rubi script execut rubi script execut singl rubi command command line open interact rubi shell repl show version rubi use",
        "Summary": "Ruby programming language interpreter.",
        "Task-Script": {
            "Check for syntax errors on a given Ruby script": "ruby -c {{script.rb}}",
            "Execute a Ruby script": "ruby {{script.rb}}",
            "Execute a single Ruby command in the command line": "ruby -e {{command}}",
            "Open an Interactive Ruby Shell (REPL)": "irb",
            "Show the version of Ruby you are using": "ruby -v"
        }
    },
    "common_rustc": {
        "Category": "common",
        "Command": "rustc",
        "P-Summary": "rust compil\nprocess compil link rust languag sourc file",
        "P-Tasks": "compil singl file compil specif target compil architecture-specif optim current cpu compil debug inform compil high optim display architecture-specif optim current cpu display target list",
        "Summary": "The Rust compiler.\nProcesses, compiles and links Rust language source files.",
        "Task-Script": {
            "Compile a single file": "rustc {{file.rs}}",
            "Compile for a specific target": "rustc --target {{target_triple}} {{path/to/file.rs}}",
            "Compile with architecture-specific optimizations for the current CPU": "rustc -C target-cpu=native {{path/to/file.rs}}",
            "Compile with debugging information": "rustc -g {{file.rs}}",
            "Compile with high optimization": "rustc -O {{file.rs}}",
            "Display architecture-specific optimizations for the current CPU": "rustc -C target-cpu=native --print cfg",
            "Display target list": "rustc --print target-list"
        }
    },
    "common_rustfmt": {
        "Category": "common",
        "Command": "rustfmt",
        "P-Summary": "tool format rust sourc code",
        "P-Tasks": "backup modifi file format origin file renam bk extens check file format display chang consol format file overwrit origin file in-plac",
        "Summary": "Tool for formatting Rust source code.",
        "Task-Script": {
            "Backup any modified files before formatting (the original file is renamed with a `.bk` extension)": "rustfmt --backup {{source.rs}}",
            "Check a file for formatting and display any changes on the console": "rustfmt --check {{source.rs}}",
            "Format a file, overwriting the original file in-place": "rustfmt {{source.rs}}"
        }
    },
    "common_rustup": {
        "Category": "common",
        "Command": "rustup",
        "P-Summary": "rust toolchain instal\ninstal manag updat rust toolchain",
        "P-Tasks": "instal nightli toolchain system list instal toolchain run cargo build certain toolchain switch default toolchain nightli cargo rustc command use updat toolchain use nightli toolchain insid current project leav global set unchang",
        "Summary": "Rust toolchain installer.\nInstall, manage, and update Rust toolchains.",
        "Task-Script": {
            "Install the nightly toolchain for your system": "rustup install nightly",
            "List installed toolchains": "rustup show",
            "Run cargo build with a certain toolchain": "rustup run {{toolchain_name}} cargo build",
            "Switch the default toolchain to nightly so that the `cargo` and `rustc` commands will use it": "rustup default nightly",
            "Update all toolchains": "rustup update",
            "Use the nightly toolchain when inside the current project, but leave global settings unchanged": "rustup override set nightly"
        }
    },
    "common_rvm": {
        "Category": "common",
        "Command": "rvm",
        "P-Summary": "tool easili instal manag work multipl rubi environ",
        "P-Tasks": "display list instal version instal one space-separ version rubi remov version rubi sourc set default rubi version show specif depend os uninstal version rubi keep sourc upgrad version rubi new version use specif version rubi",
        "Summary": "A tool for easily installing, managing, and working with multiple ruby environments.",
        "Task-Script": {
            "Display a list of installed versions": "rvm list",
            "Install one or more space-separated versions of Ruby": "rvm install {{version(s)}}",
            "Remove a version of Ruby and its sources": "rvm remove {{version}}",
            "Set the default Ruby version": "rvm --default use {{version}}",
            "Show specific dependencies for your OS": "rvm requirements",
            "Uninstall a version of Ruby and keep its sources": "rvm uninstall {{version}}",
            "Upgrade a version of Ruby to a new version": "rvm upgrade {{current_version}} {{new_version}}",
            "Use a specific version of Ruby": "rvm use {{version}}"
        }
    },
    "common_s": {
        "Category": "common",
        "Command": "s",
        "P-Summary": "web search termin",
        "P-Tasks": "list provid search queri googl default provid search queri given provid use specifi binari perform search queri",
        "Summary": "Web search from the terminal.",
        "Task-Script": {
            "List all providers": "s --list-providers",
            "Search for a query on Google(default provider)": "s {{query}}",
            "Search for a query with a given provider": "s --provider {{provider}} {{query}}",
            "Use a specified binary to perform the search query": "s --binary \"{{binary}} {{arguments}}\" {{query}}"
        }
    },
    "common_safe": {
        "Category": "common",
        "Command": "safe",
        "P-Summary": "cli interact hashicorp vault",
        "P-Tasks": "add safe target authent cli client vault server use authent token display tree hierarchi reachabl key given path gener new 2048-bit ssh keypair store move secret one path anoth print environ variabl describ current target set auto-gener password secret set non-sensit key secret",
        "Summary": "A CLI to interact with HashiCorp Vault.",
        "Task-Script": {
            "Add a safe target": "safe target {{vault_addr}} {{target_name}}",
            "Authenticate the CLI client against the Vault server, using an authentication token": "safe auth {{authentication_token}}",
            "Display a tree hierarchy of all reachable keys for a given path": "safe tree {{path}}",
            "Generate a new 2048-bit SSH keypair and store it": "safe ssh {{2048}} {{path/to/secret}}",
            "Move a secret from one path to another": "safe move {{old/path/to/secret}} {{new/path/to/secret}}",
            "Print the environment variables describing the current target": "safe env",
            "Set auto-generated password in a secret": "safe gen {{path/to/secret}} {{key}}",
            "Set non-sensitive keys for a secret": "safe set {{path/to/secret}} {{key}}={{value}}"
        }
    },
    "common_sails": {
        "Category": "common",
        "Command": "sails",
        "P-Summary": "sail js realtim enterpris level mvc framework built top node js",
        "P-Tasks": "creat new sail project gener sail api gener sail control gener sail model start sail",
        "Summary": "Sails.js is a realtime enterprise level MVC framework built on top of Node.js.",
        "Task-Script": {
            "Create new Sails project": "sails new {{projectName}}",
            "Generate Sails API": "sails generate {{name}}",
            "Generate Sails Controller": "sails generate controller {{name}}",
            "Generate Sails Model": "sails generate model {{name}}",
            "Start Sails": "sails lift"
        }
    },
    "common_salt": {
        "Category": "common",
        "Command": "salt",
        "P-Summary": "execut command assert state remot salt minion",
        "P-Tasks": "execut highstat connect minion execut arbitrari command particular minion list connect minion upgrad packag use os packag manag apt yum brew subset minion",
        "Summary": "Execute commands and assert state on remote salt minions.",
        "Task-Script": {
            "Execute a highstate on all connected minions": "salt '*' state.highstate",
            "Execute an arbitrary command on a particular minion": "salt '{{minion_id}}' cmd.run \"ls \"",
            "List connected minions": "salt '*' test.ping",
            "Upgrade packages using the OS package manager (apt, yum, brew) on a subset of minions": "salt '*.example.com' pkg.upgrade"
        }
    },
    "common_salt-call": {
        "Category": "common",
        "Command": "salt-call",
        "P-Summary": "invok salt local salt minion",
        "P-Tasks": "list minion grain perform highstat dry-run comput chang actual perform perform highstat minion perform highstat verbos debug output",
        "Summary": "Invoke salt locally on a salt minion.",
        "Task-Script": {
            "List this minion's grains": "salt-call grains.items",
            "Perform a highstate dry-run, compute all changes but don't actually perform them": "salt-call state.highstate test=true",
            "Perform a highstate on this minion": "salt-call state.highstate",
            "Perform a highstate with verbose debugging output": "salt-call -l debug state.highstate"
        }
    },
    "common_salt-key": {
        "Category": "common",
        "Command": "salt-key",
        "P-Summary": "manag salt minion key salt master\nneed run salt master like root sudo",
        "P-Tasks": "accept minion key name list accept unaccept reject minion key print fingerprint public key reject minion key name",
        "Summary": "Manages salt minion keys on the salt master.\nNeeds to be run on the salt master, likely as root or with sudo.",
        "Task-Script": {
            "Accept a minion key by name": "salt-key -a {{MINION_ID}}",
            "List all accepted, unaccepted and rejected minion keys": "salt-key -L",
            "Print fingerprints of all public keys": "salt-key -F",
            "Reject a minion key by name": "salt-key -r {{MINION_ID}}"
        }
    },
    "common_salt-run": {
        "Category": "common",
        "Command": "salt-run",
        "P-Summary": "frontend execut salt-runn minion",
        "P-Tasks": "show minion disconnect show statu minion",
        "Summary": "Frontend for executing salt-runners on minions.",
        "Task-Script": {
            "Show all minions which are disconnected": "salt-run manage.up",
            "Show status of all minions": "salt-run manage.status"
        }
    },
    "common_samtools": {
        "Category": "common",
        "Command": "samtools",
        "P-Summary": "tool handl high-throughput sequenc genom data\nuse read write edit index view data sam bam cram format",
        "P-Tasks": "convert sam input file bam stream save file count align index chromosom contig index sort bam file creat sorted_input bam bai merg multipl file print align statist file sort file save bam output format automat determin output file extens split input file accord read group take input stdin - print sam header read overlap specif region stdout",
        "Summary": "Tools for handling high-throughput sequencing (genomics) data.\nUsed for reading/writing/editing/indexing/viewing of data in SAM/BAM/CRAM format.",
        "Task-Script": {
            "Convert a SAM input file to BAM stream and save to file": "samtools view -S -b {{input.sam}} > {{output.bam}}",
            "Count alignments to each index (chromosome / contig)": "samtools idxstats {{sorted_indexed_input}}",
            "Index a sorted BAM file (creates {{sorted_input.bam.bai}})": "samtools index {{sorted_input.bam}}",
            "Merge multiple files": "samtools merge {{output}} {{input1 input2 …}}",
            "Print alignment statistics about a file": "samtools flagstat {{sorted_input}}",
            "Sort file and save to BAM (the output format is automatically determined from the output file's extension)": "samtools sort {{input}} -o {{output.bam}}",
            "Split input file according to read groups": "samtools split {{merged_input}}",
            "Take input from stdin (-) and print the SAM header and any reads overlapping a specific region to `stdout`": "{{other_command}} | samtools view -h - chromosome:start-end"
        }
    },
    "common_sass": {
        "Category": "common",
        "Command": "sass",
        "P-Summary": "convert scss sass file css",
        "P-Tasks": "convert scss sass file css print result convert scss sass file css save result file watch scss sass file chang output updat css file filenam watch scss sass file chang output updat css file given filenam",
        "Summary": "Converts SCSS or Sass files to CSS.",
        "Task-Script": {
            "Convert a SCSS or Sass file to CSS and print out the result": "sass {{inputfile.scss|inputfile.sass}}",
            "Convert a SCSS or Sass file to CSS and save the result to a file": "sass {{inputfile.scss|inputfile.sass}} {{outputfile.css}}",
            "Watch a SCSS or Sass file for changes and output or update the CSS file with same filename": "sass --watch {{inputfile.scss|inputfile.sass}}",
            "Watch a SCSS or Sass file for changes and output or update the CSS file with the given filename": "sass --watch {{inputfile.scss|inputfile.sass}}:{{outputfile.css}}"
        }
    },
    "common_satis": {
        "Category": "common",
        "Command": "satis",
        "P-Summary": "command-lin util sati static compos repositori",
        "P-Tasks": "add vc repositori sati configur build static output updat specifi repositori build static output configur initialis sati configur remov useless archiv file",
        "Summary": "The command-line utility for the Satis static Composer repository.",
        "Task-Script": {
            "Add a VCS repository to the Satis configuration": "satis add {{repository_url}}",
            "Build the static output by updating only the specified repository": "satis build --repository-url {{repository_url}} {{satis.json}} {{path/to/output_directory}}",
            "Build the static output from the configuration": "satis build {{satis.json}} {{path/to/output_directory}}",
            "Initialise a Satis configuration": "satis init {{satis.json}}",
            "Remove useless archive files": "satis purge {{satis.json}} {{path/to/output_directory}}"
        }
    },
    "common_sbt": {
        "Category": "common",
        "Command": "sbt",
        "P-Summary": "build tool scala java project",
        "P-Tasks": "creat new scala project exist giter8 templat host github list sbt option start sbt interact shell repl use specif jar file sbt launcher use specifi version sbt",
        "Summary": "Build tool for Scala and Java projects.",
        "Task-Script": {
            "Create a new Scala project from an existing Giter8 template hosted on GitHub": "sbt new {{scala/hello-world.g8}}",
            "List all sbt options": "sbt -h",
            "Start the SBT interactive shell (REPL)": "sbt",
            "Use a specific jar file as the sbt launcher": "sbt -sbt-jar {{path}}",
            "Use the specified version of sbt": "sbt -sbt-version {{version}}"
        }
    },
    "common_scala": {
        "Category": "common",
        "Command": "scala",
        "P-Summary": "scala applic launcher interact interpret",
        "P-Tasks": "execut jar program execut scala script execut singl scala command command line start scala interact shell repl",
        "Summary": "Scala application launcher and interactive interpreter.",
        "Task-Script": {
            "Execute a .jar program": "scala {{filename.jar}}",
            "Execute a Scala script": "scala {{script.scala}}",
            "Execute a single Scala command in the command line": "scala -e {{command}}",
            "Start a Scala interactive shell (REPL)": "scala"
        }
    },
    "common_scc": {
        "Category": "common",
        "Command": "scc",
        "P-Summary": "tool written go count line code",
        "P-Tasks": "display output sort column default file display output everi file display output use specif output format default tabular exclud directori count count file specif file extens print help scc print line code current directori print line code target directori",
        "Summary": "Tool written in Go that counts lines of code.",
        "Task-Script": {
            "Display output and sort by column (defaults to by files)": "scc --sort {{files|name|lines|blanks|code|comments|complexity}}",
            "Display output for every file": "scc --by-file",
            "Display output using a specific output format (defaults to `tabular`)": "scc --format {{tabular|wide|json|csv|cloc-yaml|html|html-table}}",
            "Exclude directories from being counted": "scc --exclude-dir {{.git,.hg}}",
            "Only count files with specific file extensions": "scc --include-ext {{go, java, js}}",
            "Print help for scc": "scc -h",
            "Print lines of code in the current directory": "scc",
            "Print lines of code in the target directory": "scc {{path/to/directory}}"
        }
    },
    "common_scheme": {
        "Category": "common",
        "Command": "scheme",
        "P-Summary": "mit scheme languag interpert repl interact shell",
        "P-Tasks": "load scheme program repl load scheme express repl open interact shell repl open repl quiet mode run scheme program repl output",
        "Summary": "MIT Scheme language interperter and REPL (interactive shell).",
        "Task-Script": {
            "Load a scheme program into the REPL": "scheme --load {{script.scm}}",
            "Load scheme expressions into the REPL": "scheme --eval \"{{(define foo 'x)}}\"",
            "Open an interactive shell (REPL)": "scheme",
            "Open the REPL in quiet mode": "scheme --quiet",
            "Run a scheme program (with no REPL output)": "scheme --quiet < {{script.scm}}"
        }
    },
    "common_scp": {
        "Category": "common",
        "Command": "scp",
        "P-Summary": "secur copi\ncopi file host use secur copi protocol ssh",
        "P-Tasks": "copi file two remot host transfer local host copi file remot host local directori copi local file remot host recurs copi content directori remot host local directori use specif ssh privat key authent remot host use specif usernam connect remot host",
        "Summary": "Secure copy.\nCopy files between hosts using Secure Copy Protocol over SSH.",
        "Task-Script": {
            "Copy a file between two remote hosts transferring through the local host": "scp -3 {{host1}}:{{path/to/remote_file}} {{host2}}:{{path/to/remote_directory}}",
            "Copy a file from a remote host to a local directory": "scp {{remote_host}}:{{path/to/remote_file}} {{path/to/local_directory}}",
            "Copy a local file to a remote host": "scp {{path/to/local_file}} {{remote_host}}:{{path/to/remote_file}}",
            "Recursively copy the contents of a directory from a remote host to a local directory": "scp -r {{remote_host}}:{{path/to/remote_directory}} {{path/to/local_directory}}",
            "Use a specific ssh private key for authentication with the remote host": "scp -i {{~/.ssh/private_key}} {{local_file}} {{remote_host}}:{{/path/remote_file}}",
            "Use a specific username when connecting to the remote host": "scp {{path/to/local_file}} {{remote_username}}@{{remote_host}}:{{path/to/remote_directory}}"
        }
    },
    "common_scrapy": {
        "Category": "common",
        "Command": "scrapy",
        "P-Summary": "web-crawl framework",
        "P-Tasks": "creat project creat spider project directori edit spider project directori fetch webpag scrapi see print sourc stdout open webpag default browser scrapi see disabl javascript extra fidel open scrapi shell url allow interact page sourc python shell ipython avail run spider project directori",
        "Summary": "Web-crawling framework.",
        "Task-Script": {
            "Create a project": "scrapy startproject {{project_name}}",
            "Create a spider (in project directory)": "scrapy genspider {{spider_name}} {{website_domain}}",
            "Edit spider (in project directory)": "scrapy edit {{spider_name}}",
            "Fetch a webpage as scrapy sees it and print source in `stdout`": "scrapy fetch {{url}}",
            "Open a webpage in the default browser as scrapy sees it (disable javascript for extra fidelity)": "scrapy view {{url}}",
            "Open scrapy shell for url, which allows interaction with the page source in python shell (or ipython if available)": "scrapy shell {{url}}",
            "Run spider (in project directory)": "scrapy crawl {{spider_name}}"
        }
    },
    "common_scrcpy": {
        "Category": "common",
        "Command": "scrcpy",
        "P-Summary": "display control android devic desktop",
        "P-Tasks": "display mirror connect devic record display screen rotat display screen\nincrement valu add 90 degre counterclockwis rotat set target directori push file devic drag drop non-apk show touch physic devic start display fullscreen mode",
        "Summary": "Display and control your Android device on a desktop.",
        "Task-Script": {
            "Display a mirror of a connected device": "scrcpy",
            "Record display screen": "scrcpy --record {{path/to/file.mp4}}",
            "Rotate the display screen. Each incremental value adds a 90 degree counterclockwise rotation": "scrcpy --rotation {{0|1|2|3}}",
            "Set target directory for pushing files to device by drag and drop (non-APK)": "scrcpy --push-target {{path/to/directory}}",
            "Show touches on physical device": "scrcpy --show-touches",
            "Start display in fullscreen mode": "scrcpy --fullscreen"
        }
    },
    "common_screen": {
        "Category": "common",
        "Command": "screen",
        "P-Summary": "hold session open remot server\nmanag multipl window singl ssh connect",
        "P-Tasks": "detach insid screen kill detach screen kill current screen session reattach open screen show open screen session start new daemon log output screenlog x start new name screen session start new screen session",
        "Summary": "Hold a session open on a remote server. Manage multiple windows with a single SSH connection.",
        "Task-Script": {
            "Detach from inside a screen": "Ctrl + A, D",
            "Kill a detached screen": "screen -X -S {{session_name}} quit",
            "Kill the current screen session": "Ctrl + A, K",
            "Reattach to an open screen": "screen -r {{session_name}}",
            "Show open screen sessions": "screen -ls",
            "Start a new daemon and log the output to screenlog.x": "screen -dmLS {{session_name}} {{command}}",
            "Start a new named screen session": "screen -S {{session_name}}",
            "Start a new screen session": "screen"
        }
    },
    "common_screenfetch": {
        "Category": "common",
        "Command": "screenfetch",
        "P-Summary": "display system inform",
        "P-Tasks": "specifi distribut logo specifi distribut logo text start screenfetch strip color take screenshot requir scrot",
        "Summary": "Display system information.",
        "Task-Script": {
            "Specify distribution logo": "screenfetch -A '{{distribution_name}}'",
            "Specify distribution logo and text": "screenfetch -D '{{distribution_name}}'",
            "Start screenfetch": "screenfetch",
            "Strip all color": "screenfetch -N",
            "Take a screenshot (requires 'scrot')": "screenfetch -s"
        }
    },
    "common_script": {
        "Category": "common",
        "Command": "script",
        "P-Summary": "make typescript file termin session",
        "P-Tasks": "append exist file execut quietli without start done messag start record given file start record file name typescript stop record",
        "Summary": "Make a typescript file of a terminal session.",
        "Task-Script": {
            "Append to an existing file": "script -a {{logfile.log}}",
            "Execute quietly without start and done messages": "script -q {{logfile.log}}",
            "Start recording in a given file": "script {{logfile.log}}",
            "Start recording in file named \"typescript\"": "script",
            "Stop recording": "exit"
        }
    },
    "common_sd": {
        "Category": "common",
        "Command": "sd",
        "P-Summary": "intuit find replac cli",
        "P-Tasks": "find replac across project chang file place find replac file print result stdout replac word use captur group trim whitespac use regex",
        "Summary": "Intuitive find & replace CLI.",
        "Task-Script": {
            "Find and replace across a project changing each file in place": "sd {{'from \"react\"'}} {{'from \"preact\"'}} $(find . -type f)",
            "Find and replace in a file printing the result to stdout": "sd -p {{'window.fetch'}} {{'fetch'}} {{http.js}}",
            "Replace words using capture groups": "{{echo 'cargo +nightly watch'}} | sd '(\\w+)\\s+\\+(\\w+)\\s+(\\w+)' 'cmd: $1, channel: $2, subcmd: $3'",
            "Trim some whitespace using regex": "{{echo 'lorem ipsum 23   '}} | sd '\\s+$' ''"
        }
    },
    "common_sdiff": {
        "Category": "common",
        "Command": "sdiff",
        "P-Summary": "compar differ option merg 2 file",
        "P-Tasks": "compar 2 file compar 2 file case-insensit manner compar 2 file ignor tab whitespac compar 2 file ignor whitespac end line compar merg write output new file",
        "Summary": "Compare the differences between and optionally merge 2 files.",
        "Task-Script": {
            "Compare 2 files": "sdiff {{path/to/file1}} {{path/to/file2}}",
            "Compare 2 files in a case-insensitive manner": "sdiff -i {{path/to/file1}} {{path/to/file2}}",
            "Compare 2 files, ignoring all tabs and whitespace": "sdiff -W {{path/to/file1}} {{path/to/file2}}",
            "Compare 2 files, ignoring whitespace at the end of lines": "sdiff -Z {{path/to/file1}} {{path/to/file2}}",
            "Compare and then merge, writing the output to a new file": "sdiff -o {{path/to/merged_file}} {{path/to/file1}} {{path/to/file2}}"
        }
    },
    "common_sdk": {
        "Category": "common",
        "Command": "sdk",
        "P-Summary": "tool manag parallel version multipl softwar develop kit\nsupport java groovi scala kotlin gradl maven vert x mani other",
        "P-Tasks": "check current gradl version instal specif version gradl list softwar develop kit avail instal switch specif version gradl uninstal particular version gradl updat gradl latest version",
        "Summary": "Tool for managing parallel versions of multiple Software Development Kits.\nSupports Java, Groovy, Scala, Kotlin, Gradle, Maven, Vert.x and many others.",
        "Task-Script": {
            "Check current Gradle version": "sdk current {{gradle}}",
            "Install a specific version of Gradle": "sdk install {{gradle}} {{gradle_version}}",
            "List all Software Development Kits available to install": "sdk list",
            "Switch to a specific version of Gradle": "sdk use {{gradle}} {{gradle_version}}",
            "Uninstall a particular version of Gradle": "sdk rm {{gradle}} {{gradle_version}}",
            "Update Gradle to the latest version": "sdk upgrade {{gradle}}"
        }
    },
    "common_sdkmanager": {
        "Category": "common",
        "Command": "sdkmanager",
        "P-Summary": "tool instal packag android sdk",
        "P-Tasks": "instal packag list avail packag uninstal packag updat everi instal packag",
        "Summary": "Tool to install packages for the Android SDK.",
        "Task-Script": {
            "Install a package": "sdkmanager {{package}}",
            "List available packages": "sdkmanager --list",
            "Uninstall a package": "sdkmanager --uninstall {{package}}",
            "Update every installed package": "sdkmanager --update"
        }
    },
    "common_secrethub": {
        "Category": "common",
        "Command": "secrethub",
        "P-Summary": "tool keep secret config file",
        "P-Tasks": "audit repositori secret gener random valu store new updat secret print secret stdout store valu clipboard new updat secret store valu suppli stdin new updat secret",
        "Summary": "A tool to keep secrets out of config files.",
        "Task-Script": {
            "Audit a repository or secret": "secrethub audit {{path/to/repo_or_secret}}",
            "Generate a random value and store it as a new or updated secret": "secrethub generate {{path/to/secret}}",
            "Print a secret to stdout": "secrethub read {{path/to/secret}}",
            "Store a value from the clipboard as a new or updated secret": "secrethub write --clip {{path/to/secret}}",
            "Store a value supplied on stdin as a new or updated secret": "echo \"{{secret_value}}\" | secrethub write {{path/to/secret}}"
        }
    },
    "common_security-checker": {
        "Category": "common",
        "Command": "security-checker",
        "P-Summary": "check php applic use depend known secur vulner",
        "P-Tasks": "look secur issu project depend base compos lock file current folder return result json object use specif compos lock file",
        "Summary": "Check if a PHP application uses dependencies with known security vulnerabilities.",
        "Task-Script": {
            "Look for security issues in the project dependencies (based on the composer.lock file in the current folder)": "security-checker security:check",
            "Return results as a JSON object": "security-checker security:check --format=json",
            "Use a specific composer.lock file": "security-checker security:check {{path/to/composer.lock}}"
        }
    },
    "common_sed": {
        "Category": "common",
        "Command": "sed",
        "P-Summary": "edit text scriptabl manner",
        "P-Tasks": "appli multipl find-replac express file delet line match line pattern print first 11 line file replac occurr string file overwrit file e\nin-plac replac occurr extend regular express file print result replac line match line pattern replac separ charact use find replac pattern e g replac first occurr regular express line file print result",
        "Summary": "Edit text in a scriptable manner.",
        "Task-Script": {
            "Apply multiple find-replace expressions to a file": "sed -e 's/{{find}}/{{replace}}/' -e 's/{{find}}/{{replace}}/' {{filename}}",
            "Delete lines matching the line pattern": "sed '/{{line_pattern}}/d' {{filename}}",
            "Print the first 11 lines of a file": "sed 11q {{filename}}",
            "Replace all occurrences of a string in a file, overwriting the file (i.e. in-place)": "sed -i 's/{{find}}/{{replace}}/g' {{filename}}",
            "Replace all occurrences of an extended regular expression in a file, and print the result": "sed -r 's/{{regex}}/{{replace}}/g' {{filename}}",
            "Replace only on lines matching the line pattern": "sed '/{{line_pattern}}/s/{{find}}/{{replace}}/' {{filename}}",
            "Replace separator / by any other character not used in the find or replace patterns, e.g., #": "sed 's#{{find}}#{{replace}}#' {{filename}}",
            "Replace the first occurrence of a regular expression in each line of a file, and print the result": "sed 's/{{regex}}/{{replace}}/' {{filename}}"
        }
    },
    "common_sendmail": {
        "Category": "common",
        "Command": "sendmail",
        "P-Summary": "send email command line",
        "P-Tasks": "send messag content messag txt mail directori local user usernam send email yourdomain com assum mail server configur test gmail com contain file file zip send email yourdomain com assum mail server configur test gmail com contain messag messag txt",
        "Summary": "Send email from the command line.",
        "Task-Script": {
            "Send a message with the content of message.txt to the mail directory of local user `username`": "sendmail {{username}} < {{message.txt}}",
            "Send an email from you@yourdomain.com (assuming the mail server is configured for this) to test@gmail.com containing the file `file.zip`": "sendmail -f {{you@yourdomain.com}} {{test@gmail.com}} < {{file.zip}}",
            "Send an email from you@yourdomain.com (assuming the mail server is configured for this) to test@gmail.com containing the message in `message.txt`": "sendmail -f {{you@yourdomain.com}} {{test@gmail.com}} < {{message.txt}}"
        }
    },
    "common_seq": {
        "Category": "common",
        "Command": "seq",
        "P-Summary": "output sequenc number stdout",
        "P-Tasks": "everi 3rd number 5 20 format output width minimum 4 digit pad zero necessari separ output space instead newlin sequenc 1 10",
        "Summary": "Output a sequence of numbers to `stdout`.",
        "Task-Script": {
            "Every 3rd number from 5 to 20": "seq 5 3 20",
            "Format output width to a minimum of 4 digits padding with zeros as necessary": "seq -f \"%04g\" 5 3 20",
            "Separate the output with a space instead of a newline": "seq -s \" \" 5 3 20",
            "Sequence from 1 to 10": "seq 10"
        }
    },
    "common_sequelize": {
        "Category": "common",
        "Command": "sequelize",
        "P-Summary": "promise-bas node js orm postgr mysql mariadb sqlite microsoft sql server",
        "P-Tasks": "creat model 3 field migrat file creat seed file specifi name popul databas popul databas use seed file revert migrat run migrat file",
        "Summary": "Promise-based Node.js ORM for Postgres, MySQL, MariaDB, SQLite and Microsoft SQL Server.",
        "Task-Script": {
            "Create a model with 3 fields and a migration file": "sequelize model:generate --name {{table_name}} --attributes {{field1:integer,field2:string,field3:boolean}}",
            "Create a seed file with the specified name to populate the database": "sequelize seed:generate --name {{seed_filename}}",
            "Populate database using all seed files": "sequelize db:seed:all",
            "Revert all migrations": "sequelize db:migrate:undo:all",
            "Run the migration file": "sequelize db:migrate"
        }
    },
    "common_serverless": {
        "Category": "common",
        "Command": "serverless",
        "P-Summary": "toolkit deploy oper serverless architectur aw googl cloud azur ibm openwhisk\ncommand run either use serverless command alia sl",
        "P-Tasks": "creat serverless project creat serverless project templat deploy cloud provid display inform serverless project follow log project invok deploy function",
        "Summary": "Toolkit for deploying and operating serverless architectures on AWS, Google Cloud, Azure and IBM OpenWhisk.\nCommands can be run either using the `serverless` command or it's alias, `sls`.",
        "Task-Script": {
            "Create a serverless project": "serverless create",
            "Create a serverless project from a template": "serverless create --template {{template_name}}",
            "Deploy to a cloud provider": "serverless deploy",
            "Display information about a serverless project": "serverless info",
            "Follow the logs for a project": "serverless logs -t",
            "Invoke a deployed function": "serverless invoke -f {{function_name}}"
        }
    },
    "common_set": {
        "Category": "common",
        "Command": "set",
        "P-Summary": "display set unset valu shell attribut posit paramet",
        "P-Tasks": "display name valu shell variabl mark variabl modifi creat export notifi job termin immedi set variou option e g\nenabl vi style line edit",
        "Summary": "Display, set or unset values of shell attributes and positional parameters.",
        "Task-Script": {
            "Display the names and values of shell variables": "set",
            "Mark variables that are modified or created for export": "set -a",
            "Notify of job termination immediately": "set -b",
            "Set various options, e.g. enable `vi` style line editing": "set -o {{vi}}"
        }
    },
    "common_sftp": {
        "Category": "common",
        "Command": "sftp",
        "P-Summary": "secur file transfer program\ninteract program copi file host ssh\nnon-interact file transfer see scp rsync",
        "P-Tasks": "connect remot server enter interact command mode connect use altern port get list file local machin get list file remot machin transfer local file remot system transfer remot directori local system recurs work put transfer remot file local system",
        "Summary": "Secure File Transfer Program.\nInteractive program to copy files between hosts over SSH.\nFor non-interactive file transfers, see `scp` or `rsync`.",
        "Task-Script": {
            "Connect to a remote server and enter an interactive command mode": "sftp {{remote_user}}@{{remote_host}}",
            "Connect using an alternate port": "sftp -P {{remote_port}} {{remote_user}}@{{remote_host}}",
            "Get list of files on local machine": "lls",
            "Get list of files on remote machine": "ls",
            "Transfer local file to the remote system": "put {{/path/local_file}}",
            "Transfer remote directory to the local system recursively (works with `put` too)": "get -R {{/path/remote_directory}}",
            "Transfer remote file to the local system": "get {{/path/remote_file}}"
        }
    },
    "common_sh": {
        "Category": "common",
        "Command": "sh",
        "P-Summary": "bourn shell\nstandard command languag interpret",
        "P-Tasks": "execut command run command stdin run command file start interact shell",
        "Summary": "Bourne shell.\nThe standard command language interpreter.",
        "Task-Script": {
            "Execute a command": "sh -c {{command}}",
            "Run commands from `stdin`": "sh -s",
            "Run commands from a file": "sh {{file.sh}}",
            "Start interactive shell": "sh"
        }
    },
    "common_sha1sum": {
        "Category": "common",
        "Command": "sha1sum",
        "P-Summary": "calcul sha1 cryptograph checksum",
        "P-Tasks": "calcul sha1 checksum multipl file calcul sha1 checksum file read file sha1 sum verifi file match checksum",
        "Summary": "Calculate SHA1 cryptographic checksums.",
        "Task-Script": {
            "Calculate SHA1 checksums for multiple files": "sha1sum {{filename1}} {{filename2}}",
            "Calculate the SHA1 checksum for a file": "sha1sum {{filename1}}",
            "Read a file of SHA1 sums and verify all files have matching checksums": "sha1sum -c {{filename.sha1}}"
        }
    },
    "common_sha224sum": {
        "Category": "common",
        "Command": "sha224sum",
        "P-Summary": "calcul sha224 cryptograph checksum",
        "P-Tasks": "calcul sha224 checksum multipl file calcul sha224 checksum file read file sha224 sum verifi file match checksum",
        "Summary": "Calculate SHA224 cryptographic checksums.",
        "Task-Script": {
            "Calculate SHA224 checksums for multiple files": "sha224sum {{filename1}} {{filename2}}",
            "Calculate the SHA224 checksum for a file": "sha224sum {{filename1}}",
            "Read a file of SHA224 sums and verify all files have matching checksums": "sha224sum -c {{filename.sha224}}"
        }
    },
    "common_sha256sum": {
        "Category": "common",
        "Command": "sha256sum",
        "P-Summary": "calcul sha256 cryptograph checksum",
        "P-Tasks": "calcul sha256 checksum multipl file calcul sha256 checksum file read file sha256 sum verifi file match checksum",
        "Summary": "Calculate SHA256 cryptographic checksums.",
        "Task-Script": {
            "Calculate SHA256 checksums for multiple files": "sha256sum {{filename1}} {{filename2}}",
            "Calculate the SHA256 checksum for a file": "sha256sum {{filename1}}",
            "Read a file of SHA256 sums and verify all files have matching checksums": "sha256sum -c {{filename.sha256}}"
        }
    },
    "common_sha384sum": {
        "Category": "common",
        "Command": "sha384sum",
        "P-Summary": "calcul sha384 cryptograph checksum",
        "P-Tasks": "calcul sha384 checksum multipl file calcul sha384 checksum file read file sha384 sum verifi file match checksum",
        "Summary": "Calculate SHA384 cryptographic checksums.",
        "Task-Script": {
            "Calculate SHA384 checksums for multiple files": "sha384sum {{filename1}} {{filename2}}",
            "Calculate the SHA384 checksum for a file": "sha384sum {{filename1}}",
            "Read a file of SHA384 sums and verify all files have matching checksums": "sha384sum -c {{filename.sha384}}"
        }
    },
    "common_sha512sum": {
        "Category": "common",
        "Command": "sha512sum",
        "P-Summary": "calcul sha512 cryptograph checksum",
        "P-Tasks": "calcul sha512 checksum multipl file calcul sha512 checksum file read file sha512 sum verifi file match checksum",
        "Summary": "Calculate SHA512 cryptographic checksums.",
        "Task-Script": {
            "Calculate SHA512 checksums for multiple files": "sha512sum {{filename1}} {{filename2}}",
            "Calculate the SHA512 checksum for a file": "sha512sum {{filename1}}",
            "Read a file of SHA512 sums and verify all files have matching checksums": "sha512sum -c {{filename.sha512}}"
        }
    },
    "common_shards": {
        "Category": "common",
        "Command": "shards",
        "P-Summary": "depend manag tool crystal languag",
        "P-Tasks": "creat skeleton shard yml file instal depend shard yml file list instal depend list version depend updat depend",
        "Summary": "Dependency management tool for the Crystal language.",
        "Task-Script": {
            "Create a skeleton shard.yml file": "shards init",
            "Install dependencies from a shard.yml file": "shards install",
            "List all installed dependencies": "shards list",
            "List version of dependency": "shards version {{path/to/dependency_directory}}",
            "Update all dependencies": "shards update"
        }
    },
    "common_shasum": {
        "Category": "common",
        "Command": "shasum",
        "P-Summary": "calcul check cryptograph sha checksum",
        "P-Tasks": "calcul sha1 checksum file calcul sha1 checksum stdin calcul sha256 checksum file calcul sha512 checksum multipl file check file list sum directori file",
        "Summary": "Calculate or check cryptographic SHA checksums.",
        "Task-Script": {
            "Calculate the SHA1 checksum for a file": "shasum {{filename}}",
            "Calculate the SHA1 checksum from `stdin`": "{{somecommand}} | shasum",
            "Calculate the SHA256 checksum for a file": "shasum --algorithm 256 {{filename}}",
            "Calculate the SHA512 checksum for multiple files": "shasum --algorithm 512 {{filename1}} {{filename2}}",
            "Check a file with a list of sums against the directory's files": "shasum --check {{list_file}}"
        }
    },
    "common_shc": {
        "Category": "common",
        "Command": "shc",
        "P-Summary": "gener shell script compil",
        "P-Tasks": "compil shell script compil shell script set messag display upon expir compil shell script set expir date execut compil shell script specifi output binari file",
        "Summary": "Generic shell script compiler.",
        "Task-Script": {
            "Compile a shell script": "shc -f {{script}}",
            "Compile a shell script and set a message to display upon expiration": "shc -f {{script}} -e {{dd/mm/yyyy}} -m \"{{Please contact your provider}}\"",
            "Compile a shell script and set an expiration date for the executable": "shc -f {{script}} -e {{dd/mm/yyyy}}",
            "Compile a shell script and specify an output binary file": "shc -f {{script}} -o {{binary}}"
        }
    },
    "common_shellcheck": {
        "Category": "common",
        "Command": "shellcheck",
        "P-Summary": "shell script static analysi tool",
        "P-Tasks": "check shell script ignor certain error ignor multipl error overrid script shebang",
        "Summary": "Shell script static analysis tool.",
        "Task-Script": {
            "Check a shell script": "shellcheck {{file.sh}}",
            "Ignore certain errors": "shellcheck --exclude {{SC1009}} {{file.sh}}",
            "Ignore multiple errors": "shellcheck --exclude {{SC1009,SC1073}} {{file.sh}}",
            "Override script's shebang": "shellcheck --shell {{sh|bash|ksh}} {{file.sh}}"
        }
    },
    "common_shiori": {
        "Category": "common",
        "Command": "shiori",
        "P-Summary": "simpl bookmark manag built go",
        "P-Tasks": "import bookmark html netscap bookmark format file list save bookmark open save bookmark browser save specifi url bookmark start web interfac manag bookmark port 8181",
        "Summary": "Simple bookmark manager built with Go.",
        "Task-Script": {
            "Import bookmarks from HTML Netscape bookmark format file": "shiori import {{path/to/bookmarks.html}}",
            "List the saved bookmarks": "shiori print",
            "Open the saved bookmark in a browser": "shiori open {{bookmark_id}}",
            "Save the specified URL as bookmark": "shiori add {{url}}",
            "Start the web interface for managing bookmarks at port 8181": "shiori serve --port {{8181}}"
        }
    },
    "common_shopt": {
        "Category": "common",
        "Command": "shopt",
        "P-Summary": "manag bash shell option : variabl store bashopt control behavior specif bash shell\ngener posix shell variabl store shellopt manag set command instead",
        "P-Tasks": "list settabl option whether set print list option statu format runnabl shopt command set option show help command unset option",
        "Summary": "Manage Bash shell options: variables (stored in `$BASHOPTS`) that control behavior specific to the Bash shell.\nGeneric POSIX shell variables (stored in `$SHELLOPTS`) are managed with the `set` command instead.",
        "Task-Script": {
            "List of all settable options and whether they are set": "shopt",
            "Print a list of all options and their status formatted as runnable `shopt` commands": "shopt -p",
            "Set an option": "shopt -s {{option_name}}",
            "Show help for the command": "help shopt",
            "Unset an option": "shopt -u {{option_name}}"
        }
    },
    "common_shred": {
        "Category": "common",
        "Command": "shred",
        "P-Summary": "overwrit file secur delet data",
        "P-Tasks": "overwrit file overwrit file 25 time overwrit file remov overwrit file leav zero instead random data",
        "Summary": "Overwrite files to securely delete data.",
        "Task-Script": {
            "Overwrite a file": "shred {{file}}",
            "Overwrite a file 25 times": "shred -n25 {{file}}",
            "Overwrite a file and remove it": "shred --remove {{file}}",
            "Overwrite a file, leaving zeroes instead of random data": "shred --zero {{file}}"
        }
    },
    "common_shuf": {
        "Category": "common",
        "Command": "shuf",
        "P-Summary": "gener random permut",
        "P-Tasks": "gener random number rang output first 5 entri result random order line file output result write output anoth file",
        "Summary": "Generate random permutations.",
        "Task-Script": {
            "Generate random numbers in range": "shuf -i {{1-10}}",
            "Only output the first 5 entries of the result": "shuf -n {{5}} {{filename}}",
            "Randomize the order of lines in a file and output the result": "shuf {{filename}}",
            "Write the output to another file": "shuf {{filename}} -o {{output_filename}}"
        }
    },
    "common_singularity": {
        "Category": "common",
        "Command": "singularity",
        "P-Summary": "manag singular contain imag",
        "P-Tasks": "build singular imag recip file download remot imag sylab cloud rebuild remot imag use latest singular imag format start contain imag execut intern runscript start contain imag get shell insid start contain imag run command",
        "Summary": "Manage Singularity containers and images.",
        "Task-Script": {
            "Build a singularity image from a recipe file": "sudo singularity build {{image.sif}} {{recipe}}",
            "Download a remote image from Sylabs Cloud": "singularity pull --name {{image.sif}} {{library://godlovedc/funny/lolcow:latest}}",
            "Rebuild a remote image using latest Singularity image format": "singularity build {{image.sif}} {{docker://godlovedc/lolcow}}",
            "Start a container from an image and execute the internal runscript": "singularity run {{image.sif}}",
            "Start a container from an image and get a shell inside of it": "singularity shell {{image.sif}}",
            "Start a container from an image and run a command": "singularity exec {{image.sif}} {{command}}"
        }
    },
    "common_skaffold": {
        "Category": "common",
        "Command": "skaffold",
        "P-Summary": "tool facilit continu develop kubernet applic",
        "P-Tasks": "build deploy app everi time code chang build artifact deploy artifact run diagnost skaffold run pipelin file",
        "Summary": "A tool that facilitates continuous development for Kubernetes applications.",
        "Task-Script": {
            "Build and deploy your app every time your code changes": "skaffold dev -f {{skaffold.yaml}}",
            "Build the artifacts": "skaffold build -f {{skaffold.yaml}}",
            "Deploy the artifacts": "skaffold deploy -f {{skaffold.yaml}}",
            "Run a diagnostic on Skaffold": "skaffold diagnose -f {{skaffold.yaml}}",
            "Run a pipeline file": "skaffold run -f {{skaffold.yaml}}"
        }
    },
    "common_skicka": {
        "Category": "common",
        "Command": "skicka",
        "P-Summary": "manag googl drive",
        "P-Tasks": "creat folder delet file download file folder googl drive list file show amount space use children folder upload file folder googl drive",
        "Summary": "Manage your Google Drive.",
        "Task-Script": {
            "Create a folder": "skicka mkdir {{path/to/folder}}",
            "Delete a file": "skicka rm {{path/to/file}}",
            "Download a file/folder from Google Drive": "skicka download {{path/to/remote}} {{path/to/local}}",
            "List files": "skicka ls {{path/to/folder}}",
            "Show amount of space used by children folders": "skicka du {{path/to/parent/folder}}",
            "Upload a file/folder to Google Drive": "skicka upload {{path/to/local}} {{path/to/remote}}"
        }
    },
    "common_sl": {
        "Category": "common",
        "Command": "sl",
        "P-Summary": "steam locomot run termin",
        "P-Tasks": "let steam locomot run termin let train fli let user exit ctrl + c make train littl train burn peopl scream",
        "Summary": "Steam locomotive running through your terminal.",
        "Task-Script": {
            "Let a steam locomotive run through your terminal": "sl",
            "Let the train fly": "sl -F",
            "Let the user exit (CTRL + C)": "sl -e",
            "Make the train little": "sl -l",
            "The train burns, people scream": "sl -a"
        }
    },
    "common_slackcat": {
        "Category": "common",
        "Command": "slackcat",
        "P-Summary": "util pass file command output slack",
        "P-Tasks": "pipe command output slack text snippet post file slack post file slack custom filenam stream command output slack continu",
        "Summary": "Utility for passing files and command output to Slack.",
        "Task-Script": {
            "Pipe command output to Slack as a text snippet": "{{command}} | slackcat --channel {{channel_name}} --filename={{snippet_name}}",
            "Post a file to Slack": "slackcat --channel {{channel_name}} {{path/to/file}}",
            "Post a file to Slack with a custom filename": "slackcat --channel {{channel_name}} --filename={{filename}} {{path/to/file}}",
            "Stream command output to Slack continuously": "{{command}} | slackcat --channel {{channel_name}} --stream"
        }
    },
    "common_sleep": {
        "Category": "common",
        "Command": "sleep",
        "P-Summary": "delay specifi amount time",
        "P-Tasks": "delay hour delay minut delay second",
        "Summary": "Delay for a specified amount of time.",
        "Task-Script": {
            "Delay in hours": "sleep {{hours}}h",
            "Delay in minutes": "sleep {{minutes}}m",
            "Delay in seconds": "sleep {{seconds}}"
        }
    },
    "common_slimrb": {
        "Category": "common",
        "Command": "slimrb",
        "P-Summary": "convert slim file html",
        "P-Tasks": "convert slim file output prettifi html convert slim file erb convert slim file html",
        "Summary": "Convert Slim files to HTML.",
        "Task-Script": {
            "Convert a Slim file and output to prettified HTML": "slimrb --pretty {{input.slim}} {{output.html}}",
            "Convert a Slim file to ERB": "slimrb --erb {{input.slim}} {{output.erb}}",
            "Convert a Slim file to HTML": "slimrb {{input.slim}} {{output.html}}"
        }
    },
    "common_smartctl": {
        "Category": "common",
        "Command": "smartctl",
        "P-Summary": "view disk smart data inform",
        "P-Tasks": "begin short self-test view smart health summari view smart self-test log support view current last self-test statu smart capabl view devic inform",
        "Summary": "View a disk's SMART data and other information.",
        "Task-Script": {
            "Begin a short self-test": "sudo smartctl --test short {{/dev/sda}}",
            "View SMART health summary": "sudo smartctl --health {{/dev/sda}}",
            "View SMART self-test log (if supported)": "sudo smartctl --log selftest {{/dev/sda}}",
            "View current/last self-test status and other SMART capabilities": "sudo smartctl --capabilities {{/dev/sda}}",
            "View device information": "sudo smartctl --info {{/dev/sda}}"
        }
    },
    "common_sn": {
        "Category": "common",
        "Command": "sn",
        "P-Summary": "mono strongnam util sign verifi il assembl",
        "P-Tasks": "extract public key file gener new strongnam key re-sign assembl specifi privat key show public key privat key use sign assembl",
        "Summary": "Mono StrongName utility for signing and verifying IL assemblies.",
        "Task-Script": {
            "Extract the public key to a file": "sn -e {{path/to/assembly.dll}} {{path/to/output.pub}}",
            "Generate a new StrongNaming key": "sn -k {{path/to/key.snk}}",
            "Re-sign an assembly with the specified private key": "sn -R {{path/to/assembly.dll}} {{path/to/keypair.snk}}",
            "Show the public key of the private key that was used to sign an assembly": "sn -T {{path/to/assembly.exe}}"
        }
    },
    "common_snyk": {
        "Category": "common",
        "Command": "snyk",
        "P-Summary": "find vulner code remedi risk",
        "P-Tasks": "auto patch ignor vulner login snyk account record state depend vulner snyk io test local docker imag known vulner test code known vulner",
        "Summary": "Find vulnerabilities in your code and remediate risks.",
        "Task-Script": {
            "Auto patch and ignore vulnerabilities": "snyk wizard",
            "Login to your Snyk account": "snyk auth",
            "Record the state of dependencies and any vulnerabilities on snyk.io": "snyk monitor",
            "Test a local Docker image for any known vulnerabilities": "snyk test --docker {{docker_image}}",
            "Test your code for any known vulnerabilities": "snyk test"
        }
    },
    "common_socat": {
        "Category": "common",
        "Command": "socat",
        "P-Summary": "multipurpos relay socket cat",
        "P-Tasks": "creat connect host port transfer data stdio connect host forward incom data local port anoth host port listen port wait incom connect transfer data stdio",
        "Summary": "Multipurpose relay (SOcket CAT).",
        "Task-Script": {
            "Create a connection to a host and port, transfer data in STDIO to connected host": "socat - TCP4:www.example.com:80",
            "Forward incoming data of a local port to another host and port": "socat TCP-LISTEN:80,fork TCP4:www.example.com:80",
            "Listen to a port, wait for an incoming connection and transfer data to STDIO": "socat - TCP-LISTEN:8080,fork"
        }
    },
    "common_solo": {
        "Category": "common",
        "Command": "solo",
        "P-Summary": "interact solo hardwar secur key",
        "P-Tasks": "blink led specif solo gener random byte use current connect solo secur random number gener list connect solo monitor serial output solo updat current connect solo firmwar latest version",
        "Summary": "Interact with Solo hardware security keys.",
        "Task-Script": {
            "Blink the led of a specific Solo": "solo key wink --serial {{serial_number}}",
            "Generate random bytes using the currently connected Solo's secure random number generator": "solo key rng raw",
            "List connected Solos": "solo ls",
            "Monitor the serial output of a Solo": "solo monitor {{path/to/serial_port}}",
            "Update the currently connected Solo's firmware to the latest version": "solo key update"
        }
    },
    "common_sonar-scanner": {
        "Category": "common",
        "Command": "sonar-scanner",
        "P-Summary": "sonarscann gener scanner sonarqub project use specif build tool like maven gradl etc",
        "P-Tasks": "print debudg inform print help inform scan project use configur file sonar-project properti scan project configur file project root directori name sonar-project properti",
        "Summary": "SonarScanner is a generic scanner for SonarQube for projects do not use any specific build tool like maven, gradle , etc.",
        "Task-Script": {
            "Print debudgging information": "sonar-scanner -X",
            "Print help information": "sonar-scanner -h",
            "Scan a project using configuration file other than `sonar-project.properties`": "sonar-scanner -D{{project.settings=myproject.properties}}",
            "Scan a project with configuration file in your project's root directory named `sonar-project.properties`": "sonar-scanner"
        }
    },
    "common_sops": {
        "Category": "common",
        "Command": "sops",
        "P-Summary": "sop : secret oper\ntool manag secret",
        "P-Tasks": "chang extens file encrypt decrypt file standard output encrypt file extract key name array element number rotat data key sop file show differ two sop file",
        "Summary": "SOPS: Secrets OPerationS.\nTool for managing secrets.",
        "Task-Script": {
            "Change the extension of the file once encrypted": "sops -d --input-type json {{path/to/myfile.enc.json}}",
            "Decrypt a file to the standard output": "sops -d {{path/to/myfile.enc.json}}",
            "Encrypt a file": "sops -e {{path/to/myfile.json}} > {{path/to/myfile.enc.json}}",
            "Extract keys by naming them, and array elements by numbering them": "sops -d --extract '[\"an_array\"][1]' {{path/to/myfile.enc.json}}",
            "Rotate data keys for a sops file": "sops -r {{path/to/myfile.enc.yaml}}",
            "Show the difference between two sops files": "diff <(sops -d {{path/to/secret1.enc.yaml}}) <(sops -d {{path/to/secret2.enc.yaml}})"
        }
    },
    "common_sort": {
        "Category": "common",
        "Command": "sort",
        "P-Summary": "sort line text file",
        "P-Tasks": "sort file ascend order sort file case-insensit way sort file descend order sort file preserv uniqu line sort file use numer rather alphabet order sort human-read number case 5th field ls -lh sort number expon sort passwd file 3rd field numer",
        "Summary": "Sort lines of text files.",
        "Task-Script": {
            "Sort a file in ascending order": "sort {{path/to/file}}",
            "Sort a file in case-insensitive way": "sort --ignore-case {{path/to/file}}",
            "Sort a file in descending order": "sort -r {{path/to/file}}",
            "Sort a file preserving only unique lines": "sort -u {{path/to/file}}",
            "Sort a file using numeric rather than alphabetic order": "sort -n {{path/to/file}}",
            "Sort human-readable numbers (in this case the 5th field of `ls -lh`)": "ls -lh | sort -h -k 5",
            "Sort numbers with exponents": "sort --general-numeric-sort {{path/to/file}}",
            "Sort the passwd file by the 3rd field, numerically": "sort -t: -k 3n /etc/passwd"
        }
    },
    "common_source": {
        "Category": "common",
        "Command": "source",
        "P-Summary": "execut command file current shell",
        "P-Tasks": "evalu content given file",
        "Summary": "Execute commands from a file in the current shell.",
        "Task-Script": {
            "Evaluate contents of a given file": "source {{path/to/file}}"
        }
    },
    "common_sox": {
        "Category": "common",
        "Command": "sox",
        "P-Summary": "sound exchang : play record convert audio file\naudio format identifi extens",
        "P-Tasks": "increas volum audio file 2x merg two audio file one normal audio file adjust volum maximum peak level without clip print statist data audio file revers save audio file trim audio file specifi time",
        "Summary": "Sound eXchange: play, record and convert audio files.\nAudio formats are identified by the extension.",
        "Task-Script": {
            "Increase the volume of an audio file by 2x": "sox -v 2.0 {{input_audiofile}} {{output_audiofile}}",
            "Merge two audio files into one": "sox -m {{input_audiofile1}} {{input_audiofile2}} {{output_audiofile}}",
            "Normalize an audio file (adjust volume to the maximum peak level, without clipping)": "sox --norm {{input_audiofile}} {{output_audiofile}}",
            "Print statistical data of an audio file": "sox {{input_audiofile}} -n stat",
            "Reverse and save an audio file": "sox {{input_audiofile}} {{output_audiofile}} reverse",
            "Trim an audio file to the specified times": "sox {{input_audiofile}} {{output_audiofile}} trim {{start}} {{end}}"
        }
    },
    "common_spark": {
        "Category": "common",
        "Command": "spark",
        "P-Summary": "laravel spark command line tool",
        "P-Tasks": "creat new spark project creat new spark project braintre stub creat new spark project team base bill stub display current regist api token regist api token",
        "Summary": "The Laravel Spark command line tool.",
        "Task-Script": {
            "Create a new Spark project": "spark new {{project_name}}",
            "Create a new Spark project with Braintree stubs": "spark new {{project_name}} --braintree",
            "Create a new Spark project with team based billing stubs": "spark new {{project_name}} --team-billing",
            "Display the currently registered API token": "spark token",
            "Register your API token": "spark register {{token}}"
        }
    },
    "common_spatial": {
        "Category": "common",
        "Command": "spatial",
        "P-Summary": "set command manag develop spatialo project",
        "P-Tasks": "build worker local deploy uniti maco build worker local deploy unreal window clean worker directori deploy local launch cloud deploy launch local worker connect local deploy run use project first time upload assembl use cloud deploy",
        "Summary": "A set of commands for managing and developing SpatialOS projects.",
        "Task-Script": {
            "Build workers for local deployment on Unity on macOS": "spatial worker build --target=development --target=Osx",
            "Build workers for local deployment on Unreal on Windows": "spatial worker build --target=local --target=Windows",
            "Clean worker directories": "spatial worker clean",
            "Deploy locally": "spatial local launch {{launch_config}} --snapshot={{snapshot_file}}",
            "Launch a cloud deployment": "spatial cloud launch {{assembly_name}} {{launch_config}} {{deployment_name}}",
            "Launch a local worker to connect to your local deployment": "spatial local worker launch {{worker_type}} {{launch_config}}",
            "Run this when you use a project for the first time": "spatial worker build",
            "Upload an assembly to use for cloud deployments": "spatial cloud upload {{assembly_name}}"
        }
    },
    "common_speedtest-cli": {
        "Category": "common",
        "Command": "speedtest-cli",
        "P-Summary": "command line interfac test internet bandwidth use speedtest net",
        "P-Tasks": "display result csv format suppress progress inform display result json format suppress progress inform print list speedtest net server sort distanc file run speed test run speed test gener shareabl result pictur run speed test given speedtest net server id run without perform download test",
        "Summary": "Command line interface for testing internet bandwidth using speedtest.net.",
        "Task-Script": {
            "Display results in CSV format, suppressing the progress information": "speedtest-cli --csv --csv-delimiter {{delimiter_char}}",
            "Display results in JSON format, suppressing the progress information": "speedtest-cli --json",
            "Print a list of all speedtest.net servers, sorted by distance, to file": "speedtest-cli --list > speedtest_servers.txt",
            "Run a speed test": "speedtest-cli",
            "Run a speed test and generate a shareable result picture": "speedtest-cli --share",
            "Run a speed test to the given speedtest.net server id": "speedtest-cli --server {{server_id}}",
            "Run without performing download tests": "speedtest-cli --no-download"
        }
    },
    "common_spfquery": {
        "Category": "common",
        "Command": "spfquery",
        "P-Summary": "queri sender polici framework record valid e-mail sender",
        "P-Tasks": "check ip address allow send e-mail specifi e-mail address turn debug output",
        "Summary": "Query Sender Policy Framework records to validate e-mail senders.",
        "Task-Script": {
            "Check if an IP address is allowed to send an e-mail from the specified e-mail address": "spfquery -ip {{8.8.8.8}} -sender {{sender@example.com}}",
            "Turn on debugging output": "spfquery -ip {{8.8.8.8}} -sender {{sender@example.com}} --debug"
        }
    },
    "common_sphinx-build": {
        "Category": "common",
        "Command": "sphinx-build",
        "P-Summary": "sphinx document gener",
        "P-Tasks": "build document build document intend readthedoc io requir sphinx-rtd-them pip packag",
        "Summary": "Sphinx documentation generator.",
        "Task-Script": {
            "Build documentation": "sphinx-build -b {{html|epub|text|latex|man|...}} {{path/to/source_dir}} {{path/to/build_dir}}",
            "Build documentations intended for readthedocs.io (requires the sphinx-rtd-theme pip package)": "sphinx-build -b {{html}} {{path/to/docs_dir}} {{path/to/build_dir}}"
        }
    },
    "common_spike": {
        "Category": "common",
        "Command": "spike",
        "P-Summary": "fulli featur static websit gener written javascript",
        "P-Tasks": "compil project public directori compil project watch chang auto-reload browser creat new project use default templat remov output directori",
        "Summary": "A fully featured static website generator written in JavaScript.",
        "Task-Script": {
            "Compile your project once to the \"public\" directory": "spike compile",
            "Compile your project, watch for changes, and auto-reload the browser": "spike watch",
            "Create a new project using the default template": "spike new {{project_name}}",
            "Remove the output directory": "spike clean"
        }
    },
    "common_split": {
        "Category": "common",
        "Command": "split",
        "P-Summary": "split file piec",
        "P-Tasks": "split file 5 file\nfile split split size except last split split file 512 byte split except last split use 512k kilobyt 512m megabyt split file 512 byte split without break line split file split 10 line except last split",
        "Summary": "Split a file into pieces.",
        "Task-Script": {
            "Split a file into 5 files. File is split such that each split has same size (except the last split)": "split -n {{5}} {{filename}}",
            "Split a file with 512 bytes in each split (except the last split; use 512k for kilobytes and 512m for megabytes)": "split -b {{512}} {{filename}}",
            "Split a file with at most 512 bytes in each split without breaking lines": "split -C {{512}} {{filename}}",
            "Split a file, each split having 10 lines (except the last split)": "split -l {{10}} {{filename}}"
        }
    },
    "common_sponge": {
        "Category": "common",
        "Command": "sponge",
        "P-Summary": "soak input write output file",
        "P-Tasks": "append file content sourc file remov line start file",
        "Summary": "Soak up the input before writing the output file.",
        "Task-Script": {
            "Append file content to the source file": "cat {{path/to/file}} | sponge -a {{path/to/file}}",
            "Remove all lines starting with # in a file": "grep -v '^{{#}}' {{path/to/file}} | sponge {{path/to/file}}"
        }
    },
    "common_sqlite3": {
        "Category": "common",
        "Command": "sqlite3",
        "P-Summary": "command-lin interfac sqlite 3 self-contain file-bas embed sql engin",
        "P-Tasks": "execut sql statement databas exit open interact shell exist databas start interact shell new databas",
        "Summary": "The command-line interface to SQLite 3, which is a self-contained file-based embedded SQL engine.",
        "Task-Script": {
            "Execute an SQL statement against a database and then exit": "sqlite3 {{path/to/database.sqlite3}} '{{SELECT * FROM some_table;}}'",
            "Open an interactive shell against an existing database": "sqlite3 {{path/to/database.sqlite3}}",
            "Start an interactive shell with a new database": "sqlite3"
        }
    },
    "common_sqlmap": {
        "Category": "common",
        "Command": "sqlmap",
        "P-Summary": "detect exploit sql inject flaw",
        "P-Tasks": "chang paramet delimit default provid user credenti http protocol authent run sqlmap singl target url select random user-ag\ntxt user-ag txt use send data post request -- data impli post request",
        "Summary": "Detect and exploit SQL injection flaws.",
        "Task-Script": {
            "Change the parameter delimiter (& is the default)": "python sqlmap.py -u \"{{http://www.target.com/vuln.php}}\" --data=\"{{query=foobar;id=1}}\" --param-del=\"{{;}}\"",
            "Provide user credentials for HTTP protocol authentication": "python sqlmap.py -u \"{{http://www.target.com/vuln.php}}\" --auth-type {{Basic}} --auth-cred \"{{testuser:testpass}}\"",
            "Run sqlmap against a single target URL": "python sqlmap.py -u \"{{http://www.target.com/vuln.php?id=1}}\"",
            "Select a random `User-Agent` from `./txt/user-agents.txt` and use it": "python sqlmap.py -u \"{{http://www.target.com/vuln.php}}\" --random-agent",
            "Send data in a POST request (`--data` implies POST request)": "python sqlmap.py -u \"{{http://www.target.com/vuln.php}}\" --data=\"{{id=1}}\""
        }
    },
    "common_sqsc": {
        "Category": "common",
        "Command": "sqsc",
        "P-Summary": "command line aw simpl queue servic client",
        "P-Tasks": "copi messag one queue anoth describ queue list messag queue list queue move messag one queue anoth pull messag queue local sqlite databas present work directori queri queue sql syntax",
        "Summary": "A command line AWS Simple Queue Service client.",
        "Task-Script": {
            "Copy all messages from one queue to another": "sqsc cp {{source_queue}} {{destination_queue}}",
            "Describe a queue": "sqsc describe {{queue_name}}",
            "List all messages in a queue": "sqsc ls {{queue_name}}",
            "List all queues": "sqsc lq {{queue_prefix}}",
            "Move all messages from one queue to another": "sqsc mv {{source_queue}} {{destination_queue}}",
            "Pull all messages from a queue into a local sqlite database in your present working directory": "sqsc pull {{queue_name}}",
            "Query a queue with SQL syntax": "sqsc query \"SELECT body FROM {{queue_name}} WHERE body LIKE '%user%'\""
        }
    },
    "common_srm": {
        "Category": "common",
        "Command": "srm",
        "P-Summary": "secur remov file directori\noverwrit exist data one multipl time\ndrop replac rm",
        "P-Tasks": "prompt everi remov recurs remov directori content overwrit file single-pass random data remov file single-pass overwrit random data remov file seven pass overwrit random data",
        "Summary": "Securely remove files or directories.\nOverwrites the existing data one or multiple times. Drop in replacement for rm.",
        "Task-Script": {
            "Prompt before every removal": "srm -i {{\\*}}",
            "Recursively remove a directory and its contents overwriting each file with a single-pass of random data": "srm -r -s {{/path/to/directory}}",
            "Remove a file after a single-pass overwriting with random data": "srm -s {{/path/to/file}}",
            "Remove a file after seven passes of overwriting with random data": "srm -m {{/path/to/file}}"
        }
    },
    "common_ss-local": {
        "Category": "common",
        "Command": "ss-local",
        "P-Summary": "run shadowsock client socks5 proxi",
        "P-Tasks": "enabl tcp fast open run shadowsock proxi specifi config file run shadowsock proxi specifi host server port local port password encrypt method use plugin run proxi client",
        "Summary": "Run a Shadowsocks client as a SOCKS5 proxy.",
        "Task-Script": {
            "Enable TCP fast open": "ss-local --fast-open",
            "Run a Shadowsocks proxy by specifying the config file": "ss-local -c {{path/to/config/file.json}}",
            "Run a Shadowsocks proxy by specifying the host, server port, local port, password, and encryption method": "ss-local -s {{host}} -p {{server_port}} -l {{local port}} -k {{password}} -m {{encrypt_method}}",
            "Use a plugin to run the proxy client": "ss-local --plugin {{plugin_name}} --plugin-opts {{plugin_options}}"
        }
    },
    "common_ssh": {
        "Category": "common",
        "Command": "ssh",
        "P-Summary": "secur shell protocol use secur log onto remot system\nuse log execut command remot server",
        "P-Tasks": "agent forward : forward authent inform remot machin see man ssh_config avail option connect remot server connect remot server use specif port connect remot server specif ident privat key run command remot server ssh jump : connect jumphost remot server multipl jump hop may specifi separ comma charact ssh tunnel : dynam port forward sock proxi localhost:9999 ssh tunnel : forward specif port localhost:9999 exampl org:80 along disabl pseudo- ty alloc executio n remot command",
        "Summary": "Secure Shell is a protocol used to securely log onto remote systems.\nIt can be used for logging or executing commands on a remote server.",
        "Task-Script": {
            "Agent forwarding: Forward the authentication information to the remote machine (see `man ssh_config` for available options)": "ssh -A {{username}}@{{remote_host}}",
            "Connect to a remote server": "ssh {{username}}@{{remote_host}}",
            "Connect to a remote server using a specific port": "ssh {{username}}@{{remote_host}} -p {{2222}}",
            "Connect to a remote server with a specific identity (private key)": "ssh -i {{path/to/key_file}} {{username}}@{{remote_host}}",
            "Run a command on a remote server": "ssh {{remote_host}} {{command -with -flags}}",
            "SSH jumping: Connect through a jumphost to a remote server (Multiple jump hops may be specified separated by comma characters)": "ssh -J {{username}}@{{jump_host}} {{username}}@{{remote_host}}",
            "SSH tunneling: Dynamic port forwarding (SOCKS proxy on localhost:9999)": "ssh -D {{9999}} -C {{username}}@{{remote_host}}",
            "SSH tunneling: Forward a specific port (localhost:9999 to example.org:80) along with disabling pseudo-[t]ty allocation and executio[n] of remote commands": "ssh -L {{9999}}:{{example.org}}:{{80}} -N -T {{username}}@{{remote_host}}"
        }
    },
    "common_ssh-agent": {
        "Category": "common",
        "Command": "ssh-agent",
        "P-Summary": "spawn ssh agent process\nssh agent hold ssh key decrypt memori remov process kill\nsee also ssh-add add manag key held ssh agent",
        "P-Tasks": "kill current run agent start ssh agent current shell",
        "Summary": "Spawn an SSH Agent process.\nAn SSH Agent holds SSH keys decrypted in memory until removed or the process is killed.\nSee also `ssh-add`, which can add and manage keys held by an SSH Agent.",
        "Task-Script": {
            "Kill the currently running agent": "ssh-agent -k",
            "Start an SSH Agent for the current shell": "eval $(ssh-agent)"
        }
    },
    "common_ssh-copy-id": {
        "Category": "common",
        "Command": "ssh-copy-id",
        "P-Summary": "instal public key remot machin authorized_key",
        "P-Tasks": "copi given public key remot copi given public key remot specif port copi key remot machin",
        "Summary": "Install your public key in a remote machine's authorized_keys.",
        "Task-Script": {
            "Copy the given public key to the remote": "ssh-copy-id -i {{path/to/certificate}} {{username}}@{{remote_host}}",
            "Copy the given public key to the remote with specific port": "ssh-copy-id -i {{path/to/certificate}} -p {{port}} {{username}}@{{remote_host}}",
            "Copy your keys to the remote machine": "ssh-copy-id {{username@remote_host}}"
        }
    },
    "common_ssh-keygen": {
        "Category": "common",
        "Command": "ssh-keygen",
        "P-Summary": "gener ssh key use authent password-less login thing",
        "P-Tasks": "chang password key gener key interact gener rsa 4096 bit key email comment gener ed25519 key 100 key deriv function round remov key host known_host file use known host new key retriev fingerprint key md5 hex retriev key fingerprint host use confirm authent host first connect via ssh specifi file save key",
        "Summary": "Generate ssh keys used for authentication, password-less logins, and other things.",
        "Task-Script": {
            "Change the password of a key": "ssh-keygen -p -f ~/.ssh/{{filename}}",
            "Generate a key interactively": "ssh-keygen",
            "Generate an RSA 4096 bit key with email as a comment": "ssh-keygen -t rsa -b 4096 -C \"{{email}}\"",
            "Generate an ed25519 key with 100 key derivation function rounds": "ssh-keygen -t ed25519 -a 100",
            "Remove the keys of a host from the known_hosts file (useful when a known host has a new key)": "ssh-keygen -R {{remote_host}}",
            "Retrieve the fingerprint of a key in MD5 Hex": "ssh-keygen -l -E md5 -f ~/.ssh/{{filename}}",
            "Retrieve the key fingerprint from a host (useful for confirming the authenticity of the host when first connecting to it via SSH)": "ssh-keygen -l -F {{remote_host}}",
            "Specify file in which to save the key": "ssh-keygen -f ~/.ssh/{{filename}}"
        }
    },
    "common_ssh-keyscan": {
        "Category": "common",
        "Command": "ssh-keyscan",
        "P-Summary": "get public ssh key remot host",
        "P-Tasks": "manual updat ssh known_host file fingerprint given host retriev public ssh key remot host retriev public ssh key remot host listen specif port retriev certain type public ssh key remot host",
        "Summary": "Get the public ssh keys of remote hosts.",
        "Task-Script": {
            "Manually update the ssh known_hosts file with the fingerprint of a given host": "ssh-keyscan -H {{host}} >> ~/.ssh/known_hosts",
            "Retrieve all public ssh keys of a remote host": "ssh-keyscan {{host}}",
            "Retrieve all public ssh keys of a remote host listening on a specific port": "ssh-keyscan -p {{port}} {{host}}",
            "Retrieve certain types of public ssh keys of a remote host": "ssh-keyscan -t {{rsa,dsa,ecdsa,ed25519}} {{host}}"
        }
    },
    "common_sshfs": {
        "Category": "common",
        "Command": "sshfs",
        "P-Summary": "filesystem client base ssh",
        "P-Tasks": "follow symbol link mount remot directori mount remot directori server specif port unmount remot directori use compress",
        "Summary": "Filesystem client based on ssh.",
        "Task-Script": {
            "Follow symbolic links": "sshfs -o follow_symlinks {{username}}@{{remote_host}}:{{remote_directory}} {{mountpoint}}",
            "Mount remote directory": "sshfs {{username}}@{{remote_host}}:{{remote_directory}} {{mountpoint}}",
            "Mount remote directory from server with specific port": "sshfs {{username}}@{{remote_host}}:{{remote_directory}} -p {{2222}}",
            "Unmount remote directory": "umount {{mountpoint}}",
            "Use compression": "sshfs {{username}}@{{remote_host}}:{{remote_directory}} -C"
        }
    },
    "common_sshpass": {
        "Category": "common",
        "Command": "sshpass",
        "P-Summary": "ssh password provid\nwork creat tti feed password redirect stdin ssh session",
        "P-Tasks": "connect remot server use password suppli file descriptor case stdin connect remot server use first line file password automat accept unknown ssh key launch command connect remot server password suppli option automat accept unknown ssh key",
        "Summary": "An ssh password provider.\nIt works by creating a TTY, feeding the password into it, and then redirecting `stdin` to the ssh session.",
        "Task-Script": {
            "Connect to a remote server using a password supplied on a file descriptor (in this case, `stdin`)": "sshpass -d {{0}} ssh {{user}}@{{hostname}}",
            "Connect to a remote server using the first line of a file as the password, automatically accept unknown ssh keys, and launch a command": "sshpass -f {{file}} ssh -o StrictHostKeyChecking=no {{user}}@{{hostname}} \"{{command}}\"",
            "Connect to a remote server with the password supplied as an option, and automatically accept unknown ssh keys": "sshpass -p {{password}} ssh -o StrictHostKeyChecking=no {{user}}@{{hostname}}"
        }
    },
    "common_st-flash": {
        "Category": "common",
        "Command": "st-flash",
        "P-Summary": "flash binari file stm32 arm cortex microcontrol",
        "P-Tasks": "eras firmwar devic read 4096 byte devic start 0x8000000 write firmwar devic start 0x8000000",
        "Summary": "Flash binary files to STM32 ARM Cortex microcontrollers.",
        "Task-Script": {
            "Erase firmware from device": "st-flash erase",
            "Read 4096 bytes from the device starting from 0x8000000": "st-flash read {{firmware}}.bin {{0x8000000}} {{4096}}",
            "Write firmware to device starting from 0x8000000": "st-flash write {{firmware}}.bin {{0x8000000}}"
        }
    },
    "common_st-info": {
        "Category": "common",
        "Command": "st-info",
        "P-Summary": "provid inform connect stlink stm32 devic",
        "P-Tasks": "display amount program memori avail display amount sram memori avail display summar inform devic",
        "Summary": "Provides information about connected STLink and STM32 devices.",
        "Task-Script": {
            "Display amount of program memory available": "st-info --flash",
            "Display amount of sram memory available": "st-info --sram",
            "Display summarized information of the device": "st-info --probe"
        }
    },
    "common_st-util": {
        "Category": "common",
        "Command": "st-util",
        "P-Summary": "run gdb gnu debugg server interact stm32 arm cortex microcontol",
        "P-Tasks": "connect gdb server run gdb server port 4500 write firmwar devic",
        "Summary": "Run GDB (GNU Debugger) server to interact with STM32 ARM Cortex microcontoller.",
        "Task-Script": {
            "Connect to GDB server": "(gdb) target extended-remote {{localhost}}:{{4500}}",
            "Run GDB server on port 4500": "st-util -p {{4500}}",
            "Write firmware to device": "(gdb) load {{firmware.elf}}"
        }
    },
    "common_stack": {
        "Category": "common",
        "Command": "stack",
        "P-Summary": "tool manag haskel project",
        "P-Tasks": "compil packag compil project execut command compil compil project re-compil everi time file chang creat new packag run program pass argument run test insid packag",
        "Summary": "Tool for managing Haskell projects.",
        "Task-Script": {
            "Compile a package": "stack build",
            "Compile a project and execute a command after compilation": "stack build --exec \"{{command}}\"",
            "Compile a project and re-compile every time a file changes": "stack build --file-watch",
            "Create a new package": "stack new {{package_name}} {{template_name}}",
            "Run a program and pass an argument to it": "stack exec {{program_name}} -- {{argument}}",
            "Run tests inside a package": "stack test"
        }
    },
    "common_standard": {
        "Category": "common",
        "Command": "standard",
        "P-Summary": "javascript standard style tool lint fix javascript code",
        "P-Tasks": "appli automat fix lint declar avail global variabl lint javascript sourc file current directori lint specif javascript file use custom eslint environ lint use custom eslint plugin lint use custom js parser lint",
        "Summary": "The JavaScript Standard Style tool for linting and fixing JavaScript code.",
        "Task-Script": {
            "Apply automatic fixes during linting": "standard --fix",
            "Declare any available global variables": "standard --global {{variable}}",
            "Lint all JavaScript source files in the current directory": "standard",
            "Lint specific JavaScript file(s)": "standard {{path/to/file(s)}}",
            "Use a custom ESLint environment when linting": "standard --env {{environment}}",
            "Use a custom ESLint plugin when linting": "standard --plugin {{plugin}}",
            "Use a custom JS parser when linting": "standard --parser {{parser}}"
        }
    },
    "common_stat": {
        "Category": "common",
        "Command": "stat",
        "P-Summary": "display file filesystem inform",
        "P-Tasks": "concis way show file properti size permiss creation access date among other show filesystem inform show octal file permiss show owner group file show size file byte",
        "Summary": "Display file and filesystem information.",
        "Task-Script": {
            "Same as above but in a more concise way": "stat -t {{file}}",
            "Show file properties such as size, permissions, creation and access dates among others": "stat {{file}}",
            "Show filesystem information": "stat -f {{file}}",
            "Show only octal file permissions": "stat -c \"%a %n\" {{file}}",
            "Show owner and group of the file": "stat -c \"%U %G\" {{file}}",
            "Show the size of the file in bytes": "stat -c \"%s %n\" {{file}}"
        }
    },
    "common_stdbuf": {
        "Category": "common",
        "Command": "stdbuf",
        "P-Summary": "run command modifi buffer oper standard stream",
        "P-Tasks": "chang standard error buffer unbuff chang standard input buffer size 512 kib chang standard output buffer line-buff",
        "Summary": "Run a command with modified buffering operations for its standard streams.",
        "Task-Script": {
            "Change the standard error buffer to unbuffered": "stdbuf --error={{0}} {{command}}",
            "Change the standard input buffer size to 512 KiB": "stdbuf --input={{512K}} {{command}}",
            "Change the standard output buffer to line-buffered": "stdbuf --output={{L}} {{command}}"
        }
    },
    "common_stern": {
        "Category": "common",
        "Command": "stern",
        "P-Summary": "tail multipl pod contain kubernet",
        "P-Tasks": "tail pod match given regular express tail pod specif statu tail pod within current namespac tail match pod 15 minut ago tail match pod namespac tail match pod specif label",
        "Summary": "Tail multiple pods and containers from Kubernetes.",
        "Task-Script": {
            "Tail all pods that matches a given regular expression": "stern {{pod_query}}",
            "Tail all pods with a specific status": "stern . --container-state {{running|waiting|terminated}}",
            "Tail all pods within a current namespace": "stern .",
            "Tail matched pods from 15 minutes ago": "stern {{pod_query}} --since {{15m}}",
            "Tail matched pods from all namespaces": "stern {{pod_query}} --all-namespaces",
            "Tail matched pods with a specific label": "stern {{pod_query}} --selector {{release=canary}}"
        }
    },
    "common_stow": {
        "Category": "common",
        "Command": "stow",
        "P-Summary": "symlink manag\noften use manag dotfil",
        "P-Tasks": "delet resymlink delet symlink recurs given directori exclud file match regular express simul see result would like symlink file recurs given directori",
        "Summary": "Symlink manager.\nOften used to manage dotfiles.",
        "Task-Script": {
            "Delete and resymlink": "stow --restow --target={{path/to/target_directory}} {{file1 directory1 file2 directory2}}",
            "Delete symlinks recursively from a given directory": "stow --delete --target={{path/to/target_directory}} {{file1 directory1 file2 directory2}}",
            "Exclude files matching a regular expression": "stow --ignore={{regex}} --target={{path/to/target_directory}} {{file1 directory1 file2 directory2}}",
            "Simulate to see what the result would be like": "stow --simulate --target={{path/to/target_directory}} {{file1 directory1 file2 directory2}}",
            "Symlink all files recursively to a given directory": "stow --target={{path/to/target_directory}} {{file1 directory1 file2 directory2}}"
        }
    },
    "common_streamlink": {
        "Category": "common",
        "Command": "streamlink",
        "P-Summary": "extract stream variou servic pipe video player choic",
        "P-Tasks": "attempt extract stream url specifi success print list avail stream choos open stream specifi qualiti open stream player time write file select highest lowest avail qualiti skip begin live stream far back possibl specifi amount time skip begin stream\nlive stream neg offset end stream rewind specifi player use feed stream data vlc use default found write stream data file instead play",
        "Summary": "Extracts streams from various services and pipes them into a video player of choice.",
        "Task-Script": {
            "Attempt to extract streams from the URL specified, and if it's successful, print out a list of available streams to choose from": "streamlink {{example.com/stream}}",
            "Open a stream with the specified quality": "streamlink {{example.com/stream}} {{720p60}}",
            "Open the stream in the player, while at the same time writing it to a file": "streamlink --record {{path/to/file.ts}} {{example.com/stream}} {{best}}",
            "Select the highest or lowest available quality": "streamlink {{example.com/stream}} {{best|worst}}",
            "Skip to the beginning of a live stream, or as far back as possible": "streamlink --hls-live-restart {{example.com/stream}} {{best}}",
            "Specify the amount of time to skip from the beginning of the stream. For live streams, this is a negative offset from the end of the stream (rewind)": "streamlink --hls-start-offset {{[HH:]MM:SS}} {{example.com/stream}} {{best}}",
            "Specify which player to use to feed stream data to (VLC is used by default if found)": "streamlink --player={{mpv}} {{example.com/stream}} {{best}}",
            "Write stream data to a file instead of playing it": "streamlink --output {{path/to/file.ts}} {{example.com/stream}} {{best}}"
        }
    },
    "common_strings": {
        "Category": "common",
        "Command": "strings",
        "P-Summary": "find printabl string object file binari",
        "P-Tasks": "limit result string least length charact long prefix result offset within file prefix result offset within file hexadecim print string binari",
        "Summary": "Find printable strings in an object file or binary.",
        "Task-Script": {
            "Limit results to strings at least *length* characters long": "strings -n {{length}} {{file}}",
            "Prefix each result with its offset within the file": "strings -t d {{file}}",
            "Prefix each result with its offset within the file in hexadecimal": "strings -t x {{file}}",
            "Print all strings in a binary": "strings {{file}}"
        }
    },
    "common_strip-nondeterminism": {
        "Category": "common",
        "Command": "strip-nondeterminism",
        "P-Summary": "tool remov non-determinist inform e g\ntimestamp file",
        "P-Tasks": "strip nondeterminist inform file strip nondeterminist inform file manual specifi filetyp strip nondeterminist inform file instead remov timestamp set specifi unix timestamp",
        "Summary": "A tool to remove non-deterministic information (e.g. timestamps) from files.",
        "Task-Script": {
            "Strip nondeterministic information from a file": "strip-nondeterminism {{path/to/file}}",
            "Strip nondeterministic information from a file manually specifying the filetype": "strip-nondeterminism --type {{filetype}} {{path/to/file}}",
            "Strip nondeterministic information from a file; instead of removing timestamps set them to the specified UNIX timestamp": "strip-nondeterminism --timestamp {{unix_timestamp}} {{path/to/file}}"
        }
    },
    "common_stripe": {
        "Category": "common",
        "Command": "stripe",
        "P-Summary": "interact stripe account",
        "P-Tasks": "creat custom follow log activ account listen event filter event name charg succeed forward localhost:3000 event print json send test webhook event",
        "Summary": "Interact with a Stripe account.",
        "Task-Script": {
            "Create a customer": "stripe customers create --email=\"{{test@example.com}}\" --name=\"{{Jenny Rosen}}\"",
            "Follow the logs of activity on the account": "stripe logs tail",
            "Listen for events, filtering on events with the name `charge.succeeded` and forwarding them to localhost:3000/events": "stripe listen --events=\"{{charge.succeeded}}\" --forward-to=\"{{localhost:3000/events}}\"",
            "Print to JSON": "stripe listen --print-json",
            "Send a test webhook event": "stripe trigger {{charge.succeeded}}"
        }
    },
    "common_stty": {
        "Category": "common",
        "Command": "stty",
        "P-Summary": "set option termin devic interfac",
        "P-Tasks": "display set current termin get actual transfer speed devic reset mode reason valu current termin set number column set number row",
        "Summary": "Set options for a terminal device interface.",
        "Task-Script": {
            "Display all settings for the current terminal": "stty -a",
            "Get the actual transfer speed of a device": "stty -f {{path/to/device_file}} speed",
            "Reset all modes to reasonable values for the current terminal": "stty sane",
            "Set the number of columns": "stty cols {{cols}}",
            "Set the number of rows": "stty rows {{rows}}"
        }
    },
    "common_su": {
        "Category": "common",
        "Command": "su",
        "P-Summary": "switch shell anoth user",
        "P-Tasks": "execut command anoth user switch given user requir user password switch given user simul full login shell switch superus requir root password",
        "Summary": "Switch shell to another user.",
        "Task-Script": {
            "Execute a command as another user": "su - {{username}} -c \"{{command}}\"",
            "Switch to a given user (requires the user's password)": "su {{username}}",
            "Switch to a given user and simulate a full login shell": "su - {{username}}",
            "Switch to superuser (requires the root password)": "su"
        }
    },
    "common_subfinder": {
        "Category": "common",
        "Command": "subfinder",
        "P-Summary": "subdomain discoveri tool discov valid subdomain websit\ndesign passiv framework use bug bounti safe penetr test",
        "P-Tasks": "find subdomain specif domain remov wildcard subdomain show subdomain found use given comma-separ list resolv use bruteforc find subdomain",
        "Summary": "A subdomain discovery tool that discovers valid subdomains for websites.\nDesigned as a passive framework to be useful for bug bounties and safe for penetration testing.",
        "Task-Script": {
            "Find subdomains for a specific domain": "subfinder -d {{example.com}}",
            "Remove wildcard subdomains": "subfinder -nW -d {{example.com}}",
            "Show only the subdomains found": "subfinder --silent -d {{example.com}}",
            "Use a given comma-separated list of resolvers": "subfinder -r {{8.8.8.8}},{{1.1.1.1}} -d {{example.com}}",
            "Use bruteforcing to find subdomains": "subfinder -d {{example.com}} -b"
        }
    },
    "common_subl": {
        "Category": "common",
        "Command": "subl",
        "P-Summary": "sublim text editor",
        "P-Tasks": "open file jump specif line number open file directori sublim text open file directori new window open file directori current open window open current directori sublim text",
        "Summary": "Sublime Text editor.",
        "Task-Script": {
            "Open a file and jump to a specific line number": "subl {{path/to/file}}:{{line_number}}",
            "Open a file or directory in Sublime Text": "subl {{path/to/file_or_directory}}",
            "Open a file or directory in a new window": "subl -n {{path/to/file}}",
            "Open a file or directory in the currently open window": "subl -a {{path/to/file}}",
            "Open the current directory in Sublime Text": "subl {{.}}"
        }
    },
    "common_subliminal": {
        "Category": "common",
        "Command": "subliminal",
        "P-Summary": "python-bas subtitl download",
        "P-Tasks": "download english subtitl video",
        "Summary": "Python-based subtitle downloader.",
        "Task-Script": {
            "Download English subtitles for a video": "subliminal download -l {{en}} {{video.ext}}"
        }
    },
    "common_sudo": {
        "Category": "common",
        "Command": "sudo",
        "P-Summary": "execut singl command superus anoth user",
        "P-Tasks": "edit file superus default editor launch default shell superus privileg repeat last command prefix sudo bash zsh etc\nrun command anoth user group run command superus",
        "Summary": "Executes a single command as the superuser or another user.",
        "Task-Script": {
            "Edit a file as the superuser with your default editor": "sudo -e {{/etc/fstab}}",
            "Launch the default shell with superuser privileges": "sudo -i",
            "Repeat the last command prefixed with \"sudo\" (only in bash, zsh, etc.)": "sudo !!",
            "Run a command as another user and/or group": "sudo -u {{user}} -g {{group}} {{id -a}}",
            "Run a command as the superuser": "sudo {{less /var/log/syslog}}"
        }
    },
    "common_sum": {
        "Category": "common",
        "Command": "sum",
        "P-Summary": "comput checksum number block file\npredecessor modern cksum",
        "P-Tasks": "comput checksum bsd-compat algorithm 1024-byte block comput checksum system v-compat algorithm 512-byte block",
        "Summary": "Compute checksums and the number of blocks for a file.\nA predecessor to the more modern `cksum`.",
        "Task-Script": {
            "Compute a checksum with BSD-compatible algorithm and 1024-byte blocks": "sum {{file}}",
            "Compute a checksum with System V-compatible algorithm and 512-byte blocks": "sum --sysv {{file}}"
        }
    },
    "common_supervisorctl": {
        "Category": "common",
        "Command": "supervisorctl",
        "P-Summary": "supervisor client server system allow user control number process unix-lik oper system\nsupervisorctl command-lin client piec supervisor provid shell-lik interfac",
        "P-Tasks": "keep display stdout process reload process config file add remov process necessari show last 100 byte process stderr start stop restart process start stop restart process group",
        "Summary": "Supervisor is a client/server system that allows its users to control a number of processes on UNIX-like operating systems.\nSupervisorctl is the command-line client piece of the supervisor which provides a shell-like interface.",
        "Task-Script": {
            "Keep displaying `stdout` of a process": "supervisorctl tail -f {{process_name}} stdout",
            "Reload process config file to add/remove processes as necessary": "supervisorctl update",
            "Show last 100 **bytes** of process `stderr`": "supervisorctl tail -100 {{process_name}} stderr",
            "Start/stop/restart a process": "supervisorctl {{start|stop|restart}} {{process_name}}",
            "Start/stop/restart all processes in a group": "supervisorctl {{start|stop|restart}} {{group_name}}:*"
        }
    },
    "common_supervisord": {
        "Category": "common",
        "Command": "supervisord",
        "P-Summary": "supervisor client server system control process unix-lik oper system\nsupervisord server part supervisor primarili manag via configur file",
        "P-Tasks": "run supervisord foreground start supervisord specifi configur file",
        "Summary": "Supervisor is a client/server system for controlling some processes on UNIX-like operating systems.\nSupervisord is the server part of supervisor; it is primarily managed via a configuration file.",
        "Task-Script": {
            "Run supervisord in the foreground": "supervisord -n",
            "Start supervisord with specified configuration file": "supervisord -c {{path/to/file}}"
        }
    },
    "common_surge": {
        "Category": "common",
        "Command": "surge",
        "P-Summary": "simpl command line web publish",
        "P-Tasks": "deploy site custom domain note dn record must point surg sh subdomain list surg project remov project upload new site surg sh",
        "Summary": "Simple command line web publishing.",
        "Task-Script": {
            "Deploy site to custom domain (note that the DNS records must point to the surge.sh subdomain)": "surge {{path/to/my_project}} {{my_custom_domain.com}}",
            "List your surge projects": "surge list",
            "Remove a project": "surge teardown {{my_custom_domain.com}}",
            "Upload a new site to surge.sh": "surge {{path/to/my_project}}"
        }
    },
    "common_svgcleaner": {
        "Category": "common",
        "Command": "svgcleaner",
        "P-Summary": "svg imag optim util",
        "P-Tasks": "optim svg imag optim svg imag multipl time",
        "Summary": "SVG image optimizing utility.",
        "Task-Script": {
            "Optimize an SVG image": "svgcleaner {{input.svg}} {{output.svg}}",
            "Optimize an SVG image multiple times": "svgcleaner --multipass {{input.svg}} {{output.svg}}"
        }
    },
    "common_svgo": {
        "Category": "common",
        "Command": "svgo",
        "P-Summary": "svg optim : node js-base tool optim scalabl vector graphic file\nappli seri transform rule plugin toggl individu",
        "P-Tasks": "optim svg content pass anoth command save result file optim file print result optim file save result anoth file optim file make sure given plugin enabl optim file use default plugin overwrit origin file optim svg file within directori overwrit origin file optim svg file within directori save result file anoth directori show avail plugin",
        "Summary": "SVG Optimizer: a Node.js-based tool for optimizing Scalable Vector Graphics files.\nIt applies a series of transformation rules (plugins), which can be toggled individually.",
        "Task-Script": {
            "Optimize SVG content passed from another command, and save the result to a file": "{{cat test.svg}} | svgo -i - -o {{test.min.svg}}",
            "Optimize a file and print out the result": "svgo {{test.svg}} -o -",
            "Optimize a file and save the result to another file": "svgo {{test.svg}} -o {{test.min.svg}}",
            "Optimize a file making sure a given plugin is enabled": "svgo --enable={{plugin_name}}",
            "Optimize a file using the default plugins (overwrites the original file)": "svgo {{test.svg}}",
            "Optimize all SVG files within a directory (overwrites the original files)": "svgo -f {{path/to/directory/with/svg/files}}",
            "Optimize all SVG files within a directory and save the resulting files to another directory": "svgo -f {{path/to/input/directory}} -o {{path/to/output/directory}}",
            "Show available plugins": "svgo --show-plugins"
        }
    },
    "common_svn": {
        "Category": "common",
        "Command": "svn",
        "P-Summary": "subvers command line client tool",
        "P-Tasks": "bring chang repositori work copi check work copi repositori display chang last 10 revis show modifi file revis put file directori version control schedul addit repositori\nad next commit send chang work copi repositori show detail help",
        "Summary": "Subversion command line client tool.",
        "Task-Script": {
            "Bring changes from the repository into the working copy": "svn up",
            "Check out a working copy from a repository": "svn co {{url/to/repository}}",
            "Display changes from the last 10 revisions, showing modified files for each revision": "svn log -vl {{10}}",
            "Put files and directories under version control, scheduling them for addition to repository. They will be added in next commit": "svn add {{PATH}}",
            "Send changes from your working copy to the repository": "svn ci -m {{commit log message}} [{{PATH}}]",
            "Show detailed help": "svn help"
        }
    },
    "common_swagger-codegen": {
        "Category": "common",
        "Command": "swagger-codegen",
        "P-Summary": "gener code document rest api openapi swagger definit",
        "P-Tasks": "display help option gener command gener document code openapi swagger file gener java code use librari retrofit2 option userxjava2 list avail languag",
        "Summary": "Generate code and documentation for your REST api from a OpenAPI/swagger definition.",
        "Task-Script": {
            "Display help options for the generate command": "swagger-codegen help {{generate}}",
            "Generate documentation and code from an OpenAPI/swagger file": "swagger-codegen generate -i {{swagger_file}} -l {{language}}",
            "Generate java code using the library retrofit2 and the option useRxJava2": "swagger-codegen generate -i {{http://petstore.swagger.io/v2/swagger.json}} -l {{java}} --library {{retrofit2}} -D{{useRxJava2}}={{true}}",
            "List available languages": "swagger-codegen langs"
        }
    },
    "common_swift": {
        "Category": "common",
        "Command": "swift",
        "P-Summary": "creat run build swift project",
        "P-Tasks": "compil project releas execut program gener xcode project file invok interact interpret repl start new project packag manag updat depend",
        "Summary": "Create, run and build Swift projects.",
        "Task-Script": {
            "Compile project for release": "swift build -c release",
            "Execute a program": "swift {{file.swift}}",
            "Generate an Xcode project file": "swift package generate-xcodeproj",
            "Invoke the interactive interpreter (REPL)": "swift",
            "Start a new project with the package manager": "swift package init",
            "Update dependencies": "swift package update"
        }
    },
    "common_swig": {
        "Category": "common",
        "Command": "swig",
        "P-Summary": "gener bind c c++ code variou high level languag javascript python c\nuse special swg file gener bind c c++ swig direct output c c++ file contain wrapper code need build extens modul",
        "P-Tasks": "gener bind c java gener bind c rubi prefix rubi modul foo : :bar : : gener bind c++ go gener bind c++ python",
        "Summary": "Generate bindings between C / C++ code and various high level languages such as Javascript, Python, C#, and more.\nIt uses special .i or .swg files to generate the bindings (C/C++ with SWIG directives, then outputs a C/C++ file that contains all of the wrapper code needed to build an extension module.",
        "Task-Script": {
            "Generate a binding between C and Java": "swig -java {{path/to/swig_file.i}}",
            "Generate a binding between C and Ruby and prefix the Ruby module with {{foo::bar::}}": "swig -ruby -prefix \"{{foo::bar::}}\" {{path/to/swig_file.i}}",
            "Generate a binding between C++ and Go": "swig -go -cgo -intgosize 64 -c++ {{path/to/swig_file.i}}",
            "Generate a binding between C++ and Python": "swig -c++ -python -o {{path/to/output_wrapper.cpp}} {{path/to/swig_file.i}}"
        }
    },
    "common_symfony": {
        "Category": "common",
        "Command": "symfony",
        "P-Summary": "consol compon symfoni framework",
        "P-Tasks": "check secur issu project depend creat new symfoni project run local web server stop local web server",
        "Summary": "The console component for the Symfony framework.",
        "Task-Script": {
            "Check for security issues in the project's dependencies": "symfony security:check",
            "Create a new Symfony project": "symfony new {{name}}",
            "Run a local web server": "symfony serve",
            "Stop the local web server": "symfony server:stop"
        }
    },
    "common_sync": {
        "Category": "common",
        "Command": "sync",
        "P-Summary": "flush pend write oper appropri disk",
        "P-Tasks": "flush pend write oper singl file disk flush pend write oper disk",
        "Summary": "Flushes all pending write operations to the appropriate disks.",
        "Task-Script": {
            "Flush all pending write operations on a single file to disk": "sync {{path/to/file}}",
            "Flush all pending write operations on all disks": "sync"
        }
    },
    "common_syncthing": {
        "Category": "common",
        "Command": "syncthing",
        "P-Summary": "continu bidirect decentralis folder synchronis tool",
        "P-Tasks": "chang address upon web interfac listen chang home directori disabl syncth monitor process forc full index exchang print devic id show filepath file use syncth start syncth start syncth without open web browser",
        "Summary": "Continuous bidirectional decentralised folder synchronisation tool.",
        "Task-Script": {
            "Change the address upon which the web interface listens": "syncthing -gui-address={{ip_address:port|path/to/socket.sock}}",
            "Change the home directory": "syncthing -home={{path/to/directory}}",
            "Disable the syncthing monitor process": "syncthing -no-restart",
            "Force a full index exchange": "syncthing -reset-deltas",
            "Print the device ID": "syncthing -device-id",
            "Show filepaths to the files used by syncthing": "syncthing -paths",
            "Start syncthing": "syncthing",
            "Start syncthing without opening a web browser": "syncthing -no-browser"
        }
    },
    "common_tabula": {
        "Category": "common",
        "Command": "tabula",
        "P-Summary": "extract tabl pdf file",
        "P-Tasks": "extract tabl pdf csv file extract tabl pdf json file extract tabl pdf use blank space determin cell boundari extract tabl pdf use rule line determin cell boundari extract tabl page 1 pdf guess portion page examin extract tabl page 1 2 3 6 pdf",
        "Summary": "Extract tables from PDF files.",
        "Task-Script": {
            "Extract all tables from a PDF to a CSV file": "tabula -o {{file.csv}} {{file.pdf}}",
            "Extract all tables from a PDF to a JSON file": "tabula --format JSON -o {{file.json}} {{file.pdf}}",
            "Extract all tables from a PDF, using blank space to determine cell boundaries": "tabula --no-spreadsheet {{file.pdf}}",
            "Extract all tables from a PDF, using ruling lines to determine cell boundaries": "tabula --spreadsheet {{file.pdf}}",
            "Extract tables from page 1 of a PDF, guessing which portion of the page to examine": "tabula --guess --pages {{1}} {{file.pdf}}",
            "Extract tables from pages 1, 2, 3, and 6 of a PDF": "tabula --pages {{1-3,6}} {{file.pdf}}"
        }
    },
    "common_tac": {
        "Category": "common",
        "Command": "tac",
        "P-Summary": "print concaten file revers last line first",
        "P-Tasks": "concaten sever file revers target file print content file1 revers standard output print content standard input revers standard output",
        "Summary": "Print and concatenate files in reverse (last line first).",
        "Task-Script": {
            "Concatenate several files reversed into the target file": "tac {{file1}} {{file2}} > {{target_file}}",
            "Print the contents of *file1* reversed to the standard output": "tac {{file1}}",
            "Print the contents of the standard input reversed to the standard output": "{{command}} | tac"
        }
    },
    "common_tail": {
        "Category": "common",
        "Command": "tail",
        "P-Summary": "display last part file",
        "P-Tasks": "keep read file ctrl + c keep read file ctrl + c even file rotat show file sinc line num show last num byte file show last num line file refresh everi n second show last num line file",
        "Summary": "Display the last part of a file.",
        "Task-Script": {
            "Keep reading file until `Ctrl + C`": "tail -f {{file}}",
            "Keep reading file until `Ctrl + C`, even if the file is rotated": "tail -F {{file}}",
            "Show all file since line 'num'": "tail -n +{{num}} {{file}}",
            "Show last 'num' bytes in file": "tail -c {{num}} {{file}}",
            "Show last 'num' lines in 'file' and refresh every 'n' seconds": "tail -n {{num}} -s {{n}} -f {{file}}",
            "Show last 'num' lines in file": "tail -n {{num}} {{file}}"
        }
    },
    "common_tar": {
        "Category": "common",
        "Command": "tar",
        "P-Summary": "archiv util\noften combin compress method gzip bzip",
        "P-Tasks": "creat compress archiv use archiv suffix determin compress program creat gzip archiv creat gzip archiv directori use rel path creat archiv file extract compress archiv current directori extract compress archiv target directori extract specif file without preserv folder structur extract file match pattern list content tar file",
        "Summary": "Archiving utility.\nOften combined with a compression method, such as gzip or bzip.",
        "Task-Script": {
            "Create a compressed archive, using archive suffix to determine the compression program": "tar caf {{target.tar.xz}} {{file1}} {{file2}} {{file3}}",
            "Create a gzipped archive": "tar czf {{target.tar.gz}} {{file1}} {{file2}} {{file3}}",
            "Create a gzipped archive from a directory using relative paths": "tar czf {{target.tar.gz}} -C {{path/to/directory}} .",
            "Create an archive from files": "tar cf {{target.tar}} {{file1}} {{file2}} {{file3}}",
            "Extract a (compressed) archive into the current directory": "tar xf {{source.tar[.gz|.bz2|.xz]}}",
            "Extract a (compressed) archive into the target directory": "tar xf {{source.tar[.gz|.bz2|.xz]}} -C {{directory}}",
            "Extract a specific file without preserving the folder structure": "tar xf {{source.tar}} {{source.tar/path/to/extract}} --strip-components={{depth_to_strip}}",
            "Extract files matching a pattern": "tar xf {{source.tar}} --wildcards \"{{*.html}}\"",
            "List the contents of a tar file": "tar tvf {{source.tar}}"
        }
    },
    "common_task": {
        "Category": "common",
        "Command": "task",
        "P-Summary": "todo list manag",
        "P-Tasks": "add new task delet task list task mark task complet modifi task",
        "Summary": "TODO list manager.",
        "Task-Script": {
            "Add new task": "task add {{thing_to_do}}",
            "Delete task": "task {{task_id}} delete",
            "List tasks": "task list",
            "Mark task as completed": "task {{task_id}} done",
            "Modify task": "task {{task_id}} modify {{new_thing_to_do}}"
        }
    },
    "common_tb": {
        "Category": "common",
        "Command": "tb",
        "P-Summary": "cli manag task note across multipl board",
        "P-Tasks": "add new note board add new task board archiv check item check uncheck item edit item prioriti move item board",
        "Summary": "CLI for managing tasks and notes across multiple boards.",
        "Task-Script": {
            "Add a new note to a board": "tb --note {{note description}} @{{board_name}}",
            "Add a new task to a board": "tb --task {{task description}} @{{board_name}}",
            "Archive all checked items": "tb --clear",
            "Check/uncheck item": "tb --check {{item_id}}",
            "Edit item's priority": "tb --priority @{{item_id}} {{priority}}",
            "Move item to a board": "tb --move @{{item_id}} {{board_name}}"
        }
    },
    "common_tcpdump": {
        "Category": "common",
        "Command": "tcpdump",
        "P-Summary": "dump traffic network",
        "P-Tasks": "captur tcp traffic show content ascii consol captur traffic except traffic port 22 save dump file captur traffic specif interfac sourc destin destin port captur traffic host captur traffic network captur traffic specif interfac list avail network interfac read given dump file",
        "Summary": "Dump traffic on a network.",
        "Task-Script": {
            "Capture all TCP traffic showing contents (ASCII) in console": "tcpdump -A tcp",
            "Capture all traffic except traffic over port 22 and save to a dump file": "tcpdump -w {{dumpfile.pcap}} port not {{22}}",
            "Capture the traffic from a specific interface, source, destination and destination port": "tcpdump -i {{eth0}} src {{192.168.1.1}} and dst {{192.168.1.2}} and dst port {{80}}",
            "Capture the traffic from or to a host": "tcpdump host {{www.example.com}}",
            "Capture the traffic of a network": "tcpdump net {{192.168.1.0/24}}",
            "Capture the traffic of a specific interface": "tcpdump -i {{eth0}}",
            "List available network interfaces": "tcpdump -D",
            "Read from a given dump file": "tcpdump -r {{dumpfile.pcap}}"
        }
    },
    "common_tea": {
        "Category": "common",
        "Command": "tea",
        "P-Summary": "command line tool interact gitea server",
        "P-Tasks": "creat new issu display list issu display list issu specif repositori display list open pull request display repositori log gitea server open current repositori browser",
        "Summary": "A command line tool to interact with Gitea servers.",
        "Task-Script": {
            "Create a new issue": "tea issues create --title \"{{title}}\" --body \"{{body}}\"",
            "Display a list of issues": "tea issues ls",
            "Display a list of issues for a specific repository": "tea issues ls --repo \"{{repository}}\"",
            "Display a list of open pull requests": "tea pulls ls",
            "Display all repositories": "tea repos ls",
            "Log into a Gitea server": "tea login add --name \"{{name}}\" --url \"{{url}}\" --token \"{{token}}\"",
            "Open the current repository in a browser": "tea open"
        }
    },
    "common_tee": {
        "Category": "common",
        "Command": "tee",
        "P-Summary": "read standard input write standard output file command",
        "P-Tasks": "append given file overwrit copi standard input file also standard output creat directori call exampl count number charact exampl write exampl termin print standard input termin also pipe anoth program process",
        "Summary": "Read from standard input and write to standard output and files (or commands).",
        "Task-Script": {
            "Append to the given FILEs, do not overwrite": "echo \"example\" | tee -a {{FILE}}",
            "Copy standard input to each FILE, and also to standard output": "echo \"example\" | tee {{FILE}}",
            "Create a directory called \"example\", count the number of characters in \"example\" and write \"example\" to the terminal": "echo \"example\" | tee >(xargs mkdir) >(wc -c)",
            "Print standard input to the terminal, and also pipe it into another program for further processing": "echo \"example\" | tee {{/dev/tty}} | {{xargs printf \"[%s]\"}}"
        }
    },
    "common_telnet": {
        "Category": "common",
        "Command": "telnet",
        "P-Summary": "connect specifi port host use telnet protocol",
        "P-Tasks": "emit default escap charact combin termin session exit telnet session start telnet x session termin charact telnet specif port host telnet default port host",
        "Summary": "Connect to a specified port of a host using the telnet protocol.",
        "Task-Script": {
            "Emit the default escape character combination for terminating the session": "Ctrl + ]",
            "Exit a telnet session": "quit",
            "Start telnet with \"x\" as the session termination character": "telnet -e {{x}} {{ip_address}} {{port}}",
            "Telnet to a specific port of a host": "telnet {{ip_address}} {{port}}",
            "Telnet to the default port of a host": "telnet {{host}}"
        }
    },
    "common_terminalizer": {
        "Category": "common",
        "Command": "terminalizer",
        "P-Summary": "util program record termin gener anim gif share video",
        "P-Tasks": "creat global config directori play record file termin record termin creat record file render record file anim gif imag upload video termin com",
        "Summary": "Utility program which records the terminal and generate animated gifs or share a video.",
        "Task-Script": {
            "Create the global config directory": "terminalizer init",
            "Play a recorded file on the terminal": "terminalizer play {{filename}}",
            "Record the terminal and create a recording file": "terminalizer record {{filename}}",
            "Render a recording file as an animated gif image": "terminalizer render {{filename}}",
            "Upload a video to terminalizer.com": "terminalizer share {{filename}}"
        }
    },
    "common_terraform": {
        "Category": "common",
        "Command": "terraform",
        "P-Summary": "creat deploy infrastructur code cloud provid",
        "P-Tasks": "build chang infrastructur destroy terraform-manag infrastructur format configur accord terraform languag style convent gener show execut plan initi new exist terraform configur verifi configur file syntact valid",
        "Summary": "Create and deploy infrastructure as code to cloud providers.",
        "Task-Script": {
            "Build or change infrastructure": "terraform apply",
            "Destroy Terraform-managed infrastructure": "terraform destroy",
            "Format configuration according to Terraform language style conventions": "terraform fmt",
            "Generate and show an execution plan": "terraform plan",
            "Initialize a new or existing Terraform configuration": "terraform init",
            "Verify that the configuration files are syntactically valid": "terraform validate"
        }
    },
    "common_terraform fmt": {
        "Category": "common",
        "Command": "terraform fmt",
        "P-Summary": "format configur accord terraform languag style convent",
        "P-Tasks": "display diff format chang list file format stdout format configur current directori format configur current directori subdirectori",
        "Summary": "Format configuration according to Terraform language style conventions.",
        "Task-Script": {
            "Display diffs of formatting changes": "terraform fmt -diff",
            "Do not list files that were formatted to stdout": "terraform fmt -list=false",
            "Format the configuration in the current directory": "terraform fmt",
            "Format the configuration in the current directory and subdirectories": "terraform fmt -recursive"
        }
    },
    "common_tesseract": {
        "Category": "common",
        "Command": "tesseract",
        "P-Summary": "ocr optic charact recognit engin",
        "P-Tasks": "list page segment mode descript list iso 639-2 code avail languag recogn text imag save output txt txt extens ad automat specifi custom languag default english iso 639-2 code e g\ndeu deutsch german specifi custom page segment mode default 3",
        "Summary": "OCR (Optical Character Recognition) engine.",
        "Task-Script": {
            "List page segmentation modes and their descriptions": "tesseract --help-psm",
            "List the ISO 639-2 codes of available languages": "tesseract --list-langs",
            "Recognize text in an image and save it to `output.txt` (the '.txt' extension is added automatically)": "tesseract {{image.png}} {{output}}",
            "Specify a custom language (default is English) with an ISO 639-2 code (e.g. deu = Deutsch = German)": "tesseract -l deu {{image.png}} {{output}}",
            "Specify a custom page segmentation mode (default is 3)": "tesseract -psm {{0_to_10}} {{image.png}} {{output}}"
        }
    },
    "common_test": {
        "Category": "common",
        "Command": "test",
        "P-Summary": "evalu condit\ntrue return 0 exit statu otherwis return 1",
        "P-Tasks": "if-els statement test directori exist test file exist test given variabl empti test given variabl equal given string",
        "Summary": "Evaluate condition.\nIf it is true, returns 0 exit status, otherwise returns 1.",
        "Task-Script": {
            "If-else statement": "test {{condition}} && echo \"true\" || echo \"false\"",
            "Test if directory not exists": "test ! -d {{path/to/directory}}",
            "Test if file exists": "test -e {{filename}}",
            "Test if given variable is empty": "test -z $GIT_BRANCH",
            "Test if given variable is equal to given string": "test $MY_VAR == '/bin/zsh'"
        }
    },
    "common_testssl": {
        "Category": "common",
        "Command": "testssl",
        "P-Summary": "check ssl tl protocol cipher support server",
        "P-Tasks": "check http secur header check avail protocol check vulner test differ port test server run everi check port 443",
        "Summary": "Check SSL/TLS protocols and ciphers supported by a server.",
        "Task-Script": {
            "Only check HTTP security headers": "testssl --headers {{example.com}}",
            "Only check available protocols": "testssl --protocols {{example.com}}",
            "Only check vulnerabilities": "testssl --vulnerable {{example.com}}",
            "Test a different port": "testssl {{example.com:465}}",
            "Test a server (run every check) on port 443": "testssl {{example.com}}"
        }
    },
    "common_thundebird": {
        "Category": "common",
        "Command": "thundebird",
        "P-Summary": "email client rss reader",
        "P-Tasks": "open thunderbird use specif user profil use specif user profil directori",
        "Summary": "Email client and RSS reader.",
        "Task-Script": {
            "Open thunderbird": "thunderbird",
            "Use a specific user profile": "thunderbird -P {{profile_name}}",
            "Use a specific user profile directory": "thunderbird --profile {{path/to/profile/directory}}"
        }
    },
    "common_tig": {
        "Category": "common",
        "Command": "tig",
        "P-Summary": "text-mod interfac git",
        "P-Tasks": "display commit branch stash show differ two refer branch tag show histori specif branch show histori specif file directori show sequenc commit start current one revers chronolog order start stash view display save stash",
        "Summary": "A text-mode interface for Git.",
        "Task-Script": {
            "Display commits from all branches and stashes": "tig --all",
            "Show the difference between two references (such as branches or tags)": "tig {{base_ref}}..{{compared_ref}}",
            "Show the history of a specific branch": "tig {{branch}}",
            "Show the history of specific files or directories": "tig {{path1 path2 …}}",
            "Show the sequence of commits starting from the current one in reverse chronological order": "tig",
            "Start in stash view, displaying all saved stashes": "tig stash"
        }
    },
    "common_time": {
        "Category": "common",
        "Command": "time",
        "P-Summary": "see long command take",
        "P-Tasks": "time ls",
        "Summary": "See how long a command takes.",
        "Task-Script": {
            "Time \"ls\"": "time ls"
        }
    },
    "common_timeout": {
        "Category": "common",
        "Command": "timeout",
        "P-Summary": "run command time limit",
        "P-Tasks": "run sleep 10 termin run 3 second specifi signal sent command time limit expir\ndefault term sent",
        "Summary": "Run a command with a time limit.",
        "Task-Script": {
            "Run `sleep 10` and terminate it, if it runs for more than 3 seconds": "timeout {{3s}} {{sleep 10}}",
            "Specify the signal to be sent to the command after the time limit expires. (By default, TERM is sent)": "timeout --signal {{INT}} {{5s}} {{sleep 10}}"
        }
    },
    "common_timew": {
        "Category": "common",
        "Command": "timew",
        "P-Summary": "time track tool use measur durat activ",
        "P-Tasks": "start new stopwatch give tag name activ track stop run stopwatch stop stopwatch given tag name view run stopwatch view track item",
        "Summary": "A time tracking tool used to measure the duration of activities.",
        "Task-Script": {
            "Start a new stopwatch, giving a tag name to the activity being tracked": "timew start {{activity_tag}}",
            "Stop all running stopwatches": "timew stop",
            "Stop the stopwatch with a given tag name": "timew stop {{activity_tag}}",
            "View running stopwatches": "timew",
            "View tracked items": "timew summary"
        }
    },
    "common_tldr": {
        "Category": "common",
        "Command": "tldr",
        "P-Summary": "display simpl help page command-lin tool tldr-page project",
        "P-Tasks": "get help git subcommand get typic usag command hint : got\nshow tar tldr page linux updat local page client support cach",
        "Summary": "Displays simple help pages for command-line tools, from the tldr-pages project.",
        "Task-Script": {
            "Get help for a git subcommand": "tldr {{git-checkout}}",
            "Get typical usages of a command (hint: this is how you got here!)": "tldr {{command}}",
            "Show the tar tldr page for Linux": "tldr -p {{linux}} {{tar}}",
            "Update local pages (if the client supports caching)": "tldr -u"
        }
    },
    "common_tldrl": {
        "Category": "common",
        "Command": "tldrl",
        "P-Summary": "lint format tldr page",
        "P-Tasks": "format specif page stdout format page place lint page",
        "Summary": "Lint and format `tldr` pages.",
        "Task-Script": {
            "Format a specific page to `stdout`": "tldrl -f {{page.md}}",
            "Format all pages in place": "tldrl -fi {{pages_directory}}",
            "Lint all pages": "tldrl {{pages_directory}}"
        }
    },
    "common_tmux": {
        "Category": "common",
        "Command": "tmux",
        "P-Summary": "termin multiplex\nallow multipl session window pane",
        "P-Tasks": "attach name session attach recent use session detach current session prefix ctrl-b kill session name kill current session prefix ctrl-b list exist session start new name session start new session",
        "Summary": "Terminal multiplexer. It allows multiple sessions with windows, panes, and more.",
        "Task-Script": {
            "Attach to a named session": "tmux attach-session -t {{name}}",
            "Attach to the most recently used session": "tmux attach-session",
            "Detach from the current session (with prefix Ctrl-B)": "Ctrl-B d",
            "Kill a session by name": "tmux kill-session -t {{name}}",
            "Kill the current session (with prefix Ctrl-B)": "Ctrl-B :kill-session<Enter>",
            "List existing sessions": "tmux ls",
            "Start a new named session": "tmux new-session -s {{name}}",
            "Start a new session": "tmux"
        }
    },
    "common_tmuxinator": {
        "Category": "common",
        "Command": "tmuxinator",
        "P-Summary": "creat manag tmux session easili",
        "P-Tasks": "creat new project edit project list project start tmux session base project stop project tmux session",
        "Summary": "Create and manage tmux sessions easily.",
        "Task-Script": {
            "Create a new project": "tmuxinator new {{project}}",
            "Edit a project": "tmuxinator edit {{project}}",
            "List projects": "tmuxinator list",
            "Start a tmux session based on project": "tmuxinator start {{project}}",
            "Stop a project's tmux session": "tmuxinator stop {{project}}"
        }
    },
    "common_tokei": {
        "Category": "common",
        "Command": "tokei",
        "P-Summary": "program print statist code",
        "P-Tasks": "get report directori exclud min js file get report file type rust markdown get report code directori subdirectori print statist individu file directori",
        "Summary": "A program that prints out statistics about code.",
        "Task-Script": {
            "Get a report for a directory excluding `.min.js` files": "tokei {{path/to/directory}} -e {{*.min.js}}",
            "Get a report for all files of type Rust and Markdown": "tokei {{path/to/directory}} -t={{Rust}},{{Markdown}}",
            "Get a report on the code in a directory and all subdirectories": "tokei {{path/to/directory}}",
            "Print out statistics for individual files in a directory": "tokei {{path/to/directory}} --files"
        }
    },
    "common_topgrade": {
        "Category": "common",
        "Command": "topgrade",
        "P-Summary": "updat applic system\nhttp : github com r-darwish topgrad",
        "P-Tasks": "cleanup temporari old file disabl certain updat oper edit config file default editor perform certain updat oper run updat say ye updat",
        "Summary": "Update all applications on the system.\nMore at <https://github.com/r-darwish/topgrade>.",
        "Task-Script": {
            "Cleanup temporary/old files": "topgrade -c",
            "Disable a certain update operation": "topgrade -disable {{operation}}",
            "Edit the config file with default editor": "topgrade --edit-config",
            "Only perform a certain update operation": "topgrade --only {{operation}}",
            "Run updates": "topgrade",
            "Say yes to all updates": "topgrade -y"
        }
    },
    "common_touch": {
        "Category": "common",
        "Command": "touch",
        "P-Summary": "chang file access modif time atim mtime",
        "P-Tasks": "creat new empti file chang time exist file current time set time file specif date time use time file set time second file",
        "Summary": "Change a file access and modification times (atime, mtime).",
        "Task-Script": {
            "Create a new empty file(s) or change the times for existing file(s) to current time": "touch {{filename}}",
            "Set the times on a file to a specific date and time": "touch -t {{YYYYMMDDHHMM.SS}} {{filename}}",
            "Use the times from a file to set the times on a second file": "touch -r {{filename}} {{filename2}}"
        }
    },
    "common_tox": {
        "Category": "common",
        "Command": "tox",
        "P-Summary": "autom python test across multipl python version\nuse tox ini configur environ test command",
        "P-Tasks": "creat tox ini configur forc virtual environ recreat list avail environ run test specif environ e g\npython 3 6 run test test environ",
        "Summary": "Automate Python testing across multiple Python versions.\nUse tox.ini to configure environments and test command.",
        "Task-Script": {
            "Create a tox.ini configuration": "tox-quickstart",
            "Force the virtual environment to be recreated": "tox --recreate -e {{py27}}",
            "List the available environments": "tox --listenvs-all",
            "Run tests on a specific environment (e.g. python 3.6)": "tox -e {{py36}}",
            "Run tests on all test environments": "tox"
        }
    },
    "common_tpp": {
        "Category": "common",
        "Command": "tpp",
        "P-Summary": "command-lin base present tool",
        "P-Tasks": "output present view present",
        "Summary": "Command-Line based presentation tool.",
        "Task-Script": {
            "Output a presentation": "tpp -t {{type}} -o {{outputname}} {{filename}}",
            "View a presentation": "tpp {{filename}}"
        }
    },
    "common_tput": {
        "Category": "common",
        "Command": "tput",
        "P-Summary": "view modifi termin set capabl",
        "P-Tasks": "enabl disabl word wrap move cursor screen locat reset termin attribut ring termin bell set foreground af background ab color show number column line color",
        "Summary": "View and modify terminal settings and capabilities.",
        "Task-Script": {
            "Enable / Disable word wrap": "tput {{smam|rmam}}",
            "Move the cursor to a screen location": "tput cup {{y_coordinate}} {{x_coordinate}}",
            "Reset all terminal attributes": "tput sgr0",
            "Ring the terminal bell": "tput bel",
            "Set foreground (af) or background (ab) color": "tput {{setaf|setab}} {{ansi_color_code}}",
            "Show number of columns, lines, or colors": "tput {{cols|lines|colors}}"
        }
    },
    "common_tr": {
        "Category": "common",
        "Command": "tr",
        "P-Summary": "translat charact : run replac base singl charact charact set",
        "P-Tasks": "compress seri ident charact singl charact delet occurr specifi set charact input map charact first set correspond charact second set replac occurr charact anoth command output replac occurr charact file print result strip non-print charact file translat content file upper-cas",
        "Summary": "Translate characters: run replacements based on single characters and character sets.",
        "Task-Script": {
            "Compress a series of identical characters to a single character": "tr -s '{{input_characters}}' < {{filename}}",
            "Delete all occurrences of the specified set of characters from the input": "tr -d '{{input_characters}}' < {{filename}}",
            "Map each character of the first set to the corresponding character of the second set": "tr '{{abcd}}' '{{jkmn}}' < {{filename}}",
            "Replace all occurrences of a character from another command's output": "echo {{text}} | tr {{find_character}} {{replace_character}}",
            "Replace all occurrences of a character in a file, and print the result": "tr {{find_character}} {{replace_character}} < {{filename}}",
            "Strip out non-printable characters from a file": "tr -cd \"[:print:]\" < {{filename}}",
            "Translate the contents of a file to upper-case": "tr \"[:lower:]\" \"[:upper:]\" < {{filename}}"
        }
    },
    "common_traceroute": {
        "Category": "common",
        "Command": "traceroute",
        "P-Summary": "print rout packet trace network host",
        "P-Tasks": "disabl ip address host name map specifi number queri per hop specifi size byte probe packet specifi wait time respons tracerout host",
        "Summary": "Print the route packets trace to network host.",
        "Task-Script": {
            "Disable IP address and host name mapping": "traceroute -n {{host}}",
            "Specify number of queries per hop": "traceroute -q {{5}} {{host}}",
            "Specify size in bytes of probing packet": "traceroute {{host}} {{42}}",
            "Specify wait time for response": "traceroute -w {{0.5}} {{host}}",
            "Traceroute to a host": "traceroute {{host}}"
        }
    },
    "common_traefik": {
        "Category": "common",
        "Command": "traefik",
        "P-Summary": "http revers proxi load balanc",
        "P-Tasks": "start server custom config file start server cluster mode enabl start server default config start server web ui enabl",
        "Summary": "A HTTP reverse proxy and load balancer.",
        "Task-Script": {
            "Start server with a custom config file": "traefik --c {{config_file}}.toml",
            "Start server with cluster mode enabled": "traefik --cluster",
            "Start server with default config": "traefik",
            "Start server with web UI enabled": "traefik --web"
        }
    },
    "common_trans": {
        "Category": "common",
        "Command": "trans",
        "P-Summary": "translat shell command-lin translat",
        "P-Tasks": "behav like dictionari get mean word get brief translat translat word languag detect automat translat word german english translat word french",
        "Summary": "Translate Shell is a command-line translator.",
        "Task-Script": {
            "Behave like a dictionary to get the meaning of a word": "trans -d {{word}}",
            "Get a brief translation": "trans --brief \"{{word_or_sentence_to_translate}}\"",
            "Translate a word (language is detected automatically)": "trans \"{{word_or_sentence_to_translate}}\"",
            "Translate a word from German to English": "trans {{de}}:{{en}} {{Schmetterling}}",
            "Translate a word into french": "trans :{{fr}} {{word}}"
        }
    },
    "common_transcode": {
        "Category": "common",
        "Command": "transcode",
        "P-Summary": "transcod video audio codec convert media format",
        "P-Tasks": "creat stabilis file abl remov camera shake remov camera shake creat stabilis file transform video use xvid resiz video 640x480 pixel convert mpeg4 codec use xvid",
        "Summary": "Transcode video and audio codecs, and convert between media formats.",
        "Task-Script": {
            "Create stabilisation file to be able to remove camera shakes": "transcode -J stabilize -i {{input_file}}",
            "Remove camera shakes after creating stabilisation file, transform video using xvid": "transcode -J transform -i {{input_file}} -y xvid -o {{output_file}}",
            "Resize the video to 640x480 pixels and convert to MPEG4 codec using xvid": "transcode -Z 640x480 -i {{input_file}} -y xvid -o {{output_file}}"
        }
    },
    "common_transcrypt": {
        "Category": "common",
        "Command": "transcrypt",
        "P-Summary": "transpar encrypt file within git repositori",
        "P-Tasks": "display credenti configur repositori initi unconfigur repositori initi decrypt fresh clone configur repositori list current encrypt file rekey chang encrypt cipher password",
        "Summary": "Transparently encrypt files within a git repository.",
        "Task-Script": {
            "Display the credentials of a configured repository": "transcrypt --display",
            "Initialize an unconfigured repository": "transcrypt",
            "Initialize and decrypt a fresh clone of a configured repository": "transcrypt --cipher={{cipher}}",
            "List the currently encrypted files": "git ls-crypt",
            "Rekey to change the encryption cipher or password": "transcrypt --rekey"
        }
    },
    "common_transmission-cli": {
        "Category": "common",
        "Command": "transmission-cli",
        "P-Summary": "lightweight command-lin bittorr client\ntool deprec pleas see transmission-remot",
        "P-Tasks": "creat torrent file specif file directori download specif torrent download torrent specif directori forc encrypt peer connect set download speed limit 50 kb set upload speed limit 50 kb use bluetack-format peer blocklist use specif port connect",
        "Summary": "A lightweight, command-line BitTorrent client.\nThis tool has been deprecated, please see `transmission-remote`.",
        "Task-Script": {
            "Create a torrent file from a specific file or directory": "transmission-cli --new {{path/to/source_file_or_directory}}",
            "Download a specific torrent": "transmission-cli {{url|magnet|path/to/file}}",
            "Download a torrent to a specific directory": "transmission-cli --download-dir {{path/to/download_directory}} {{url|magnet|path/to/file}}",
            "Force encryption for peer connections": "transmission-cli --encryption-required {{url|magnet|path/to/file}}",
            "Set the download speed limit to 50 KB/s": "transmission-cli --downlimit {{50}} {{url|magnet|path/to/file}}",
            "Set the upload speed limit to 50 KB/s": "transmission-cli --uplimit {{50}} {{url|magnet|path/to/file}}",
            "Use a Bluetack-formatted peer blocklist": "transmission-cli --blocklist {{blocklist_url|path/to/blocklist}} {{url|magnet|path/to/file}}",
            "Use a specific port for connections": "transmission-cli --port {{port_number}} {{url|magnet|path/to/file}}"
        }
    },
    "common_transmission-create": {
        "Category": "common",
        "Command": "transmission-create",
        "P-Summary": "cli util creat bittorr torrent file",
        "P-Tasks": "creat privat torrent 2048 kb piec size creat torrent 2048 kb piec size creat torrent comment creat torrent multipl tracker show help page",
        "Summary": "A CLI utility to create BitTorrent .torrent files.",
        "Task-Script": {
            "Create a private torrent with a 2048 KB piece size": "transmission-create -p -o {{path/to/example.torrent}} --tracker {{tracker_announce_url}} --piecesize {{2048}} {{path/to/file_or_directory}}",
            "Create a torrent with 2048 KB as the piece size": "transmission-create -o {{path/to/example.torrent}} --tracker {{tracker_announce_url}} --piecesize {{2048}} {{path/to/file_or_directory}}",
            "Create a torrent with a comment": "transmission-create -o {{path/to/example.torrent}} --tracker {{tracker_url1}} -c {{comment}} {{path/to/file_or_directory}}",
            "Create a torrent with multiple trackers": "transmission-create -o {{path/to/example.torrent}} --tracker {{tracker_url1}} --tracker {{tracker_url2}} {{path/to/file_or_directory}}",
            "Show help page": "transmission-create --help"
        }
    },
    "common_transmission-remote": {
        "Category": "common",
        "Command": "transmission-remote",
        "P-Summary": "remot control util transmission-daemon transmiss",
        "P-Tasks": "add torrent file magnet link transmiss download specifi directori chang default download directori list torrent move torrent 1-10 15-20 new folder folder creat exist remov torrent 1 2 also delet local data torrent 2 start torrent 1 2 stop torrent 3 stop torrent",
        "Summary": "Remote control utility for transmission-daemon and transmission.",
        "Task-Script": {
            "Add a torrent file or magnet link to Transmission and download to a specified directory": "transmission-remote {{hostname}} -a {{torrent|url}} -w {{path/to/download_directory}}",
            "Change the default download directory": "transmission-remote {{hostname}} -w {{path/to/download_directory}}",
            "List all torrents": "transmission-remote {{hostname}} --list",
            "Move torrents 1-10 and 15-20 to a new folder (folder will be created if it does not exist)": "transmission-remote {{hostname}} -t \"{{1-10,15-20}}\" --move {{path/to/new_directory}}",
            "Remove torrent 1 and 2, and also delete local data for torrent 2": "transmission-remote {{hostname}} -t {{1}} --remove -t {{2}} --remove-and-delete",
            "Start torrent 1 and 2, stop torrent 3": "transmission-remote {{hostname}} -t \"{{1,2}}\" --start -t {{3}} --stop",
            "Stop all torrents": "transmission-remote {{hostname}} -t {{all}} --stop"
        }
    },
    "common_trash-cli": {
        "Category": "common",
        "Command": "trash-cli",
        "P-Summary": "command line interfac trashcan api",
        "P-Tasks": "empti trashcan list trash file remov individu file trashcan restor trash file choos number list result command trash file directori",
        "Summary": "A command line interface to the trashcan APIs.",
        "Task-Script": {
            "Empty the trashcan": "trash-empty",
            "List trashed files": "trash-list",
            "Remove individual files from the trashcan": "trash-rm {{filename}}",
            "Restore a trashed file by choosing a number from the list that results from this command": "trash-restore",
            "Trash files and directories": "trash-put {{filename}}"
        }
    },
    "common_trawl": {
        "Category": "common",
        "Command": "trawl",
        "P-Summary": "print network interfac inform consol much like ifconfig ipconfig ip ifdata",
        "P-Tasks": "filter interfac name use case insensit regular express get list avail interfac includ loopback interfac show column name",
        "Summary": "Prints out network interface information to the console, much like ifconfig/ipconfig/ip/ifdata.",
        "Task-Script": {
            "Filter interface names using a case insensitive regular expression": "trawl -f wi",
            "Get a list of available interfaces": "trawl -i",
            "Include the loopback interface": "trawl -l",
            "Show column names": "trawl -n"
        }
    },
    "common_true": {
        "Category": "common",
        "Command": "true",
        "P-Summary": "return success exit statu code 0 use oper make command alway exit 0",
        "P-Tasks": "return success exit code",
        "Summary": "Returns a successful exit status code of 0.\nUse this with the || operator to make a command always exit with 0.",
        "Task-Script": {
            "Return a successful exit code": "true"
        }
    },
    "common_truncate": {
        "Category": "common",
        "Command": "truncate",
        "P-Summary": "shrink extend size file specifi size",
        "P-Tasks": "empti file content extend file size 50m fill hole read zero byte set size 10 gb exst file creat new file specifi size shrink file 2gib remov data end file",
        "Summary": "Shrink or extend the size of a file to the specified size.",
        "Task-Script": {
            "Empty the file's content": "truncate -s 0 {{filename}}",
            "Extend the file size by 50M, fill with holes (which reads as zero bytes)": "truncate -s +{{50M}} {{filename}}",
            "Set a size of 10 GB to an exsting file, or create a new file with the specified size": "truncate -s {{10G}} {{filename}}",
            "Shrink the file by 2GiB, by removing data from the end of file": "truncate -s -{{2G}} {{filename}}"
        }
    },
    "common_tsc": {
        "Category": "common",
        "Command": "tsc",
        "P-Summary": "typescript compil",
        "P-Tasks": "compil typescript file foobar ts javascript file foobar js compil typescript file javascript use specif target syntax default es3 compil typescript file javascript file custom name compil ts file typescript project defin tsconfig json file run compil use command line option argument fetch text file type-check multipl javascript file output error",
        "Summary": "TypeScript compiler.",
        "Task-Script": {
            "Compile a TypeScript file `foobar.ts` into a JavaScript file `foobar.js`": "tsc {{foobar.ts}}",
            "Compile a TypeScript file into JavaScript using a specific target syntax (default is `ES3`)": "tsc --target {{ES5|ES2015|ES2016|ES2017|ES2018|ESNEXT}} {{foobar.ts}}",
            "Compile a TypeScript file into a JavaScript file with a custom name": "tsc --outFile {{output.js}} {{input.ts}}",
            "Compile all `.ts` files of a TypeScript project defined in a `tsconfig.json` file": "tsc --build {{tsconfig.json}}",
            "Run the compiler using command line options and arguments fetched from a text file": "tsc @{{args.txt}}",
            "Type-check multiple JavaScript files, and output only the errors": "tsc --allowJs --checkJs --noEmit {{src/**/*.js}}"
        }
    },
    "common_tslint": {
        "Category": "common",
        "Command": "tslint",
        "P-Summary": "pluggabl lint util typescript",
        "P-Tasks": "creat tslint config fix lint issu lint given set file lint config file project root",
        "Summary": "A pluggable linting utility for TypeScript.",
        "Task-Script": {
            "Create tslint config": "tslint --init",
            "Fix lint issues": "tslint --fix",
            "Lint on a given set of files": "tslint {{filename}}.js {{filename1}}.js",
            "Lint with the config file in the project root": "tslint --project {{path/to/project_root}}"
        }
    },
    "common_tsort": {
        "Category": "common",
        "Command": "tsort",
        "P-Summary": "perform topolog sort\ncommon use show depend order node direct acycl graph",
        "P-Tasks": "perform topolog sort consist partial sort per line input separ blank",
        "Summary": "Perform a topological sort.\nA common use is to show the dependency order of nodes in a directed acyclic graph.",
        "Task-Script": {
            "Perform a topological sort consistent with a partial sort per line of input separated by blanks": "tsort {{file}}"
        }
    },
    "common_tty": {
        "Category": "common",
        "Command": "tty",
        "P-Summary": "return termin name",
        "P-Tasks": "print file name termin",
        "Summary": "Returns terminal name.",
        "Task-Script": {
            "Print the file name of this terminal": "tty"
        }
    },
    "common_twm": {
        "Category": "common",
        "Command": "twm",
        "P-Summary": "window manag x window sytem",
        "P-Tasks": "connect specif x server connect default x server enabl verbos mode print unexpect error x manag default screen use specif startup file",
        "Summary": "A window manager for the X Window sytem.",
        "Task-Script": {
            "Connect to a specific X server": "twm -display {{display}}",
            "Connect to the default X server": "twm",
            "Enable verbose mode and print unexpected errors in X": "twm -v",
            "Only manage the default screen": "twm -s",
            "Use a specific startup file": "twm -f {{path/to/file}}"
        }
    },
    "common_type": {
        "Category": "common",
        "Command": "type",
        "P-Summary": "display kind command shell execut",
        "P-Tasks": "display locat contain specifi execut display kind command display name disk file would execut",
        "Summary": "Display the kind of command the shell will execute.",
        "Task-Script": {
            "Display all locations containing the specified executable": "type -a {{command}}",
            "Display the kind of a command": "type {{command}}",
            "Display the name of the disk file that would be executed": "type -p {{command}}"
        }
    },
    "common_ufraw-batch": {
        "Category": "common",
        "Command": "ufraw-batch",
        "P-Summary": "convert raw file camera standard imag file",
        "P-Tasks": "extract preview imag raw file save file size given maximum max1 max2 simpli convert raw file jpg simpli convert raw file png",
        "Summary": "Convert RAW files from cameras into standard image files.",
        "Task-Script": {
            "Extract the preview image from the raw file": "ufraw-batch --embedded-image {{input_file(s)}}",
            "Save the file with size up to the given maximums MAX1 and MAX2": "ufraw-batch --size=MAX1,MAX2 {{input_file(s)}}",
            "Simply convert RAW files to jpg": "ufraw-batch --out-type=jpg {{input_file(s)}}",
            "Simply convert RAW files to png": "ufraw-batch --out-type=png {{input_file(s)}}"
        }
    },
    "common_ulimit": {
        "Category": "common",
        "Command": "ulimit",
        "P-Summary": "get set user limit",
        "P-Tasks": "get hard limit number simultan open file get soft limit number simultan open file get properti user limit set max per-us process limit",
        "Summary": "Get and set user limits.",
        "Task-Script": {
            "Get hard limit for the number of simultaneously opened files": "ulimit -H -n",
            "Get soft limit for the number of simultaneously opened files": "ulimit -S -n",
            "Get the properties of all the user limits": "ulimit -a",
            "Set max per-user process limit": "ulimit -u 30"
        }
    },
    "common_umask": {
        "Category": "common",
        "Command": "umask",
        "P-Summary": "manag read write execut permiss mask e\nrestrict newli creat file user",
        "P-Tasks": "chang mask symbol allow read permiss user rest mask bit unchang display current mask octal notat display current mask symbol human-read mode set mask use octal restrict permiss file owner restrict permiss everyon els",
        "Summary": "Manage the read/write/execute permissions that are masked out (i.e. restricted) for newly created files by the user.",
        "Task-Script": {
            "Change the mask symbolically to allow read permission for all users (the rest of the mask bits are unchanged)": "umask {{a+r}}",
            "Display the current mask in octal notation": "umask",
            "Display the current mask in symbolic (human-readable) mode": "umask -S",
            "Set the mask (using octal) to restrict no permissions for the file's owner, and restrict all permissions for everyone else": "umask {{077}}"
        }
    },
    "common_umount": {
        "Category": "common",
        "Command": "umount",
        "P-Summary": "unlink filesystem mount point make longer access\nfilesystem unmount busi",
        "P-Tasks": "unmount filesystem pass path sourc mount unmount filesystem pass path target mount unmount mount filesystem except proc filesystem",
        "Summary": "Unlink a filesystem from its mount point, making it no longer accessible.\nA filesystem cannot be unmounted when it is busy.",
        "Task-Script": {
            "Unmount a filesystem, by passing the path to the source it is mounted from": "umount {{path/to/device_file}}",
            "Unmount a filesystem, by passing the path to the target where it is mounted": "umount {{path/to/mounted_directory}}",
            "Unmount all mounted filesystems (except the `proc` filesystem)": "umount -a"
        }
    },
    "common_unalias": {
        "Category": "common",
        "Command": "unalias",
        "P-Summary": "remov alias",
        "P-Tasks": "remov alias remov alia",
        "Summary": "Remove aliases.",
        "Task-Script": {
            "Remove all aliases": "unalias -a",
            "Remove an alias": "unalias {{alias_name}}"
        }
    },
    "common_uname": {
        "Category": "common",
        "Command": "uname",
        "P-Summary": "print detail current machin oper system run\nnote : addit inform oper system tri lsb_releas command",
        "P-Tasks": "print avail system inform hardwar softwar nodenam print hardware-rel inform : machin processor print software-rel inform : oper system releas number version print nodenam hostnam system",
        "Summary": "Print details about the current machine and the operating system running on it.\nNote: for additional information about the operating system, try the `lsb_release` command.",
        "Task-Script": {
            "Print all available system information (hardware, software, nodename)": "uname -a",
            "Print hardware-related information: machine and processor": "uname -mp",
            "Print software-related information: operating system, release number, and version": "uname -srv",
            "Print the nodename (hostname) of the system": "uname -n"
        }
    },
    "common_unar": {
        "Category": "common",
        "Command": "unar",
        "P-Summary": "extract content archiv file",
        "P-Tasks": "extract archiv current directori extract archiv specifi directori forc overwrit file unpack alreadi exist forc renam file unpack alreadi exist forc skip file unpack alreadi exist",
        "Summary": "Extract contents from archive files.",
        "Task-Script": {
            "Extract an archive to the current directory": "unar {{archive}}",
            "Extract an archive to the specified directory": "unar -o {{path/to/directory}} {{archive}}",
            "Force overwrite if files to be unpacked already exist": "unar -f {{archive}}",
            "Force rename if files to be unpacked already exist": "unar -r {{archive}}",
            "Force skip if files to be unpacked already exist": "unar -s {{archive}}"
        }
    },
    "common_unclutter": {
        "Category": "common",
        "Command": "unclutter",
        "P-Summary": "hide mous cursor",
        "P-Tasks": "hide mous cursor 3 second",
        "Summary": "Hides the mouse cursor.",
        "Task-Script": {
            "Hide mouse cursor after 3 seconds": "unclutter -idle {{3}}"
        }
    },
    "common_uncrustify": {
        "Category": "common",
        "Command": "uncrustify",
        "P-Summary": "c c++ c java pawn sourc code formatt",
        "P-Tasks": "make backup use file version control explicitli set configur variabl valu format singl file gener new configur file read filenam stdin take backup write output back origin filepath use custom configur file write result stdout",
        "Summary": "C, C++, C#, D, Java and Pawn source code formatter.",
        "Task-Script": {
            "Don't make backups (useful if files are under version control)": "find . -name \"*.cpp\" | uncrustify -F - --no-backup",
            "Explicitly set a configuration variable's value": "uncrustify --set {{option}}={{value}}",
            "Format a single file": "uncrustify -f {{path/to/file.cpp}} -o {{path/to/output.cpp}}",
            "Generate a new configuration file": "uncrustify --update-config -o {{path/to/new.cfg}}",
            "Read filenames from stdin, and take backups before writing output back to the original filepaths": "find . -name \"*.cpp\" | uncrustify -F - --replace",
            "Use a custom configuration file and write the result to stdout": "uncrustify -c {{path/to/uncrustify.cfg}} -f {{path/to/file.cpp}}"
        }
    },
    "common_unexpand": {
        "Category": "common",
        "Command": "unexpand",
        "P-Summary": "convert space tab",
        "P-Tasks": "convert blank instead initi blank convert blank file tab write standard output convert blank tab read standard output convert lead sequenc blank overrid -a tab certain number charact apart 8 enabl -a",
        "Summary": "Convert spaces to tabs.",
        "Task-Script": {
            "Convert all blanks, instead of just initial blanks": "unexpand -a {{file}}",
            "Convert blanks in each file to tabs, writing to standard output": "unexpand {{file}}",
            "Convert blanks to tabs, reading from standard output": "unexpand",
            "Convert only leading sequences of blanks (overrides -a)": "unexpand --first-only {{file}}",
            "Have tabs a certain number of characters apart, not 8 (enables -a)": "unexpand -t {{number}} {{file}}"
        }
    },
    "common_uniq": {
        "Category": "common",
        "Command": "uniq",
        "P-Summary": "output uniqu line given input file\nsinc detect repeat line unless adjac need sort first",
        "P-Tasks": "display line display number occurr line along line display number occurr line sort frequent display duplic line display uniqu line",
        "Summary": "Output the unique lines from the given input or file.\nSince it does not detect repeated lines unless they are adjacent, we need to sort them first.",
        "Task-Script": {
            "Display each line once": "sort {{file}} | uniq",
            "Display number of occurrences of each line along with that line": "sort {{file}} | uniq -c",
            "Display number of occurrences of each line, sorted by the most frequent": "sort {{file}} | uniq -c | sort -nr",
            "Display only duplicate lines": "sort {{file}} | uniq -d",
            "Display only unique lines": "sort {{file}} | uniq -u"
        }
    },
    "common_unison": {
        "Category": "common",
        "Command": "unison",
        "P-Summary": "bidirect file synchronis tool",
        "P-Tasks": "automat accept non-conflict default ignor file use pattern show document sync two directori creat log first time two directori synchronis",
        "Summary": "Bidirectional file synchronisation tool.",
        "Task-Script": {
            "Automatically accept the (non-conflicting) defaults": "unison {{path/to/directory_1}} {{path/to/directory_2}} -auto",
            "Ignore some files using a pattern": "unison {{path/to/directory_1}} {{path/to/directory_2}} -ignore {{pattern}}",
            "Show documentation": "unison -doc {{topics}}",
            "Sync two directories (creates log first time these two directories are synchronised)": "unison {{path/to/directory_1}} {{path/to/directory_2}}"
        }
    },
    "common_unlink": {
        "Category": "common",
        "Command": "unlink",
        "P-Summary": "remov link file filesystem\nfile content lost link last one file",
        "P-Tasks": "remov specifi file last link",
        "Summary": "Remove a link to a file from the filesystem.\nThe file contents is lost if the link is the last one to the file.",
        "Task-Script": {
            "Remove the specified file if it is the last link": "unlink {{path/to/file}}"
        }
    },
    "common_unrar": {
        "Category": "common",
        "Command": "unrar",
        "P-Summary": "extract rar archiv",
        "P-Tasks": "extract file current directori lose directori structur archiv extract file specifi path origin directori structur extract file origin directori structur list file insid archiv file without decompress test integr file insid archiv file",
        "Summary": "Extract RAR archives.",
        "Task-Script": {
            "Extract files into current directory, losing directory structure in the archive": "unrar e {{compressed.rar}}",
            "Extract files to a specified path with the original directory structure": "unrar x {{compressed.rar}} {{path/to/extract}}",
            "Extract files with original directory structure": "unrar x {{compressed.rar}}",
            "List files inside the archive file without decompressing it": "unrar l {{compressed.rar}}",
            "Test integrity of each file inside the archive file": "unrar t {{compressed.rar}}"
        }
    },
    "common_unzip": {
        "Category": "common",
        "Command": "unzip",
        "P-Summary": "extract compress file zip archiv",
        "P-Tasks": "extract zip file creat window contain file non-ascii chines filenam extract content file stdout alongsid extract file name extract zip file multipl file separ file path space extract zip file given path list content zip file without extract",
        "Summary": "Extract compressed files in a ZIP archive.",
        "Task-Script": {
            "Extract a zip file created in windows, containing files with non-ascii (chinese) filenames": "unzip -O {{gbk}} {{file.zip}}",
            "Extract the contents of the file(s) to `stdout` alongside the extracted file names": "unzip -c {{file.zip}}",
            "Extract zip file(s) (for multiple files, separate file paths by spaces)": "unzip {{file(s)}}",
            "Extract zip files(s) to given path": "unzip {{compressed_file(s)}} -d {{/path/to/put/extracted_file(s)}}",
            "List the contents of a zip file without extracting": "unzip -l {{file.zip}}"
        }
    },
    "common_uptime": {
        "Category": "common",
        "Command": "uptime",
        "P-Summary": "tell long system run inform",
        "P-Tasks": "print current time uptim number logged-in user inform print date time system boot show amount time system boot show version inform",
        "Summary": "Tell how long the system has been running and other information.",
        "Task-Script": {
            "Print current time, uptime, number of logged-in users and other information": "uptime",
            "Print the date and time the system booted up at": "uptime --since",
            "Show only the amount of time the system has been booted for": "uptime --pretty",
            "Show version information": "uptime --version"
        }
    },
    "common_upx": {
        "Category": "common",
        "Command": "upx",
        "P-Summary": "compress decompress execut",
        "P-Tasks": "compress execut decompress execut detail help",
        "Summary": "Compress or decompress executables.",
        "Task-Script": {
            "Compress executable": "upx {{file}}",
            "Decompress executable": "upx -d {{file}}",
            "Detailed help": "upx --help"
        }
    },
    "common_users": {
        "Category": "common",
        "Command": "users",
        "P-Summary": "display list log user",
        "P-Tasks": "display list log user display list log user accord specif file",
        "Summary": "Display a list of logged in users.",
        "Task-Script": {
            "Display a list of logged in users": "users",
            "Display a list of logged in users according to a specific file": "users {{/var/log/wmtp}}"
        }
    },
    "common_uvicorn": {
        "Category": "common",
        "Command": "uvicorn",
        "P-Summary": "python asgi http server asynchron project",
        "P-Tasks": "listen port 8080 localhost run python web app run app http turn live reload use 4 worker process handl request",
        "Summary": "Python ASGI HTTP Server, for asynchronous projects.",
        "Task-Script": {
            "Listen on port 8080 on localhost": "uvicorn --host {{localhost}} --port {{8080}} {{import.path:app_object}}",
            "Run Python web app": "uvicorn {{import.path:app_object}}",
            "Run app over HTTPS": "uvicorn --ssl-certfile {{cert.pem}} --ssl-keyfile {{key.pem}} {{import.path:app_object}}",
            "Turn on live reload": "uvicorn --reload {{import.path:app_object}}",
            "Use 4 worker processes for handling requests": "uvicorn --workers {{4}} {{import.path:app_object}}"
        }
    },
    "common_vagrant": {
        "Category": "common",
        "Command": "vagrant",
        "P-Summary": "manag lightweight reproduc portabl develop environ",
        "P-Tasks": "connect machin via ssh creat vagrantfil current directori base vagrant box creat vagrantfil ubuntu 14 04 trusti tahr box hashicorp atla halt machin output ssh configur file run vagrant machin start provis vagrant environ suspend machin",
        "Summary": "Manage lightweight, reproducible, and portable development environments.",
        "Task-Script": {
            "Connect to machine via SSH": "vagrant ssh",
            "Create Vagrantfile in current directory with the base Vagrant box": "vagrant init",
            "Create Vagrantfile with the Ubuntu 14.04 (Trusty Tahr) box from HashiCorp Atlas": "vagrant init ubuntu/trusty32",
            "Halt the machine": "vagrant halt",
            "Output the SSH configuration file of the running Vagrant machine": "vagrant ssh-config",
            "Start and provision the vagrant environment": "vagrant up",
            "Suspend the machine": "vagrant suspend"
        }
    },
    "common_vala": {
        "Category": "common",
        "Command": "vala",
        "P-Summary": "vala code runner\ntutori : http : wiki gnome org project vala tutori\ndoc homepag : http : valadoc org",
        "P-Tasks": "display helper messag display version info run vala file gtk+",
        "Summary": "Vala code runner.\nTutorial: <https://wiki.gnome.org/Projects/Vala/Tutorial>.\nDoc homepage: <https://valadoc.org/>.",
        "Task-Script": {
            "Display helper message": "vala --help",
            "Display version info": "vala --version",
            "Run a vala file, with gtk+": "vala {{path/to/file.vala}} --pkg {{gtk+-3.0}}"
        }
    },
    "common_valac": {
        "Category": "common",
        "Command": "valac",
        "P-Summary": "vala code compil\ntutori : http : wiki gnome org project vala tutori\ndoc homepag : http : valadoc org",
        "P-Tasks": "compil vala file gtk+ display helper messag display version info",
        "Summary": "Vala code compiler.\nTutorial: <https://wiki.gnome.org/Projects/Vala/Tutorial>.\nDoc homepage: <https://valadoc.org/>.",
        "Task-Script": {
            "Compile a vala file, with gtk+": "valac {{path/to/file.vala}} --pkg {{gtk+-3.0}}",
            "Display helper message": "valac --help",
            "Display version info": "valac --version"
        }
    },
    "common_valgrind": {
        "Category": "common",
        "Command": "valgrind",
        "P-Summary": "wrapper set expert tool profil optim debug program\ncommonli use tool includ memcheck cachegrind callgrind massif helgrind drd",
        "P-Tasks": "use memcheck report possibl memori leak program full detail use default memcheck tool show diagnost memori usag program use cachegrind tool profil log cpu cach oper program use massif tool profil log heap memori stack usag program",
        "Summary": "Wrapper for a set of expert tools for profiling, optimizing and debugging programs.\nCommonly used tools include `memcheck`, `cachegrind`, `callgrind`, `massif`, `helgrind`, and `drd`.",
        "Task-Script": {
            "Use Memcheck to report all possible memory leaks of `program` in full detail": "valgrind --leak-check=full --show-leak-kinds=all {{program}}",
            "Use the (default) Memcheck tool to show a diagnostic of memory usage by `program`": "valgrind {{program}}",
            "Use the Cachegrind tool to profile and log CPU cache operations of `program`": "valgrind --tool=cachegrind {{program}}",
            "Use the Massif tool to profile and log heap memory and stack usage of `program`": "valgrind --tool=massif --stacks=yes {{program}}"
        }
    },
    "common_var-dump-server": {
        "Category": "common",
        "Command": "var-dump-server",
        "P-Summary": "symfoni dump server\ncollect data dump symfoni vardump compon",
        "P-Tasks": "dump data html file make server listen specif address port start server",
        "Summary": "Symfony dump server.\nCollects data dumped by the Symfony VarDumper component.",
        "Task-Script": {
            "Dump the data in an HTML file": "var-dump-server --format=html > {{path/to/file.html}}",
            "Make the server listen on a specific address and port": "var-dump-server --host {{127.0.0.1:9912}}",
            "Start the server": "var-dump-server"
        }
    },
    "common_vault": {
        "Category": "common",
        "Command": "vault",
        "P-Summary": "cli interact hashicorp vault",
        "P-Tasks": "authent cli client vault server use authent token connect vault server initi new encrypt data store read specif field valu read valu vault use gener back-end call secret seal lock vault server remov encrypt key data store memori store new secret vault use gener back-end call secret unseal unlock vault provid one key share need access encrypt data store",
        "Summary": "A CLI to interact with HashiCorp Vault.",
        "Task-Script": {
            "Authenticate the CLI client against the Vault server, using an authentication token": "vault auth {{authentication_token}}",
            "Connect to a Vault server and initialize a new encrypted data store": "vault init",
            "Read a specific field from the value": "vault read -field={{field_name}} secret/{{hello}}",
            "Read a value from the vault, using the generic back-end called \"secret\"": "vault read secret/{{hello}}",
            "Seal (lock) the Vault server, by removing the encryption key of the data store from memory": "vault seal",
            "Store a new secret in the vault, using the generic back-end called \"secret\"": "vault write secret/{{hello}} value={{world}}",
            "Unseal (unlock) the vault, by providing one of the key shares needed to access the encrypted data store": "vault unseal {{key-share-x}}"
        }
    },
    "common_vcsh": {
        "Category": "common",
        "Command": "vcsh",
        "P-Summary": "version control system home directori use git repositori",
        "P-Tasks": "clone repositori custom directori name execut git command manag repositori initi empti repositori list manag repositori push pull manag repositori remot write custom gitignor file manag repositori",
        "Summary": "Version Control System for the home directory using git repositories.",
        "Task-Script": {
            "Clone a repository into a custom directory name": "vcsh clone {{git_url}} {{repository_name}}",
            "Execute a git command on a managed repository": "vcsh {{repository_name}} {{git_command}}",
            "Initialize an (empty) repository": "vcsh init {{repository_name}}",
            "List all managed repositories": "vcsh list",
            "Push/pull all managed repositories to/from remotes": "vcsh {{push|pull}}",
            "Write a custom .gitignore file for a managed repository": "vcsh write-gitignore {{repository_name}}"
        }
    },
    "common_vdir": {
        "Category": "common",
        "Command": "vdir",
        "P-Summary": "list directori content\ndrop-in replac ls -l",
        "P-Tasks": "list file directori current directori one per line detail list file directori sort entri modif time newest first list file directori sort entri size largest first list group directori first list includ hidden file start dot list size display human readabl unit kb mb gb recurs list file directori specif directori",
        "Summary": "List directory contents.\nDrop-in replacement for `ls -l`.",
        "Task-Script": {
            "List files and directories in the current directory, one per line, with details": "vdir",
            "List files and directories sorting entries by modification time (newest first)": "vdir -t",
            "List files and directories sorting entries by size (largest first)": "vdir -S",
            "List grouping directories first": "vdir --group-directories-first",
            "List including hidden files (starting with a dot)": "vdir -a",
            "List with sizes displayed in human readable units (KB, MB, GB)": "vdir -h",
            "Recursively list all files and directories in a specific directory": "vdir --recursive {{path/to/directory}}"
        }
    },
    "common_vegeta": {
        "Category": "common",
        "Command": "vegeta",
        "P-Summary": "command line util librari http load test\nsee also ab",
        "P-Tasks": "launch attack multipl url file launch attack display report launch attack plot result graph latenc time launch attack last 30 second launch attack server self-sign http certif launch attack rate 10 request per second",
        "Summary": "A command line utility and a library for HTTP load testing.\nSee also `ab`.",
        "Task-Script": {
            "Launch an attack against multiple URLs from a file": "vegeta attack -duration={{30s}} -targets={{requests.txt}} | vegeta report",
            "Launch an attack and display a report": "echo \"{{GET https://example.com}}\" | vegeta attack -duration={{30s}} | vegeta report",
            "Launch an attack and plot the results on a graph (latency over time)": "echo \"{{GET https://example.com}}\" | vegeta attack -duration={{30s}} | vegeta plot > {{path/to/results.html}}",
            "Launch an attack lasting 30 seconds": "echo \"{{GET https://example.com}}\" | vegeta attack -duration={{30s}}",
            "Launch an attack on a server with a self-signed https certificate": "echo \"{{GET https://example.com}}\" | vegeta attack -insecure -duration={{30s}}",
            "Launch an attack with a rate of 10 requests per second": "echo \"{{GET https://example.com}}\" | vegeta attack -duration={{30s}} -rate={{10}}"
        }
    },
    "common_velero": {
        "Category": "common",
        "Command": "velero",
        "P-Summary": "backup migrat kubernet applic persist volum",
        "P-Tasks": "creat backup contain resourc creat restor latest success backup trigger specif schedul creat weekli backup live 90 day 2160 hour delet backup list backup",
        "Summary": "Backup and migrate Kubernetes applications and their persistent volumes.",
        "Task-Script": {
            "Create a backup containing all resources": "velero backup create {{backup_name}}",
            "Create a restore from the latest successful backup triggered by specific schedule": "velero restore create --from-schedule {{schedule_name}}",
            "Create a weekly backup, each living for 90 days (2160 hours)": "velero schedule create {{schedule_name}} --schedules=\"{{@every 7d}}\" --ttl {{2160h0m0s}}",
            "Delete a backup": "velero backup delete {{backup_name}}",
            "List all backups": "velero backup get"
        }
    },
    "common_view": {
        "Category": "common",
        "Command": "view",
        "P-Summary": "read-onli version vim\nequival vim -r",
        "P-Tasks": "open file",
        "Summary": "A read-only version of `vim`.\nThis is equivalent to `vim -R`.",
        "Task-Script": {
            "Open a file": "view {{file}}"
        }
    },
    "common_vim": {
        "Category": "common",
        "Command": "vim",
        "P-Summary": "vim vi improv command-lin text editor provid sever mode differ kind text manipul\npress enter edit mode\nesc goe back normal mode allow regular text insert",
        "P-Tasks": "open file open file specifi line number perform regex substitut whole file quit without save save file search pattern file press n n go next previou match undo last oper view vim help manual",
        "Summary": "Vim (Vi IMproved), a command-line text editor, provides several modes for different kinds of text manipulation.\nPressing `i` enters edit mode. `<Esc>` goes back to normal mode, which doesn't allow regular text insertion.",
        "Task-Script": {
            "Open a file": "vim {{path/to/file}}",
            "Open a file at a specified line number": "vim +{{line_number}} {{path/to/file}}",
            "Perform a regex substitution in the whole file": ":%s/{{pattern}}/{{replacement}}/g<Enter>",
            "Quit without saving": ":quit!<Enter>",
            "Save a file": ":write<Enter>",
            "Search for a pattern in the file (press `n`/`N` to go to next/previous match)": "/{{search_pattern}}<Enter>",
            "Undo the last operation": "u",
            "View Vim's help manual": ":help<Enter>"
        }
    },
    "common_vimdiff": {
        "Category": "common",
        "Command": "vimdiff",
        "P-Summary": "open four file vim show differ\nsee vim document work file navig within window",
        "P-Tasks": "move cursor window left right open two file show differ four file compar open two file use horizont window split instead default vertic split",
        "Summary": "Open up to four files in vim and show the differences between them.\nSee `vim` documentation for working with files and navigating within a window.",
        "Task-Script": {
            "Move the cursor to the window on the left|right|up|down": "Ctrl + w {{h|l|k|j}}",
            "Open two files and show the differences (up to four files can be compared)": "vimdiff {{file1}} {{file2}}",
            "Open two files using a horizontal window split instead of the default vertical split": "vimdiff -o {{file1}} {{file2}}"
        }
    },
    "common_vimtutor": {
        "Category": "common",
        "Command": "vimtutor",
        "P-Summary": "vim tutor teach basic vim command",
        "P-Tasks": "exit tutor launch vim tutor use given languag en fr de",
        "Summary": "Vim tutor, teaching the basic vim commands.",
        "Task-Script": {
            "Exit the tutor": "<Esc> :q <Enter>",
            "Launch the vim tutor using the given language (en, fr, de, ...)": "vimtutor {{language}}"
        }
    },
    "common_virsh": {
        "Category": "common",
        "Command": "virsh",
        "P-Summary": "manag virsh guest domain\nnote : guest_id id name uuid guest",
        "P-Tasks": "connect hypervisor session creat guest configur file delet run guest dump guest configur file edit guest configur file editor chang editor list domain save current state guest file start reboot shutdown suspend resum guest",
        "Summary": "Manage virsh guest domains.\nNOTE: 'guest_id' can be the id, name or UUID of the guest.",
        "Task-Script": {
            "Connect to a hypervisor session": "virsh connect {{qemu://system}}",
            "Create a guest from a configuration file": "virsh create {{path/to/config_file.xml}}",
            "Delete a running guest": "virsh destroy {{guest_id}} && virsh undefine {{guest_id}}",
            "Dump guest configuration file": "virsh dumpxml {{guest_id}} > {{path/to/guest.xml}}",
            "Edit a guest's configuration file (editor can be changed with $EDITOR)": "virsh edit {{guest_id}}",
            "List all domains": "virsh list --all",
            "Save the current state of a guest to a file": "virsh save {{guest_id}} {{filename}}",
            "Start/reboot/shutdown/suspend/resume a guest": "virsh {{command}} {{guest_id}}"
        }
    },
    "common_virt-install": {
        "Category": "common",
        "Command": "virt-install",
        "P-Summary": "creat virtual machin libvirt begin os instal",
        "P-Tasks": "creat virtual machin 1 gib ram 12 gib storag start debian instal",
        "Summary": "Create virtual machines with libvirt and begin OS installation.",
        "Task-Script": {
            "Create a virtual machine with 1 GiB RAM and 12 GiB storage and start Debian installation": "virt-install --memory {{1024}} --disk path={{path/to/image.qcow2}},size={{12}} --cdrom {{path/to/debian.iso}}"
        }
    },
    "common_virt-sparsify": {
        "Category": "common",
        "Command": "virt-sparsify",
        "P-Summary": "make virtual machin drive imag thin-provis\nnote : use offlin machin avoid data corrupt\nhome page : http : libguestf org",
        "P-Tasks": "creat sparsifi compress imag without snapshot unsparsifi one sparsifi imag in-plac",
        "Summary": "Make virtual machine drive images thin-provisioned.\nNOTE: Use only for offline machines to avoid data corruption.\nHome page: <https://libguestfs.org/>.",
        "Task-Script": {
            "Create a sparsified compressed image without snapshots from an unsparsified one": "virt-sparsify --compress {{path/to/image.qcow2}} {{path/to/image_new.qcow2}}",
            "Sparsify an image in-place": "virt-sparsify --in-place {{path/to/image.img}}"
        }
    },
    "common_virtualenv": {
        "Category": "common",
        "Command": "virtualenv",
        "P-Summary": "creat virtual isol python environ",
        "P-Tasks": "creat new environ custom prompt prefix start select environ stop environ use differ version python virtualenv",
        "Summary": "Create virtual isolated Python environments.",
        "Task-Script": {
            "Create a new environment": "virtualenv {{path/to/venv}}",
            "Customize the prompt prefix": "virtualenv --prompt={{prompt_prefix}} {{path/to/venv}}",
            "Start (select) the environment": "source {{path/to/venv}}/bin/activate",
            "Stop the environment": "deactivate",
            "Use a different version of Python with virtualenv": "virtualenv --python={{path/to/pythonbin}} {{path/to/venv}}"
        }
    },
    "common_virtualenvwrapper": {
        "Category": "common",
        "Command": "virtualenvwrapper",
        "P-Summary": "group simpl wrapper command python virtualenv tool",
        "P-Tasks": "activ use differ virtualenv creat virtualenv specif python version creat new python virtualenv workon_hom get summari virtualenvwrapp command list virtual environ remov virtualenv stop virtualenv",
        "Summary": "Group of simple wrapper commands for Python's `virtualenv` tool.",
        "Task-Script": {
            "Activate or use a different `virtualenv`": "workon {{virtualenv_name}}",
            "Create a `virtualenv` for a specific Python version": "mkvirtualenv --python {{/usr/local/bin/python3.8}} {{virtualenv_name}}",
            "Create a new Python `virtualenv` in `$WORKON_HOME`": "mkvirtualenv {{virtualenv_name}}",
            "Get summary of all virtualenvwrapper commands": "virtualenvwrapper",
            "List all virtual environments": "lsvirtualenv",
            "Remove a `virtualenv`": "rmvirtualenv {{virtualenv_name}}",
            "Stop the `virtualenv`": "deactivate"
        }
    },
    "common_visudo": {
        "Category": "common",
        "Command": "visudo",
        "P-Summary": "safe edit sudoer file",
        "P-Tasks": "check sudoer file error edit sudoer file",
        "Summary": "Safely edit the sudoers file.",
        "Task-Script": {
            "Check sudoers file for errors": "sudo visudo -c",
            "Edit sudoers file": "sudo visudo"
        }
    },
    "common_vlc": {
        "Category": "common",
        "Command": "vlc",
        "P-Summary": "cross-platform multimedia player",
        "P-Tasks": "play file play fullscreen play mute play repeatedli play video url",
        "Summary": "Cross-platform multimedia player.",
        "Task-Script": {
            "Play a file": "vlc {{path/to/file}}",
            "Play in fullscreen": "vlc --fullscreen {{path/to/file}}",
            "Play muted": "vlc --no-audio {{path/to/file}}",
            "Play repeatedly": "vlc --loop {{path/to/file}}",
            "Play video from a URL": "vlc {{https://www.youtube.com/watch?v=oHg5SJYRHA0}}"
        }
    },
    "common_vsce": {
        "Category": "common",
        "Command": "vsce",
        "P-Summary": "extens manag visual studio code",
        "P-Tasks": "list extens creat publish packag current work directori vsix file publish extens major minor patch version show metadata associ extens unpublish extens",
        "Summary": "Extension manager for Visual Studio Code.",
        "Task-Script": {
            "List all the extensions created by a publisher": "vsce list {{publisher}}",
            "Package the current working directory as .vsix file": "vsce package",
            "Publish an extension as major, minor or patch version": "vsce publish {{major|minor|patch}}",
            "Show the metadata associated with an extension": "vsce show {{extension_id}}",
            "Unpublish an extension": "vsce unpublish {{extension_id}}"
        }
    },
    "common_vue": {
        "Category": "common",
        "Command": "vue",
        "P-Summary": "multi-purpos cli vue js",
        "P-Tasks": "creat new project web ui creat new vue project interact",
        "Summary": "Multi-purpose CLI for Vue.js.",
        "Task-Script": {
            "Create a new project with web UI": "vue ui",
            "Create a new vue project interactively": "vue create {{project_name}}"
        }
    },
    "common_vue build": {
        "Category": "common",
        "Command": "vue build",
        "P-Summary": "subcommand provid vue cli vue cli-service-glob enabl quick prototyp",
        "P-Tasks": "build js vue file product mode zero config",
        "Summary": "A subcommand provided by `@vue/cli` and `@vue/cli-service-global` that enables quick prototyping.",
        "Task-Script": {
            "Build a `.js` or `.vue` file in production mode with zero config": "vue build {{filename}}"
        }
    },
    "common_vue init": {
        "Category": "common",
        "Command": "vue init",
        "P-Summary": "legaci project initi subcommand vue js framework",
        "P-Tasks": "creat new project use local templat creat new project use templat github creat new project use one default templat",
        "Summary": "Legacy project initialization subcommand of the Vue.js framework.",
        "Task-Script": {
            "Create a new project using a local template": "vue init {{path/to/template_directory}} {{project_name}}",
            "Create a new project using a template from GitHub": "vue init {{username}}/{{repo}} {{project_name}}",
            "Create a new project using one of the default templates": "vue init {{webpack|webpack-simple|browserify|browserify-simple|simple}} {{project_name}}"
        }
    },
    "common_vue serve": {
        "Category": "common",
        "Command": "vue serve",
        "P-Summary": "subcommand provid vue cli vue cli-service-glob enabl quick prototyp",
        "P-Tasks": "serv js vue file develop mode zero config",
        "Summary": "A subcommand provided by `@vue/cli` and `@vue/cli-service-global` that enables quick prototyping.",
        "Task-Script": {
            "Serve a `.js` or `.vue` file in development mode with zero config": "vue serve {{filename}}"
        }
    },
    "common_w": {
        "Category": "common",
        "Command": "w",
        "P-Summary": "show log\nprint user login tti remot host login time idl time current process",
        "P-Tasks": "show logged-in user info show logged-in user info without header",
        "Summary": "Show who is logged on and what they are doing.\nPrint user login, TTY, remote host, login time, idle time, current process.",
        "Task-Script": {
            "Show logged-in users info": "w",
            "Show logged-in users info without a header": "w -h"
        }
    },
    "common_w3m": {
        "Category": "common",
        "Command": "w3m",
        "P-Summary": "text-bas web browser\nsupport ssl mous input even ssh",
        "P-Tasks": "display browser histori open url open url monochrom mode open url without mous support open new browser tab quit w3m",
        "Summary": "A text-based web browser.\nSupports SSL and mouse input, even over SSH.",
        "Task-Script": {
            "Display your browser history": "Ctrl + H",
            "Open a URL": "w3m {{http://example.com}}",
            "Open a URL in monochrome mode": "w3m {{http://example.com}} -M",
            "Open a URL without mouse support": "w3m {{http://example.com}} --no-mouse",
            "Open a new browser tab": "Shift + T",
            "Quit w3m": "'q' then 'y'"
        }
    },
    "common_wait": {
        "Category": "common",
        "Command": "wait",
        "P-Summary": "wait process complet proceed",
        "P-Tasks": "wait process finish given process id pid return exit statu wait process known invok shell finish",
        "Summary": "Wait for a process to complete before proceeding.",
        "Task-Script": {
            "Wait for a process to finish given its process ID (PID) and return its exit status": "wait {{pid}}",
            "Wait for all processes known to the invoking shell to finish": "wait"
        }
    },
    "common_waitress-serve": {
        "Category": "common",
        "Command": "waitress-serve",
        "P-Summary": "pure python wsgi http server",
        "P-Tasks": "call factori method return wsgi object listen port 8080 localhost run python web app set url scheme http start waitress unix socket use 4 thread process request",
        "Summary": "Pure Python WSGI HTTP Server.",
        "Task-Script": {
            "Call a factory method that returns a WSGI object": "waitress-serve --call {{import.path.wsgi_factory}}",
            "Listen on port 8080 on localhost": "waitress-serve --listen={{localhost}}:{{8080}} {{import.path:wsgi_func}}",
            "Run a Python web app": "waitress-serve {{import.path:wsgi_func}}",
            "Set the URL scheme to https": "waitress-serve --url-scheme={{https}} {{import.path:wsgi_func}}",
            "Start waitress on a Unix socket": "waitress-serve --unix-socket={{path/to/socket}} {{import.path:wsgi_func}}",
            "Use 4 threads to process requests": "waitress-serve --threads={{4}} {{import.path:wsgifunc}}"
        }
    },
    "common_wal": {
        "Category": "common",
        "Command": "wal",
        "P-Summary": "tool creat color scheme base domin color wallpap",
        "P-Tasks": "creat light color scheme creat color scheme preview color scheme restor previous gener color scheme wallpap skip set desktop wallpap skip set termin color",
        "Summary": "A tool to create color schemes based on the dominant colors of a wallpaper.",
        "Task-Script": {
            "Create a light color scheme": "wal -il {{image.png}}",
            "Create color scheme": "wal -i {{image.png}}",
            "Preview color scheme": "wal --preview {{image.png}}",
            "Restore the previously generated color scheme and wallpaper": "wal -R",
            "Skip setting the desktop wallpaper": "wal -in {{image.png}}",
            "Skip setting the terminal colors": "wal -is {{image.png}}"
        }
    },
    "common_wapm": {
        "Category": "common",
        "Command": "wapm",
        "P-Summary": "webassembl packag manag",
        "P-Tasks": "download packag instal global download specif version packag add list depend wapm toml download packag list depend wapm toml execut packag command use wasmer runtim interact creat new wapm toml file list top-level global instal packag print tree locally-instal depend uninstal packag remov list depend wapm toml",
        "Summary": "The WebAssembly package manager.",
        "Task-Script": {
            "Download a package and install it globally": "wapm install --global {{package_name}}",
            "Download a specific version of a package and add it to the list of dependencies in wapm.toml": "wapm install {{package_name}}@{{version}}",
            "Download all the packages listed as dependencies in wapm.toml": "wapm install",
            "Execute a package command using the Wasmer runtime": "wapm run {{command_name}} {{arguments}}",
            "Interactively create a new wapm.toml file": "wapm init",
            "List top-level globally installed packages": "wapm list --global",
            "Print a tree of locally-installed dependencies": "wapm list",
            "Uninstall a package and remove it from the list of dependencies in wapm.toml": "wapm uninstall {{package_name}}"
        }
    },
    "common_wasm-objdump": {
        "Category": "common",
        "Command": "wasm-objdump",
        "P-Summary": "display inform webassembl binari",
        "P-Tasks": "display detail given section display detail section display entir disassembl output given binari display section header given binari",
        "Summary": "Display information from WebAssembly binaries.",
        "Task-Script": {
            "Display the details of a given section": "wasm-objdump --section '{{import}}' --details {{file.wasm}}",
            "Display the details of each section": "wasm-objdump --details {{file.wasm}}",
            "Display the entire disassembled output of a given binary": "wasm-objdump -d {{file.wasm}}",
            "Display the section headers of a given binary": "wasm-objdump -h {{file.wasm}}"
        }
    },
    "common_wasm-opt": {
        "Category": "common",
        "Command": "wasm-opt",
        "P-Summary": "optim webassembl binari file",
        "P-Tasks": "appli optim write given file take time gener optim code appli default optim write given file optim file size print textual represent binari consol",
        "Summary": "Optimize WebAssembly binary files.",
        "Task-Script": {
            "Apply all optimizations and write to a given file (takes more time, but generates optimal code)": "wasm-opt -O4 {{input.wasm}} -o {{output.wasm}}",
            "Apply default optimizations and write to a given file": "wasm-opt -O {{input.wasm}} -o {{output.wasm}}",
            "Optimize a file for size": "wasm-opt -Oz {{input.wasm}} -o {{output.wasm}}",
            "Print the textual representation of the binary to console": "wasm-opt {{input.wasm}} --print"
        }
    },
    "common_wasm2c": {
        "Category": "common",
        "Command": "wasm2c",
        "P-Summary": "convert file webassembl binari format c sourc file header",
        "P-Tasks": "convert file c sourc file header display consol write output given file file h get addit gener",
        "Summary": "Convert a file from the WebAssembly binary format to a C source file and header.",
        "Task-Script": {
            "Convert a file to a C source file and header and display it to the console": "wasm2c {{file.wasm}}",
            "Write the output to a given file (file.h gets additionally generated)": "wasm2c {{file.wasm}} -o {{file.c}}"
        }
    },
    "common_wasm2wat": {
        "Category": "common",
        "Command": "wasm2wat",
        "P-Summary": "convert file webassembl binari format text format",
        "P-Tasks": "convert file text format display consol write output given file",
        "Summary": "Convert a file from the WebAssembly binary format to the text format.",
        "Task-Script": {
            "Convert a file to the text format and display it to the console": "wasm2wat {{file.wasm}}",
            "Write the output to a given file": "wasm2wat {{file.wasm}} -o {{file.wat}}"
        }
    },
    "common_wat2wasm": {
        "Category": "common",
        "Command": "wat2wasm",
        "P-Summary": "convert file webassembl text format binari format",
        "P-Tasks": "display simplifi represent everi byte pars check file error write output binari given file",
        "Summary": "Convert a file from the WebAssembly text format to the binary format.",
        "Task-Script": {
            "Display simplified representation of every byte": "wat2wasm -v {{file.wat}}",
            "Parse and check a file for errors": "wat2wasm {{file.wat}}",
            "Write the output binary to a given file": "wat2wasm {{file.wat}} -o {{file.wasm}}"
        }
    },
    "common_watch": {
        "Category": "common",
        "Command": "watch",
        "P-Summary": "execut program period show output fullscreen",
        "P-Tasks": "monitor content directori highlight differ appear re-run command everi 60 second repeatedli run command show result",
        "Summary": "Execute a program periodically, showing output fullscreen.",
        "Task-Script": {
            "Monitor the contents of a directory, highlighting differences as they appear": "watch -d {{ls -l}}",
            "Re-run a command every 60 seconds": "watch -n {{60}} {{command}}",
            "Repeatedly run a command and show the result": "watch {{command}}"
        }
    },
    "common_watchexec": {
        "Category": "common",
        "Command": "watchexec",
        "P-Summary": "run arbitrari command file chang",
        "P-Tasks": "call ls -la file current directori chang call restart my_serv file current directori chang send sigkil stop child process run make javascript css html file current directori chang run make file lib src subdirectori chang",
        "Summary": "Run arbitrary commands when files change.",
        "Task-Script": {
            "Call `ls -la` when any file in the current directory changes": "watchexec -- {{ls -la}}",
            "Call/restart `my_server` when any file in the current directory change, sending `SIGKILL` to stop the child process": "watchexec --restart --signal {{SIGKILL}} {{my_server}}",
            "Run `make` when any JavaScript, CSS and HTML files in the current directory change": "watchexec --exts {{js,css,html}} make",
            "Run `make` when any file in the `lib` or `src` subdirectories change": "watchexec --watch {{lib}} --watch {{src}} {{make}}"
        }
    },
    "common_wc": {
        "Category": "common",
        "Command": "wc",
        "P-Summary": "count line word byte",
        "P-Tasks": "count charact byte file count charact file take multi-byt charact set account count line file count word file use standard input count line word charact byte order",
        "Summary": "Count lines, words, or bytes.",
        "Task-Script": {
            "Count characters (bytes) in file": "wc -c {{file}}",
            "Count characters in file (taking multi-byte character sets into account)": "wc -m {{file}}",
            "Count lines in file": "wc -l {{file}}",
            "Count words in file": "wc -w {{file}}",
            "Use standard input to count lines, words and characters (bytes) in that order": "{{find .}} | wc"
        }
    },
    "common_weasyprint": {
        "Category": "common",
        "Command": "weasyprint",
        "P-Summary": "render html pdf png",
        "P-Tasks": "output addit debug inform render render html file pdf render html file png includ addit user stylesheet specifi base url rel url input html file specifi custom resolut output png",
        "Summary": "Render HTML to PDF or PNG.",
        "Task-Script": {
            "Output additional debugging information when rendering": "weasyprint {{path/to/input.html}} {{path/to/output}}.pdf --verbose",
            "Render a HTML file to PDF": "weasyprint {{path/to/input.html}} {{path/to/output}}.pdf",
            "Render a HTML file to PNG, including an additional user stylesheet": "weasyprint {{path/to/input.html}} {{path/to/output}}.png --stylesheet {{path/to/stylesheet.css}}",
            "Specify a base url for relative urls in the input HTML file": "weasyprint {{path/to/input.html}} {{path/to/output}}.png --base-url {{url_or_filename}}",
            "Specify a custom resolution when outputting to PNG": "weasyprint {{path/to/input.html}} {{path/to/output}}.png --resolution {{300}}"
        }
    },
    "common_web-ext": {
        "Category": "common",
        "Command": "web-ext",
        "P-Summary": "command line tool manag web extens develop",
        "P-Tasks": "build packag extens display verbos build output display verbos execut output lint manifest sourc file error run web extens specif directori firefox run web extens firefox android run web extens current directori firefox sign packag self-host",
        "Summary": "A command line tool for managing web extension development.",
        "Task-Script": {
            "Build and package the extension": "web-ext build",
            "Display verbose build output": "web-ext build --verbose",
            "Display verbose execution output": "web-ext run --verbose",
            "Lint the manifest and source files for errors": "web-ext lint",
            "Run a web extension from a specific directory in Firefox": "web-ext run --source-dir {{path/to/directory}}",
            "Run a web extension in Firefox Android": "web-ext run --target firefox-android",
            "Run the web extension in the current directory in Firefox": "web-ext run",
            "Sign a package for self-hosting": "web-ext sign --api-key {{api_key}} --api-secret {{api_secret}}"
        }
    },
    "common_webpack": {
        "Category": "common",
        "Command": "webpack",
        "P-Summary": "bundl web project js file asset singl output file",
        "P-Tasks": "automat recompil chang project file creat singl output file entri point file load css file js file use css loader css file pass config file eg\nentri script output filenam show compil progress",
        "Summary": "Bundle a web project's js files and other assets into a single output file.",
        "Task-Script": {
            "Automatically recompile on changes to project files": "webpack --watch {{app.js}} {{bundle.js}}",
            "Create a single output file from an entry point file": "webpack {{app.js}} {{bundle.js}}",
            "Load css files too from the js file (this uses the css loader for .css files)": "webpack {{app.js}} {{bundle.js}} --module-bind 'css=css'",
            "Pass a config file (with eg. the entry script and the output filename) and show compilation progress": "webpack --config {{webpack.config.js}} --progress"
        }
    },
    "common_webtorrent": {
        "Category": "common",
        "Command": "webtorrent",
        "P-Summary": "command line interfac webtorr\nsupport magnet url info hash torrent file",
        "P-Tasks": "creat new torrent file specifi file path display list file specif torrent display inform magnet uri torrent file download torrent seed specif file directori specifi file index torrent download stream torrent vlc media player stream torrent digit live network allianc dlna devic",
        "Summary": "The command line interface for WebTorrent.\nSupports magnets, urls, info hashes and .torrent files.",
        "Task-Script": {
            "Create a new torrent file for the specified file path": "webtorrent create {{path/to/file}}",
            "Display a list of files for a specific torrent": "webtorrent download \"{{torrent_id}}\" --select",
            "Display information for a magnet uri or .torrent file": "webtorrent info {{path/to/file_or_magnet}}",
            "Download a torrent": "webtorrent download \"{{torrent_id}}\"",
            "Seed a specific file or directory": "webtorrent seed {{path/to/file_or_directory}}",
            "Specify a file index from the torrent to download": "webtorrent download \"{{torrent_id}}\" --select {{index}}",
            "Stream a torrent to VLC media player": "webtorrent download \"{{torrent_id}}\" --vlc",
            "Stream a torrent to a Digital Living Network Alliance (DLNA) device": "webtorrent download \"{{torrent_id}}\" --dlna"
        }
    },
    "common_wget": {
        "Category": "common",
        "Command": "wget",
        "P-Summary": "download file web\nsupport http http ftp",
        "P-Tasks": "continu incomplet download download file http server use basic auth also work ftp download singl web page resourc 3-second interv request script stylesheet imag etc\ndownload url store text file specif directori download list file within directori sub-directori download embed page element download content url file name bar case download content url file name foo case limit download speed number connect retri",
        "Summary": "Download files from the Web.\nSupports HTTP, HTTPS, and FTP.",
        "Task-Script": {
            "Continue an incomplete download": "wget -c {{https://example.com}}",
            "Download a file from an HTTP server using Basic Auth (also works for FTP)": "wget --user={{username}} --password={{password}} {{https://example.com}}",
            "Download a single web page and all its resources with 3-second intervals between requests (scripts, stylesheets, images, etc.)": "wget --page-requisites --convert-links --wait=3 {{https://example.com/somepage.html}}",
            "Download all URLs stored in a text file to a specific directory": "wget -P {{path/to/directory}} -i {{URLs.txt}}",
            "Download all listed files within a directory and its sub-directories (does not download embedded page elements)": "wget --mirror --no-parent {{https://example.com/somepath/}}",
            "Download the contents of an URL to a file (named \"bar\" in this case)": "wget -O {{bar}} {{https://example.com/foo}}",
            "Download the contents of an URL to a file (named \"foo\" in this case)": "wget {{https://example.com/foo}}",
            "Limit the download speed and the number of connection retries": "wget --limit-rate={{300k}} --tries={{100}} {{https://example.com/somepath/}}"
        }
    },
    "common_where": {
        "Category": "common",
        "Command": "where",
        "P-Summary": "report known instanc command\ncould execut path environ variabl alia shell builtin",
        "P-Tasks": "find instanc command",
        "Summary": "Reports all known instances of a command.\nIt could be an executable in the PATH environment variable, an alias, or a shell builtin.",
        "Task-Script": {
            "Find all instances of a command": "where {{command}}"
        }
    },
    "common_which": {
        "Category": "common",
        "Command": "which",
        "P-Summary": "locat program user path",
        "P-Tasks": "multipl execut match display search path environ variabl display locat match execut",
        "Summary": "Locate a program in the user's path.",
        "Task-Script": {
            "If there are multiple executables which match, display all": "which -a {{executable}}",
            "Search the PATH environment variable and display the location of any matching executables": "which {{executable}}"
        }
    },
    "common_while": {
        "Category": "common",
        "Command": "while",
        "P-Summary": "simpl shell loop",
        "P-Tasks": "execut command forev everi second read stdin perform action everi line",
        "Summary": "Simple shell loop.",
        "Task-Script": {
            "Execute a command forever once every second": "while :; do {{command}}; sleep 1; done",
            "Read `stdin` and perform an action on every line": "while read line; do echo \"$line\"; done"
        }
    },
    "common_who": {
        "Category": "common",
        "Command": "who",
        "P-Summary": "display log relat data process boot time",
        "P-Tasks": "display avail inform display avail inform tabl header display inform current termin session display usernam line time current logged-in session",
        "Summary": "Display who is logged in and related data (processes, boot time).",
        "Task-Script": {
            "Display all available information": "who -a",
            "Display all available information with table headers": "who -a -H",
            "Display information only for the current terminal session": "who am i",
            "Display the username, line, and time of all currently logged-in sessions": "who"
        }
    },
    "common_whoami": {
        "Category": "common",
        "Command": "whoami",
        "P-Summary": "print usernam associ current effect user id",
        "P-Tasks": "display current log usernam display usernam chang user id",
        "Summary": "Print the username associated with the current effective user ID.",
        "Task-Script": {
            "Display currently logged username": "whoami",
            "Display the username after a change in the user ID": "sudo whoami"
        }
    },
    "common_whois": {
        "Category": "common",
        "Command": "whois",
        "P-Summary": "commandlin client whoi rfc 3912 protocol",
        "P-Tasks": "get abus contact ip address get inform domain name get inform ip address",
        "Summary": "Commandline client for the WHOIS (RFC 3912) protocol.",
        "Task-Script": {
            "Get abuse contact for an IP address": "whois -b {{8.8.8.8}}",
            "Get information about a domain name": "whois {{example.com}}",
            "Get information about an IP address": "whois {{8.8.8.8}}"
        }
    },
    "common_wordgrinder": {
        "Category": "common",
        "Command": "wordgrinder",
        "P-Summary": "command-lin word processor",
        "P-Tasks": "open given file show menu start wordgrind load blank document default",
        "Summary": "Command-line word processor.",
        "Task-Script": {
            "Open a given file": "wordgrinder {{filename}}",
            "Show the menu": "Alt + M",
            "Start wordgrinder (loads a blank document by default)": "wordgrinder"
        }
    },
    "common_wormhole": {
        "Category": "common",
        "Command": "wormhole",
        "P-Summary": "get thing one comput anoth safe",
        "P-Tasks": "receiv file send file send raw text",
        "Summary": "Get things from one computer to another, safely.",
        "Task-Script": {
            "Receive a file": "wormhole receive {{wormhole_code}}",
            "Send a file": "wormhole send {{path/to/file}}",
            "Send raw text": "wormhole send"
        }
    },
    "common_wpa_supplicant": {
        "Category": "common",
        "Command": "wpa_supplicant",
        "P-Summary": "manag protect wireless network",
        "P-Tasks": "join protect wireless network join protect wireless network run daemon",
        "Summary": "Manage protected wireless networks.",
        "Task-Script": {
            "Join a protected wireless network": "wpa_supplicant -i {{interface}} -c {{path/to/wpa_supplicant_conf.conf}}",
            "Join a protected wireless network and run it in a daemon": "wpa_supplicant -B -i {{interface}} -c {{path/to/wpa_supplicant_conf.conf}}"
        }
    },
    "common_wpscan": {
        "Category": "common",
        "Command": "wpscan",
        "P-Summary": "wordpress vulner scanner",
        "P-Tasks": "execut password guess attack wordpress websit perform user identifi enumer wordpress websit scan wordpress websit scan wordpress websit proxi scan wordpress websit check vulner plugin specifi path wp-content directori scan wordpress websit collect vulner data wpvulndb http : wpvulndb com scan wordpress websit use random user agent passiv detect updat vulner databas",
        "Summary": "Wordpress vulnerability scanner.",
        "Task-Script": {
            "Execute a password guessing attack on a Wordpress website": "wpscan --url {{url}} --usernames {{username|path/to/usernames.txt}} --passwords {{path/to/passwords.txt}} threads {{20}}",
            "Perform user identifiers enumeration on a Wordpress website": "wpscan --url {{url}} --enumerate {{u}}",
            "Scan a Wordpress website": "wpscan --url {{url}}",
            "Scan a Wordpress website through a proxy": "wpscan --url {{url}} --proxy {{protocol://ip:port}} --proxy-auth {{username:password}}",
            "Scan a Wordpress website, checking for vulnerable plugins and specifying the path to the `wp-content` directory": "wpscan --url {{url}} --enumerate {{vp}} --wp-content-dir {{remote/path/to/wp-content}}",
            "Scan a Wordpress website, collecting vulnerability data from the WPVulnDB (https://wpvulndb.com/)": "wpscan --url {{url}} --api-token {{token}}",
            "Scan a Wordpress website, using random user agents and passive detection": "wpscan --url {{url}} --stealthy",
            "Update the vulnerability database": "wpscan --update"
        }
    },
    "common_write": {
        "Category": "common",
        "Command": "write",
        "P-Summary": "write messag termin specifi log user ctrl-c stop write messag\nuse command find terminal_id activ user activ system\nsee also mesg",
        "P-Tasks": "send messag given user given termin id send messag jhondo pseudo termin dev pt 5 send messag testus termin dev tti 5",
        "Summary": "Write a message on the terminal of a specified logged in user (ctrl-C to stop writing messages).\nUse the `who` command to find out all terminal_ids of all active users active on the system. See also `mesg`.",
        "Task-Script": {
            "Send a message to a given user on a given terminal id": "write {{username}} {{terminal_id}}",
            "Send message to \"jhondoe\" on pseudo terminal \"/dev/pts/5\"": "write {{jhondoe}} {{pts/5}}",
            "Send message to \"testuser\" on terminal \"/dev/tty/5\"": "write {{testuser}} {{tty/5}}"
        }
    },
    "common_wrk": {
        "Category": "common",
        "Command": "wrk",
        "P-Summary": "http benchmark tool",
        "P-Tasks": "run benchmark 30 second use 12 thread keep 400 http connect open run benchmark custom header run benchmark request timeout 2 second",
        "Summary": "HTTP benchmarking tool.",
        "Task-Script": {
            "Run a benchmark for `30` seconds, using `12` threads, and keeping `400` HTTP connections open": "wrk -t{{12}} -c{{400}} -d{{30s}} \"{{http://127.0.0.1:8080/index.html}}\"",
            "Run a benchmark with a custom header": "wrk -t{{2}} -c{{5}} -d{{5s}} -H \"{{Host: example.com}}\" \"{{http://example.com/index.html}}\"",
            "Run a benchmark with a request timeout of `2` seconds": "wrk -t{{2}} -c{{5}} -d{{5s}} --timeout {{2s}} \"{{http://example.com/index.html}}\""
        }
    },
    "common_wuzz": {
        "Category": "common",
        "Command": "wuzz",
        "P-Summary": "tool interact inspect http request respons",
        "P-Tasks": "display help inform send http request start wuzz switch next view switch previou view",
        "Summary": "Tool to interactively inspect HTTP requests and responses.",
        "Task-Script": {
            "Display help information": "F1",
            "Send an HTTP request": "Ctrl + R",
            "Start wuzz": "wuzz",
            "Switch to the next view": "Ctrl + J, Tab",
            "Switch to the previous view": "Ctrl + K, Shift + Tab"
        }
    },
    "common_x_x": {
        "Category": "common",
        "Command": "x_x",
        "P-Summary": "view excel csv file command-lin",
        "P-Tasks": "view csv file unconvent delimit view xlsx csv file view xlsx csv file use first row tabl header",
        "Summary": "View Excel and CSV files from the command-line.",
        "Task-Script": {
            "View a CSV file with unconventional delimiters": "x_x --delimiter={{';'}} --quotechar={{'|'}} {{file.csv}}",
            "View an XLSX or CSV file": "x_x {{file.xlsx|file.csv}}",
            "View an XLSX or CSV file, using the first row as table headers": "x_x -h {{0}} {{file.xlsx|file.csv}}"
        }
    },
    "common_xargs": {
        "Category": "common",
        "Command": "xargs",
        "P-Summary": "execut command pipe argument come anoth command file etc\ninput treat singl block text split separ piec space tab newlin end-of-fil",
        "P-Tasks": "delet file backup extens -print0 use null charact split file name -0 use delimit execut command input line replac occurr placehold mark _ input line parallel run max-proc process time default 1 max-proc 0 xarg run mani process possibl time run command use input data argument run multipl chain command input data",
        "Summary": "Execute a command with piped arguments coming from another command, a file, etc.\nThe input is treated as a single block of text and split into separate pieces on spaces, tabs, newlines and end-of-file.",
        "Task-Script": {
            "Delete all files with a `.backup` extension (`-print0` uses a null character to split file names, and `-0` uses it as delimiter)": "find . -name {{'*.backup'}} -print0 | xargs -0 rm -v",
            "Execute the command once for each input line, replacing any occurrences of the placeholder (here marked as `_`) with the input line": "{{arguments_source}} | xargs -I _ {{command}} _ {{optional_extra_arguments}}",
            "Parallel runs of up to `max-procs` processes at a time; the default is 1. If `max-procs` is 0, xargs will run as many processes as possible at a time": "{{arguments_source}} | xargs -P {{max-procs}} {{command}}",
            "Run a command using the input data as arguments": "{{arguments_source}} | xargs {{command}}",
            "Run multiple chained commands on the input data": "{{arguments_source}} | xargs sh -c \"{{command1}} && {{command2}} | {{command3}}\""
        }
    },
    "common_xcaddy": {
        "Category": "common",
        "Command": "xcaddy",
        "P-Summary": "custom build tool caddi web server",
        "P-Tasks": "build caddi output specif file build caddi server sourc build caddi server specif version default latest build caddi specif modul build run caddi develop plugin current directori build run caddi develop plugin use specif caddi config",
        "Summary": "The custom build tool for the Caddy Web Server.",
        "Task-Script": {
            "Build Caddy and output to a specific file": "xcaddy build --output {{path/to/file}}",
            "Build Caddy server from source": "xcaddy build",
            "Build Caddy server with a specific version (defaults to latest)": "xcaddy build {{version}}",
            "Build Caddy with a specific module": "xcaddy build --with {{module_name}}",
            "Build and run Caddy for a development plugin in the current directory": "xcaddy run",
            "Build and run Caddy for a development plugin using a specific Caddy config": "xcaddy run --config {{path/to/file}}"
        }
    },
    "common_xcv": {
        "Category": "common",
        "Command": "xcv",
        "P-Summary": "cut copi past command-lin",
        "P-Tasks": "copi file cut file list file avail past past file",
        "Summary": "Cut, copy, and paste in the command-line.",
        "Task-Script": {
            "Copy a file": "xcv c {{input_file}}",
            "Cut a file": "xcv x {{input_file}}",
            "List files available for pasting": "xcv l",
            "Paste a file": "xcv v {{output_file}}"
        }
    },
    "common_xdg-user-dirs-update": {
        "Category": "common",
        "Command": "xdg-user-dirs-update",
        "P-Summary": "updat xdg user directori",
        "P-Tasks": "chang xdg desktop directori specifi directori must absolut write result specifi dry-run-fil instead user-dir dir file",
        "Summary": "Update XDG user directories.",
        "Task-Script": {
            "Change XDG's DESKTOP directory to the specified directory (must be absolute)": "xdg-user-dirs-update --set DESKTOP \"{{path/to/directory}}\"",
            "Write the result to the specified dry-run-file instead of the `user-dirs.dirs` file": "xdg-user-dirs-update --dummy-output \"{{path/to/dry_run_file}}\" --set {{xdg_user_directory}} \"{{path/to/directory}}\""
        }
    },
    "common_xgettext": {
        "Category": "common",
        "Command": "xgettext",
        "P-Summary": "extract gettext string code file",
        "P-Tasks": "append new string exist file add header contain metadata output file scan file output string messag po use differ output filenam",
        "Summary": "Extract gettext strings from code files.",
        "Task-Script": {
            "Append new strings to an existing file": "xgettext --join-existing --output {{path/to/output_file}} {{path/to/input_file}}",
            "Don't add a header containing metadata to the output file": "xgettext --omit-header {{path/to/input_file}}",
            "Scan file and output strings to `messages.po`": "xgettext {{path/to/input_file}}",
            "Use a different output filename": "xgettext --output {{path/to/output_file}} {{path/to/input_file}}"
        }
    },
    "common_xkill": {
        "Category": "common",
        "Command": "xkill",
        "P-Summary": "kill window interact graphic session\nsee also kill killal",
        "P-Tasks": "display cursor kill window press left mous button press mous button cancel",
        "Summary": "Kill a window interactively in a graphical session.\nSee also `kill` and `killall`.",
        "Task-Script": {
            "Display a cursor to kill a window when pressing the left mouse button (press any other mouse button to cancel)": "xkill"
        }
    },
    "common_xmllint": {
        "Category": "common",
        "Command": "xmllint",
        "P-Summary": "xml parser linter support xpath syntax navig xml tree",
        "P-Tasks": "check xml file meet requir doctyp declar return node tag name foo return human-read indent xml file return content first node name foo string return href attribut second anchor element html file valid xml dtd schema host onlin",
        "Summary": "XML parser and linter that supports XPath, a syntax for navigating XML trees.",
        "Task-Script": {
            "Check that a XML file meets the requirements of its DOCTYPE declaration": "xmllint --valid {{source_file.xml}}",
            "Return all nodes (tags) named \"foo\"": "xmllint --xpath \"//{{foo}}\" {{source_file.xml}}",
            "Return human-readable (indented) XML from file": "xmllint --format {{source_file.xml}}",
            "Return the contents of the first node named \"foo\" as a string": "xmllint --xpath \"string(//{{foo}})\" {{source_file.xml}}",
            "Return the href attribute of the second anchor element in an html file": "xmllint --html --xpath \"string(//a[2]/@href)\" webpage.xhtml",
            "Validate XML against DTD schema hosted online": "xmllint --dtdvalid {{URL}} {{source_file.xml}}"
        }
    },
    "common_xmlto": {
        "Category": "common",
        "Command": "xmlto",
        "P-Summary": "appli xsl stylesheet xml document",
        "P-Tasks": "convert docbook xml document html format store result file separ directori convert docbook xml document pdf format convert docbook xml document singl html file specifi stylesheet use convert docbook xml document",
        "Summary": "Apply an XSL stylesheet to an XML document.",
        "Task-Script": {
            "Convert a DocBook XML document to HTML format and store the resulting files in a separate directory": "xmlto -o {{path/to/html_files}} {{html}} {{document.xml}}",
            "Convert a DocBook XML document to PDF format": "xmlto {{pdf}} {{document.xml}}",
            "Convert a DocBook XML document to a single HTML file": "xmlto {{html-nochunks}} {{document.xml}}",
            "Specify a stylesheet to use while converting a DocBook XML document": "xmlto -x {{stylesheet.xsl}} {{output-format}} {{document.xml}}"
        }
    },
    "common_xo": {
        "Category": "common",
        "Command": "xo",
        "P-Summary": "pluggabl zero-configur lint util javascript",
        "P-Tasks": "automat fix lint issu found lint given set file lint file src directori lint use space indent instead tab lint use prettier code style",
        "Summary": "A pluggable, zero-configuration linting utility for JavaScript.",
        "Task-Script": {
            "Automatically fix any lint issues found": "xo --fix",
            "Lint a given set of files": "xo {{file1}}.js {{file2}}.js",
            "Lint files in the \"src\" directory": "xo",
            "Lint using spaces as indentation instead of tabs": "xo --space",
            "Lint using the \"prettier\" code style": "xo --prettier"
        }
    },
    "common_xpdf": {
        "Category": "common",
        "Command": "xpdf",
        "P-Summary": "portabl document format pdf file viewer",
        "P-Tasks": "open pdf file open pdf file fullscreen mode open compress pdf file open specif page pdf file specifi initi zoom specifi initi zoom page width full page",
        "Summary": "Portable Document Format (PDF) file viewer.",
        "Task-Script": {
            "Open a PDF file": "xpdf {{path/to/file.pdf}}",
            "Open a PDF file in fullscreen mode": "xpdf -fullscreen {{path/to/file.pdf}}",
            "Open a compressed PDF file": "xpdf {{path/to/file.pdf.tar}}",
            "Open a specific page in a PDF file": "xpdf {{path/to/file.pdf}} :{{page_number}}",
            "Specify the initial zoom": "xpdf -z {{75}}% {{path/to/file.pdf}}",
            "Specify the initial zoom at page width or full page": "xpdf -z {{page|width}} {{path/to/file.pdf}}"
        }
    },
    "common_xsv": {
        "Category": "common",
        "Command": "xsv",
        "P-Summary": "csv command line toolkit written rust",
        "P-Tasks": "count number entri get overview shape entri inspect header file join column one file anoth select column show 10 random entri",
        "Summary": "A CSV command line toolkit written in Rust.",
        "Task-Script": {
            "Count the number of entries": "xsv count {{path/to/file.csv}}",
            "Get an overview of the shape of entries": "xsv stats {{path/to/file.csv}} | xsv table",
            "Inspect the headers of a file": "xsv headers {{path/to/file.csv}}",
            "Join a column from one file to another": "xsv join --no-case {{column_a}} {{path/to/file/a.csv}} {{column_b}} {{path/to/file/b.csv}} | xsv table",
            "Select a few columns": "xsv select {{column_a,column_b}} {{path/to/file.csv}}",
            "Show 10 random entries": "xsv sample {{10}} {{path/to/file.csv}}"
        }
    },
    "common_xxd": {
        "Category": "common",
        "Command": "xxd",
        "P-Summary": "creat hexadecim represent hexdump binari file vice-versa",
        "P-Tasks": "display output length 32 byte display output plain mode without gap column display output 10 column one octet byte gener hexdump binari file display output gener hexdump binari file save text file revert plaintext hexdump back binari save binari file",
        "Summary": "Create a hexadecimal representation (hexdump) from a binary file, or vice-versa.",
        "Task-Script": {
            "Display output only up to a length of 32 bytes": "xxd -l {{32}} {{input_file}}",
            "Display the output in plain mode, without any gaps between the columns": "xxd -p {{input_file}}",
            "Display the output with 10 columns of one octet (byte) each": "xxd -c {{10}} {{input_file}}",
            "Generate a hexdump from a binary file and display the output": "xxd {{input_file}}",
            "Generate a hexdump from a binary file and save it as a text file": "xxd {{input_file}} {{output_file}}",
            "Revert a plaintext hexdump back into binary, and save it as a binary file": "xxd -r -p {{input_file}} {{output_file}}"
        }
    },
    "common_xz": {
        "Category": "common",
        "Command": "xz",
        "P-Summary": "compress decompress xz lzma file",
        "P-Tasks": "compress file lzma file format compress file xz file format compress file use best compress compress file use fastest compress compress file delet origin decompress file write stdout decompress xz file decompress lzma file",
        "Summary": "Compress or decompress .xz and .lzma files.",
        "Task-Script": {
            "Compress a file to the lzma file format": "xz --format=lzma {{file}}",
            "Compress a file to the xz file format": "xz {{file}}",
            "Compress a file using the best compression": "xz -9 {{file}}",
            "Compress a file using the fastest compression": "xz -0 {{file}}",
            "Compress a file, but don't delete the original": "xz -k {{file}}",
            "Decompress a file and write to `stdout`": "xz -dc {{file.xz}}",
            "Decompress a xz file": "xz -d {{file.xz}}",
            "Decompress an lzma file": "xz -d --format=lzma {{file.lzma}}"
        }
    },
    "common_yarn": {
        "Category": "common",
        "Command": "yarn",
        "P-Summary": "javascript node js packag manag altern",
        "P-Tasks": "identifi whether modul depend list modul depend upon instal modul save depend packag json file add -- dev save dev depend instal modul global instal depend referenc packag json file instal option interact creat packag json file uninstal modul remov packag json file",
        "Summary": "JavaScript and Node.js package manager alternative.",
        "Task-Script": {
            "Identify whether a module is a dependency and list other modules that depend upon it": "yarn why {{module_name}}",
            "Install a module and save it as a dependency to the `package.json` file (add `--dev` to save as a dev dependency)": "yarn add {{module_name}}@{{version}}",
            "Install a module globally": "yarn global add {{module_name}}",
            "Install all dependencies referenced in the `package.json` file (the `install` is optional)": "yarn install",
            "Interactively create a `package.json` file": "yarn init",
            "Uninstall a module and remove it from the `package.json` file": "yarn remove {{module_name}}"
        }
    },
    "common_yarn-why": {
        "Category": "common",
        "Command": "yarn-why",
        "P-Summary": "identifi yarn packag instal",
        "P-Tasks": "show yarn packag instal",
        "Summary": "Identifies why a Yarn package has been installed.",
        "Task-Script": {
            "Show why a Yarn package is installed": "yarn-why {{package_name}}"
        }
    },
    "common_yes": {
        "Category": "common",
        "Command": "yes",
        "P-Summary": "output someth repeatedli\ncommand commonli use answer ye everi prompt instal command apt-get",
        "P-Tasks": "accept everyth prompt apt-get command repeatedli output messag repeatedli output",
        "Summary": "Output something repeatedly.\nThis command is commonly used to answer yes to every prompt by install commands (such as apt-get).",
        "Task-Script": {
            "Accept everything prompted by the `apt-get` command": "yes | sudo apt-get install {{program}}",
            "Repeatedly output \"message\"": "yes {{message}}",
            "Repeatedly output \"y\"": "yes"
        }
    },
    "common_yesod": {
        "Category": "common",
        "Command": "yesod",
        "P-Summary": "helper tool yesod haskell-bas web framework\nyesod command invok stack project manag",
        "P-Tasks": "creat new scaffold site sqlite backend my-project directori deploy applic use keter yesod deploy manag instal yesod cli tool within yesod scaffold site start develop server touch file alter templat haskel depend",
        "Summary": "Helper tool for Yesod, a Haskell-based web framework.\nAll Yesod commands are invoked through the `stack` project manager.",
        "Task-Script": {
            "Create a new scaffolded site, with sqlite as backend, in the \"my-project\" directory": "stack new {{my-project}} {{yesod-sqlite}}",
            "Deploy application using Keter (Yesod's deployment manager)": "stack exec -- yesod keter",
            "Install the Yesod CLI tool within a Yesod scaffolded site": "stack build yesod-bin cabal-install --install-ghc",
            "Start development server": "stack exec -- yesod devel",
            "Touch files with altered Template Haskell dependencies": "stack exec -- yesod touch"
        }
    },
    "common_youtube-dl": {
        "Category": "common",
        "Command": "youtube-dl",
        "P-Summary": "download video youtub websit",
        "P-Tasks": "download particular languag subtitl along video download playlist extract mp3 download video playlist download video playlist specif qualiti download audio video convert mp3 download best qualiti audio video merg download video mp4 file custom filenam list format video playlist avail",
        "Summary": "Download videos from YouTube and other websites.",
        "Task-Script": {
            "Download a particular language's subtitles along with the video": "youtube-dl --sub-lang {{en}} --write-sub '{{https://www.youtube.com/watch?v=Mwa0_nE9H7A}}'",
            "Download a playlist and extract mp3 from it": "youtube-dl -i --extract-audio --audio-format mp3 -o \"%(title)s.%(ext)s\" '{{url to playlist}}'",
            "Download a video or playlist": "youtube-dl '{{https://www.youtube.com/watch?v=oHg5SJYRHA0}}'",
            "Download a video or playlist at a specific quality": "youtube-dl --format \"{{best[height<=480]}}\" '{{https://www.youtube.com/watch?v=oHg5SJYRHA0}}'",
            "Download the audio from a video and convert it to an MP3": "youtube-dl -x --audio-format {{mp3}} '{{url}}'",
            "Download the best quality audio and video and merge them": "youtube-dl -f bestvideo+bestaudio '{{url}}'",
            "Download video(s) as MP4 files with custom filenames": "youtube-dl --format {{mp4}} -o \"{{%(title)s by %(uploader)s on %(upload_date)s in %(playlist)s.%(ext)s}}\" '{{url}}'",
            "List all formats that a video or playlist is available in": "youtube-dl --list-formats '{{https://www.youtube.com/watch?v=Mwa0_nE9H7A}}'"
        }
    },
    "common_youtube-viewer": {
        "Category": "common",
        "Command": "youtube-viewer",
        "P-Summary": "command-lin applic search play video youtub",
        "P-Tasks": "display search prompt play select video 720p login youtub account search video watch video specif url vlc",
        "Summary": "Command-line application for searching and playing videos from YouTube.",
        "Task-Script": {
            "Display a search prompt and play the selected video in 720p": "youtube-viewer -{{7}}",
            "Login to your YouTube account": "youtube-viewer --login",
            "Search for a video": "youtube-viewer {{search_term}}",
            "Watch a video with a specific URL in VLC": "youtube-viewer --player={{vlc}} {{https://youtube.com/watch?v=dQw4w9WgXcQ}}"
        }
    },
    "common_z": {
        "Category": "common",
        "Command": "z",
        "P-Summary": "track use directori enabl quickli navig use string regex pattern",
        "P-Tasks": "go directori contain foo bar go directori contain foo name go highest-rank directori match foo go recent access directori match foo list directori z databas match foo remov current directori z databas",
        "Summary": "Tracks the most used directories and enables quickly navigating to them using string or regex patterns.",
        "Task-Script": {
            "Go to a directory that contains \"foo\" and then \"bar\"": "z {{foo}} {{bar}}",
            "Go to a directory that contains \"foo\" in the name": "z {{foo}}",
            "Go to the highest-ranked directory matching \"foo\"": "z -r {{foo}}",
            "Go to the most recently accessed directory matching \"foo\"": "z -t {{foo}}",
            "List all directories in `z`'s database matching \"foo\"": "z -l {{foo}}",
            "Remove the current directory from `z`'s database": "z -x ."
        }
    },
    "common_zbarimg": {
        "Category": "common",
        "Command": "zbarimg",
        "P-Summary": "scan decod bar code imag file",
        "P-Tasks": "process imag file",
        "Summary": "Scan and decode bar codes from image file(s).",
        "Task-Script": {
            "Process an image file": "zbarimg {{image_file}}"
        }
    },
    "common_zcat": {
        "Category": "common",
        "Command": "zcat",
        "P-Summary": "print data gzip compress file",
        "P-Tasks": "print compress detail gzip file standard output print uncompress content gzip file standard output",
        "Summary": "Print data from gzip compressed files.",
        "Task-Script": {
            "Print compression details of a gzipped file to the standard output": "zcat -l {{file.txt.gz}}",
            "Print the uncompressed contents of a gzipped file to the standard output": "zcat {{file.txt.gz}}"
        }
    },
    "common_zdb": {
        "Category": "common",
        "Command": "zdb",
        "P-Summary": "zf debugg",
        "P-Tasks": "show detail configur specif zf pool show detail configur mount zf zpool show statist number size dedupl block",
        "Summary": "ZFS debugger.",
        "Task-Script": {
            "Show detailed configuration for a specific ZFS pool": "zdb -C {{poolname}}",
            "Show detailed configuration of all mounted ZFS zpools": "zdb",
            "Show statistics about number, size and deduplication of blocks": "zdb -b {{poolname}}"
        }
    },
    "common_zfs": {
        "Category": "common",
        "Command": "zfs",
        "P-Summary": "manag zf filesystem",
        "P-Tasks": "chang mountpoint filesystem creat snapshot zf filesystem creat new zf filesystem delet zf filesystem enabl compress filesystem list avail zf filesystem",
        "Summary": "Manage ZFS filesystems.",
        "Task-Script": {
            "Change mountpoint for a filesystem": "zfs set mountpoint={{/my/mount/path}} {{pool_name/filesystem_name}}",
            "Create a Snapshot of a ZFS filesystem": "zfs snapshot {{pool_name/filesystem_name}}@{{snapshot_name}}",
            "Create a new ZFS filesystem": "zfs create {{pool_name/filesystem_name}}",
            "Delete a ZFS filesystem": "zfs destroy {{pool_name/filesystem_name}}",
            "Enable compression on a filesystem": "zfs set compression=on {{pool_name/filesystem_name}}",
            "List all available zfs filesystems": "zfs list"
        }
    },
    "common_zip": {
        "Category": "common",
        "Command": "zip",
        "P-Summary": "packag compress archiv file zip file",
        "P-Tasks": "add file exist zip file archiv directori content multi-part plit zip file e g\n3gb part archiv directori content highest level 9 compress creat encrypt archiv user prompt password delet file exist zip file e x clude unwant file ad compress archiv packag compress directori content r ecurs packag compress multipl directori file",
        "Summary": "Package and compress (archive) files into zip file.",
        "Task-Script": {
            "Add files to an existing zip file": "zip {{compressed.zip}} {{path/to/file}}",
            "Archive a directory and its contents to a multi-part [s]plit zip file (e.g. 3GB parts)": "zip -r -s {{3g}} {{compressed.zip}} {{path/to/dir}}",
            "Archive a directory and its contents with the highest level [9] of compression": "zip -r -{{9}} {{compressed.zip}} {{/path/to/dir}}",
            "Create an encrypted archive (user will be prompted for a password)": "zip -e -r {{compressed.zip}} {{path/to/dir}}",
            "Delete files from an existing zip file": "zip -d {{compressed.zip}} \"{{foo/*.tmp}}\"",
            "E[x]clude unwanted files from being added to the compressed archive": "zip -r {{compressed.zip}} {{path/to/dir}} -x {{path/to/exclude}}",
            "Package and compress a directory and its contents, [r]ecursively": "zip -r {{compressed.zip}} {{/path/to/dir}}",
            "Package and compress multiple directories and files": "zip -r {{compressed.zip}} {{/path/to/dir1 /path/to/dir2 /path/to/file}}"
        }
    },
    "common_zipalign": {
        "Category": "common",
        "Command": "zipalign",
        "P-Summary": "zip archiv align tool\npart android sdk build tool",
        "P-Tasks": "align data zip file 4-byte boundari check zip file correctli align 4-byte boundari display result verbos manner",
        "Summary": "Zip archive alignment tool.\nPart of the Android SDK build tools.",
        "Task-Script": {
            "Align the data of a ZIP file on 4-byte boundaries": "zipalign {{4}} {{path/to/input.zip}} {{path/to/output.zip}}",
            "Check that a ZIP file is correctly aligned on 4-byte boundaries and display the results in a verbose manner": "zipalign -v -c {{4}} {{path/to/input.zip}}"
        }
    },
    "common_zless": {
        "Category": "common",
        "Command": "zless",
        "P-Summary": "view compress file",
        "P-Tasks": "page compress archiv less",
        "Summary": "View compressed files.",
        "Task-Script": {
            "Page through a compressed archive with `less`": "zless {{file.txt.gz}}"
        }
    },
    "common_zola": {
        "Category": "common",
        "Command": "zola",
        "P-Summary": "static site gener singl binari everyth built-in",
        "P-Tasks": "build page like build command would without write result disk build serv site use local server default 127 0 0 1:1111 build whole site public directori delet build whole site differ directori creat directori structur use zola given directori",
        "Summary": "A static site generator in a single binary with everything built-in.",
        "Task-Script": {
            "Build all pages just like the build command would, but without writing any of the results to disk": "zola check",
            "Build and serve the site using a local server (default is `127.0.0.1:1111`)": "zola serve",
            "Build the whole site in the `public` directory after deleting it": "zola build",
            "Build the whole site into a different directory": "zola build --output-dir {{path/to/output_directory/}}",
            "Create the directory structure used by Zola at the given directory": "zola init {{my_site}}"
        }
    },
    "common_zopflipng": {
        "Category": "common",
        "Command": "zopflipng",
        "P-Summary": "png imag compress util",
        "P-Tasks": "optim png imag optim sever png imag save given prefix",
        "Summary": "PNG image compression utility.",
        "Task-Script": {
            "Optimize a PNG image": "zopflipng {{input.png}} {{output.png}}",
            "Optimize several PNG images and save with given prefix": "zopflipng --prefix={{prefix}} {{image1.png}} {{image2.png}} {{image3.png}}"
        }
    },
    "common_zoxide": {
        "Category": "common",
        "Command": "zoxide",
        "P-Summary": "keep track frequent use directori\nuse rank algorithm navig best match",
        "P-Tasks": "add directori increment rank gener shell configur command alias z za zi zq zr go highest-rank directori contain foo bar go highest-rank directori contain foo name remov directori zoxid databas start interact directori search requir fzf",
        "Summary": "Keep track of the most frequently used directories.\nUses a ranking algorithm to navigate to the best match.",
        "Task-Script": {
            "Add a directory or increment its rank": "zoxide add {{path/to/dir}}",
            "Generate shell configuration for command aliases (`z`, `za`, `zi`, `zq`, `zr`)": "zoxide init {{bash|fish|zsh}}",
            "Go to the highest-ranked directory that contains \"foo\" and then \"bar\"": "zoxide query {{foo}} {{bar}}",
            "Go to the highest-ranked directory that contains \"foo\" in the name": "zoxide query {{foo}}",
            "Remove a directory from `zoxide`'s database": "zoxide remove {{path/to/dir}}",
            "Start an interactive directory search (requires `fzf`)": "zoxide query --interactive"
        }
    },
    "common_zpool": {
        "Category": "common",
        "Command": "zpool",
        "P-Summary": "manag zf pool",
        "P-Tasks": "add cach l2arc devic zpool check zf pool error verifi checksum everi block\ncpu disk intens creat mirror pool export zpool unmount filesystem import zpool list zpool avail import show configur statu zf zpool show histori pool oper",
        "Summary": "Manage ZFS pools.",
        "Task-Script": {
            "Add a cache (L2ARC) device to a zpool": "zpool add {{pool_name}} cache {{cache_disk}}",
            "Check a ZFS pool for errors (verifies the checksum of EVERY block). Very CPU and disk intensive": "zpool scrub {{pool_name}}",
            "Create a mirrored pool": "zpool create {{pool_name}} mirror {{disk1}} {{disk2}} mirror {{disk3}} {{disk4}}",
            "Export a zpool (unmount all filesystems)": "zpool export {{pool_name}}",
            "Import a zpool": "zpool import {{pool_name}}",
            "List zpools available for import": "zpool import",
            "Show the configuration and status of all ZFS zpools": "zpool status",
            "Show the history of all pool operations": "zpool history {{pool_name}}"
        }
    },
    "common_zsh": {
        "Category": "common",
        "Command": "zsh",
        "P-Summary": "z shell\nbash sh -compat command line interpret",
        "P-Tasks": "execut command pass paramet run command file script run command file print execut start interact command line interpret",
        "Summary": "Z SHell.\n`bash` and `sh`-compatible command line interpreter.",
        "Task-Script": {
            "Execute command passed as parameter": "zsh -c {{command}}",
            "Run commands from file (script)": "zsh {{file}}",
            "Run commands from file and print them as they are executed": "zsh -x {{file}}",
            "Start interactive command line interpreter": "zsh"
        }
    },
    "common_zstd": {
        "Category": "common",
        "Command": "zstd",
        "P-Summary": "compress decompress file zstandard compress",
        "P-Tasks": "compress file new file zst suffix compress file specifi compress level 1 fastest 19 slowest 3 default decompress file decompress stdout unlock higher compress level 22 use memori compress decompress",
        "Summary": "Compress or decompress files with Zstandard compression.",
        "Task-Script": {
            "Compress a file into a new file with the .zst suffix": "zstd {{file}}",
            "Compress a file specifying the compression level, where 1=fastest, 19=slowest and 3=default": "zstd -{{level}} {{file}}",
            "Decompress a file": "zstd -d {{file}}.zst",
            "Decompress to `stdout`": "zstd -dc {{file}}.zst",
            "Unlock higher compression levels (up to 22) using more memory (both for compression and decompression)": "zstd --ultra -{{level}} {{file}}"
        }
    },
    "common_zsteg": {
        "Category": "common",
        "Command": "zsteg",
        "P-Summary": "steganographi detect tool png bmp file format\ndetect lsb steganographi zlib-compress data openstego camouflag lsb eratosthen set",
        "P-Tasks": "detect embed data bmp imag specifi bit consid detect embed data bmp imag specifi minimum length string found find mode detect embed data bmp imag use known method detect embed data png imag detect embed data png imag extract prime pixel invert bit detect embed data png imag iter pixel vertic use msb first",
        "Summary": "Steganography detection tool for PNG and BMP file formats.\nIt detects LSB steganography, ZLIB-compressed data, OpenStego, Camouflage and LSB with the Eratosthenes set.",
        "Task-Script": {
            "Detect embedded data in a BMP image, specifying the bits to consider": "zsteg --bits {{1,2,3|1-3}} {{path/to/image.bmp}}",
            "Detect embedded data in a BMP image, specifying the minimum length of the strings to be found and the find mode": "zsteg --min-str-len {{10}} --strings {{first|all|longest|none}} {{path/to/image.bmp}}",
            "Detect embedded data in a BMP image, using all known methods": "zsteg --all {{path/to/image.bmp}}",
            "Detect embedded data in a PNG image": "zsteg {{path/to/image.png}}",
            "Detect embedded data in a PNG image, extracting only prime pixels and inverting bits": "zsteg --prime --invert {{path/to/image.png}}",
            "Detect embedded data in a PNG image, iterating pixels vertically and using MSB first": "zsteg --msb --order yx {{path/to/image.png}}"
        }
    },
    "linux_Homeshick": {
        "Category": "linux",
        "Command": "Homeshick",
        "P-Summary": "synchron git dotfil",
        "P-Tasks": "add file castl clone castl creat new castl go castl symlink file castl",
        "Summary": "Synchronize Git dotfiles.",
        "Task-Script": {
            "Add a file to your castle": "homeshick track {{castle_name}} {{path/to/file}}",
            "Clone a castle": "homeshick clone {{github_username}}/{{repository_name}}",
            "Create a new castle": "homeshick generate {{castle_name}}",
            "Go to a castle": "homeshick cd {{castle_name}}",
            "Symlink all files from a castle": "homeshick link {{castle_name}}"
        }
    },
    "linux_Medusa": {
        "Category": "linux",
        "Command": "Medusa",
        "P-Summary": "modular parallel login brute-forc varieti protocol",
        "P-Tasks": "execut brute forc mysql server use file cointain usernam hash execut brute forc list smb server use usernam pwdump file execut login attempt http server use usernam password user-ag specifi execut brute forc ftp server use file contain usernam file contain password",
        "Summary": "A modular and parallel login brute-forcer for a variety of protocols.",
        "Task-Script": {
            "Execute a brute force against a MySQL server using a file cointaining usernames and a hash": "medusa -M mysql -h host -U {{path/to/username_file}} -p {{hash}} -m PASS:HASH",
            "Execute a brute force against a list of SMB servers using a username and a pwdump file": "medusa -M smbnt -H {{path/to/hosts_file}} -C {{path/to/pwdump_file}} -u {{username}} -m PASS:HASH",
            "Execute a login attempt against a HTTP server using the username, password and user-agent specified": "medusa -M HTTP -h host -u {{username}} -p {{password}} -m USER-AGENT:\"{{Agent}}\"",
            "Execute brute force against an FTP server using a file containing usernames and a file containing passwords": "medusa -M ftp -h host -U {{path/to/username_file}} -P {{path/to/password_file}}"
        }
    },
    "linux_a2disconf": {
        "Category": "linux",
        "Command": "a2disconf",
        "P-Summary": "disabl apach configur file debian-bas ose",
        "P-Tasks": "disabl configur file show inform messag",
        "Summary": "Disable an Apache configuration file on Debian-based OSes.",
        "Task-Script": {
            "Disable a configuration file": "sudo a2disconf {{configuration_file}}",
            "Don't show informative messages": "sudo a2disconf --quiet {{configuration_file}}"
        }
    },
    "linux_a2dismod": {
        "Category": "linux",
        "Command": "a2dismod",
        "P-Summary": "disabl apach modul debian-bas ose",
        "P-Tasks": "disabl modul show inform messag",
        "Summary": "Disable an Apache module on Debian-based OSes.",
        "Task-Script": {
            "Disable a module": "sudo a2dismod {{module}}",
            "Don't show informative messages": "sudo a2dismod --quiet {{module}}"
        }
    },
    "linux_a2dissite": {
        "Category": "linux",
        "Command": "a2dissite",
        "P-Summary": "disabl apach virtual host debian-bas ose",
        "P-Tasks": "disabl virtual host show inform messag",
        "Summary": "Disable an Apache virtual host on Debian-based OSes.",
        "Task-Script": {
            "Disable a virtual host": "sudo a2dissite {{virtual_host}}",
            "Don't show informative messages": "sudo a2dissite --quiet {{virtual_host}}"
        }
    },
    "linux_a2enconf": {
        "Category": "linux",
        "Command": "a2enconf",
        "P-Summary": "enabl apach configur file debian-bas ose",
        "P-Tasks": "show inform messag enabl configur file",
        "Summary": "Enable an Apache configuration file on Debian-based OSes.",
        "Task-Script": {
            "Don't show informative messages": "sudo a2enconf --quiet {{configuration_file}}",
            "Enable a configuration file": "sudo a2enconf {{configuration_file}}"
        }
    },
    "linux_a2enmod": {
        "Category": "linux",
        "Command": "a2enmod",
        "P-Summary": "enabl apach modul debian-bas ose",
        "P-Tasks": "show inform messag enabl modul",
        "Summary": "Enable an Apache module on Debian-based OSes.",
        "Task-Script": {
            "Don't show informative messages": "sudo a2enmod --quiet {{module}}",
            "Enable a module": "sudo a2enmod {{module}}"
        }
    },
    "linux_a2ensite": {
        "Category": "linux",
        "Command": "a2ensite",
        "P-Summary": "enabl apach virtual host debian-bas ose",
        "P-Tasks": "show inform messag enabl virtual host",
        "Summary": "Enable an Apache virtual host on Debian-based OSes.",
        "Task-Script": {
            "Don't show informative messages": "sudo a2ensite --quiet {{virtual_host}}",
            "Enable a virtual host": "sudo a2ensite {{virtual_host}}"
        }
    },
    "linux_a2query": {
        "Category": "linux",
        "Command": "a2query",
        "P-Summary": "retriev runtim configur apach debian-bas ose",
        "P-Tasks": "check specif modul instal display apach version display current enabl multi process modul list enabl apach modul list enabl virtual host",
        "Summary": "Retrieve runtime configuration from Apache on Debian-based OSes.",
        "Task-Script": {
            "Check if a specific module is installed": "sudo a2query -m {{module_name}}",
            "Display the Apache version": "sudo a2query -v",
            "Display the currently enabled Multi Processing Module": "sudo a2query -M",
            "List enabled Apache modules": "sudo a2query -m",
            "List enabled virtual hosts": "sudo a2query -s"
        }
    },
    "linux_ac": {
        "Category": "linux",
        "Command": "ac",
        "P-Summary": "print statist long user connect",
        "P-Tasks": "also display addit detail print long particular user connect hour print long particular user connect hour per day total print long current user connect hour print long user connect hour",
        "Summary": "Print statistics on how long users have been connected.",
        "Task-Script": {
            "Also display additional details": "ac --compatibility",
            "Print how long a particular user has been connected in hours": "ac --individual-totals {{username}}",
            "Print how long a particular user has been connected in hours per day (with total)": "ac --daily-totals --individual-totals {{username}}",
            "Print how long the current user has been connected in hours": "ac",
            "Print how long users have been connected in hours": "ac --individual-totals"
        }
    },
    "linux_acpi": {
        "Category": "linux",
        "Command": "acpi",
        "P-Summary": "show batteri statu thermal inform",
        "P-Tasks": "extract inform proc instead sy show inform show batteri inform show cool devic inform show thermal inform show thermal inform fahrenheit",
        "Summary": "Shows battery status or thermal information.",
        "Task-Script": {
            "Extract information from `/proc` instead of `/sys`": "acpi -p",
            "Show all information": "acpi -V",
            "Show battery information": "acpi",
            "Show cooling device information": "acpi -c",
            "Show thermal information": "acpi -t",
            "Show thermal information in Fahrenheit": "acpi -tf"
        }
    },
    "linux_add-apt-repository": {
        "Category": "linux",
        "Command": "add-apt-repository",
        "P-Summary": "manag apt repositori definit",
        "P-Tasks": "add new apt repositori enabl sourc packag remov apt repositori updat packag cach ad repositori",
        "Summary": "Manages apt repository definitions.",
        "Task-Script": {
            "Add a new apt repository": "add-apt-repository {{repository_spec}}",
            "Enable source packages": "add-apt-repository --enable-source {{repository_spec}}",
            "Remove an apt repository": "add-apt-repository --remove {{repository_spec}}",
            "Update the package cache after adding a repository": "add-apt-repository --update {{repository_spec}}"
        }
    },
    "linux_addpart": {
        "Category": "linux",
        "Command": "addpart",
        "P-Summary": "tell linux kernel exist specifi partit\ncommand simpl wrapper around add partit ioctl",
        "P-Tasks": "tell kernel exist specifi partit",
        "Summary": "Tells the Linux kernel about the existence of the specified partition.\nThe command is a simple wrapper around the `add partition` ioctl.",
        "Task-Script": {
            "Tell the kernel about the existence of the specified partition": "addpart {{device}} {{partition}} {{start}} {{length}}"
        }
    },
    "linux_addr2line": {
        "Category": "linux",
        "Command": "addr2line",
        "P-Summary": "convert address binari file name line number",
        "P-Tasks": "demangl function name c++ code display filenam line number sourc code instruct address execut display function name filenam line number",
        "Summary": "Convert addresses of a binary into file names and line numbers.",
        "Task-Script": {
            "Demangle the function name for C++ code": "addr2line --exe={{path/to/executable}} --functions --demangle {{address}}",
            "Display the filename and line number of the source code from an instruction address of an executable": "addr2line --exe={{path/to/executable}} {{address}}",
            "Display the function name, filename and line number": "addr2line --exe={{path/to/executable}} --functions {{address}}"
        }
    },
    "linux_adduser": {
        "Category": "linux",
        "Command": "adduser",
        "P-Summary": "user addit util",
        "P-Tasks": "add exist user specifi group creat new user belong specifi group creat new user default home directori prompt user set password creat new user home directori specifi path creat new user specifi shell set login shell creat new user without home directori",
        "Summary": "User addition utility.",
        "Task-Script": {
            "Add an existing user to the specified group": "adduser {{username}} {{group}}",
            "Create a new user belonging to the specified group": "adduser --ingroup {{group}} {{username}}",
            "Create a new user with a default home directory and prompt the user to set a password": "adduser {{username}}",
            "Create a new user with a home directory at the specified path": "adduser --home {{path/to/home}} {{username}}",
            "Create a new user with the specified shell set as the login shell": "adduser --shell {{path/to/shell}} {{username}}",
            "Create a new user without a home directory": "adduser --no-create-home {{username}}"
        }
    },
    "linux_alpine": {
        "Category": "linux",
        "Command": "alpine",
        "P-Summary": "email client usenet newsgroup program pico nano-inspir interfac\nsupport modern email servic imap",
        "P-Tasks": "open alpin directli messag composit screen send email given email address open alpin normal quit alpin",
        "Summary": "An email client and Usenet newsgroup program with a pico/nano-inspired interface.\nSupports most modern email services through IMAP.",
        "Task-Script": {
            "Open alpine directly to the message composition screen to send an email to a given email address": "alpine {{email@example.net}}",
            "Open alpine normally": "alpine",
            "Quit alpine": "'q' then 'y'"
        }
    },
    "linux_amixer": {
        "Category": "linux",
        "Command": "amixer",
        "P-Summary": "mixer alsa soundcard driver",
        "P-Tasks": "turn master volum 10 turn master volum 10",
        "Summary": "Mixer for ALSA soundcard driver.",
        "Task-Script": {
            "Turn down the master volume by 10%": "amixer -D pulse sset Master {{10%-}}",
            "Turn up the master volume by 10%": "amixer -D pulse sset Master {{10%+}}"
        }
    },
    "linux_apache2ctl": {
        "Category": "linux",
        "Command": "apache2ctl",
        "P-Summary": "cli tool administr http web server apach\ncommand come debian base ose rhel base one see httpd",
        "P-Tasks": "list load modul restart apach daemon start apach daemon\nthrow messag alreadi run stop apach daemon test syntax configur file",
        "Summary": "The CLI tool to administrate HTTP web server Apache.\nThis command comes with Debian based OSes, for RHEL based ones see `httpd`.",
        "Task-Script": {
            "List loaded modules": "sudo apache2ctl -M",
            "Restart the Apache daemon": "sudo apache2ctl restart",
            "Start the Apache daemon. Throw a message if it is already running": "sudo apache2ctl start",
            "Stop the Apache daemon": "sudo apache2ctl stop",
            "Test syntax of the configuration file": "sudo apache2ctl -t"
        }
    },
    "linux_apk": {
        "Category": "linux",
        "Command": "apk",
        "P-Summary": "alpin linux packag manag tool",
        "P-Tasks": "get info specif packag instal new packag remov packag repair packag upgrad without modifi main depend search packag via keyword updat repositori index remot repositori",
        "Summary": "Alpine Linux package management tool.",
        "Task-Script": {
            "Get info about a specific package": "apk info {{package}}",
            "Install a new package": "apk add {{package}}",
            "Remove a package": "apk del {{package}}",
            "Repair package or upgrade it without modifying main dependencies": "apk fix {{package}}",
            "Search package via keyword": "apk search {{keyword}}",
            "Update repository indexes from all remote repositories": "apk update"
        }
    },
    "linux_aplay": {
        "Category": "linux",
        "Command": "aplay",
        "P-Summary": "command-lin sound player alsa soundcard driver",
        "P-Tasks": "play specif file sampl rate bit depth etc\nautomat determin file format play first 10 second specif file 2500hz play raw file 22050hz mono 8-bit mu-law au file",
        "Summary": "Command-line sound player for ALSA soundcard driver.",
        "Task-Script": {
            "Play a specific file (sampling rate, bit depth, etc. will be automatically determined for the file format)": "aplay {{path/to/file}}",
            "Play the first 10 seconds of a specific file at 2500Hz": "aplay --duration={{10}} --rate={{2500}} {{path/to/file}}",
            "Play the raw file as a 22050Hz, mono, 8-bit, Mu-Law `.au` file": "aplay --channels={{1}} --file-type {{raw}} --rate={{22050}} --format={{mu_law}} {{path/to/file}}"
        }
    },
    "linux_apport-bug": {
        "Category": "linux",
        "Command": "apport-bug",
        "P-Summary": "file bug report ubuntu",
        "P-Tasks": "report bug specif execut report bug specif packag report bug specif process report bug whole system",
        "Summary": "File a bug report on Ubuntu.",
        "Task-Script": {
            "Report a bug about a specific executable": "apport-bug {{path/to/executable}}",
            "Report a bug about a specific package": "apport-bug {{package}}",
            "Report a bug about a specific process": "apport-bug {{PID}}",
            "Report a bug about the whole system": "apport-bug"
        }
    },
    "linux_apt": {
        "Category": "linux",
        "Command": "apt",
        "P-Summary": "packag manag util debian base distribut\nrecommend replac apt-get use interact ubuntu version 16 04 later",
        "P-Tasks": "instal packag updat latest avail version list packag list instal packag remov packag use purg instead also remov configur file search given packag show inform packag updat list avail packag version recommend run apt command upgrad instal packag newest avail version",
        "Summary": "Package management utility for Debian based distributions.\nRecommended replacement for apt-get when used interactively in Ubuntu versions 16.04 and later.",
        "Task-Script": {
            "Install a package, or update it to the latest available version": "sudo apt install {{package}}",
            "List all packages": "apt list",
            "List installed packages": "apt list --installed",
            "Remove a package (using `purge` instead also removes its configuration files)": "sudo apt remove {{package}}",
            "Search for a given package": "apt search {{package}}",
            "Show information for a package": "apt show {{package}}",
            "Update the list of available packages and versions (it's recommended to run this before other `apt` commands)": "sudo apt update",
            "Upgrade all installed packages to their newest available versions": "sudo apt upgrade"
        }
    },
    "linux_apt-add-repository": {
        "Category": "linux",
        "Command": "apt-add-repository",
        "P-Summary": "manag apt repositori definit",
        "P-Tasks": "add new apt repositori enabl sourc packag remov apt repositori updat packag cach ad repositori",
        "Summary": "Manages apt repository definitions.",
        "Task-Script": {
            "Add a new apt repository": "apt-add-repository {{repository_spec}}",
            "Enable source packages": "apt-add-repository --enable-source {{repository_spec}}",
            "Remove an apt repository": "apt-add-repository --remove {{repository_spec}}",
            "Update the package cache after adding a repository": "apt-add-repository --update {{repository_spec}}"
        }
    },
    "linux_apt-cache": {
        "Category": "linux",
        "Command": "apt-cache",
        "P-Summary": "debian ubuntu packag queri tool",
        "P-Tasks": "search packag current sourc show depend packag show inform packag show packag depend particular packag show whether packag instal date",
        "Summary": "Debian and Ubuntu package query tool.",
        "Task-Script": {
            "Search for a package in your current sources": "apt-cache search {{query}}",
            "Show dependencies for a package": "apt-cache depends {{package}}",
            "Show information about a package": "apt-cache show {{package}}",
            "Show packages that depend on a particular package": "apt-cache rdepends {{package}}",
            "Show whether a package is installed and up to date": "apt-cache policy {{package}}"
        }
    },
    "linux_apt-file": {
        "Category": "linux",
        "Command": "apt-file",
        "P-Summary": "search file apt packag includ one yet instal",
        "P-Tasks": "list content specif packag search packag contain specifi file path updat metadata databas",
        "Summary": "Search for files in apt packages, including ones not yet installed.",
        "Task-Script": {
            "List the contents of a specific package": "apt-file list {{package_name}}",
            "Search for packages that contain the specified file or path": "apt-file search {{part/of/filename}}",
            "Update the metadata database": "sudo apt update"
        }
    },
    "linux_apt-get": {
        "Category": "linux",
        "Command": "apt-get",
        "P-Summary": "debian ubuntu packag manag util\nsearch packag use apt-cach",
        "P-Tasks": "clean local repositori - remov packag file deb interrupt download longer download instal packag updat latest avail version remov packag remov packag configur file remov packag longer need updat list avail packag version recommend run apt-get command upgrad instal packag newest avail version upgrad instal packag like upgrad remov obsolet packag instal addit packag meet new depend",
        "Summary": "Debian and Ubuntu package management utility.\nSearch for packages using `apt-cache`.",
        "Task-Script": {
            "Clean the local repository - removing package files (.deb) from interrupted downloads that can no longer be downloaded": "apt-get autoclean",
            "Install a package, or update it to the latest available version": "apt-get install {{package}}",
            "Remove a package": "apt-get remove {{package}}",
            "Remove a package and its configuration files": "apt-get purge {{package}}",
            "Remove all packages that are no longer needed": "apt-get autoremove",
            "Update the list of available packages and versions (it's recommended to run this before other `apt-get` commands)": "apt-get update",
            "Upgrade all installed packages to their newest available versions": "apt-get upgrade",
            "Upgrade installed packages (like `upgrade`), but remove obsolete packages and install additional packages to meet new dependencies": "apt-get dist-upgrade"
        }
    },
    "linux_apt-key": {
        "Category": "linux",
        "Command": "apt-key",
        "P-Summary": "key manag util apt packag manag debian ubuntu",
        "P-Tasks": "add key keyserv key id add key trust keystor add remot key trust keystor delet key trust keystor list trust key",
        "Summary": "Key management utility for the APT Package Manager on Debian and Ubuntu.",
        "Task-Script": {
            "Add a key from keyserver with only key id": "apt-key adv --keyserver {{pgp.mit.edu}} --recv {{KEYID}}",
            "Add a key to the trusted keystore": "apt-key add {{public_key_file.asc}}",
            "Add a remote key to the trusted keystore": "wget -qO - {{https://host.tld/filename.key}} | apt-key add -",
            "Delete a key from the trusted keystore": "apt-key del {{key_id}}",
            "List trusted keys": "apt-key list"
        }
    },
    "linux_apt-mark": {
        "Category": "linux",
        "Command": "apt-mark",
        "P-Summary": "util chang statu instal packag",
        "P-Tasks": "allow packag updat hold packag current version prevent updat mark packag automat instal show held packag updat show manual instal packag",
        "Summary": "Utility to change the status of installed packages.",
        "Task-Script": {
            "Allow a package to be updated again": "sudo apt-mark unhold {{package_name}}",
            "Hold a package at its current version and prevent updates to it": "sudo apt-mark hold {{package_name}}",
            "Mark a package as automatically installed": "sudo apt-mark auto {{package_name}}",
            "Show held packages that aren't being updated": "apt-mark showhold",
            "Show manually installed packages": "apt-mark showmanual"
        }
    },
    "linux_aptitude": {
        "Category": "linux",
        "Command": "aptitude",
        "P-Summary": "debian ubuntu packag manag util",
        "P-Tasks": "instal new packag depend put instal packag hold prevent automat upgrad remov packag packag depend search packag search instal packag instal aptitud search term synchron list packag version avail\nrun first run subsequ aptitud command upgrad instal packag like aptitud upgrad includ remov obsolet packag instal addit packag meet new packag depend upgrad instal packag newest avail version",
        "Summary": "Debian and Ubuntu package management utility.",
        "Task-Script": {
            "Install a new package and its dependencies": "aptitude install {{package}}",
            "Put an installed package on hold to prevent it from being automatically upgraded": "aptitude hold '?installed({{package}})'",
            "Remove a package and all packages depending on it": "aptitude remove {{package}}",
            "Search for a package": "aptitude search {{package}}",
            "Search for an installed package (`?installed` is an aptitude search term)": "aptitude search '?installed({{package}})'",
            "Synchronize list of packages and versions available. This should be run first, before running subsequent aptitude commands": "aptitude update",
            "Upgrade installed packages (like `aptitude upgrade`) including removing obsolete packages and installing additional packages to meet new package dependencies": "aptitude full-upgrade",
            "Upgrade installed packages to newest available versions": "aptitude upgrade"
        }
    },
    "linux_archey": {
        "Category": "linux",
        "Command": "archey",
        "P-Summary": "simpl tool stylishli display system inform",
        "P-Tasks": "show system inform",
        "Summary": "Simple tool for stylishly displaying system information.",
        "Task-Script": {
            "Show system information": "archey"
        }
    },
    "linux_arecord": {
        "Category": "linux",
        "Command": "arecord",
        "P-Summary": "sound record alsa soundcard driver",
        "P-Tasks": "allow interact interfac e g\nuse space-bar enter play paus list sound card digit audio devic record snippet save mp3 finish ctrl-c done record snippet cd qualiti finish ctrl-c done record snippet cd qualiti fix durat 10 second",
        "Summary": "Sound recorder for ALSA soundcard driver.",
        "Task-Script": {
            "Allow interactive interface (e.g. use space-bar or enter to play or pause)": "arecord --interactive",
            "List all sound cards and digital audio devices": "arecord --list-devices",
            "Record a snippet and save it as mp3 (finish with Ctrl-C when done)": "arecord -vv --format=cd --file-type raw | lame -r - {{path/to/file.mp3}}",
            "Record a snippet in \"CD\" quality (finish with Ctrl-C when done)": "arecord -vv --format=cd {{path/to/file.wav}}",
            "Record a snippet in \"CD\" quality, with a fixed duration of 10 seconds": "arecord -vv --format=cd --duration={{10}} {{path/to/file.wav}}"
        }
    },
    "linux_arithmetic": {
        "Category": "linux",
        "Command": "arithmetic",
        "P-Summary": "quiz simpl arithmet problem",
        "P-Tasks": "specifi rang\naddit multipl problem would featur number 0 rang inclus\nsubtract divis problem would requir result number oper 0 rang specifi one arithmet perat symbol get problem start arithmet quiz",
        "Summary": "Quiz on simple arithmetic problems.",
        "Task-Script": {
            "Specify a range. Addition and multiplication problems would feature numbers between 0 and range, inclusive. Subtraction and division problems would have required result and number to be operated on, between 0 and range": "arithmetic -r {{7}}",
            "Specify one or more arithmetic [o]peration symbols to get problems on them": "arithmetic -o {{+|-|x|/}}",
            "Start an arithmetic quiz": "arithmetic"
        }
    },
    "linux_ark": {
        "Category": "linux",
        "Command": "ark",
        "P-Summary": "kde archiv tool",
        "P-Tasks": "chang extract directori creat archiv exist add file extract archiv current directori",
        "Summary": "KDE archiving tool.",
        "Task-Script": {
            "Change extraction directory": "ark --batch --destination {{path/to/directory}} {{archive}}",
            "Create an archive if it does not exist and add files to it": "ark --add-to {{archive}} {{file1}} {{file2}}",
            "Extract an archive into the current directory": "ark --batch {{archive}}"
        }
    },
    "linux_arp-scan": {
        "Category": "linux",
        "Command": "arp-scan",
        "P-Summary": "send arp packet host specifi ip address hostnam scan local network",
        "P-Tasks": "scan ip network custom bitmask scan ip network custom net mask scan ip network within custom rang scan current local network",
        "Summary": "Send ARP packets to hosts (specified as IP addresses or hostnames) to scan the local network.",
        "Task-Script": {
            "Scan an IP network with a custom bitmask": "arp-scan {{192.168.1.1}}/{{24}}",
            "Scan an IP network with a custom net mask": "arp-scan {{10.0.0.0}}:{{255.255.255.0}}",
            "Scan an IP network within a custom range": "arp-scan {{127.0.0.0}}-{{127.0.0.31}}",
            "Scan the current local network": "arp-scan --localnet"
        }
    },
    "linux_as": {
        "Category": "linux",
        "Command": "as",
        "P-Summary": "portabl gnu assembl\nprimarili intend assembl output gcc use ld",
        "P-Tasks": "assembl file write output assembl output given file gener output faster skip whitespac comment preprocess\nuse trust compil includ given path list directori search file specifi includ direct",
        "Summary": "Portable GNU assembler.\nPrimarily intended to assemble output from `gcc` to be used by `ld`.",
        "Task-Script": {
            "Assemble a file, writing the output to a.out": "as {{file.s}}",
            "Assemble the output to a given file": "as {{file.s}} -o {{out.o}}",
            "Generate output faster by skipping whitespace and comment preprocessing. (Should only be used for trusted compilers)": "as -f {{file.s}}",
            "Include a given path to the list of directories to search for files specified in .include directives": "as -I {{path/to/directory}} {{file.s}}"
        }
    },
    "linux_ascii": {
        "Category": "linux",
        "Command": "ascii",
        "P-Summary": "show ascii charact alias",
        "P-Tasks": "show ascii alias short script-friendli mode show ascii alias charact show ascii alias multipl charact show ascii tabl binari show ascii tabl decim show ascii tabl hexadecim show ascii tabl octal show option summari complet ascii tabl",
        "Summary": "Show ASCII character aliases.",
        "Task-Script": {
            "Show ASCII aliases in short, script-friendly mode": "ascii -t {{a}}",
            "Show ASCII aliases of a character": "ascii {{a}}",
            "Show ASCII aliases of multiple characters": "ascii -s {{tldr}}",
            "Show ASCII table in binary": "ascii -b",
            "Show ASCII table in decimal": "ascii -d",
            "Show ASCII table in hexadecimal": "ascii -x",
            "Show ASCII table in octal": "ascii -o",
            "Show options summary and complete ASCII table": "ascii"
        }
    },
    "linux_aspell": {
        "Category": "linux",
        "Command": "aspell",
        "P-Summary": "interact spell checker",
        "P-Tasks": "list misspel word standard input list misspel word standard input ignor word person word list run aspel differ languag take two letter iso 639 languag code show avail dictionari languag spell check singl file",
        "Summary": "Interactive spell checker.",
        "Task-Script": {
            "List misspelled words from standard input": "cat {{file}} | aspell list",
            "List misspelled words from standard input and ignore words from personal word list": "cat {{file}} | aspell --personal={{personal-word-list.pws}} {{list}}",
            "Run aspell with different language (takes two letter ISO 639 language code)": "aspell --lang={{cs}}",
            "Show available dictionary languages": "aspell dicts",
            "Spell check a single file": "aspell check {{path/to/file}}"
        }
    },
    "linux_asterisk": {
        "Category": "linux",
        "Command": "asterisk",
        "P-Summary": "telephon exchang phone server\nuse run server manag alreadi run instanc",
        "P-Tasks": "reload chan_sip configur show activ call channel show chan_sip client phone show voicemail mailbox termin channel r econnect run server turn log 3 level v erbos r econnect run server run singl command return",
        "Summary": "Telephone and exchange (phone) server.\nUsed for running the server itself, and managing an already running instance.",
        "Task-Script": {
            "Reload chan_SIP configuration": "asterisk -r -x \"sip reload\"",
            "Show active calls and channels": "asterisk -r -x \"core show channels\"",
            "Show chan_SIP clients (phones)": "asterisk -r -x \"sip show peers\"",
            "Show voicemail mailboxes": "asterisk -r -x \"voicemail show users\"",
            "Terminate a channel": "asterisk -r -x \"hangup request {{channel_ID}}\"",
            "[R]econnect to a running server, and turn on logging 3 levels of [v]erbosity": "asterisk -r -vvv",
            "[R]econnect to a running server, run a single command, and return": "asterisk -r -x \"{{command}}\""
        }
    },
    "linux_at": {
        "Category": "linux",
        "Command": "at",
        "P-Summary": "execut command specifi time",
        "P-Tasks": "display system notif 11pm februari 18th execut script given time execut command email result use local mail program sendmail open prompt creat new set schedul command press ctrl + save exit",
        "Summary": "Executes commands at a specified time.",
        "Task-Script": {
            "Display a system notification at 11pm on February 18th": "echo \"notify-send '{{Wake up!}}'\" | at {{11pm}} {{Feb 18}}",
            "Execute a script at the given time": "at {{hh:mm}} -f {{path/to/file}}",
            "Execute the commands and email the result using a local mailing program such as sendmail": "at {{hh:mm}} -m",
            "Open an `at` prompt to create a new set of scheduled commands, press `Ctrl + D` to save and exit": "at {{hh:mm}}"
        }
    },
    "linux_auracle": {
        "Category": "linux",
        "Command": "auracle",
        "P-Summary": "command line tool use interact arch linux user repositori commonli refer aur",
        "P-Tasks": "display aur packag match regular express display packag inform space-separ list aur packag display pkgbuild file build inform space-separ list aur packag display updat instal aur packag",
        "Summary": "Command line tool used to interact with Arch Linux's User Repository, commonly referred to as the AUR.",
        "Task-Script": {
            "Display AUR packages that match a regular expression": "auracle search '{{regex}}'",
            "Display package information for a space-separated list of AUR packages": "auracle info {{package1}} {{package2}}",
            "Display the `PKGBUILD` file (build information) for a space-separated list of AUR packages": "auracle show {{package1}} {{package2}}",
            "Display updates for installed AUR packages": "auracle outdated"
        }
    },
    "linux_authconfig": {
        "Category": "linux",
        "Command": "authconfig",
        "P-Summary": "cli interfac configur system authent resourc",
        "P-Tasks": "configur server use differ password hash algorithm disabl ldap authent display current configur dri run enabl kerbero enabl ldap authent enabl network inform servic ni enabl winbind activ directori authent enabl local author",
        "Summary": "A CLI interface for configuring system authentication resources.",
        "Task-Script": {
            "Configure the server to use a different password hashing algorithm": "authconfig --update --passalgo={{algorithm}}",
            "Disable LDAP authentication": "authconfig --update --disableldapauth",
            "Display the current configuration (or dry run)": "authconfig --test",
            "Enable Kerberos": "authconfig --update --enablekrb5",
            "Enable LDAP authentication": "authconfig --update --enableldapauth",
            "Enable Network Information Service (NIS)": "authconfig --update --enablenis",
            "Enable Winbind (Active Directory) authentication": "authconfig --update --enablewinbindauth",
            "Enable local authorization": "authconfig --update --enablelocauthorize"
        }
    },
    "linux_autorandr": {
        "Category": "linux",
        "Command": "autorandr",
        "P-Summary": "automat chang screen layout",
        "P-Tasks": "chang profil save current screen layout set default profil show save profil",
        "Summary": "Automatically change screen layout.",
        "Task-Script": {
            "Change the profile": "autorandr -l {{profile_name}}",
            "Save the current screen layout": "autorandr -s {{profile_name}}",
            "Set the default profile": "autorandr -d {{profile_name}}",
            "Show the saved profiles": "autorandr"
        }
    },
    "linux_avahi-browse": {
        "Category": "linux",
        "Command": "avahi-browse",
        "P-Summary": "display servic host expos local network via mdn dns-sd\navahi compat bonjour zeroconf found appl devic",
        "P-Tasks": "limit search particular domain list domain list servic avail local network along address port ignor local one",
        "Summary": "Displays services and hosts exposed on the local network via mDNS/DNS-SD.\nAvahi is compatible with Bonjour (Zeroconf) found in Apple devices.",
        "Task-Script": {
            "Limit the search to a particular domain": "avahi-browse --all --domain={{domain}}",
            "List all domains": "avahi-browse --browse-domains",
            "List all services available on the local network along with their addresses and ports while ignoring local ones": "avahi-browse --all --resolve --ignore-local"
        }
    },
    "linux_beep": {
        "Category": "linux",
        "Command": "beep",
        "P-Summary": "util beep pc speaker",
        "P-Tasks": "play beep play beep specifi frequenc hz durat millisecond play beep repeat play new frequenc durat distinct beep play c major scale",
        "Summary": "A utility to beep the PC speaker.",
        "Task-Script": {
            "Play a beep": "beep",
            "Play a beep at a specified frequency (Hz) and duration (milliseconds)": "beep -f {{frequency}} -l {{duration}}",
            "Play a beep that repeats": "beep -r {{repetitions}}",
            "Play each new frequency and duration as a distinct beep": "beep -f {{frequency}} -l {{duration}} -n -f {{frequency}} -l {{duration}}",
            "Play the C major scale": "beep -f 262 -n -f 294 -n -f 330 -n -f 349 -n -f 392 -n -f 440 -n -f 494 -n -f 523"
        }
    },
    "linux_betterlockscreen": {
        "Category": "linux",
        "Command": "betterlockscreen",
        "P-Summary": "simpl minim lock screen",
        "P-Tasks": "chang lock screen background lock screen lock screen show custom text lock screen custom monitor timeout second",
        "Summary": "Simple, minimal lock screen.",
        "Task-Script": {
            "Change the lock screen background": "betterlockscreen -u {{path/to/image.png}}",
            "Lock the screen": "betterlockscreen --lock",
            "Lock the screen, showing some custom text": "betterlockscreen -l pixel -t \"{{custom lock screen text}}\"",
            "Lock the screen, with a custom monitor off timeout in seconds": "betterlockscreen --off {{5}} -l"
        }
    },
    "linux_binwalk": {
        "Category": "linux",
        "Command": "binwalk",
        "P-Summary": "firmwar analysi tool",
        "P-Tasks": "analyz entropi binari save plot name binari png extens append combin entropi signatur opcod analysi singl command extract file binari specifi file signatur extract file binari specifi output directori recurs extract file binari limit recurs depth 2 scan binari file",
        "Summary": "Firmware Analysis Tool.",
        "Task-Script": {
            "Analyze the entropy of a binary, saving the plot with the same name as the binary and `.png` extension appended": "binwalk --entropy --save {{path/to/binary}}",
            "Combine entropy, signature and opcodes analysis in a single command": "binwalk --entropy --signature --opcodes {{path/to/binary}}",
            "Extract files from a binary with the specified file signature": "binwalk --dd '{{png image:png}}' {{path/to/binary}}",
            "Extract files from a binary, specifying the output directory": "binwalk --extract --directory {{output_directory}} {{path/to/binary}}",
            "Recursively extract files from a binary limiting the recursion depth to 2": "binwalk --extract --matryoshka --depth {{2}} {{path/to/binary}}",
            "Scan a binary file": "binwalk {{path/to/binary}}"
        }
    },
    "linux_bitwise": {
        "Category": "linux",
        "Command": "bitwise",
        "P-Summary": "multi base interact calcul support dynam base convers bit manipul",
        "P-Tasks": "convert c-style calcul convert decim convert hexadecim run use interact mode",
        "Summary": "Multi base interactive calculator supporting dynamic base conversion and bit manipulation.",
        "Task-Script": {
            "Convert a C-style calculation": "bitwise  \"{{0x123 + 0x20 - 30 / 50}}\"",
            "Convert from decimal": "bitwise {{12345}}",
            "Convert from hexadecimal": "bitwise {{0x563d}}",
            "Run using interactive mode": "bitwise"
        }
    },
    "linux_blkdiscard": {
        "Category": "linux",
        "Command": "blkdiscard",
        "P-Summary": "discard devic sector storag devic\nuse ssd",
        "P-Tasks": "discard sector devic remov data discard first 100mb devic secur discard block devic remov data",
        "Summary": "Discards device sectors on storage devices. Useful for SSDs.",
        "Task-Script": {
            "Discard all sectors on a device, removing all data": "blkdiscard /dev/{{device}}",
            "Discard the first 100MB of a device": "blkdiscard --length {{100MB}} /dev/{{device}}",
            "Securely discard all blocks on a device, removing all data": "blkdiscard --secure /dev/{{device}}"
        }
    },
    "linux_blkid": {
        "Category": "linux",
        "Command": "blkid",
        "P-Summary": "list recogn partit univers uniqu identifi uuid",
        "P-Tasks": "list partit list partit tabl includ current mountpoint",
        "Summary": "Lists all recognized partitions and their Universally Unique Identifier (UUID).",
        "Task-Script": {
            "List all partitions": "sudo blkid",
            "List all partitions in a table, including current mountpoints": "sudo blkid -o list"
        }
    },
    "linux_bluetoothctl": {
        "Category": "linux",
        "Command": "bluetoothctl",
        "P-Summary": "handl bluetooth devic shell",
        "P-Tasks": "connect pair devic disconnect pair devic enter bluetoothctl shell list devic pair devic remov devic",
        "Summary": "Handling bluetooth devices from the shell.",
        "Task-Script": {
            "Connect a paired device": "bluetoothctl -- connect {{mac_address}}",
            "Disconnect a paired device": "bluetoothctl -- disconnect {{mac_address}}",
            "Enter the bluetoothctl shell": "bluetoothctl",
            "List devices": "bluetoothctl -- devices",
            "Pair a device": "bluetoothctl -- pair {{mac_address}}",
            "Remove a device": "bluetoothctl -- remove {{mac_address}}"
        }
    },
    "linux_bmon": {
        "Category": "linux",
        "Command": "bmon",
        "P-Summary": "monitor bandwidth captur network relat statist",
        "P-Tasks": "display data transfer rate bit per second display list interfac set interv second rate per counter calcul set polici defin network interfac display",
        "Summary": "Monitor bandwidth and capture network related statistics.",
        "Task-Script": {
            "Display data transfer rates in bits per second": "bmon -b",
            "Display the list of all the interfaces": "bmon -a",
            "Set interval (in seconds) in which rate per counter is calculated": "bmon -R {{2.0}}",
            "Set policy to define which network interface(s) is/are displayed": "bmon -p {{interface_1,interface_2,interface_3}}"
        }
    },
    "linux_bpftrace": {
        "Category": "linux",
        "Command": "bpftrace",
        "P-Summary": "high-level trace languag linux ebpf",
        "P-Tasks": "display bpftrace version dri run display output ebpf format list avail probe run one-lin program e g syscal count program run program file trace program pid",
        "Summary": "High-level tracing language for Linux eBPF.",
        "Task-Script": {
            "Display bpftrace version": "bpftrace -V",
            "Do a dry run and display the output in eBPF format": "sudo bpftrace -d -e '{{one_line_program}}'",
            "List all available probes": "sudo bpftrace -l",
            "Run a one-liner program (e.g syscall count by program)": "sudo bpftrace -e '{{tracepoint:raw_syscalls:sys_enter { @[comm] = count(); }}}'",
            "Run a program from a file": "sudo bpftrace {{path/to/file}}",
            "Trace a program by PID": "sudo bpftrace -e '{{tracepoint:raw_syscalls:sys_enter /pid == 123/ { @[comm] = count(); }}}'"
        }
    },
    "linux_bpytop": {
        "Category": "linux",
        "Command": "bpytop",
        "P-Summary": "display dynam real-tim inform run process graph\nsimilar gtop htop",
        "P-Tasks": "chang set search run program process show version start bpytop start minim mode without memori network box toggl minim mode",
        "Summary": "Display dynamic real-time information about running processes with graphs. Similar to `gtop` and `htop`.",
        "Task-Script": {
            "Change settings": "M",
            "Search for running programs or processes": "f",
            "Show version": "bpytop -v",
            "Start bpytop": "bpytop",
            "Start in minimal mode without memory and networking boxes": "bpytop -m",
            "Toggle minimal mode": "m"
        }
    },
    "linux_brctl": {
        "Category": "linux",
        "Command": "brctl",
        "P-Summary": "ethernet bridg administr",
        "P-Tasks": "add interfac exist bridg creat new ethernet bridg interfac delet exist ethernet bridg interfac remov interfac exist bridg show list inform current exist ethernet bridg",
        "Summary": "Ethernet bridge administration.",
        "Task-Script": {
            "Add an interface to an existing bridge": "sudo brctl addif {{bridge_name}} {{interface_name}}",
            "Create a new ethernet bridge interface": "sudo brctl add {{bridge_name}}",
            "Delete an existing ethernet bridge interface": "sudo brctl del {{bridge_name}}",
            "Remove an interface from an existing bridge": "sudo brctl delif {{bridge_name}} {{interface_name}}",
            "Show a list with information about currently existing ethernet bridges": "sudo brctl show"
        }
    },
    "linux_brew": {
        "Category": "linux",
        "Command": "brew",
        "P-Summary": "homebrew packag manag linux",
        "P-Tasks": "check local linuxbrew instal potenti problem display inform formula version instal path depend etc\nfetch newest version linuxbrew formula github instal latest stabl version formula use -- devel develop version list instal formula search avail formula show formula recent version avail upgrad instal formula formula name given instal formula upgrad",
        "Summary": "The Homebrew package manager for Linux.",
        "Task-Script": {
            "Check the local Linuxbrew installation for potential problems": "brew doctor",
            "Display information about a formula (version, installation path, dependencies, etc.)": "brew info {{formula}}",
            "Fetch the newest version of Linuxbrew and of all formulae from GitHub": "brew update",
            "Install the latest stable version of a formula (use `--devel` for development versions)": "brew install {{formula}}",
            "List all installed formulae": "brew list",
            "Search for available formulas": "brew search {{text}}",
            "Show formulae that have a more recent version available": "brew outdated",
            "Upgrade an installed formula (if no formula name is given, all installed formulae are upgraded)": "brew upgrade {{formula}}"
        }
    },
    "linux_btrfs": {
        "Category": "linux",
        "Command": "btrfs",
        "P-Summary": "filesystem base copy-on-writ cow principl linux",
        "P-Tasks": "creat subvolum enabl quota list subvolum show quota show space usag inform",
        "Summary": "A filesystem based on the copy-on-write (COW) principle for Linux.",
        "Task-Script": {
            "Create subvolume": "sudo btrfs subvolume create {{path/to/subvolume}}",
            "Enable quota": "sudo btrfs quota enable {{path/to/subvolume}}",
            "List subvolumes": "sudo btrfs subvolume list {{path/to/mount_point}}",
            "Show quota": "sudo btrfs qgroup show {{path/to/subvolume}}",
            "Show space usage information": "sudo btrfs filesystem df {{path/to/mount_point}}"
        }
    },
    "linux_cal": {
        "Category": "linux",
        "Command": "cal",
        "P-Summary": "print calendar inform current day highlight",
        "P-Tasks": "display calendar specif month year display calendar specif year 4 digit display calendar current month display previou current next month use monday first day week",
        "Summary": "Prints calendar information, with the current day highlighted.",
        "Task-Script": {
            "Display a calendar for a specific month and year": "cal {{month}} {{year}}",
            "Display a calendar for a specific year (4 digits)": "cal {{year}}",
            "Display a calendar for the current month": "cal",
            "Display previous, current and next month": "cal -3",
            "Use monday as the first day of the week": "cal --monday"
        }
    },
    "linux_calc": {
        "Category": "linux",
        "Command": "calc",
        "P-Summary": "interact arbitrary-precis calcul termin",
        "P-Tasks": "perform calcul non-interact mode start calc interact mode",
        "Summary": "An interactive arbitrary-precision calculator on the terminal.",
        "Task-Script": {
            "Perform a calculation in non-interactive mode": "calc -p '{{85 * (36 / 4)}}'",
            "Start calc in interactive mode": "calc"
        }
    },
    "linux_calcurse": {
        "Category": "linux",
        "Command": "calcurse",
        "P-Summary": "text-bas calendar schedul applic command line",
        "P-Tasks": "copi local object caldav server vice versa print appoint event current day exit remov local calcurs item import remot object remov remot object push local calcurs item start calcurs interact mode",
        "Summary": "A text-based calendar and scheduling application for the command line.",
        "Task-Script": {
            "Copy local objects to the CalDAV server and vice versa": "calcurse-caldav --init=two-way",
            "Print the appointments and events for the current day and exit": "calcurse --appointment",
            "Remove all local calcurse items and import remote objects": "calcurse-caldav --init=keep-remote",
            "Remove all remote objects and push local calcurse items": "calcurse-caldav --init=keep-local",
            "Start calcurse on interactive mode": "calcurse"
        }
    },
    "linux_ceph": {
        "Category": "linux",
        "Command": "ceph",
        "P-Summary": "unifi storag system",
        "P-Tasks": "check cluster health statu check cluster usag stat creat storag pool delet storag pool get statist placement group cluster renam storag pool self-repair pool storag",
        "Summary": "A unified storage system.",
        "Task-Script": {
            "Check cluster health status": "ceph status",
            "Check cluster usage stats": "ceph df",
            "Create a storage pool": "ceph osd pool create {{pool_name}} {{page_number}}",
            "Delete a storage pool": "ceph osd pool delete {{pool_name}}",
            "Get the statistics for the placement groups in a cluster": "ceph pg dump --format {{plain}}",
            "Rename a storage pool": "ceph osd pool rename {{current_name}} {{new_name}}",
            "Self-repair pool storage": "ceph pg repair {{pool_name}}"
        }
    },
    "linux_certbot": {
        "Category": "linux",
        "Command": "certbot",
        "P-Summary": "let encrypt agent automat obtain renew tl certif\nsuccessor letsencrypt",
        "P-Tasks": "obtain new certif via apach author instal new certif automat obtain new certif via nginx author instal new certif automat obtain new certif via webroot author instal automat obtain untrust test certif instead renew let encrypt certif expir 30 day less forget restart server use afterward simul obtain new certif actual save new certif disk",
        "Summary": "The Let's Encrypt Agent for automatically obtaining and renewing TLS certificates.\nSuccessor to `letsencrypt`.",
        "Task-Script": {
            "Obtain a new certificate via apache authorization, installing the new certificate automatically": "sudo certbot --apache --domain {{subdomain.example.com}}",
            "Obtain a new certificate via nginx authorization, installing the new certificate automatically": "sudo certbot --nginx --domain {{subdomain.example.com}}",
            "Obtain a new certificate via webroot authorization, but do not install it automatically": "sudo certbot certonly --webroot --webroot-path {{path/to/webroot}} --domain {{subdomain.example.com}}",
            "Obtain an untrusted test certificate instead": "sudo certbot --webroot --webroot-path {{path/to/webroot}} --domain {{subdomain.example.com}} --test-cert",
            "Renew all Let's Encrypt certificates that expire in 30 days or less (don't forget to restart any servers that use them afterwards)": "sudo certbot renew",
            "Simulate the obtaining of a new certificate, but don't actually save any new certificates to disk": "sudo certbot --webroot --webroot-path {{path/to/webroot}} --domain {{subdomain.example.com}} --dry-run"
        }
    },
    "linux_cewl": {
        "Category": "linux",
        "Command": "cewl",
        "P-Summary": "url spider tool make crack wordlist web content",
        "P-Tasks": "creat wordlist file given url 2 link depth output wordlist given url debug mode includ email address output wordlist given url proxi output wordlist given url use http basic digest authent output alpha-numer wordlist given url word minimum 5 charact",
        "Summary": "URL spidering tool for making a cracking wordlist from web content.",
        "Task-Script": {
            "Create a wordlist file from the given URL up to 2 links depth": "cewl --depth {{2}} --write {{path/to/wordlist.txt}} {{url}}",
            "Output a wordlist from the given URL in debug mode including email addresses": "cewl --debug --email {{url}}",
            "Output a wordlist from the given URL through a proxy": "cewl --proxy_host {{host}} --proxy_port {{port}} {{url}}",
            "Output a wordlist from the given URL using HTTP Basic or Digest authentication": "cewl --auth_type {{basic|digest}} --auth_user {{username}} --auth_pass {{password}} {{url}}",
            "Output an alpha-numeric wordlist from the given URL with words of minimum 5 characters": "cewl --with-numbers --min_word_length {{5}} {{url}}"
        }
    },
    "linux_chage": {
        "Category": "linux",
        "Command": "chage",
        "P-Summary": "chang user account password expiri inform",
        "P-Tasks": "disabl password expir enabl password expir 10 day forc user chang password next log list password inform user set account expir date",
        "Summary": "Change user account and password expiry information.",
        "Task-Script": {
            "Disable password expiration": "sudo chage -M -1 {{username}}",
            "Enable password expiration in 10 days": "sudo chage -M {{10}} {{username}}",
            "Force user to change password on next log in": "sudo chage -d 0",
            "List password information for the user": "chage -l {{username}}",
            "Set account expiration date": "sudo chage -E {{YYYY-MM-DD}}"
        }
    },
    "linux_chattr": {
        "Category": "linux",
        "Command": "chattr",
        "P-Summary": "chang attribut file directori",
        "P-Tasks": "make file directori immut chang delet even superus make file directori mutabl recurs make entir directori content immut",
        "Summary": "Change attributes of files or directories.",
        "Task-Script": {
            "Make a file or directory immutable to changes and deletion, even by superuser": "chattr +i {{path/to/file_or_directory}}",
            "Make a file or directory mutable": "chattr -i {{path/to/file_or_directory}}",
            "Recursively make an entire directory and contents immutable": "chattr -R +i {{path/to/directory}}"
        }
    },
    "linux_chcpu": {
        "Category": "linux",
        "Command": "chcpu",
        "P-Summary": "enabl disabl system cpu",
        "P-Tasks": "disabl cpu via list cpu id number enabl set cpu via rang cpu id number",
        "Summary": "Enable/disable a system's CPUs.",
        "Task-Script": {
            "Disable CPUs via a list of CPU ID numbers": "chcpu -d {{1,3}}",
            "Enable a set of CPUs via a range of CPU ID numbers": "chcpu -e {{1-10}}"
        }
    },
    "linux_check-support-status": {
        "Category": "linux",
        "Command": "check-support-status",
        "P-Summary": "identifi instal debian packag support limit prematur end",
        "P-Tasks": "display packag whose support end display packag whose support limit alreadi end end earlier distribut end life skip print headlin",
        "Summary": "Identify installed Debian packages for which support has had to be limited or prematurely ended.",
        "Task-Script": {
            "Display only packages whose support has ended": "check-support-status --type {{ended}}",
            "Display packages whose support is limited, has already ended or will end earlier than the distribution's end of life": "check-support-status",
            "Skip printing a headline": "check-support-status --no-heading"
        }
    },
    "linux_chfn": {
        "Category": "linux",
        "Command": "chfn",
        "P-Summary": "updat finger info user",
        "P-Tasks": "updat user home phone number field output finger updat user name field output finger updat user offic phone number field output finger updat user offic room number field output finger",
        "Summary": "Update `finger` info for a user.",
        "Task-Script": {
            "Update a user's \"Home Phone Number\" field for the output of `finger`": "chfn -h {{new_home_telephone_number}} {{username}}",
            "Update a user's \"Name\" field in the output of `finger`": "chfn -f {{new_display_name}} {{username}}",
            "Update a user's \"Office Phone Number\" field for the output of `finger`": "chfn -p {{new_office_telephone_number}} {{username}}",
            "Update a user's \"Office Room Number\" field for the output of `finger`": "chfn -o {{new_office_room_number}} {{username}}"
        }
    },
    "linux_chkconfig": {
        "Category": "linux",
        "Command": "chkconfig",
        "P-Summary": "manag runlevel servic cento 6",
        "P-Tasks": "disabl servic boot disabl servic boot runlevel 3 enabl servic boot enabl servic boot runlevel 2 3 4 5 list servic runlevel show servic runlevel",
        "Summary": "Manage the runlevel of services on CentOS 6.",
        "Task-Script": {
            "Disable service at boot": "chkconfig {{ntpd}} off",
            "Disable service at boot for runlevel 3": "chkconfig --level {{3}} {{ntpd}} off",
            "Enable service at boot": "chkconfig {{sshd}} on",
            "Enable service at boot for runlevels 2, 3, 4, and 5": "chkconfig --level {{2345}} {{sshd}} on",
            "List services with runlevel": "chkconfig --list",
            "Show a service's runlevel": "chkconfig --list {{ntpd}}"
        }
    },
    "linux_clamav": {
        "Category": "linux",
        "Command": "clamav",
        "P-Summary": "open-sourc anti-viru program\ndesign especi e-mail scan mail gateway use context",
        "P-Tasks": "scan file virus scan directori recurs move quarantin scan directori recurs print infect file updat viru definit",
        "Summary": "Open-source anti-virus program.\nDesigned especially for e-mail scanning on mail gateways, but can be used in other contexts.",
        "Task-Script": {
            "Scan a file for viruses": "clamscan {{path/to/file}}",
            "Scan directories recursively and move them into quarantine": "clamscan --recursive --move={{directory}}",
            "Scan directories recursively and print out infected files": "clamscan --recursive --infected {{path/to/directory}}",
            "Update virus definitions": "freshclam"
        }
    },
    "linux_cmus": {
        "Category": "linux",
        "Command": "cmus",
        "P-Summary": "commandlin music player\nuse arrow key navig enter return select number 1-8 switch differ view",
        "P-Tasks": "add file directori librari open cmu specifi directori paus unpaus current song quit cmu toggl shuffl mode",
        "Summary": "Commandline Music Player.\nUse arrow keys to navigate, `<enter/return>` to select, and numbers 1-8 switch between different views.",
        "Task-Script": {
            "Add file/directory to library": ":add {{path/to/file_or_directory}}",
            "Open cmus from specified directory": "cmus {{path/to/directory}}",
            "Pause/unpause current song": "c",
            "Quit cmus": "q",
            "Toggle shuffle mode on/off": "s"
        }
    },
    "linux_collectd": {
        "Category": "linux",
        "Command": "collectd",
        "P-Summary": "system statist collect daemon",
        "P-Tasks": "fork background show usag help includ program version specifi custom pid file locat specifi custom configur file locat start collectd test plugin data collect function exit test configur file exit",
        "Summary": "System statistics collection daemon.",
        "Task-Script": {
            "Don't fork into the background": "collectd -f",
            "Show usage help, including the program version": "collectd -h",
            "Specify a custom PID file location": "collectd -P {{path/to/file}}",
            "Specify a custom configuration file location": "collectd -C {{path/to/file}}",
            "Start collectd": "collectd",
            "Test plugin data collection functionality and then exit": "collectd -T",
            "Test the configuration file and then exit": "collectd -t"
        }
    },
    "linux_colrm": {
        "Category": "linux",
        "Command": "colrm",
        "P-Summary": "remov column stdin",
        "P-Tasks": "remov first column stdin remov 3rd column till end line remov 3rd column till 5th column line",
        "Summary": "Remove columns from `stdin`.",
        "Task-Script": {
            "Remove first column of `stdin`": "colrm {{1 1}}",
            "Remove from 3rd column till the end of each line": "colrm {{3}}",
            "Remove from the 3rd column till the 5th column of each line": "colrm {{3 5}}"
        }
    },
    "linux_compgen": {
        "Category": "linux",
        "Command": "compgen",
        "P-Summary": "built-in command auto-complet bash call press tab key twice",
        "P-Tasks": "list alias list command could run list function could run see avail command alias start ls show shell reserv key word",
        "Summary": "A built-in command for auto-completion in bash, which is called on pressing TAB key twice.",
        "Task-Script": {
            "List all aliases": "compgen -a",
            "List all commands that you could run": "compgen -c",
            "List all functions that you could run": "compgen -A function",
            "See all available commands/aliases starting with 'ls'": "compgen -ac {{ls}}",
            "Show shell reserved key words": "compgen -k"
        }
    },
    "linux_compose": {
        "Category": "linux",
        "Command": "compose",
        "P-Summary": "alia run-mailcap action compos\norigin run-mailcap use mime-typ file",
        "P-Tasks": "compos action use compos exist file new default mailcap edit tool run-mailcap",
        "Summary": "An alias to a `run-mailcap`'s action compose.\nOriginally `run-mailcap` is used to mime-type/file.",
        "Task-Script": {
            "Compose action can be used to compose any existing file or new on default mailcap edit tool": "compose {{filename}}",
            "With `run-mailcap`": "run-mailcap --action=compose {{filename}}"
        }
    },
    "linux_conky": {
        "Category": "linux",
        "Command": "conky",
        "P-Summary": "light-weight system monitor x",
        "P-Tasks": "align conki desktop creat new default config launch conki given config file launch default built-in config paus 5 second startup launch start background daemon",
        "Summary": "Light-weight system monitor for X.",
        "Task-Script": {
            "Align conky on the desktop": "conky -a {{{top,bottom,middle}_{left,right,middle}}}",
            "Create a new default config": "conky -C > ~/.conkyrc",
            "Launch conky with a given config file": "conky -c {{path/to/config}}",
            "Launch with default, built-in config": "conky",
            "Pause for 5 seconds at startup before launching": "conky -p {{5}}",
            "Start in the background (daemonize)": "conky -d"
        }
    },
    "linux_cp": {
        "Category": "linux",
        "Command": "cp",
        "P-Summary": "copi file directori",
        "P-Tasks": "copi directori recurs verbos mode show file copi copi file anoth directori keep filenam copi file anoth locat copi text file anoth locat interact mode prompt user overwrit derefer symbol link copi recurs copi directori content anoth locat destin exist directori copi insid use full path sourc file creat miss intermedi directori copi",
        "Summary": "Copy files and directories.",
        "Task-Script": {
            "Copy a directory recursively, in verbose mode (shows files as they are copied)": "cp -vr {{path/to/source_directory}} {{path/to/target_directory}}",
            "Copy a file into another directory, keeping the filename": "cp {{path/to/source_file.ext}} {{path/to/target_parent_directory}}",
            "Copy a file to another location": "cp {{path/to/source_file.ext}} {{path/to/target_file.ext}}",
            "Copy text files to another location, in interactive mode (prompts user before overwriting)": "cp -i {{*.txt}} {{path/to/target_directory}}",
            "Dereference symbolic links before copying": "cp -L {{link}} {{path/to/target_directory}}",
            "Recursively copy a directory's contents to another location (if the destination exists, the directory is copied inside it)": "cp -r {{path/to/source_directory}} {{path/to/target_directory}}",
            "Use the full path of source files, creating any missing intermediate directories when copying": "cp --parents {{source/path/to/file}} {{path/to/target_file}}"
        }
    },
    "linux_cpufreq-aperf": {
        "Category": "linux",
        "Command": "cpufreq-aperf",
        "P-Summary": "calcul averag cpu frequenc time period\nrequir root privileg",
        "P-Tasks": "calcul start calcul cpu 1 start calcul 3 second refresh interv cpu core start calcul default cpu core 1 second refresh interv",
        "Summary": "Calculate the average CPU frequency over a time period.\nRequires root privileges.",
        "Task-Script": {
            "Calculate only once": "sudo cpufreq-aperf -o",
            "Start calculating for CPU 1 only": "sudo cpufreq-aperf -c {{1}}",
            "Start calculating with a 3 seconds refresh interval for all CPU cores": "sudo cpufreq-aperf -i {{3}}",
            "Start calculating, defaulting to all CPU cores and 1 second refresh interval": "sudo cpufreq-aperf"
        }
    },
    "linux_cpufreq-info": {
        "Category": "linux",
        "Command": "cpufreq-info",
        "P-Summary": "tool show cpu frequenc inform",
        "P-Tasks": "show cpu frequenc inform cpu show cpu frequenc inform specifi cpu show avail cpu frequenc polici show current cpu work frequenc human-read format accord cpufreq kernel modul show current cpu work frequenc human-read format read hardwar avail root show allow minimum maximum cpu frequenc show current minimum maximum cpu frequenc polici tabl format",
        "Summary": "A tool to show CPU frequency information.",
        "Task-Script": {
            "Show CPU frequency information for all CPUs": "cpufreq-info",
            "Show CPU frequency information for the specified CPU": "cpufreq-info -c {{cpu_number}}",
            "Show available CPU frequency policies": "cpufreq-info -g",
            "Show current CPU work frequency in a human-readable format, according to the cpufreq kernel module": "cpufreq-info -f -m",
            "Show current CPU work frequency in a human-readable format, by reading it from hardware (only available to root)": "sudo cpufreq-info -w -m",
            "Show the allowed minimum and maximum CPU frequency": "cpufreq-info -l",
            "Show the current minimum and maximum CPU frequency and policy in table format": "cpufreq-info -o"
        }
    },
    "linux_cpufreq-set": {
        "Category": "linux",
        "Command": "cpufreq-set",
        "P-Summary": "tool modifi cpu frequenc set\nfrequenc valu rang output command cpufreq-info -l",
        "P-Tasks": "set cpu frequenc polici cpu 1 userspac set current maximum cpu frequenc cpu 1 set current minimum cpu frequenc cpu 1 set current work frequenc cpu 1",
        "Summary": "A tool to modify CPU frequency settings.\nThe frequency value should range between the output of command `cpufreq-info -l`.",
        "Task-Script": {
            "Set the CPU frequency policy of CPU 1 to \"userspace\"": "sudo cpufreq-set -c {{1}} -g {{userspace}}",
            "Set the current maximum CPU frequency of CPU 1": "sudo cpufreq-set -c {{1}} --max {{max_frequency}}",
            "Set the current minimum CPU frequency of CPU 1": "sudo cpufreq-set -c {{1}} --min {{min_frequency}}",
            "Set the current work frequency of CPU 1": "sudo cpufreq-set -c {{1}} -f {{work_frequency}}"
        }
    },
    "linux_cpuid": {
        "Category": "linux",
        "Command": "cpuid",
        "P-Summary": "display detail inform cpu",
        "P-Tasks": "display inform cpu display inform current cpu display raw hex inform decod",
        "Summary": "Display detailed information about all CPUs.",
        "Task-Script": {
            "Display information for all CPUs": "cpuid",
            "Display information only for the current CPU": "cpuid -1",
            "Display raw hex information with no decoding": "cpuid -r"
        }
    },
    "linux_cpulimit": {
        "Category": "linux",
        "Command": "cpulimit",
        "P-Summary": "tool throttl cpu usag process",
        "P-Tasks": "kill process program cpu usag goe 50 launch given program limit use 50 cpu launch program limit cpu usag 50 run cpulimit background limit exist process pid 1234 use 25 cpu limit exist program execut name throttl child process none go 25 cpu",
        "Summary": "A tool to throttle the CPU usage of other processes.",
        "Task-Script": {
            "Kill its process if the program's CPU usage goes over 50%": "cpulimit --limit 50 --kill -- {{program}}",
            "Launch a given program and limit it to only use 50% of the CPU": "cpulimit --limit {{50}} -- {{program arg1 arg2 ...}}",
            "Launch a program, limit its CPU usage to 50% and run cpulimit in the background": "cpulimit --limit {{50}} --background -- {{program}}",
            "Limit an existing process with PID 1234 to only use 25% of the CPU": "cpulimit --pid {{1234}} --limit {{25%}}",
            "Limit an existing program by its executable name": "cpulimit --exe {{program}} --limit {{25}}",
            "Throttle both it and its child processes so that none go about 25% CPU": "cpulimit --limit {{25}} --monitor-forks -- {{program}}"
        }
    },
    "linux_create_ap": {
        "Category": "linux",
        "Command": "create_ap",
        "P-Summary": "creat ap access point channel",
        "P-Tasks": "choos differ wifi adapt driver creat bridg network internet share creat bridg network internet share pre-configur bridg interfac creat access point without internet share creat access port internet share wifi interfac creat open network passphras use wpa + wpa2 passphras",
        "Summary": "Create an AP (Access Point) at any channel.",
        "Task-Script": {
            "Choose a different WiFi adapter driver": "create_ap --driver {{wifi_adapter}} {{wlan0}} {{eth0}} {{access_point_ssid}} {{passphrase}}",
            "Create a bridged network with Internet sharing": "create_ap -m bridge {{wlan0}} {{eth0}} {{access_point_ssid}} {{passphrase}}",
            "Create a bridged network with Internet sharing and a pre-configured bridge interface": "create_ap -m bridge {{wlan0}} {{br0}} {{access_point_ssid}} {{passphrase}}",
            "Create an access point without Internet sharing": "create_ap -n {{wlan0}} {{acces_point_ssid}} {{passphrase}}",
            "Create an access port for Internet sharing from the same WiFi interface": "create_ap {{wlan0}} {{wlan0}} {{access_point_ssid}} {{passphrase}}",
            "Create an open network with no passphrase": "create_ap {{wlan0}} {{eth0}} {{access_point_ssid}}",
            "Use a WPA + WPA2 passphrase": "create_ap {{wlan0}} {{eth0}} {{access_point_ssid}} {{passphrase}}"
        }
    },
    "linux_cryptsetup": {
        "Category": "linux",
        "Command": "cryptsetup",
        "P-Summary": "manag plain dm-crypt luk linux unifi key setup encrypt volum",
        "P-Tasks": "chang luk volum passphras initi luk volum overwrit data partit open luk volum creat decrypt map dev mapper target remov exist map",
        "Summary": "Manage plain dm-crypt and LUKS (Linux Unified Key Setup) encrypted volumes.",
        "Task-Script": {
            "Change the LUKS volume's passphrase": "cryptsetup luksChangeKey {{/dev/sda1}}",
            "Initialize a LUKS volume (overwrites all data on the partition)": "cryptsetup luksFormat {{/dev/sda1}}",
            "Open a LUKS volume and create a decrypted mapping at /dev/mapper/{{target}}": "cryptsetup luksOpen {{/dev/sda1}} {{target}}",
            "Remove an existing mapping": "cryptsetup luksClose {{target}}"
        }
    },
    "linux_csplit": {
        "Category": "linux",
        "Command": "csplit",
        "P-Summary": "split file piec\ngener file name xx00 xx01",
        "P-Tasks": "split file line match regular express split file line 5 use custom prefix output file split file line 5 23 split file everi 5 line fail total number line divis 5 split file everi 5 line ignor exact-divis error",
        "Summary": "Split a file into pieces.\nThis generates files named \"xx00\", \"xx01\", and so on.",
        "Task-Script": {
            "Split a file at a line matching a regular expression": "csplit {{file}} /{{regex}}/",
            "Split a file at line 5 and use a custom prefix for the output files": "csplit {{file}} {{5}} -f {{prefix}}",
            "Split a file at lines 5 and 23": "csplit {{file}} {{5}} {{23}}",
            "Split a file every 5 lines (this will fail if the total number of lines is not divisible by 5)": "csplit {{file}} {{5}} {*}",
            "Split a file every 5 lines, ignoring exact-division error": "csplit -k {{file}} {{5}} {*}"
        }
    },
    "linux_ctrlaltdel": {
        "Category": "linux",
        "Command": "ctrlaltdel",
        "P-Summary": "util control happen ctrl+alt+del press",
        "P-Tasks": "get current set set crtl+alt+del reboot immedi without prepar set ctrl+alt+del reboot normal give process chanc exit first send sigint pid1",
        "Summary": "Utility to control what happens when CTRL+ALT+DEL is pressed.",
        "Task-Script": {
            "Get current setting": "ctrlaltdel",
            "Set CRTL+ALT+DEL to reboot immediately, without any preparation": "sudo ctrlaltdel hard",
            "Set CTRL+ALT+DEL to reboot \"normally\", giving processes a chance to exit first (send SIGINT to PID1)": "sudo ctrlaltdel soft"
        }
    },
    "linux_daemonize": {
        "Category": "linux",
        "Command": "daemonize",
        "P-Summary": "run command daemon unix daemon",
        "P-Tasks": "run command daemon use lock file ensur one instanc run time use specifi user account write pid specifi file",
        "Summary": "Run a command (that does not daemonize itself) as a Unix daemon.",
        "Task-Script": {
            "Run a command as a daemon": "daemonize {{command}} {{command_arguments}}",
            "Use a lock file to ensure that only one instance runs at a time": "daemonize -l {{path/to/lockfile}} {{command}} {{command_arguments}}",
            "Use the specified user account": "sudo daemonize -u {{user}} {{command}} {{command_arguments}}",
            "Write the pid to the specified file": "daemonize -p {{path/to/pidfile}} {{command}} {{command_arguments}}"
        }
    },
    "linux_dash": {
        "Category": "linux",
        "Command": "dash",
        "P-Summary": "debian almquist shell\nmodern posix-compli implement sh bash compat",
        "P-Tasks": "execut command run command file run command file log command execut termin start interact shell",
        "Summary": "Debian Almquist Shell.\nModern POSIX-compliant implementation of `sh` (isn't Bash compatible).",
        "Task-Script": {
            "Execute a command": "dash -c \"{{command}}\"",
            "Run commands from a file": "dash {{file.sh}}",
            "Run commands from a file, logging all commands executed to the terminal": "dash -x {{file.sh}}",
            "Start interactive shell": "dash"
        }
    },
    "linux_datamash": {
        "Category": "linux",
        "Command": "datamash",
        "P-Summary": "tool perform basic numer textual statist oper input textual data file",
        "P-Tasks": "get max min mean median singl column number get mean singl column float number float must use\nget mean singl column number ignor na nan liter string get mean singl column number given decim precis",
        "Summary": "Tool to perform basic numeric, textual and statistical operations on input textual data files.",
        "Task-Script": {
            "Get max, min, mean and median of a single column of numbers": "seq 3 | datamash max 1 min 1 mean 1 median 1",
            "Get the mean of a single column of float numbers (floats must use \",\" and not \".\")": "echo -e '1.0\\n2.5\\n3.1\\n4.3\\n5.6\\n5.7' | tr '.' ',' | datamash mean 1",
            "Get the mean of a single column of numbers ignoring \"Na\" and \"NaN\" (literal) strings": "echo -e '1\\n2\\nNa\\n3\\nNaN' | datamash --narm mean 1",
            "Get the mean of a single column of numbers with a given decimal precision": "echo -e '1\\n2\\n3\\n4\\n5\\n5' | datamash -R {{number_of_decimals_wanted}} mean 1"
        }
    },
    "linux_dbus-daemon": {
        "Category": "linux",
        "Command": "dbus-daemon",
        "P-Summary": "d-bu messag daemon allow multipl program exchang messag",
        "P-Tasks": "forc messag bu write system log messag output process id stdout run daemon configur file run daemon standard per-login-sess messag bu configur run daemon standard systemwid messag bu configur set address listen overrid configur valu",
        "Summary": "The D-Bus message daemon, allowing multiple programs to exchange messages.",
        "Task-Script": {
            "Force the message bus to write to the system log for messages": "dbus-daemon --syslog",
            "Output the process id to `stdout`": "dbus-daemon --print-pid",
            "Run the daemon with a configuration file": "dbus-daemon --config-file {{path/to/file}}",
            "Run the daemon with the standard per-login-session message bus configuration": "dbus-daemon --session",
            "Run the daemon with the standard systemwide message bus configuration": "dbus-daemon --system",
            "Set the address to listen on and override the configuration value for it": "dbus-daemon --address {{address}}"
        }
    },
    "linux_ddrescue": {
        "Category": "linux",
        "Command": "ddrescue",
        "P-Summary": "data recoveri tool read data damag block devic",
        "P-Tasks": "clone disk disk b creat log file take imag devic creat log file",
        "Summary": "Data recovery tool that reads data from damaged block devices.",
        "Task-Script": {
            "Clone Disk A to Disk B, creating a log file": "sudo ddrescue --force --no-scrape {{/dev/sda}} {{/dev/sdb}} {{path/to/log.txt}}",
            "Take an image of a device, creating a log file": "sudo ddrescue {{/dev/sdb}} {{path/to/image.dd}} {{path/to/log.txt}}"
        }
    },
    "linux_debchange": {
        "Category": "linux",
        "Command": "debchange",
        "P-Summary": "tool mainten debian changelog file debian sourc packag",
        "P-Tasks": "add changelog entri close bug specifi id add changelog entri current version add new version non-maintain upload changelog",
        "Summary": "Tool for maintenance of the debian/changelog file in a Debian source package.",
        "Task-Script": {
            "Add a changelog entry to close the bug with specified ID": "debchange --closes {{bug_id}}",
            "Add a changelog entry to the current version": "debchange --append",
            "Add a new version for a non-maintainer upload to the changelog": "debchange --nmu"
        }
    },
    "linux_debman": {
        "Category": "linux",
        "Command": "debman",
        "P-Summary": "read man page uninstal packag",
        "P-Tasks": "read man page command provid specifi packag name read man page deb file specifi packag version download",
        "Summary": "Read man pages from uninstalled packages.",
        "Task-Script": {
            "Read a man page for a command that is provided by a specified package name": "debman -p {{package_name}} {{command_name}}",
            "Read a man page in a .deb file": "debman -f {{path/to/filename.deb}} {{command_name}}",
            "Specify a package version to download": "debman -p {{package_name}}={{version}} {{command_name}}"
        }
    },
    "linux_debugfs": {
        "Category": "linux",
        "Command": "debugfs",
        "P-Summary": "interact ext2 ext3 ext4 filesystem debugg",
        "P-Tasks": "close filesystem list avail command open filesystem read mode open filesystem read write mode read command specifi file execut exit view filesystem stat debugf consol",
        "Summary": "An interactive ext2/ext3/ext4 filesystem debugger.",
        "Task-Script": {
            "Close the filesystem": "close -a",
            "List all available commands": "lr",
            "Open the filesystem in read only mode": "debugfs {{/dev/sdXN}}",
            "Open the filesystem in read write mode": "debugfs -w {{/dev/sdXN}}",
            "Read commands from a specified file, execute them and then exit": "debugfs -f {{path/to/cmd_file}} {{/dev/sdXN}}",
            "View the filesystem stats in debugfs console": "stats"
        }
    },
    "linux_debuild": {
        "Category": "linux",
        "Command": "debuild",
        "P-Summary": "tool build debian packag sourc",
        "P-Tasks": "build binari packag build packag current directori run lintian build packag",
        "Summary": "Tool to build a Debian package from source.",
        "Task-Script": {
            "Build a binary package only": "debuild -b",
            "Build the package in the current directory": "debuild",
            "Do not run lintian after building the package": "debuild --no-lintian"
        }
    },
    "linux_dget": {
        "Category": "linux",
        "Command": "dget",
        "P-Summary": "download debian packag",
        "P-Tasks": "download binari packag download packag sourc tarbal dsc file extract download extract packag sourc dsc file",
        "Summary": "Download Debian packages.",
        "Task-Script": {
            "Download a binary package": "dget {{package_name}}",
            "Download a package source tarball from its .dsc file but don't extract it": "dget -d {{http://deb.debian.org/debian/pool/main/h/haskell-tldr/haskell-tldr_0.4.0-2.dsc}}",
            "Download and extract a package source from its .dsc file": "dget {{http://deb.debian.org/debian/pool/main/h/haskell-tldr/haskell-tldr_0.4.0-2.dsc}}"
        }
    },
    "linux_diff3": {
        "Category": "linux",
        "Command": "diff3",
        "P-Summary": "compar three file line line",
        "P-Tasks": "compar file show chang outlin conflict",
        "Summary": "Compare three files line by line.",
        "Task-Script": {
            "Compare files": "diff3 {{file1}} {{file2}} {{file3}}",
            "Show all changes, outlining conflicts": "diff3 --show-all {{file1}} {{file2}} {{file3}}"
        }
    },
    "linux_disown": {
        "Category": "linux",
        "Command": "disown",
        "P-Summary": "allow sub-process live beyond shell attach\nsee also job command",
        "P-Tasks": "disown specif job disown job disown current job keep job disown mark futur sighup receiv shell exit",
        "Summary": "Allow sub-processes to live beyond the shell that they are attached to.\nSee also the `jobs` command.",
        "Task-Script": {
            "Disown a specific job": "disown %{{job_number}}",
            "Disown all jobs": "disown -a",
            "Disown the current job": "disown",
            "Keep job (do not disown it), but mark it so that no future SIGHUP is received on shell exit": "disown -h %{{job_number}}"
        }
    },
    "linux_dmenu": {
        "Category": "linux",
        "Command": "dmenu",
        "P-Summary": "dynam menu\ncreat menu text input item new line",
        "P-Tasks": "display menu output ls command display menu custom item separ new line n display dmenu bottom screen launch dmenu specif monitor let user choos multipl item save select one file",
        "Summary": "Dynamic menu.\nCreates a menu from a text input with each item on a new line.",
        "Task-Script": {
            "Display a menu of the output of the `ls` command": "{{ls}} | dmenu",
            "Display a menu with custom items separated by a new line (`\\n`)": "echo -e \"{{red}}\\n{{green}}\\n{{blue}}\" | dmenu",
            "Display dmenu at the bottom of the screen": "ls | dmenu -b",
            "Launch dmenu on a specific monitor": "ls | dmenu -m {{1}}",
            "Let the user choose between multiple items and save the selected one to a file": "echo -e \"{{red}}\\n{{green}}\\n{{blue}}\" | dmenu > {{color.txt}}"
        }
    },
    "linux_dmesg": {
        "Category": "linux",
        "Command": "dmesg",
        "P-Summary": "write kernel messag standard output",
        "P-Tasks": "color output avail kernel 3 5 0 newer show much physic memori avail system show kernel error messag show kernel messag show kernel messag 1 page time show kernel messag keep read new one similar tail -f avail kernel 3 5 0 newer show kernel messag human-read form avail kernel 3 5 0 newer show kernel messag timestamp avail kernel 3 5 0 newer",
        "Summary": "Write the kernel messages to standard output.",
        "Task-Script": {
            "Colorize output (available in kernels 3.5.0 and newer)": "dmesg -L",
            "Show how much physical memory is available on this system": "dmesg | grep -i memory",
            "Show kernel error messages": "dmesg --level err",
            "Show kernel messages": "dmesg",
            "Show kernel messages 1 page at a time": "dmesg | less",
            "Show kernel messages and keep reading new ones, similar to `tail -f` (available in kernels 3.5.0 and newer)": "dmesg -w",
            "Show kernel messages in human-readable form (available in kernels 3.5.0 and newer)": "dmesg -H",
            "Show kernel messages with a timestamp (available in kernels 3.5.0 and newer)": "dmesg -T"
        }
    },
    "linux_dmidecode": {
        "Category": "linux",
        "Command": "dmidecode",
        "P-Summary": "display dmi altern known smbio tabl content human-read format\nrequir root privileg",
        "P-Tasks": "show bio inform show cpu inform show dmi tabl content show memori inform show bio version show system serial number",
        "Summary": "Display the DMI (alternatively known as SMBIOS) table contents in a human-readable format.\nRequires root privileges.",
        "Task-Script": {
            "Show BIOS information": "sudo dmidecode -t bios",
            "Show CPU information": "sudo dmidecode -t processor",
            "Show all DMI table contents": "sudo dmidecode",
            "Show memory information": "sudo dmidecode -t memory",
            "Show the BIOS version": "sudo dmidecode -s bios-version",
            "Show the system's serial number": "sudo dmidecode -s system-serial-number"
        }
    },
    "linux_dnf": {
        "Category": "linux",
        "Command": "dnf",
        "P-Summary": "packag manag util rhel fedora cento replac yum",
        "P-Tasks": "display detail packag find packag provid given file instal new packag instal new packag assum ye question list instal packag remov packag search packag via keyword upgrad instal packag newest avail version",
        "Summary": "Package management utility for RHEL, Fedora, and CentOS (replaces yum).",
        "Task-Script": {
            "Display details about a package": "dnf info {{package}}",
            "Find which packages provide a given file": "dnf provides {{file}}",
            "Install a new package": "sudo dnf install {{package}}",
            "Install a new package and assume yes to all questions": "sudo dnf -y install {{package}}",
            "List installed packages": "dnf list --installed",
            "Remove a package": "sudo dnf remove {{package}}",
            "Search packages via keywords": "dnf search {{keywords}}",
            "Upgrade installed packages to the newest available versions": "sudo dnf upgrade"
        }
    },
    "linux_dnsrecon": {
        "Category": "linux",
        "Command": "dnsrecon",
        "P-Summary": "dn enumer tool",
        "P-Tasks": "scan domain save result sqlite databas scan domain perform dn cach snoop scan domain perform googl enumer save result csv file scan domain perform revers lookup ip rang spf record save result json file scan domain perform zone walk scan domain specifi nameserv perform zone transfer scan domain use dictionari subdomain hostnam bruteforc",
        "Summary": "DNS enumeration tool.",
        "Task-Script": {
            "Scan a domain and save the results to a SQLite database": "dnsrecon --domain {{example.com}} --db {{path/to/database.sqlite}}",
            "Scan a domain, performing DNS cache snooping": "dnsrecon --domain {{example.com}} --type snoop --name_server {{nameserver.example.com}} --dictionary {{path/to/dictionary.txt}}",
            "Scan a domain, performing a Google enumeration and saving the results to a CSV file": "dnsrecon --domain {{example.com}} -g --csv",
            "Scan a domain, performing a reverse lookup of IP ranges from the SPF record and saving the results to a JSON file": "dnsrecon --domain {{example.com}} -s --json",
            "Scan a domain, performing zone walking": "dnsrecon --domain {{example.com}} --type zonewalk",
            "Scan a domain, specifying the nameserver and performing a zone transfer": "dnsrecon --domain {{example.com}} --name_server {{nameserver.example.com}} --type axfr",
            "Scan a domain, using a dictionary of subdomains and hostnames for bruteforcing": "dnsrecon --domain {{example.com}} --dictionary {{path/to/dictionary.txt}} --type brt"
        }
    },
    "linux_do-release-upgrade": {
        "Category": "linux",
        "Command": "do-release-upgrade",
        "P-Summary": "ubuntu releas upgrad",
        "P-Tasks": "upgrad latest develop releas upgrad latest propos releas upgrad latest releas",
        "Summary": "The Ubuntu release upgrader.",
        "Task-Script": {
            "Upgrade to the latest development release": "sudo do-release-upgrade --devel-release",
            "Upgrade to the latest proposed release": "sudo do-release-upgrade --proposed",
            "Upgrade to the latest release": "sudo do-release-upgrade"
        }
    },
    "linux_dockerd": {
        "Category": "linux",
        "Command": "dockerd",
        "P-Summary": "persist process start manag docker contain",
        "P-Tasks": "run set specif log level run docker daemon run docker daemon config listen specif socket unix tcp run debug mode run specif daemon pid file",
        "Summary": "A persistent process to start and manage docker containers.",
        "Task-Script": {
            "Run and set a specific log level": "dockerd --log-level={{debug|info|warn|error|fatal}}",
            "Run docker daemon": "dockerd",
            "Run docker daemon and config it to listen to specific sockets(unix,tcp)": "dockerd --host unix://{{path/to/tmp.sock}} --host tcp://{{ip}}",
            "Run in debug mode": "dockerd --debug",
            "Run with specific daemon PID file": "dockerd --pidfile {{path/to/pid_file}}"
        }
    },
    "linux_dos2unix": {
        "Category": "linux",
        "Command": "dos2unix",
        "P-Summary": "chang dos-styl line end unix-styl\nreplac crlf cr",
        "P-Tasks": "chang line end file creat copi unix-styl line end",
        "Summary": "Change DOS-style line endings to Unix-style.\nReplaces CRLF with CR.",
        "Task-Script": {
            "Change the line endings of a file": "dos2unix {{filename}}",
            "Create a copy with Unix-style line endings": "dos2unix -n {{filename}} {{new_filename}}"
        }
    },
    "linux_dpkg": {
        "Category": "linux",
        "Command": "dpkg",
        "P-Summary": "debian packag manag",
        "P-Tasks": "find packag own file instal packag list packag content list content local packag file list instal packag remov packag",
        "Summary": "Debian package manager.",
        "Task-Script": {
            "Find out which package owns a file": "dpkg -S {{filename}}",
            "Install a package": "dpkg -i {{path/to/file.deb}}",
            "List a package's contents": "dpkg -L {{package_name}}",
            "List contents of a local package file": "dpkg -c {{path/to/file.deb}}",
            "List installed packages": "dpkg -l {{pattern}}",
            "Remove a package": "dpkg -r {{package_name}}"
        }
    },
    "linux_dpkg-deb": {
        "Category": "linux",
        "Command": "dpkg-deb",
        "P-Summary": "pack unpack provid inform debian archiv",
        "P-Tasks": "creat packag specifi directori display inform packag display packag name version one line extract packag content directori list packag content",
        "Summary": "Pack, unpack and provide information about Debian archives.",
        "Task-Script": {
            "Create a package from a specified directory": "dpkg-deb --build {{path/to/directory}}",
            "Display information about a package": "dpkg-deb --info {{path/to/file.deb}}",
            "Display the package's name and version on one line": "dpkg-deb --show {{path/to/file.deb}}",
            "Extract package's contents into a directory": "dpkg-deb --extract {{path/to/file.deb}} {{path/to/directory}}",
            "List the package's contents": "dpkg-deb --contents {{path/to/file.deb}}"
        }
    },
    "linux_dpkg-query": {
        "Category": "linux",
        "Command": "dpkg-query",
        "P-Summary": "tool show inform instal packag",
        "P-Tasks": "list file instal packag list instal packag list instal packag match pattern show inform packag",
        "Summary": "A tool that shows information about installed packages.",
        "Task-Script": {
            "List all files installed by a package": "dpkg-query -L {{package_name}}",
            "List all installed packages": "dpkg-query -l",
            "List installed packages matching a pattern": "dpkg-query -l '{{pattern}}'",
            "Show information about a package": "dpkg-query -s {{package_name}}"
        }
    },
    "linux_dstat": {
        "Category": "linux",
        "Command": "dstat",
        "P-Summary": "versatil tool gener system resourc statist",
        "P-Tasks": "display cpu memori statist display cpu disk net page system statist display batteri percentag remain batteri time display statist everi 5 second 4 updat display process use memori cpu list avail dstat plugin",
        "Summary": "Versatile tool for generating system resource statistics.",
        "Task-Script": {
            "Display CPU and memory statistics only": "dstat --cpu --mem",
            "Display CPU, disk, net, paging and system statistics": "dstat",
            "Display battery percentage and remaining battery time": "dstat --battery --battery-remain",
            "Display statistics every 5 seconds and 4 updates only": "dstat {{5}} {{4}}",
            "Display the process using the most memory and most CPU": "dstat --top-mem --top-cpu",
            "List all available dstat plugins": "dstat --list"
        }
    },
    "linux_dumpe2fs": {
        "Category": "linux",
        "Command": "dumpe2fs",
        "P-Summary": "print super block block group inform ext2 ext3 ext4 filesystem\nunmount partit run command use umount devic",
        "P-Tasks": "display ext2 ext3 ext4 filesystem inform display block reserv bad filesystem forc display filesystem inform even non-recognis featur flag display superblock inform block group descriptor detail inform print detail group inform block number hexadecim format",
        "Summary": "Print the super block and blocks group information for ext2/ext3/ext4 filesystems.\nUnmount the partition before running this command using `umount {{device}}`.",
        "Task-Script": {
            "Display ext2, ext3 and ext4 filesystem information": "dumpe2fs {{/dev/sdXN}}",
            "Display the blocks which are reserved as bad in the filesystem": "dumpe2fs -b {{/dev/sdXN}}",
            "Force display filesystem information even with non-recognisable feature flags": "dumpe2fs -f {{/dev/sdXN}}",
            "Only display the superblock information and not any of the block group descriptor detail information": "dumpe2fs -h {{/dev/sdXN}}",
            "Print the detailed group information block numbers in hexadecimal format": "dumpe2fs -x {{/dev/sdXN}}"
        }
    },
    "linux_dunstify": {
        "Category": "linux",
        "Command": "dunstify",
        "P-Summary": "notif tool extens notify-send featur base around dunst\nwork option work notify-send",
        "P-Tasks": "show notif given titl messag show notif specifi urgenc specifi messag id overwrit previou messag id see possibl option",
        "Summary": "A notification tool that is an extension of notify-send, but has more features based around dunst.\nWorks with all options that work for notify-send.",
        "Task-Script": {
            "Show a notification with a given title and message": "dunstify \"{{Title}}\" \"{{Message}}\"",
            "Show a notification with specified urgency": "dunstify \"{{Title}}\" \"{{Message}}\" -u {{low|normal|critical}}",
            "Specify a message ID (overwrites any previous messages with the same ID)": "dunstify \"{{Title}}\" \"{{Message}}\" -r {{123}}",
            "To see other possible options": "notify-send --help"
        }
    },
    "linux_duperemove": {
        "Category": "linux",
        "Command": "duperemove",
        "P-Summary": "find duplic filesystem extent option schedul dedupl\nextent small part file insid filesystem\nfilesystem one extent referenc multipl time part content file ident",
        "P-Tasks": "dedupl duplic extent btrf xf experiment filesystem limit thread hash dedup stage cpu thread duplic extent find stage search duplic extent directori show use hash file store extent hash less memori usag reus subsequ run",
        "Summary": "Finds duplicate filesystem extents and optionally schedule them for deduplication.\nAn extent is small part of a file inside the filesystem.\nOn some filesystems one extent can be referenced multiple times, when parts of the content of the files are identical.",
        "Task-Script": {
            "Deduplicate duplicate extents on a Btrfs or XFS (experimental) filesystem": "duperemove -r -d {{path/to/directory}}",
            "Limit I/O threads (for hashing and dedupe stage) and CPU threads (for duplicate extent finding stage)": "duperemove -r -d --hashfile={{path/to/hashfile}} --io-threads={{N}} --cpu-threads={{N}} {{path/to/directory}}",
            "Search for duplicate extents in a directory and show them": "duperemove -r {{path/to/directory}}",
            "Use a hash file to store extent hashes (less memory usage and can be reused on subsequent runs)": "duperemove -r -d --hashfile={{path/to/hashfile}} {{path/to/directory}}"
        }
    },
    "linux_e2freefrag": {
        "Category": "linux",
        "Command": "e2freefrag",
        "P-Summary": "print free space fragment inform ext2 ext3 ext4 filesystem",
        "P-Tasks": "check mani free block present contigu align free space specifi chunk size kilobyt print mani free chunk avail",
        "Summary": "Print the free space fragmentation information for ext2/ext3/ext4 filesystems.",
        "Task-Script": {
            "Check how many free blocks are present as contiguous and aligned free space": "e2freefrag {{/dev/sdXN}}",
            "Specify chunk size in kilobytes to print how many free chunks are available": "e2freefrag -c {{chunk_size_in_kb}} {{/dev/sdXN}}"
        }
    },
    "linux_e2fsck": {
        "Category": "linux",
        "Command": "e2fsck",
        "P-Summary": "check linux ext2 ext3 ext4 filesystem\nfilesystem unmount time command run",
        "P-Tasks": "check filesystem automat repair damag block check filesystem read mode check filesystem report damag block",
        "Summary": "Check a Linux ext2/ext3/ext4 filesystem. The filesystem should be unmounted at the time the command is run.",
        "Task-Script": {
            "Check filesystem and automatically repair any damaged blocks": "e2fsck -p {{/dev/sdXN}}",
            "Check filesystem in read only mode": "e2fsck -c {{/dev/sdXN}}",
            "Check filesystem, reporting any damaged blocks": "e2fsck {{/dev/sdXN}}"
        }
    },
    "linux_e2label": {
        "Category": "linux",
        "Command": "e2label",
        "P-Summary": "chang label ext2 ext3 ext4 filesystem",
        "P-Tasks": "chang volum label specif ext partit",
        "Summary": "Change the label on an ext2/ext3/ext4 filesystem.",
        "Task-Script": {
            "Change the volume label on a specific ext partition": "e2label {{/dev/sda1}} \"{{label_name}}\""
        }
    },
    "linux_e4defrag": {
        "Category": "linux",
        "Command": "e4defrag",
        "P-Summary": "defrag ext4 filesystem",
        "P-Tasks": "defrag filesystem print error fragment count file see fragment filesystem",
        "Summary": "Defragment an ext4 filesystem.",
        "Task-Script": {
            "Defragment the filesystem": "e4defrag {{/dev/sdXN}}",
            "Print errors and the fragmentation count before and after each file": "e4defrag -v {{/dev/sdXN}}",
            "See how fragmented a filesystem is": "e4defrag -c {{/dev/sdXN}}"
        }
    },
    "linux_ebuild": {
        "Category": "linux",
        "Command": "ebuild",
        "P-Summary": "low level interfac gentoo portag system",
        "P-Tasks": "clean temporari build directori build file compil extract sourc creat updat packag manifest extract sourc temporari build directori fetch sourc exist fetch unpack compil instal qmerg specifi ebuild file instal packag temporari instal directori instal temporari file live filesystem",
        "Summary": "A low level interface to the Gentoo Portage system.",
        "Task-Script": {
            "Clean the temporary build directories for the build file": "ebuild {{path/to/file.ebuild}} clean",
            "Compile the extracted sources": "ebuild {{path/to/file.ebuild}} compile",
            "Create or update the package manifest": "ebuild {{path/to/file.ebuild}} manifest",
            "Extract the sources to a temporary build directory": "ebuild {{path/to/file.ebuild}} unpack",
            "Fetch sources if they do not exist": "ebuild {{path/to/file.ebuild}} fetch",
            "Fetch, unpack, compile, install and qmerge the specified ebuild file": "ebuild {{path/to/file.ebuild}} merge",
            "Install the package to a temporary install directory": "ebuild {{path/to/file.ebuild}} install",
            "Install the temporary files to the live filesystem": "ebuild {{path/to/file.ebuild}} qmerge"
        }
    },
    "linux_edit": {
        "Category": "linux",
        "Command": "edit",
        "P-Summary": "alia run-mailcap action edit\norigin run-mailcap use process edit mime-typ file",
        "P-Tasks": "edit action use view file default mailcap explor run-mailcap",
        "Summary": "An alias to a `run-mailcap`'s action edit.\nOriginally `run-mailcap` is used to process/edit mime-type/file.",
        "Task-Script": {
            "Edit action can be used to view any file on default mailcap explorer": "edit {{filename}}",
            "With `run-mailcap`": "run-mailcap --action=edit {{filename}}"
        }
    },
    "linux_edquota": {
        "Category": "linux",
        "Command": "edquota",
        "P-Summary": "edit quota user group\ndefault oper filesystem quota\nquota inform store perman quota user quota group file root filesystem",
        "P-Tasks": "duplic quota user edit quota group edit quota specif user edit quota current user edit default grace period restrict oper given filesystem default edquota oper filesystem quota",
        "Summary": "Edit quotas for a user or group. By default it operates on all filesystems with quotas.\nQuota information is stored permanently in the `quota.user` and `quota.group` files in the root of the filesystem.",
        "Task-Script": {
            "Duplicate a quota to other users": "sudo edquota -p {{reference_user}} {{destination_user1}} {{destination_user2}}",
            "Edit quota for a group": "sudo edquota --group {{group}}",
            "Edit quota of a specific user": "sudo edquota --user {{username}}",
            "Edit quota of the current user": "edquota --user $(whoami)",
            "Edit the default grace period": "sudo edquota -t",
            "Restrict operations to a given filesystem (by default edquota operates on all filesystems with quotas)": "sudo edquota --file-system {{filesystem}}"
        }
    },
    "linux_efibootmgr": {
        "Category": "linux",
        "Command": "efibootmgr",
        "P-Summary": "manipul uefi boot manag bootopt",
        "P-Tasks": "add uefi shell v2 boot option chang current boot order delet boot option list current set bootnum list filepath",
        "Summary": "Manipulate the UEFI Boot Manager (the Bootoptions).",
        "Task-Script": {
            "Add UEFI Shell v2 as a boot option": "sudo efibootmgr -c -d {{/dev/sda1}} -l {{\\EFI\\tools\\Shell.efi}} -L \"{{UEFI Shell}}\"",
            "Change the current boot order": "sudo efibootmgr -o {{0002,0008,0001,0005}}",
            "Delete a boot option": "sudo efibootmgr -b {{0008}} --delete-bootnum",
            "List the current settings / bootnums": "efibootmgr",
            "List the filepaths": "efibootmgr -v"
        }
    },
    "linux_eix": {
        "Category": "linux",
        "Command": "eix",
        "P-Summary": "util search local gentoo packag\nupdat local packag cach use eix-upd",
        "P-Tasks": "exclud result search search packag licens search packag search instal packag search packag descript",
        "Summary": "Utilities for searching local Gentoo packages.\nUpdate local package cache using `eix-update`.",
        "Task-Script": {
            "Exclude results from search": "eix --not --license {{license}}",
            "Search by package license": "eix --license {{license}}",
            "Search for a package": "eix {{package_name}}",
            "Search for installed packages": "eix --installed {{package_name}}",
            "Search in package descriptions": "eix --description \"{{description}}\""
        }
    },
    "linux_eject": {
        "Category": "linux",
        "Command": "eject",
        "P-Summary": "eject cd floppi disk tape drive",
        "P-Tasks": "display default devic eject cd drive eject floppi drive eject specif devic default order cd-rom scsi floppi tape eject tape drive eject default devic toggl whether devic tray open close",
        "Summary": "Eject cds, floppy disks and tape drives.",
        "Task-Script": {
            "Display the default device": "eject -d",
            "Eject a cd drive": "eject -r {{/dev/cdrom}}",
            "Eject a floppy drive": "eject -f {{/mnt/floppy}}",
            "Eject a specific device (the default order is cd-rom, scsi, floppy and tape)": "eject {{/dev/cdrom}}",
            "Eject a tape drive": "eject -q {{/mnt/tape}}",
            "Eject the default device": "eject",
            "Toggle whether a device's tray is open or closed": "eject -T {{/dev/cdrom}}"
        }
    },
    "linux_emerge": {
        "Category": "linux",
        "Command": "emerge",
        "P-Summary": "gentoo linux packag manag util",
        "P-Tasks": "instal new packag confirm remov packag confirm remov orphan packag instal depend resum fail updat skip fail packag search packag databas keyword synchron packag updat packag includ depend",
        "Summary": "Gentoo Linux package manager utility.",
        "Task-Script": {
            "Install a new package, with confirmation": "emerge -av {{package_name}}",
            "Remove a package, with confirmation": "emerge -Cav {{package_name}}",
            "Remove orphaned packages (that were installed only as dependencies)": "emerge -avc",
            "Resume a failed updated, skipping the failing package": "emerge --resume --skipfirst",
            "Search the package database for a keyword": "emerge -S {{keyword}}",
            "Synchronize all packages": "emerge --sync",
            "Update all packages, including dependencies": "emerge -uDNav @world"
        }
    },
    "linux_enum4linux": {
        "Category": "linux",
        "Command": "enum4linux",
        "P-Summary": "tool enumer window samba inform remot system\nattempt offer similar function enum exe formerli avail www bindview com",
        "P-Tasks": "enumer use given login credenti get os inform list share list usernam given host tri enumer use method",
        "Summary": "Tool for enumerating Windows and Samba information from remote systems.\nIt attempts to offer similar functionality to enum.exe formerly available from www.bindview.com.",
        "Task-Script": {
            "Enumerate using given login credentials": "enum4liux -u {{user_name}} -p {{password}} {{remote_host}}",
            "Get OS information": "enum4liux -o {{remote_host}}",
            "List shares": "enum4liux -S {{remote_host}}",
            "List usernames from a given host": "enum4liux -U {{remote_host}}",
            "Try to enumerate using all methods": "enum4linux -a {{remote_host}}"
        }
    },
    "linux_equery": {
        "Category": "linux",
        "Command": "equery",
        "P-Summary": "view inform portag packag",
        "P-Tasks": "list file instal packag list instal packag list packag given packag depend list packag depend given packag search instal packag portag tree overlay",
        "Summary": "View information about Portage packages.",
        "Task-Script": {
            "List all files installed by a package": "equery files --tree {{package_name}}",
            "List all installed packages": "equery list '*'",
            "List all packages that a given package depends on": "equery depgraph {{package_name}}",
            "List all packages that depend on a given package": "equery depends {{package_name}}",
            "Search for installed packages in the Portage tree and in overlays": "equery list -po {{package_name}}"
        }
    },
    "linux_etckeeper": {
        "Category": "linux",
        "Command": "etckeeper",
        "P-Summary": "track system configur file git",
        "P-Tasks": "check uncommit chang return exit code commit chang etc destroy exist repo stop track chang run arbitrari git command set git repo perform variou setup task run etc",
        "Summary": "Track system configuration files in git.",
        "Task-Script": {
            "Check if there are uncommitted changes (only returns an exit code)": "sudo etckeeper unclean",
            "Commit all changes in /etc": "sudo etckeeper commit {{message}}",
            "Destroy existing repo and stop tracking changes": "sudo etckeeper uninit",
            "Run arbitrary git commands": "sudo etckeeper vcs {{status}}",
            "Set up a git repo and perform various setup tasks (run from /etc)": "sudo etckeeper init"
        }
    },
    "linux_ethtool": {
        "Category": "linux",
        "Command": "ethtool",
        "P-Summary": "display modifi network interfac control nic paramet",
        "P-Tasks": "set link speed duplex mode paramet autonegoti given interfac",
        "Summary": "Display and modify Network Interface Controller (NIC) parameters.",
        "Task-Script": {
            "Set the link speed, duplex mode, and parameter autonegotiation for a given interface": "ethtool -s {{eth0}} speed {{10|100|1000}} duplex {{half|full}} autoneg {{on|off}}"
        }
    },
    "linux_eval": {
        "Category": "linux",
        "Command": "eval",
        "P-Summary": "execut argument singl command current shell return result",
        "P-Tasks": "call echo foo argument set variabl current shell",
        "Summary": "Execute arguments as a single command in the current shell and return its result.",
        "Task-Script": {
            "Call `echo` with the \"foo\" argument": "eval \"{{echo foo}}\"",
            "Set a variable in the current shell": "eval \"{{foo=bar}}\""
        }
    },
    "linux_exif": {
        "Category": "linux",
        "Command": "exif",
        "P-Summary": "show chang exif inform jpeg file",
        "P-Tasks": "chang valu artist tag john smith save new jpg extract imag thumbnail file thumbnail jpg show tabl list known exif tag whether one exist imag show recogn exif inform imag show raw content model tag given imag",
        "Summary": "Show and change EXIF information in JPEG files.",
        "Task-Script": {
            "Change the value of the \"Artist\" tag to John Smith and save to new.jpg": "exif --output={{new.jpg}} --ifd={{0}} --tag=\"{{Artist}}\" --set-value=\"{{John Smith}}\" --no-fixup {{image.jpg}}",
            "Extract the image thumbnail into the file thumbnail.jpg": "exif --extract-thumbnail --output={{thumbnail.jpg}} {{image.jpg}}",
            "Show a table listing known EXIF tags and whether each one exists in an image": "exif --list-tags --no-fixup {{image.jpg}}",
            "Show all recognized EXIF information in an image": "exif {{path/to/image.jpg}}",
            "Show the raw contents of the \"Model\" tag in the given image": "exif --ifd={{0}} --tag={{Model}} --machine-readable {{image.jpg}}"
        }
    },
    "linux_expect": {
        "Category": "linux",
        "Command": "expect",
        "P-Summary": "script executor interact program requir user input",
        "P-Tasks": "enter interact repl use exit ctrl + exit execut specifi expect script execut expect script file",
        "Summary": "Script executor that interacts with other programs that require user input.",
        "Task-Script": {
            "Enter an interactive REPL (use `exit` or Ctrl + D to exit)": "expect -i",
            "Execute a specified expect script": "expect -c \"{{commands}}\"",
            "Execute an expect script from a file": "expect {{path/to/file}}"
        }
    },
    "linux_export": {
        "Category": "linux",
        "Command": "export",
        "P-Summary": "command mark shell variabl current environ export newli fork child process",
        "P-Tasks": "append someth path variabl mark shell function export remov environ variabl set new environ variabl",
        "Summary": "Command to mark shell variables in the current environment to be exported with any newly forked child processes.",
        "Task-Script": {
            "Append something to the PATH variable": "export PATH=$PATH:{{path/to/append}}",
            "Mark a shell function for export": "export -f {{FUNCTION_NAME}}",
            "Remove an environment variable": "export -n {{VARIABLE}}",
            "Set a new environment variable": "export {{VARIABLE}}={{value}}"
        }
    },
    "linux_extrace": {
        "Category": "linux",
        "Command": "extrace",
        "P-Summary": "trace exec call",
        "P-Tasks": "display user run process print current work directori process resolv full path execut run command trace descend command trace program execut occur system",
        "Summary": "Trace exec() calls.",
        "Task-Script": {
            "Display the user running each process": "sudo extrace -u",
            "Print the current working directory of each process": "sudo extrace -d",
            "Resolve the full path of each executable": "sudo extrace -l",
            "Run a command and only trace descendants of this command": "sudo extrace {{command}}",
            "Trace all program executions occurring on the system": "sudo extrace"
        }
    },
    "linux_extundelete": {
        "Category": "linux",
        "Command": "extundelete",
        "P-Summary": "recov delet file ext3 ext4 partit pars journal\nsee also date unix time inform umount unmount partit",
        "P-Tasks": "restor directori path rel root start path restor file path rel root start path restor delet file insid partit n devic x restor file delet januari 1st 2020 unix time",
        "Summary": "Recover deleted files from ext3 or ext4 partitions by parsing the journal.\nSee also `date` for Unix time information and `umount` for unmounting partitions.",
        "Task-Script": {
            "Restore a directory from a path relative to root (Do not start the path with `/`)": "extundelete {{/dev/sdXN}} --restore-directory {{path/to/directory}}",
            "Restore a file from a path relative to root (Do not start the path with `/`)": "extundelete {{/dev/sdXN}} --restore-file {{path/to/file}}",
            "Restore all deleted files inside partition N on device X": "sudo extundelete {{/dev/sdXN}} --restore-all",
            "Restore all files deleted after January 1st, 2020 (in Unix time)": "extundelete {{/dev/sdXN}} --restore-all --after {{1577840400}}"
        }
    },
    "linux_eyeD3": {
        "Category": "linux",
        "Command": "eyeD3",
        "P-Summary": "read manipul metadata mp3 file",
        "P-Tasks": "set album mp3 file directori set front cover art mp3 file set titl mp3 file view inform mp3 file",
        "Summary": "Read and manipulate metadata of MP3 files.",
        "Task-Script": {
            "Set the album of all the MP3 files in a directory": "eyeD3 --album \"{{Album Name}}\" {{*.mp3}}",
            "Set the front cover art for an MP3 file": "eyeD3 --add-image {{front_cover.jpeg}}:FRONT_COVER: {{filename.mp3}}",
            "Set the title of an MP3 file": "eyeD3 --title \"{{A Title}}\" {{filename.mp3}}",
            "View information about an MP3 file": "eyeD3 {{filename.mp3}}"
        }
    },
    "linux_f5fpc": {
        "Category": "linux",
        "Command": "f5fpc",
        "P-Summary": "proprietri commerci ssl vpn client big-ip edg",
        "P-Tasks": "open new vpn connect open new vpn connect specif host show current vpn statu shutdown vpn connect specifi usernam user prompt password",
        "Summary": "A proprietry commercial SSL VPN client by BIG-IP Edge.",
        "Task-Script": {
            "Open a new VPN connection": "sudo f5fpc --start",
            "Open a new VPN connection to a specific host": "sudo f5fpc --start --host {{host.example.com}}",
            "Show the current VPN status": "sudo f5fpc --info",
            "Shutdown the VPN connection": "sudo f5fpc --stop",
            "Specify a username (user will be prompted for a password)": "sudo f5fpc --start --host {{host.example.com}} --username {{user}}"
        }
    },
    "linux_fail2ban-client": {
        "Category": "linux",
        "Command": "fail2ban-client",
        "P-Summary": "configur control fail2ban server",
        "P-Tasks": "remov specifi ip jail servic ban list retriev current statu jail servic verifi fail2ban server aliv",
        "Summary": "Configure and control fail2ban server.",
        "Task-Script": {
            "Remove the specified IP from the jail service's ban list": "fail2ban-client set {{jail}} unbanip {{ip}}",
            "Retrieve current status of the jail service": "fail2ban-client status {{jail}}",
            "Verify fail2ban server is alive": "fail2ban-client ping"
        }
    },
    "linux_faketime": {
        "Category": "linux",
        "Command": "faketime",
        "P-Summary": "fake system time given command",
        "P-Tasks": "fake time even print result date open new bash shell use yesterday current date simul program would act next friday night",
        "Summary": "Fake the system time for a given command.",
        "Task-Script": {
            "Fake the time to this evening, before printing the result of `date`": "faketime '{{today 23:30}}' {{date}}",
            "Open a new `bash` shell, which uses yesterday as the current date": "faketime '{{yesterday}}' {{bash}}",
            "Simulate how any program would act next friday night": "faketime '{{next Friday 1 am}}' {{path/to/any/program}}"
        }
    },
    "linux_fallocate": {
        "Category": "linux",
        "Command": "fallocate",
        "P-Summary": "reserv dealloc disk space file\nutil alloc space without zero",
        "P-Tasks": "reserv file take 700mb disk space shrink 20mb space 100mb file shrink alreadi alloc file 200mb",
        "Summary": "Reserve or deallocate disk space to files.\nThe utility allocates space without zeroing.",
        "Task-Script": {
            "Reserve a file taking up 700MB of disk space": "fallocate --length {{700M}} {{path/to/file}}",
            "Shrink 20MB of space after 100MB in a file": "fallocate --collapse-range --offset {{100M}} --length {{20M}} {{path/to/file}}",
            "Shrink an already allocated file by 200MB": "fallocate --collapse-range --length {{200M}} {{path/to/file}}"
        }
    },
    "linux_fatlabel": {
        "Category": "linux",
        "Command": "fatlabel",
        "P-Summary": "set get label fat32 partit",
        "P-Tasks": "get label fat32 partit set label fat32 partit",
        "Summary": "Sets or gets the label of a FAT32 partition.",
        "Task-Script": {
            "Get the label of a FAT32 partition": "fatlabel {{/dev/sda1}}",
            "Set the label of a FAT32 partition": "fatlabel {{/dev/sdc3}} \"{{new_label}}\""
        }
    },
    "linux_fc": {
        "Category": "linux",
        "Command": "fc",
        "P-Summary": "open recent command edit",
        "P-Tasks": "list recent command histori open default system editor specifi editor open",
        "Summary": "Open the most recent command and edit it.",
        "Task-Script": {
            "List recent commands from history": "fc -l",
            "Open in the default system editor": "fc",
            "Specify an editor to open with": "fc -e {{'emacs'}}"
        }
    },
    "linux_fc-cache": {
        "Category": "linux",
        "Command": "fc-cache",
        "P-Summary": "scan font directori order build font cach file",
        "P-Tasks": "eras font cach file gener new font cach file forc rebuild font cach file without check cach up-to-d gener font cach file",
        "Summary": "Scan font directories in order to build font cache files.",
        "Task-Script": {
            "Erase font cache files, then generate new font cache files": "fc-cache -r",
            "Force a rebuild of all font cache files, without checking if cache is up-to-date": "fc-cache -f",
            "Generate font cache files": "fc-cache"
        }
    },
    "linux_fc-list": {
        "Category": "linux",
        "Command": "fc-list",
        "P-Summary": "list avail font instal system",
        "P-Tasks": "return list instal font system return list instal font given name return number instal font system",
        "Summary": "List available fonts installed on the system.",
        "Task-Script": {
            "Return a list of installed fonts in your system": "fc-list",
            "Return a list of installed fonts with given name": "fc-list | grep '{{DejaVu Serif}}'",
            "Return the number of installed fonts in your system": "fc-list | wc -l"
        }
    },
    "linux_fc-match": {
        "Category": "linux",
        "Command": "fc-match",
        "P-Summary": "match avail font",
        "P-Tasks": "return sort list best match font",
        "Summary": "Match available fonts.",
        "Task-Script": {
            "Return a sorted list of best matching fonts": "fc-match -s '{{DejaVu Serif}}'"
        }
    },
    "linux_fc-pattern": {
        "Category": "linux",
        "Command": "fc-pattern",
        "P-Summary": "show inform font match pattern",
        "P-Tasks": "display default inform font",
        "Summary": "Shows information about a font matching a pattern.",
        "Task-Script": {
            "Display default information about a font": "fc-pattern -d '{{DejaVu Serif}}'"
        }
    },
    "linux_fcrackzip": {
        "Category": "linux",
        "Command": "fcrackzip",
        "P-Summary": "zip archiv password crack util",
        "P-Tasks": "benchmark crack perform brute-forc password contain digit start password 12345 brute-forc password verbos mode length 3 charact contain lowercas charact brute-forc password contain lowercas special charact brute-forc password length 4 8 charact contain alphanumer charact order matter crack password use wordlist",
        "Summary": "ZIP archive password cracking utility.",
        "Task-Script": {
            "Benchmark cracking performance": "fcrackzip --benchmark",
            "Brute-force a password containing only digits, starting from the password `12345`": "fcrackzip --brute-force --length 5 --charset 1 --init-password 12345 {{archive}}",
            "Brute-force a password in verbose mode with a length of 3 characters that only contains lowercase characters, `$` and `%`": "fcrackzip -v --brute-force --length 3 --charset a:$% {{archive}}",
            "Brute-force a password that contains only lowercase and special characters": "fcrackzip --brute-force --length 4 --charset a! {{archive}}",
            "Brute-force a password with a length of 4 to 8 characters, and contains only alphanumeric characters (order matters)": "fcrackzip --brute-force --length 4-8 --charset aA1 {{archive}}",
            "Crack a password using a wordlist": "fcrackzip --use-unzip --dictionary --init-password {{wordlist}} {{archive}}"
        }
    },
    "linux_fdisk": {
        "Category": "linux",
        "Command": "fdisk",
        "P-Summary": "program manag partit tabl partit hard disk",
        "P-Tasks": "list partit start partit manipul",
        "Summary": "A program for managing partition tables and partitions on a hard disk.",
        "Task-Script": {
            "List partitions": "fdisk -l",
            "Start the partition manipulator": "fdisk {{/dev/sda}}"
        }
    },
    "linux_feedreader": {
        "Category": "linux",
        "Command": "feedreader",
        "P-Summary": "gui desktop rss client",
        "P-Tasks": "add url feed follow download imag specif articl grab specif articl use url play media url print count unread articl",
        "Summary": "A GUI desktop RSS client.",
        "Task-Script": {
            "Add a URL for a feed to follow": "feedreader --addFeed={{feed_url}}",
            "Download all images from a specific article": "feedreader --url={{feed_url}} --grabImages={{article_path}}",
            "Grab a specific article using its URL": "feedreader --grabArticle={{article_url}}",
            "Play media from a URL": "feedreader --playMedia={{article_url}}",
            "Print the count of unread articles": "feedreader --unreadCount"
        }
    },
    "linux_feh": {
        "Category": "linux",
        "Command": "feh",
        "P-Summary": "lightweight imag view util",
        "P-Tasks": "creat montag imag within directori\noutput new imag exit last imag set slideshow cycl delay set wallpap center fill maxim scale tile view imag local use url view imag recurs view imag without window border",
        "Summary": "Lightweight image viewing utility.",
        "Task-Script": {
            "Create a montage of all images within a directory. Outputs as a new image": "feh --montage --thumb-height {{150}} --thumb-width {{150}} --index-info \"{{%nn%wx%h}}\" --output {{path/to/montage_image.png}}",
            "Exit after the last image": "feh --cycle-once {{path/to/images}}",
            "Set the slideshow cycle delay": "feh --slideshow-delay {{seconds}} {{path/to/images}}",
            "Set your wallpaper (centered, filled, maximized, scaled or tiled)": "feh --bg-{{center|fill|max|scale|tile}} {{path/to/image}}",
            "View images locally or using a URL": "feh {{path/to/images}}",
            "View images recursively": "feh --recursive {{path/to/images}}",
            "View images without window borders": "feh --borderless {{path/to/images}}"
        }
    },
    "linux_file": {
        "Category": "linux",
        "Command": "file",
        "P-Summary": "determin file type",
        "P-Tasks": "allow file work special devic file determin mime encod type file stop first file type match keep go end file give descript type specifi file\nwork fine file file extens look insid zip file determin file type insid",
        "Summary": "Determine file type.",
        "Task-Script": {
            "Allow file to work with special or device files": "file -s {{filename}}",
            "Determine the mime encoding type of a file": "file -i {{filename}}",
            "Don't stop at first file type match; keep going until the end of the file": "file -k {{filename}}",
            "Give a description of the type of the specified file. Works fine for files with no file extension": "file {{filename}}",
            "Look inside a zipped file and determine the file type(s) inside": "file -z {{foo.zip}}"
        }
    },
    "linux_filefrag": {
        "Category": "linux",
        "Command": "filefrag",
        "P-Summary": "report badli fragment particular file might",
        "P-Tasks": "display report specif file display report space-separ list file display report use 1024 byte blocksiz display report verbos inform display map extend attribut sync file request map",
        "Summary": "Report how badly fragmented a particular file might be.",
        "Task-Script": {
            "Display a report for a specific file": "filefrag {{path/to/file}}",
            "Display a report for space-separated list of files": "filefrag {{path/to/file1}} {{path/to/file2}}",
            "Display a report using a 1024 byte blocksize": "filefrag -b {{path/to/file}}",
            "Display a report with verbose information": "filefrag -v {{path/to/files}}",
            "Display mapping of extended attributes": "filefrag -x {{path/to/files}}",
            "Sync the file before requesting the mapping": "filefrag -s {{path/to/files}}"
        }
    },
    "linux_findfs": {
        "Category": "linux",
        "Command": "findfs",
        "P-Summary": "find filesystem label uuid",
        "P-Tasks": "search block devic filesystem label search filesystem uuid search partit uuid gpt partit tabl search partit label gpt mac partit tabl",
        "Summary": "Finds a filesystem by label or UUID.",
        "Task-Script": {
            "Search block devices by filesystem label": "findfs LABEL={{label}}",
            "Search by filesystem UUID": "findfs UUID={{uuid}}",
            "Search by partition UUID (GPT partition table only)": "findfs PARTUUID={{partition_uuid}}",
            "Search by partition label (GPT or MAC partition table)": "findfs PARTLABEL={{partition_label}}"
        }
    },
    "linux_findmnt": {
        "Category": "linux",
        "Command": "findmnt",
        "P-Summary": "find filesystem",
        "P-Tasks": "find filesystem specif type find filesystem specif label list mount filesystem search devic search mountpoint",
        "Summary": "Find your filesystem.",
        "Task-Script": {
            "Find filesystems in specific type": "findmnt -t {{ext4}}",
            "Find filesystems with specific label": "findmnt LABEL={{BigStorage}}",
            "List all mounted filesystems": "findmnt",
            "Search for a device": "findmnt {{/dev/sdb1}}",
            "Search for a mountpoint": "findmnt {{/}}"
        }
    },
    "linux_firejail": {
        "Category": "linux",
        "Command": "firejail",
        "P-Summary": "secur sandbox process contain use built-in linux capabl",
        "P-Tasks": "integr firejail desktop environ list network activ run sandbox list run sandbox open restrict mozilla firefox shutdown run sandbox start restrict apach server known interfac address",
        "Summary": "Securely sandboxes processes to containers using built-in Linux capabilities.",
        "Task-Script": {
            "Integrate firejail with your desktop environment": "sudo firecfg",
            "List network activity from running sandboxes": "firejail --netstats",
            "List running sandboxes": "firejail --list",
            "Open a restricted Mozilla Firefox": "firejail {{firefox}}",
            "Shutdown a running sandbox": "firejail --shutdown={{7777}}",
            "Start a restricted Apache server on a known interface and address": "firejail --net={{eth0}} --ip={{192.168.1.244}} {{/etc/init.d/apache2}} {{start}}"
        }
    },
    "linux_firewall-cmd": {
        "Category": "linux",
        "Command": "firewall-cmd",
        "P-Summary": "firewalld command line client",
        "P-Tasks": "perman close port servic specifi zone like port 80 public zone perman move interfac block zone effect block commun perman open port servic specifi zone like port 443 public zone perman open two arbitrari port specifi zone reload firewalld forc rule chang take effect view avail firewal zone view rule current appli",
        "Summary": "The firewalld command line client.",
        "Task-Script": {
            "Permanently close the port for a service in the specified zone (like port `80` when in the `public` zone)": "firewall-cmd --permanent --zone={{public}} --remove-service={{http}}",
            "Permanently move the interface into the block zone, effectively blocking all communication": "firewall-cmd --permanent --zone={{block}} --change-interface={{enp1s0}}",
            "Permanently open the port for a service in the specified zone (like port `443` when in the `public` zone)": "firewall-cmd --permanent --zone={{public}} --add-service={{https}}",
            "Permanently open two arbitrary ports in the specified zone": "firewall-cmd --permanent --zone={{public}} --add-port={{25565/tcp}} --add-port={{19132/udp}}",
            "Reload firewalld to force rule changes to take effect": "firewall-cmd --reload",
            "View the available firewall zones": "firewall-cmd --get-active-zones",
            "View the rules which are currently applied": "firewall-cmd --list-all"
        }
    },
    "linux_flameshot": {
        "Category": "linux",
        "Command": "flameshot",
        "P-Summary": "screenshot util gui interfac\nsupport basic imag edit text shape color imgur",
        "P-Tasks": "delay screenshot n millisecond output clipboard launch flameshot gui mode set save path write screenshot take full screen screenshot take screenshot click drag",
        "Summary": "Screenshot utility with a gui interface.\nSupports basic image editing, such as text, shapes, colors, and imgur.",
        "Task-Script": {
            "Delay the screenshot for N milliseconds and output to clipboard": "flameshot full --delay {{2000}} --clipboard",
            "Launch flameshot in gui mode": "flameshot launcher",
            "Set the save path to write screenshots to": "flameshot full --path {{path/to/directory}}",
            "Take a full screen screenshot": "flameshot full",
            "Take a screenshot by clicking and dragging": "flameshot gui"
        }
    },
    "linux_flash": {
        "Category": "linux",
        "Command": "flash",
        "P-Summary": "flash card termin",
        "P-Tasks": "chang preview default bat cat display list avail command display inform flashcard system display program version open menu avail flashcard deck select",
        "Summary": "Flash cards in the terminal.",
        "Task-Script": {
            "Change the previewer from default `bat` to `cat`": "flash -p {{cat}}",
            "Display a list of available commands": "flash -h",
            "Display information about the flashcard system": "flash -i",
            "Display the program version": "flash -v",
            "Open a menu of available flashcard decks for selection": "flash"
        }
    },
    "linux_flatpak": {
        "Category": "linux",
        "Command": "flatpak",
        "P-Summary": "build instal run flatpak applic runtim",
        "P-Tasks": "add remot sourc instal applic remot sourc list configur remot sourc list instal applic runtim run instal applic updat instal applic runtim",
        "Summary": "Build, install and run flatpak applications and runtimes.",
        "Task-Script": {
            "Add a remote source": "flatpak remote-add --if-not-exists {{remote_name}} {{remote_url}}",
            "Install an application from a remote source": "flatpak install {{remote}} {{name}}",
            "List all configured remote sources": "flatpak remote-list",
            "List all installed applications and runtimes": "flatpak list",
            "Run an installed application": "flatpak run {{name}}",
            "Update all installed applications and runtimes": "flatpak update"
        }
    },
    "linux_foreman": {
        "Category": "linux",
        "Command": "foreman",
        "P-Summary": "manag procfile-bas applic",
        "P-Tasks": "run one-off command process environ start specif applic start process except one name worker start applic specifi procfil start applic procfil current directori valid procfil format",
        "Summary": "Manage Procfile-based applications.",
        "Task-Script": {
            "Run one-off commands with the process's environment": "foreman run {{command}}",
            "Start a specific application": "foreman start {{process}}",
            "Start all processes except the one named \"worker\"": "foreman start -m all=1,{{worker}}=0",
            "Start an application with a specified Procfile": "foreman start -f {{Procfile}}",
            "Start an application with the Procfile in the current directory": "foreman start",
            "Validate Procfile format": "foreman check"
        }
    },
    "linux_free": {
        "Category": "linux",
        "Command": "free",
        "P-Summary": "display amount free use memori system",
        "P-Tasks": "display memori byte kb mb gb display memori human readabl unit display system memori refresh output everi 2 second",
        "Summary": "Display amount of free and used memory in the system.",
        "Task-Script": {
            "Display memory in Bytes/KB/MB/GB": "free -{{b|k|m|g}}",
            "Display memory in human readable units": "free -h",
            "Display system memory": "free",
            "Refresh the output every 2 seconds": "free -s {{2}}"
        }
    },
    "linux_fsck": {
        "Category": "linux",
        "Command": "fsck",
        "P-Summary": "check integr filesystem repair\nfilesystem unmount time command run",
        "P-Tasks": "check filesystem dev sda report damag block check filesystem dev sda report damag block automat repair check filesystem dev sda report damag block interact let user choos repair one",
        "Summary": "Check the integrity of a filesystem or repair it. The filesystem should be unmounted at the time the command is run.",
        "Task-Script": {
            "Check filesystem /dev/sda, reporting any damaged blocks": "fsck {{/dev/sda}}",
            "Check filesystem /dev/sda, reporting any damaged blocks and automatically repairing them": "fsck -a {{/dev/sda}}",
            "Check filesystem /dev/sda, reporting any damaged blocks and interactively letting the user choose to repair each one": "fsck -r {{/dev/sda}}"
        }
    },
    "linux_fstrim": {
        "Category": "linux",
        "Command": "fstrim",
        "P-Summary": "discard unus block mount filesystem\nsupport flash memori devic ssd microsd card",
        "P-Tasks": "display statist trim trim unus block specifi partit trim unus block mount partit support",
        "Summary": "Discard unused blocks on a mounted filesystem.\nOnly supported by flash memory devices such as SSDs and microSD cards.",
        "Task-Script": {
            "Display statistics after trimming": "sudo fstrim --verbose {{/}}",
            "Trim unused blocks on a specified partition": "sudo fstrim {{/}}",
            "Trim unused blocks on all mounted partitions that support it": "sudo fstrim --all"
        }
    },
    "linux_fuser": {
        "Category": "linux",
        "Command": "fuser",
        "P-Summary": "display process id current use file socket",
        "P-Tasks": "find process access file directori find process access filesystem contain specif file directori identifi process use tcp socket kill process access file directori send sigkil signal show field user pid access command",
        "Summary": "Display process IDs currently using files or sockets.",
        "Task-Script": {
            "Find which processes are accessing a file or directory": "fuser {{path/to/file_or_directory}}",
            "Find which processes are accessing the filesystem containing a specific file or directory": "fuser --mount {{path/to/file_or_directory}}",
            "Identify processes using a TCP socket": "fuser --namespace tcp {{port}}",
            "Kill all processes accessing a file or directory (sends the `SIGKILL` signal)": "fuser --kill {{path/to/file_or_directory}}",
            "Show more fields (`USER`, `PID`, `ACCESS` and `COMMAND`)": "fuser --verbose {{path/to/file_or_directory}}"
        }
    },
    "linux_gcov": {
        "Category": "linux",
        "Command": "gcov",
        "P-Summary": "code coverag analysi profil tool discov untest part program\nalso display copi sourc code annot execut frequenc code segment",
        "P-Tasks": "creat gcov output file gener coverag report name file cpp gcov write branch frequenc number branch taken rather percentag write branch frequenc output file print summari inform stdout percentag write file level well function level summari write individu execut count everi basic block",
        "Summary": "Code coverage analysis and profiling tool that discovers untested parts of a program.\nAlso displays a copy of source code annotated with execution frequencies of code segments.",
        "Task-Script": {
            "Do not create a `gcov` output file": "gcov --no-output {{path/to/file.cpp}}",
            "Generate a coverage report named `file.cpp.gcov`": "gcov {{path/to/file.cpp}}",
            "Write branch frequencies as the number of branches taken, rather than the percentage": "gcov --branch-counts {{path/to/file.cpp}}",
            "Write branch frequencies to the output file and print summary information to `stdout` as a percentage": "gcov --branch-probabilities {{path/to/file.cpp}}",
            "Write file level as well as function level summaries": "gcov --function-summaries {{path/to/file.cpp}}",
            "Write individual execution counts for every basic block": "gcov --all-blocks {{path/to/file.cpp}}"
        }
    },
    "linux_gedit": {
        "Category": "linux",
        "Command": "gedit",
        "P-Summary": "text editor gnome desktop project",
        "P-Tasks": "display list support encod open text file open text file specif encod open multipl text file",
        "Summary": "Text editor of the GNOME Desktop project.",
        "Task-Script": {
            "Display a list of supported encodings": "gedit --list-encodings",
            "Open a text file": "gedit {{path/to/file}}",
            "Open a text file with a specific encoding": "gedit --encoding={{UTF-8}} {{path/to/file}}",
            "Open multiple text files": "gedit {{file1 file2 ...}}"
        }
    },
    "linux_genie": {
        "Category": "linux",
        "Command": "genie",
        "P-Summary": "set use bottl namespac run systemd wsl window subsystem linux\nrun window rather already-run distribut preced wsl",
        "P-Tasks": "initi bottl run start run login shell insid bottl run specifi command insid bottl",
        "Summary": "Set up and use a \"bottle\" namespace to run systemd under WSL (Windows Subsystem for Linux).\nTo run these from Windows rather than an already-running distribution, precede them with `wsl`.",
        "Task-Script": {
            "Initialize the bottle (run once, at start)": "genie -i",
            "Run a login shell inside the bottle": "genie -s",
            "Run a specified command inside the bottle": "genie -c {{command}}"
        }
    },
    "linux_genkernel": {
        "Category": "linux",
        "Command": "genkernel",
        "P-Summary": "gentoo linux util compil instal kernel",
        "P-Tasks": "appli chang kernel configur compil instal automat compil instal gener kernel build instal bzimag initramf kernel ramdisk gener kernel custom name use kernel sourc outsid default directori usr src linux",
        "Summary": "Gentoo Linux utility to compile and install kernels.",
        "Task-Script": {
            "Apply changes to the kernel configuration before compiling and installing": "sudo genkernel --menuconfig all",
            "Automatically compile and install a generic kernel": "sudo genkernel all",
            "Build and install the bzImage|initramfs|kernel|ramdisk only": "sudo genkernel {{bzImage|initramfs|kernel|ramdisk}}",
            "Generate a kernel with a custom name": "sudo genkernel --kernname={{custom_name}} all",
            "Use a kernel source outside of the default directory /usr/src/linux": "sudo genkernel --kerneldir={{path/to/directory}} all"
        }
    },
    "linux_getent": {
        "Category": "linux",
        "Command": "getent",
        "P-Summary": "get entri name servic switch librari",
        "P-Tasks": "find usernam uid get list group get list servic perform revers dn lookup see member group",
        "Summary": "Get entries from Name Service Switch libraries.",
        "Task-Script": {
            "Find a username by UID": "getent passwd 1000",
            "Get list of all groups": "getent group",
            "Get list of all services": "getent services",
            "Perform a reverse DNS lookup": "getent hosts {{host}}",
            "See the members of a group": "getent group {{group_name}}"
        }
    },
    "linux_getfacl": {
        "Category": "linux",
        "Command": "getfacl",
        "P-Summary": "get file access control list",
        "P-Tasks": "display file access control list display file access control list numer user group id display file access control list tabular output format",
        "Summary": "Get file access control lists.",
        "Task-Script": {
            "Display the file access control list": "getfacl {{path/to/file_or_directory}}",
            "Display the file access control list with numeric user and group IDs": "getfacl -n {{path/to/file_or_directory}}",
            "Display the file access control list with tabular output format": "getfacl -t {{path/to/file_or_directory}}"
        }
    },
    "linux_gnome-extensions": {
        "Category": "linux",
        "Command": "gnome-extensions",
        "P-Summary": "manag gnome extens termin",
        "P-Tasks": "disabl specif extens display help subcommand like list display inform specif extens display version enabl specif extens list instal extens uninstal specif extens",
        "Summary": "Manage gnome extensions from the terminal.",
        "Task-Script": {
            "Disable a specific extension": "gnome-extension disable \"{{extension_id}}\"",
            "Display help for a subcommand (like `list`)": "gnome-extensions help {{subcommand}}",
            "Display information about a specific extension": "gnome-extensions info \"{{extension_id}}\"",
            "Display the version": "gnome-extensions version",
            "Enable a specific extension": "gnome-extensions enable \"{{extension_id}}\"",
            "List all the installed extensions": "gnome-extensions list",
            "Uninstall a specific extension": "gnome-extension unistall \"{{extension_id}}\""
        }
    },
    "linux_gnome-terminal": {
        "Category": "linux",
        "Command": "gnome-terminal",
        "P-Summary": "gnome termin emul",
        "P-Tasks": "open new gnome termin window open new tab last open window instead run specif command new termin window set titl new tab",
        "Summary": "The GNOME Terminal emulator.",
        "Task-Script": {
            "Open a new GNOME terminal window": "gnome-terminal",
            "Open a new tab in the last opened window instead": "gnome-terminal --tab",
            "Run a specific command in a new terminal window": "gnome-terminal -- {{command}}",
            "Set the title of the new tab": "gnome-terminal --tab --title \"{{title}}\""
        }
    },
    "linux_google-chrome": {
        "Category": "linux",
        "Command": "google-chrome",
        "P-Summary": "web browser googl",
        "P-Tasks": "run custom profil directori run without cor valid use test api",
        "Summary": "The web browser from Google.",
        "Task-Script": {
            "Run with a custom profile directory": "google-chrome --user-data-dir={{path/to/directory}}",
            "Run without CORS validation, useful to test an API": "google-chrome --user-data-dir={{path/to/directory}} --disable-web-security"
        }
    },
    "linux_gpasswd": {
        "Category": "linux",
        "Command": "gpasswd",
        "P-Summary": "administ etc group etc gshadow",
        "P-Tasks": "add user name group creat password name group defin group administr remov user name group set list group member",
        "Summary": "Administer \"/etc/group\" and \"/etc/gshadow\".",
        "Task-Script": {
            "Add a user to the named group": "gpasswd -a {{user}} {{group}}",
            "Create a password for the named group": "gpasswd {{group}}",
            "Define group administrators": "sudo gpasswd -A {{user1,user2}} {{group}}",
            "Remove a user from the named group": "gpasswd -d {{user}} {{group}}",
            "Set the list of group members": "sudo gpasswd -M {{user1,user2}} {{group}}"
        }
    },
    "linux_groupadd": {
        "Category": "linux",
        "Command": "groupadd",
        "P-Summary": "add user group system",
        "P-Tasks": "creat new linux group creat new group specif groupid",
        "Summary": "Add user groups to the system.",
        "Task-Script": {
            "Create a new Linux group": "groupadd {{group_name}}",
            "Create new group with a specific groupid": "groupadd {{group_name}} -g {{group_id}}"
        }
    },
    "linux_groupdel": {
        "Category": "linux",
        "Command": "groupdel",
        "P-Summary": "delet exist user group system",
        "P-Tasks": "delet exist group",
        "Summary": "Delete existing user groups from the system.",
        "Task-Script": {
            "Delete an existing group": "groupdel {{group_name}}"
        }
    },
    "linux_groupmod": {
        "Category": "linux",
        "Command": "groupmod",
        "P-Summary": "modifi exist user group system",
        "P-Tasks": "chang group id chang group name",
        "Summary": "Modify existing user groups in the system.",
        "Task-Script": {
            "Change the group id": "groupmod -g {{new_group_id}} {{old_group_name}}",
            "Change the group name": "groupmod -n {{new_group_name}} {{old_group_name}}"
        }
    },
    "linux_gs": {
        "Category": "linux",
        "Command": "gs",
        "P-Summary": "ghostscript pdf postscript interpret",
        "P-Tasks": "convert pdf file page 1 3 imag 150 dpi resolut convert postscript file pdf file extract page pdf file merg pdf file reduc pdf file size 150 dpi imag read ebook devic view file",
        "Summary": "GhostScript is a PDF and PostScript interpreter.",
        "Task-Script": {
            "Convert PDF file (pages 1 through 3) to an image with 150 dpi resolution": "gs -dQUIET -dBATCH -dNOPAUSE -sDEVICE=jpeg -r150 -dFirstPage={{1}} -dLastPage={{3}} -sOutputFile={{output_%d.jpg}} {{input.pdf}}",
            "Convert from PostScript file to PDF file": "gs -dQUIET -dBATCH -dNOPAUSE -sDEVICE=pdfwrite -sOutputFile={{output.pdf}} {{input.ps}}",
            "Extract pages from a PDF file": "gs -dQUIET -dBATCH -dNOPAUSE -sDEVICE=pdfwrite -sOutputFile={{output.pdf}} {{input.pdf}}",
            "Merge PDF files": "gs -dQUIET -dBATCH -dNOPAUSE -sDEVICE=pdfwrite -sOutputFile={{output.pdf}} {{input1.pdf}} {{input2.pdf}}",
            "Reduce PDF file size to 150 dpi images for reading on a ebook device": "gs -dNOPAUSE -dQUIET -dBATCH -sDEVICE=pdfwrite -dPDFSETTINGS=/ebook -sOutputFile={{output.pdf}} {{input.pdf}}",
            "To view a file": "gs -dQUIET -dBATCH {{file.pdf}}"
        }
    },
    "linux_guake": {
        "Category": "linux",
        "Command": "guake",
        "P-Summary": "drop-down termin gnome",
        "P-Tasks": "close termin go previou tab open new tab search select text browser toggl guak visibl toggl fullscreen mode",
        "Summary": "A drop-down terminal for GNOME.",
        "Task-Script": {
            "Close the terminal": "Super+X",
            "Go to the previous tab": "Ctrl+PageUp",
            "Open a new tab": "Ctrl+Shift+T",
            "Search the selected text in the browser": "Shift+Ctrl+L",
            "Toggle Guake visiblity": "F12",
            "Toggle fullscreen mode": "F11"
        }
    },
    "linux_guix package": {
        "Category": "linux",
        "Command": "guix package",
        "P-Summary": "instal upgrad remov guix packag rollback previou configur",
        "P-Tasks": "instal new packag list gener list instal packag remov packag roll back previou gener search packag databas regular express",
        "Summary": "Install, upgrade and remove Guix packages, or rollback to previous configurations.",
        "Task-Script": {
            "Install a new package": "guix package -i {{package_name}}",
            "List generations": "guix package -l",
            "List installed packages": "guix package -I",
            "Remove a package": "guix package -r {{package_name}}",
            "Roll back to the previous generation": "guix package --roll-back",
            "Search the package database for a regular expression": "guix package -s \"{{search_pattern}}\""
        }
    },
    "linux_halt": {
        "Category": "linux",
        "Command": "halt",
        "P-Summary": "halt power-off reboot machin",
        "P-Tasks": "halt machin power machin reboot machin",
        "Summary": "Halt, power-off or reboot the machine.",
        "Task-Script": {
            "Halt the machine": "halt",
            "Power the machine off": "halt --poweroff",
            "Reboot the machine": "halt --reboot"
        }
    },
    "linux_hardinfo": {
        "Category": "linux",
        "Command": "hardinfo",
        "P-Summary": "show hardwar inform gui window",
        "P-Tasks": "print report standard output save report html file start hardinfo",
        "Summary": "Show hardware information in GUI window.",
        "Task-Script": {
            "Print report to standard output": "hardinfo -r",
            "Save report to HTML file": "hardinfo -r -f html > hardinfo.html",
            "Start hardinfo": "hardinfo"
        }
    },
    "linux_hdparm": {
        "Category": "linux",
        "Command": "hdparm",
        "P-Summary": "get set sata ide hard drive paramet",
        "P-Tasks": "display devic current power mode statu forc drive immedi enter standbi mode usual caus drive spin get advanc power manag level put drive idl low-pow mode also set standbi timeout request identif info given devic set advanc power manag valu valu 1-127 permit spin-down valu 128-254",
        "Summary": "Get and set SATA and IDE hard drive parameters.",
        "Task-Script": {
            "Display the device's current power mode status": "sudo hdparm -C /dev/{{device}}",
            "Force a drive to immediately enter standby mode (usually causes a drive to spin down)": "sudo hdparm -y /dev/{{device}}",
            "Get the Advanced Power Management level": "sudo hdparm -B /dev/{{device}}",
            "Put the drive into idle (low-power) mode, also setting its standby timeout": "sudo hdparm -S {{standby_timeout}} {{device}}",
            "Request the identification info of a given device": "sudo hdparm -I /dev/{{device}}",
            "Set the Advanced Power Management value (values 1-127 permit spin-down, and values 128-254 do not)": "sudo hdparm -B {{1}} /dev/{{device}}"
        }
    },
    "linux_hello": {
        "Category": "linux",
        "Command": "hello",
        "P-Summary": "print hello world\nhello world customiz text",
        "P-Tasks": "print hello world\nprint hello world tradit type print text messag",
        "Summary": "Print \"Hello, world!\", \"hello, world\" or a customizable text.",
        "Task-Script": {
            "Print \"Hello, world!\"": "hello",
            "Print \"hello, world\", the traditional type": "hello --traditional",
            "Print a text message": "hello --greeting=\"{{greeting_text}}\""
        }
    },
    "linux_hexdump": {
        "Category": "linux",
        "Command": "hexdump",
        "P-Summary": "ascii decim hexadecim octal dump",
        "P-Tasks": "display hexadecim represent file interpret n byte input display input offset hexadecim ascii represent two column print hexadecim represent file",
        "Summary": "An ASCII, decimal, hexadecimal, octal dump.",
        "Task-Script": {
            "Display the hexadecimal representation of a file, but interpret only n bytes of the input": "hexdump -C -n{{number_of_bytes}} {{file}}",
            "Display the input offset in hexadecimal and its ASCII representation in two columns": "hexdump -C {{file}}",
            "Print the hexadecimal representation of a file": "hexdump {{file}}"
        }
    },
    "linux_hlint": {
        "Category": "linux",
        "Command": "hlint",
        "P-Summary": "tool suggest improv haskel code",
        "P-Tasks": "automat appli suggest check haskel file gener report display addit option display suggest given file gener set file ignor outstand hint",
        "Summary": "Tool for suggesting improvements to Haskell code.",
        "Task-Script": {
            "Automatically apply most suggestions": "hlint {{path/to/file}} --refactor",
            "Check all Haskell files and generate a report": "hlint {{path/to/directory}} --report",
            "Display additional options": "hlint {{path/to/file}} --refactor-options",
            "Display suggestions for a given file": "hlint {{path/to/file}} options",
            "Generate a settings file ignoring all outstanding hints": "hlint {{path/to/file}} --default > {{.hlint.yaml}}"
        }
    },
    "linux_hostname": {
        "Category": "linux",
        "Command": "hostname",
        "P-Summary": "show set system host name",
        "P-Tasks": "set current host name show network address host show current host name show fqdn fulli qualifi domain name show network address host name",
        "Summary": "Show or set the system's host name.",
        "Task-Script": {
            "Set current host name": "hostname {{new_hostname}}",
            "Show all network addresses of the host": "hostname -I",
            "Show current host name": "hostname",
            "Show the FQDN (Fully Qualified Domain Name)": "hostname --fqdn",
            "Show the network address of the host name": "hostname -i"
        }
    },
    "linux_hostnamectl": {
        "Category": "linux",
        "Command": "hostnamectl",
        "P-Summary": "get set hostnam comput",
        "P-Tasks": "get hostnam comput set hostnam comput",
        "Summary": "Get or set the hostname of the computer.",
        "Task-Script": {
            "Get the hostname of the computer": "hostnamectl",
            "Set the hostname of the computer": "sudo hostnamectl set-hostname \"{{some_hostname}}\""
        }
    },
    "linux_htop": {
        "Category": "linux",
        "Command": "htop",
        "P-Summary": "display dynam real-tim inform run process\nenhanc version top",
        "P-Tasks": "get help interact command sort process column use -- sort-key help column list start htop start htop display process own given user",
        "Summary": "Display dynamic real-time information about running processes. An enhanced version of `top`.",
        "Task-Script": {
            "Get help about interactive commands": "?",
            "Sort processes by a column (use `--sort-key help` for a column list)": "htop -s {{column_name}}",
            "Start htop": "htop",
            "Start htop displaying only processes owned by given user": "htop -u {{username}}"
        }
    },
    "linux_htpdate": {
        "Category": "linux",
        "Command": "htpdate",
        "P-Summary": "synchron local date time via http header web server",
        "P-Tasks": "compens systematisch clock drift perform simul syncron without action set time immedi syncron synchron date time",
        "Summary": "Synchronize local date and time via HTTP headers from web servers.",
        "Task-Script": {
            "Compensate the systematisch clock drift": "sudo htpdate -x {{host}}",
            "Perform simulation of syncronization, without any action": "htpdate -q {{host}}",
            "Set time immediate after the syncronization": "sudo htpdate -s {{host}}",
            "Synchronize date and time": "sudo htpdate {{host}}"
        }
    },
    "linux_http-prompt": {
        "Category": "linux",
        "Command": "http-prompt",
        "P-Summary": "interact command-lin http client featur autocomplet syntax highlight",
        "P-Tasks": "launch session target default url http : localhost:8000 previou session launch session given url launch session initi option",
        "Summary": "An interactive command-line HTTP client featuring autocomplete and syntax highlighting.",
        "Task-Script": {
            "Launch a session targeting the default url of http://localhost:8000 or the previous session": "http-prompt",
            "Launch a session with a given url": "http-prompt {{http://example.com}}",
            "Launch a session with some initial options": "http-prompt {{localhost:8000/api}} --auth {{username:password}}"
        }
    },
    "linux_http_load": {
        "Category": "linux",
        "Command": "http_load",
        "P-Summary": "http benchmark tool\nrun multipl http fetch parallel test throughput web server",
        "P-Tasks": "emul 1000 request 20 request per second base given url list file emul 1000 request 5 concurr request time base given url list file emul 20 request base given url list file per second 60 second emul 5 concurr request base given url list file 60 second",
        "Summary": "A HTTP benchmarking tool.\nRuns multiple HTTP fetches in parallel to test the throughput of a web server.",
        "Task-Script": {
            "Emulate 1000 requests at 20 requests per second, based on a given URL list file": "http_load -rate {{20}} -fetches {{1000}} {{path/to/urls.txt}}",
            "Emulate 1000 requests at 5 concurrent requests at a time, based on a given URL list file": "http_load -parallel {{5}} -fetches {{1000}} {{path/to/urls.txt}}",
            "Emulate 20 requests based on a given URL list file per second for 60 seconds": "http_load -rate {{20}} -seconds {{60}} {{path/to/urls.txt}}",
            "Emulate 5 concurrent requests based on a given URL list file for 60 seconds": "http_load -parallel {{5}} -seconds {{60}} {{path/to/urls.txt}}"
        }
    },
    "linux_httpie": {
        "Category": "linux",
        "Command": "httpie",
        "P-Summary": "user friendli command line http tool",
        "P-Tasks": "download file send delet request given request header send get request default method request data send post request default method request data send post request redirect input send put request given json bodi show whole http exchang request respons",
        "Summary": "A user friendly command line HTTP tool.",
        "Task-Script": {
            "Download a file": "http --download {{https://example.com}}",
            "Send a DELETE request with a given request header": "http DELETE {{https://example.com/todos/7}} {{API-Key:foo}}",
            "Send a GET request (default method with no request data)": "http {{https://example.com}}",
            "Send a POST request (default method with request data)": "http {{https://example.com}} {{hello=World}}",
            "Send a POST request with redirected input": "http {{https://example.com}} < {{file.json}}",
            "Send a PUT request with a given json body": "http PUT {{https://example.com/todos/7}} {{hello=world}}",
            "Show the whole HTTP exchange (both request and response)": "http -v {{https://example.com}}"
        }
    },
    "linux_hwclock": {
        "Category": "linux",
        "Command": "hwclock",
        "P-Summary": "use read chang hardwar clock\nusual requir root",
        "P-Tasks": "display current time report hardwar clock write current hardwar clock time softwar clock write current softwar clock time hardwar clock sometim use system setup",
        "Summary": "Used for reading or changing the hardware clock. Usually requires root.",
        "Task-Script": {
            "Display the current time as reported by the hardware clock": "hwclock",
            "Write the current hardware clock time to the software clock": "hwclock --hctosys",
            "Write the current software clock time to the hardware clock (sometimes used during system setup)": "hwclock --systohc"
        }
    },
    "linux_i3lock": {
        "Category": "linux",
        "Command": "i3lock",
        "P-Summary": "simpl screen locker built i3 window manag",
        "P-Tasks": "disabl unlock indic remov feedback keypress display mous pointer instead hide default default pointer win ms window pointer lock screen png background lock screen png background display multipl monitor enabl mous pointer lock screen simpl color background rrggbb format",
        "Summary": "Simple screen locker built for the i3 window manager.",
        "Task-Script": {
            "Disable the unlock indicator (removes feedback on keypress)": "i3lock -u",
            "Display mouse pointer instead of hiding it ('default' for default pointer, 'win' for a MS Windows pointer)": "i3lock -p {{default|win}}",
            "Lock screen to a PNG background": "i3lock -i {{path/to/picture.png}}",
            "Lock screen to a PNG background displayed in multiple monitors, with enabled mouse pointer": "i3lock -i {{path/to/picture.png}} -p {{default|win}} -t",
            "Lock screen with a simple color background (rrggbb format)": "i3lock -c {{0000ff}}"
        }
    },
    "linux_i7z": {
        "Category": "linux",
        "Command": "i7z",
        "P-Summary": "intel cpu i3 i5 i7 realtim report tool",
        "P-Tasks": "start i7z need run super user mode",
        "Summary": "An Intel CPU (only i3, i5 and i7) realtime reporting tool.",
        "Task-Script": {
            "Start i7z (needs to be run in super user mode)": "sudo i7z"
        }
    },
    "linux_ifdown": {
        "Category": "linux",
        "Command": "ifdown",
        "P-Summary": "disabl network interfac",
        "P-Tasks": "disabl interfac enabl disabl interfac eth0",
        "Summary": "Disable network interfaces.",
        "Task-Script": {
            "Disable all interfaces which are enabled": "ifdown -a",
            "Disable interface eth0": "ifdown {{eth0}}"
        }
    },
    "linux_iftop": {
        "Category": "linux",
        "Command": "iftop",
        "P-Summary": "show bandwidth usag interfac host",
        "P-Tasks": "look hostnam show bar graph traffic get help interact command show bandwidth usag show bandwidth usag given interfac show bandwidth usag port inform",
        "Summary": "Show bandwidth usage on an interface by host.",
        "Task-Script": {
            "Do not look up hostnames": "sudo iftop -n",
            "Do not show bar graphs of traffic": "sudo iftop -b",
            "Get help about interactive commands": "?",
            "Show the bandwidth usage": "sudo iftop",
            "Show the bandwidth usage of a given interface": "sudo iftop -i {{interface}}",
            "Show the bandwidth usage with port information": "sudo iftop -P"
        }
    },
    "linux_ifup": {
        "Category": "linux",
        "Command": "ifup",
        "P-Summary": "tool use enabl network interfac",
        "P-Tasks": "enabl interfac defin auto etc network interfac enabl interfac eth0",
        "Summary": "Tool used to enable network interfaces.",
        "Task-Script": {
            "Enable all the interfaces defined with \"auto\" in /etc/network/interfaces": "ifup -a",
            "Enable interface eth0": "ifup {{eth0}}"
        }
    },
    "linux_imgp": {
        "Category": "linux",
        "Command": "imgp",
        "P-Summary": "command line imag resiz rotat jpeg png imag",
        "P-Tasks": "convert singl imag whole directori contain valid imag format rotat imag clockwis 90 degre scale imag 75 overwrit sourc imag target resolut",
        "Summary": "Command line image resizer and rotator for JPEG and PNG images.",
        "Task-Script": {
            "Convert single images and/or whole directories containing valid image formats": "imgp -x {{1366x1000}} {{path/to/dir}} {{path/to/file}}",
            "Rotate an image clockwise by 90 degrees": "imgp -o {{90}} {{path/to/file}}",
            "Scale an image by 75% and overwrite the source image to a target resolution": "imgp -x {{75}} -w {{path/to/file}}"
        }
    },
    "linux_inotifywait": {
        "Category": "linux",
        "Command": "inotifywait",
        "P-Summary": "wait chang one file",
        "P-Tasks": "quiet watch chang exclud file match regular express watch file modif event run command file chang wait 30 second watch directori recurs chang",
        "Summary": "Waits for changes to one or more files.",
        "Task-Script": {
            "Be quiet about watching for changes": "while inotifywait --quiet {{path/to/file}}; do {{command}}; done",
            "Exclude files matching a regular expression": "while inotifywait --recursive {{path/to/directory}} --exlude '{{regex}}'; do {{command}}; done",
            "Only watch for file modification events": "while inotifywait --event {{modify}} {{path/to/file}}; do {{command}}; done",
            "Run a command when a file changes": "while inotifywait {{path/to/file}}; do {{command}}; done",
            "Wait at most 30 seconds": "while inotifywait --timeout {{30}} {{path/to/file}}; do {{command}}; done",
            "Watch a directory recursively for changes": "while inotifywait --recursive {{path/to/directory}}; do {{command}}; done"
        }
    },
    "linux_inxi": {
        "Category": "linux",
        "Command": "inxi",
        "P-Summary": "print summari system inform resourc debug purpos",
        "P-Tasks": "print full descript cpu memori disk network process inform print short summari cpu memori hard drive kernel inform print inform distribut repositori",
        "Summary": "Print a summary of system information and resources for debugging purposes.",
        "Task-Script": {
            "Print a full description of CPU, memory, disk, network and process information": "inxi -Fz",
            "Print a short summary of CPU, memory, hard drive and kernel information": "inxi",
            "Print information about the distribution's repository": "inxi -r"
        }
    },
    "linux_iostat": {
        "Category": "linux",
        "Command": "iostat",
        "P-Summary": "report statist devic partit",
        "P-Tasks": "display cpu statist display report cpu disk statist sinc system startup display report cpu disk statist unit convert megabyt display disk statist disk name includ lvm display extend disk statist disk name devic sda display increment report cpu disk statist everi 2 second",
        "Summary": "Report statistics for devices and partitions.",
        "Task-Script": {
            "Display CPU statistics": "iostat -c",
            "Display a report of CPU and disk statistics since system startup": "iostat",
            "Display a report of CPU and disk statistics with units converted to megabytes": "iostat -m",
            "Display disk statistics with disk names (including LVM)": "iostat -N",
            "Display extended disk statistics with disk names for device \"sda\"": "iostat -xN {{sda}}",
            "Display incremental reports of CPU and disk statistics every 2 seconds": "iostat {{2}}"
        }
    },
    "linux_ip": {
        "Category": "linux",
        "Command": "ip",
        "P-Summary": "show manipul rout devic polici rout tunnel",
        "P-Tasks": "add default rout add delet ip address interfac display rout tabl list interfac brief link layer info list interfac brief network layer info list interfac detail info make interfac show neighbor arp tabl",
        "Summary": "Show / manipulate routing, devices, policy routing and tunnels.",
        "Task-Script": {
            "Add a default route": "ip route add default via {{ip}} dev {{interface}}",
            "Add/Delete an ip address to an interface": "ip addr add/del {{ip}}/{{mask}} dev {{interface}}",
            "Display the routing table": "ip route",
            "List interfaces with brief link layer info": "ip -brief link",
            "List interfaces with brief network layer info": "ip -brief address",
            "List interfaces with detailed info": "ip address",
            "Make an interface up/down": "ip link set {{interface}} up/down",
            "Show neighbors (ARP table)": "ip neighbour"
        }
    },
    "linux_ip address": {
        "Category": "linux",
        "Command": "ip address",
        "P-Summary": "ip address manag subcommand",
        "P-Tasks": "add ip address network interfac delet ip address given scope network interfac display inform specif network interfac filter show activ network interfac list network interfac associ ip address remov ip address network interfac",
        "Summary": "IP Address management subcommand.",
        "Task-Script": {
            "Add an IP address to a network interface": "ip address add {{ip_address}} dev {{eth0}}",
            "Delete all IP addresses in a given scope from a network interface": "ip address flush dev {{eth0}} scope {{global|host|link}}",
            "Display information about a specific network interface": "ip address show dev {{eth0}}",
            "Filter to show only active network interfaces": "ip address show up",
            "List network interfaces and their associated IP addresses": "ip address",
            "Remove an IP address from a network interface": "ip address delete {{ip_address}} dev {{eth0}}"
        }
    },
    "linux_ipcalc": {
        "Category": "linux",
        "Command": "ipcalc",
        "P-Summary": "perform simpl oper calcul ip address network",
        "P-Tasks": "display geograph inform given ip address show inform address network cidr notat show inform address network given subnet mask show broadcast address address network show network address provid ip address netmask",
        "Summary": "Perform simple operations and calculations on IP addresses and networks.",
        "Task-Script": {
            "Display geographic information about a given IP address": "ipcalc -g {{1.2.3.4}}",
            "Show information about an address or network in CIDR notation": "ipcalc {{1.2.3.4}}/{{24}}",
            "Show information about an address or network with a given subnet mask": "ipcalc {{1.2.3.4}} {{255.255.255.0}}",
            "Show the broadcast address of an address or network": "ipcalc -b {{1.2.3.4}}/{{30}}",
            "Show the network address of provided IP address and netmask": "ipcalc -n {{1.2.3.4}}/{{24}}"
        }
    },
    "linux_ipcmk": {
        "Category": "linux",
        "Command": "ipcmk",
        "P-Summary": "creat ipc inter-process commun resourc",
        "P-Tasks": "creat messag queue creat semaphor creat share memori segment creat share memori segment specif permiss default 0644",
        "Summary": "Create IPC (Inter-process Communication) resources.",
        "Task-Script": {
            "Create a message queue": "ipcmk --queue",
            "Create a semaphore": "ipcmk --semaphore {{element_size}}",
            "Create a shared memory segment": "ipcmk --shmem {{segment_size_in_bytes}}",
            "Create a shared memory segment with specific permissions (default is 0644)": "ipcmk --shmem {{segment_size_in_bytes}} {{octal_permissons}}"
        }
    },
    "linux_ipcrm": {
        "Category": "linux",
        "Command": "ipcrm",
        "P-Summary": "delet ipc inter-process commun resourc",
        "P-Tasks": "delet semaphor id delet semaphor key delet share memori segment id delet share memori segment key delet ipc resourc delet ipc queue id delet ipc queue key",
        "Summary": "Delete IPC (Inter-process Communication) resources.",
        "Task-Script": {
            "Delete a semaphore by ID": "ipcrm --semaphore-id {{semaphore_id}}",
            "Delete a semaphore by key": "ipcrm --semaphore-key {{semaphore_key}}",
            "Delete a shared memory segment by ID": "ipcrm --shmem-id {{shmem_id}}",
            "Delete a shared memory segment by key": "ipcrm --shmem-key {{shmem_key}}",
            "Delete all IPC resources": "ipcrm --all",
            "Delete an IPC queue by ID": "ipcrm --queue-id {{ipc_queue_id}}",
            "Delete an IPC queue by key": "ipcrm --queue-key {{ipc_queue_key}}"
        }
    },
    "linux_iptables": {
        "Category": "linux",
        "Command": "iptables",
        "P-Summary": "program allow configur tabl chain rule provid linux kernel firewal",
        "P-Tasks": "append rule chain polici ip append rule chain polici ip consid protocol port delet chain rule restor iptabl configur file save iptabl configur given tabl file set chain polici rule view chain rule packet byte counter tabl",
        "Summary": "Program that allows configuration of tables, chains and rules provided by the Linux kernel firewall.",
        "Task-Script": {
            "Append rule to chain policy for IP": "sudo iptables -A {{chain}} -s {{ip}} -j {{rule}}",
            "Append rule to chain policy for IP considering protocol and port": "sudo iptables -A {{chain}} -s {{ip}} -p {{protocol}} --dport {{port}} -j {{rule}}",
            "Delete chain rule": "sudo iptables -D {{chain}} {{rule_line_number}}",
            "Restore iptables configuration from a file": "sudo iptables-restore < {{path/to/iptables_file}}",
            "Save iptables configuration of a given table to a file": "sudo iptables-save -t {{tablename}} > {{path/to/iptables_file}}",
            "Set chain policy rule": "sudo iptables -P {{chain}} {{rule}}",
            "View chains, rules, and packet/byte counters for all tables": "sudo iptables -vnL"
        }
    },
    "linux_isoinfo": {
        "Category": "linux",
        "Command": "isoinfo",
        "P-Summary": "util program dump verifi iso disk imag",
        "P-Tasks": "e x tract specif file iso imag send stdout list file includ iso imag show header inform iso disk imag",
        "Summary": "Utility programs for dumping and verifying ISO disk images.",
        "Task-Script": {
            "E[x]tract a specific file from an ISO image and send it out `stdout`": "isoinfo -i {{path/to/image.iso}} -x {{/PATH/TO/FILE/INSIDE/ISO.EXT}}",
            "List all the files included in an ISO image": "isoinfo -f -i {{path/to/image.iso}}",
            "Show header information for an ISO disk image": "isoinfo -d -i {{path/to/image.iso}}"
        }
    },
    "linux_isosize": {
        "Category": "linux",
        "Command": "isosize",
        "P-Summary": "display size iso file",
        "P-Tasks": "diplay block count block size iso file display size iso file display size iso file divid given number usabl -- sector given",
        "Summary": "Display the size of an ISO file.",
        "Task-Script": {
            "Diplay the block count and block size of an ISO file": "isosize --sectors {{path/to/file.iso}}",
            "Display the size of an ISO file": "isosize {{path/to/file.iso}}",
            "Display the size of an ISO file divided by a given number (only usable when --sectors is not given)": "isosize --divisor={{number}} {{path/to/file.iso}}"
        }
    },
    "linux_iw": {
        "Category": "linux",
        "Command": "iw",
        "P-Summary": "show manipul wireless devic",
        "P-Tasks": "close current connect join open wireless network scan avail wireless network show inform current connect",
        "Summary": "Show and manipulate wireless devices.",
        "Task-Script": {
            "Close the current connection": "iw dev {{wlp}} disconnect",
            "Join an open wireless network": "iw dev {{wlp}} connect {{SSID}}",
            "Scan for available wireless networks": "iw dev {{wlp}} scan",
            "Show information about the current connection": "iw dev {{wlp}} link"
        }
    },
    "linux_iwconfig": {
        "Category": "linux",
        "Command": "iwconfig",
        "P-Summary": "configur show paramet wireless network interfac",
        "P-Tasks": "set essid network name specifi interfac e g eth0 wlp2s0 set oper mode specifi interfac show paramet statist interfac show paramet statist specifi interfac",
        "Summary": "Configure and show the parameters of a wireless network interface.",
        "Task-Script": {
            "Set the ESSID (network name) of the specified interface (e.g., eth0 or wlp2s0)": "iwconfig {{interface}} {{new_network_name}}",
            "Set the operating mode of the specified interface": "iwconfig {{interface}} mode {{ad hoc|Managed|Master|Repeater|Secondary|Monitor|Auto}}",
            "Show the parameters and statistics of all the interfaces": "iwconfig",
            "Show the parameters and statistics of the specified interface": "iwconfig {{interface}}"
        }
    },
    "linux_iwctl": {
        "Category": "linux",
        "Command": "iwctl",
        "P-Summary": "command line tool control iwd network supplic",
        "P-Tasks": "call gener help connect network station credenti need ask display network found station display wifi station start look network station start interact mode mode enter command directli autocomplet",
        "Summary": "A command line tool for controlling the iwd network supplicant.",
        "Task-Script": {
            "Call general help": "iwctl --help",
            "Connect to a network with a station, if credentials are needed they will be asked": "iwctl station {{station}} connect {{network_name}}",
            "Display the networks found by a station": "iwctl station {{station}} get-networks",
            "Display your wifi stations": "iwctl station list",
            "Start looking for networks with a station": "iwctl station {{station}} scan",
            "Start the interactive mode, in this mode you can enter the commands directly, with autocompletion": "iwctl"
        }
    },
    "linux_jobs": {
        "Category": "linux",
        "Command": "jobs",
        "P-Summary": "bash builtin view inform process spawn current shell",
        "P-Tasks": "display inform job chang statu display process id process group leader display run process display stop process list job process id view job spawn current shell",
        "Summary": "BASH builtin for viewing information about processes spawned by the current shell.",
        "Task-Script": {
            "Display information about jobs with changed status": "jobs -n",
            "Display process id of process group leader": "jobs -p",
            "Display running processes": "jobs -r",
            "Display stopped processes": "jobs -s",
            "List jobs and their process ids": "jobs -l",
            "View jobs spawned by the current shell": "jobs"
        }
    },
    "linux_journalctl": {
        "Category": "linux",
        "Command": "journalctl",
        "P-Summary": "queri systemd journal",
        "P-Tasks": "filter messag within time rang either timestamp placehold like yesterday follow new messag like tail -f tradit syslog show messag specif execut show messag specif process show messag specif unit show messag last boot show messag boot show messag prioriti level 3 error boot",
        "Summary": "Query the systemd journal.",
        "Task-Script": {
            "Filter messages within a time range (either timestamp or placeholders like \"yesterday\")": "journalctl --since {{now|today|yesterday|tomorrow}} --until {{YYYY-MM-DD HH:MM:SS}}",
            "Follow new messages (like `tail -f` for traditional syslog)": "journalctl -f",
            "Show all messages by a specific executable": "journalctl {{path/to/executable}}",
            "Show all messages by a specific process": "journalctl _PID={{pid}}",
            "Show all messages by a specific unit": "journalctl -u {{unit}}",
            "Show all messages from last boot": "journalctl -b -1",
            "Show all messages from this boot": "journalctl -b",
            "Show all messages with priority level 3 (errors) from this boot": "journalctl -b --priority={{3}}"
        }
    },
    "linux_jpegtran": {
        "Category": "linux",
        "Command": "jpegtran",
        "P-Summary": "perform lossless transform jpeg file",
        "P-Tasks": "convert imag grayscal crop imag rectangular region width w height h upper left corner save output specif file crop imag rectangular region width w height h start point x upper left corner mirror imag horizont vertic rotat imag 90 180 270 degre clockwis transpos imag across upper left lower right axi transvers imag across upper right lower left axi",
        "Summary": "Perform lossless transformation of JPEG files.",
        "Task-Script": {
            "Convert the image to grayscale": "jpegtran -grayscale {{path/to/image.jpg}} > {{path/to/output.jpg}}",
            "Crop the image to a rectangular region of width `W` and height `H` from the upper left corner, saving the output to a specific file": "jpegtran -crop {{W}}x{{H}} -outfile {{path/to/output.jpg}} {{path/to/image.jpg}}",
            "Crop the image to a rectangular region of width `W` and height `H`, starting at point `X` and `Y` from the upper left corner": "jpegtran -crop {{W}}x{{H}}+{{X}}+{{Y}} {{path/to/image.jpg}} > {{path/to/output.jpg}}",
            "Mirror an image horizontally or vertically": "jpegtran -flip {{horizontal|vertical}} {{path/to/image.jpg}} > {{path/to/output.jpg}}",
            "Rotate an image 90, 180 or 270 degrees clockwise": "jpegtran -rotate {{90|180|270}} {{path/to/image.jpg}} > {{path/to/output.jpg}}",
            "Transpose the image across the upper left to lower right axis": "jpegtran -transpose {{path/to/image.jpg}} > {{path/to/output.jpg}}",
            "Transverse the image across the upper right to lower left axis": "jpegtran -transverse {{path/to/image.jpg}} > {{path/to/output.jpg}}"
        }
    },
    "linux_kexec": {
        "Category": "linux",
        "Command": "kexec",
        "P-Summary": "directli reboot new kernel",
        "P-Tasks": "execut current load kernel load new kernel load new kernel current boot paramet unload current kexec target kernel",
        "Summary": "Directly reboot into a new kernel.",
        "Task-Script": {
            "Execute a currently loaded kernel": "kexec -e",
            "Load a new kernel": "kexec -l {{path/to/kernel}} --initrd={{path/to/initrd}} --command-line={{arguments}}",
            "Load a new kernel with current boot parameters": "kexec -l {{path/to/kernel}} --initrd={{path/to/initrd}} --reuse-cmdline",
            "Unload current kexec target kernel": "kexec -u"
        }
    },
    "linux_konsole": {
        "Category": "linux",
        "Command": "konsole",
        "P-Summary": "konsol : kde termin emul",
        "P-Tasks": "open konsol background bring front ctrl+shift+f12 default press open konsol emerg fallback profil open new konsol specif directori open new tab run specif command close window exit",
        "Summary": "Konsole: The KDE terminal emulator.",
        "Task-Script": {
            "Open a Konsole in the background and bring to the front when Ctrl+Shift+F12 (by default) is pressed": "konsole --background-mode",
            "Open a Konsole with the emergency FALLBACK profile": "konsole --fallback-profile",
            "Open a new Konsole in a specific directory": "konsole --workdir {{path/to/directory}}",
            "Open a new tab": "konsole --new-tab",
            "Run a specific command and do not close the window after it exits": "konsole --noclose -e {{command}}"
        }
    },
    "linux_kpackagetool5": {
        "Category": "linux",
        "Command": "kpackagetool5",
        "P-Summary": "kpackag manag : instal list remov plasma packag",
        "P-Tasks": "instal packag directori list known packag type instal list instal plasmoid -- global user remov plasmoid name updat instal packag directori",
        "Summary": "KPackage Manager: Install, list, remove Plasma packages.",
        "Task-Script": {
            "Install the package from a directory": "kpackagetool5 --type {{package_type}} --install {{path/to/directory}}",
            "List all known package types that can be installed": "kpackagetool5 --list-types",
            "List installed plasmoids (--global for all users)": "kpackagetool5 --type Plasma/Applet --list --global",
            "Remove a plasmoid by name": "kpackagetool5 --type Plasma/Applet --remove \"{{name}}\"",
            "Update installed package from a directory": "kpackagetool5 --type {{package_type}} --upgrade {{path/to/directory}}"
        }
    },
    "linux_kpartx": {
        "Category": "linux",
        "Command": "kpartx",
        "P-Summary": "creat devic map partit tabl",
        "P-Tasks": "add partit map delet partit map list partit map",
        "Summary": "Create device maps from partition tables.",
        "Task-Script": {
            "Add partition mappings": "kpartx -a {{whole_disk.img}}",
            "Delete partition mappings": "kpartx -d {{whole_disk.img}}",
            "List partition mappings": "kpartx -l {{whole_disk.img}}"
        }
    },
    "linux_ksvgtopng5": {
        "Category": "linux",
        "Command": "ksvgtopng5",
        "P-Summary": "convert svg file png format",
        "P-Tasks": "convert svg file absolut path png",
        "Summary": "Convert SVG files to PNG format.",
        "Task-Script": {
            "Convert an SVG file (should be an absolute path) to PNG": "ksvgtopng5 {{width}} {{height}} {{path/to/file.svg}} {{output_filename.png}}"
        }
    },
    "linux_larasail": {
        "Category": "linux",
        "Command": "larasail",
        "P-Summary": "cli tool manag laravel digit ocean server",
        "P-Tasks": "add new laravel site retriev larasail mysql password retriev larasail user password set server laravel depend use specif php version set server laravel depend use default php version",
        "Summary": "A CLI tool for managing Laravel on Digital Ocean servers.",
        "Task-Script": {
            "Add a new Laravel site": "larasail host {{domain}} {{path/to/site_directory}}",
            "Retrieve the Larasail MySQL password": "larasail mysqlpass",
            "Retrieve the Larasail user password": "larasail pass",
            "Set up the server with Laravel dependencies using a specific PHP version": "larasail setup {{php71}}",
            "Set up the server with Laravel dependencies using the default PHP version": "larasail setup"
        }
    },
    "linux_lastb": {
        "Category": "linux",
        "Command": "lastb",
        "P-Summary": "show list last log user",
        "P-Tasks": "show list last log user show list last log user translat ip hostnam show list last log user sinc given time show list last log user given time show list log user specif time",
        "Summary": "Show a listing of last logged in users.",
        "Task-Script": {
            "Show a list of all last logged in users": "sudo lastb",
            "Show a list of all last logged in users and translate the IP into a hostname": "sudo lastb --dns",
            "Show a list of all last logged in users since a given time": "sudo lastb --since {{YYYY-MM-DD}}",
            "Show a list of all last logged in users until a given time": "sudo lastb --until {{YYYY-MM-DD}}",
            "Show a list of all logged in users at a specific time": "sudo lastb --present {{hh:mm}}"
        }
    },
    "linux_lastcomm": {
        "Category": "linux",
        "Command": "lastcomm",
        "P-Summary": "show last command execut",
        "P-Tasks": "display command execut given user display inform given command execut system display inform command execut given termin print inform command acct record file",
        "Summary": "Show last commands executed.",
        "Task-Script": {
            "Display commands executed by a given user": "lastcomm --user {{user}}",
            "Display information about a given command executed on the system": "lastcomm --command {{command}}",
            "Display information about commands executed on a given terminal": "lastcomm --tty {{terminal_name}}",
            "Print informations about all of the commands in the acct (record file)": "lastcomm"
        }
    },
    "linux_lastlog": {
        "Category": "linux",
        "Command": "lastlog",
        "P-Summary": "show recent login user given user",
        "P-Tasks": "display lastlog record specifi user display record 7 day display record recent 3 day display recent login user",
        "Summary": "Show the most recent login of all users or of a given user.",
        "Task-Script": {
            "Display lastlog record of the specified user": "lastlog -u {{username}}",
            "Display records before than 7 days": "lastlog -b {{7}}",
            "Display records more recent than 3 days": "lastlog -t {{3}}",
            "Display the most recent login of all users": "lastlog"
        }
    },
    "linux_ldconfig": {
        "Category": "linux",
        "Command": "ldconfig",
        "P-Summary": "configur symlink cach share librari depend",
        "P-Tasks": "print librari cach check whether given librari present updat symlink rebuild cach usual run new librari instal updat symlink given directori",
        "Summary": "Configure symlinks and cache for shared library dependencies.",
        "Task-Script": {
            "Print the libraries in the cache and check whether a given library is present": "ldconfig -p | grep {{library_name}}",
            "Update symlinks and rebuild the cache (usually run when a new library is installed)": "sudo ldconfig",
            "Update the symlinks for a given directory": "sudo ldconfig -n {{path/to/directory}}"
        }
    },
    "linux_ldd": {
        "Category": "linux",
        "Command": "ldd",
        "P-Summary": "display share librari depend",
        "P-Tasks": "display share librari depend binari display unus direct depend",
        "Summary": "Display shared library dependencies.",
        "Task-Script": {
            "Display shared library dependencies of a binary": "ldd {{path/to/binary}}",
            "Display unused direct dependencies": "ldd -u {{path/to/binary}}"
        }
    },
    "linux_legit": {
        "Category": "linux",
        "Command": "legit",
        "P-Summary": "complementari command-lin interfac git",
        "P-Tasks": "list branch public statu publish specifi branch remot server remov branch remot server remov last commit histori switch specifi branch stash restor unstag chang synchron current branch automat merg rebas stash unstash",
        "Summary": "Complementary command-line interface for Git.",
        "Task-Script": {
            "List all branches and their publication status": "git branches {{glob_pattern}}",
            "Publish a specified branch to the remote server": "git publish {{branch_name}}",
            "Remove a branch from the remote server": "git unpublish {{branch_name}}",
            "Remove the last commit from the history": "git undo {{--hard}}",
            "Switch to a specified branch, stashing and restoring unstaged changes": "git switch {{target_branch}}",
            "Synchronize current branch, automatically merging or rebasing, and stashing and unstashing": "git sync"
        }
    },
    "linux_lftp": {
        "Category": "linux",
        "Command": "lftp",
        "P-Summary": "sophist file transfer program",
        "P-Tasks": "connect ftp server delet multipl file remot server download multipl file glob express download updat entir directori renam file remot server upload multipl file glob express upload updat entir directori",
        "Summary": "Sophisticated file transfer program.",
        "Task-Script": {
            "Connect to an FTP server": "lftp {{ftp.example.com}}",
            "Delete multiple files on the remote server": "mrm {{path/to/*.txt}}",
            "Download multiple files (glob expression)": "mget {{path/to/*.png}}",
            "Download or update an entire directory": "mirror {{path/to/remote_dir}} {{path/to/local_output_dir}}",
            "Rename a file on the remote server": "mv {{original_filename}} {{new_filename}}",
            "Upload multiple files (glob expression)": "mput {{path/to/*.zip}}",
            "Upload or update an entire directory": "mirror -R {{path/to/local_dir}} {{path/to/remote_output_dir}}"
        }
    },
    "linux_libreoffice": {
        "Category": "linux",
        "Command": "libreoffice",
        "P-Summary": "cli power free offic suit libreoffic",
        "P-Tasks": "convert doc file current directori pdf display content specif file open space-separ list file read-onli mode print file specif printer",
        "Summary": "CLI for the powerful and free office suite LibreOffice.",
        "Task-Script": {
            "Convert all .doc files in current directory to pdf": "libreoffice --convert-to {{pdf}} {{*.doc}}",
            "Display the content of specific files": "libreoffice --cat {{path/to/file1}} {{path/to/file2}}",
            "Open a space-separated list of files in read-only mode": "libreoffice --view {{path/to/file1}} {{path/to/file2}}",
            "Print files to a specific printer": "libreoffice --pt {{printer_name}} {{path/to/file1}} {{path/to/file2}}"
        }
    },
    "linux_light": {
        "Category": "linux",
        "Command": "light",
        "P-Summary": "cli control backlight screen",
        "P-Tasks": "add 20 percent current backlight valu get current backlight valu percent reduc 20 percent current backlight valu set backlight valu 50 percent",
        "Summary": "CLI to control the backlight of your screen.",
        "Task-Script": {
            "Add 20 percent to the current backlight value": "light -A {{20}}",
            "Get the current backlight value in percent": "light",
            "Reduce 20 percent from the current backlight value": "light -U {{20}}",
            "Set the backlight value to 50 percent": "light -S {{50}}"
        }
    },
    "linux_line": {
        "Category": "linux",
        "Command": "line",
        "P-Summary": "read singl line input",
        "P-Tasks": "read input",
        "Summary": "Read a single line of input.",
        "Task-Script": {
            "Read input": "line"
        }
    },
    "linux_lldb": {
        "Category": "linux",
        "Command": "lldb",
        "P-Summary": "llvm low-level debugg",
        "P-Tasks": "attach lldb run process given pid debug execut wait new process launch given name attach",
        "Summary": "The LLVM Low-Level Debugger.",
        "Task-Script": {
            "Attach `lldb` to a running process with a given PID": "lldb -p {{pid}}",
            "Debug an executable": "lldb {{executable}}",
            "Wait for a new process to launch with a given name, and attach to it": "lldb -w -n {{process_name}}"
        }
    },
    "linux_locate": {
        "Category": "linux",
        "Command": "locate",
        "P-Summary": "find filenam quickli",
        "P-Tasks": "look file exact filenam pattern contain glob charact interpret pattern look pattern databas\nnote : databas recomput period usual weekli daili recomput databas\nneed want find recent ad file",
        "Summary": "Find filenames quickly.",
        "Task-Script": {
            "Look for a file by its exact filename (a pattern containing no globbing characters is interpreted as `*pattern*`)": "locate */{{filename}}",
            "Look for pattern in the database. Note: the database is recomputed periodically (usually weekly or daily)": "locate {{pattern}}",
            "Recompute the database. You need to do it if you want to find recently added files": "sudo updatedb"
        }
    },
    "linux_logcat": {
        "Category": "linux",
        "Command": "logcat",
        "P-Summary": "dump log system messag\nnativ android cli tool",
        "P-Tasks": "display line match regex display system log write system log file",
        "Summary": "Dump a log of system messages.\nNative Android CLI tool.",
        "Task-Script": {
            "Display lines that match a regex": "logcat --regex {{regex}}",
            "Display system logs": "logcat",
            "Write system logs to a file": "logcat -f {{path/to/file}}"
        }
    },
    "linux_logger": {
        "Category": "linux",
        "Command": "logger",
        "P-Summary": "add messag syslog var log syslog",
        "P-Tasks": "log messag syslog log messag given prioriti\ndefault user notic\nsee man logger prioriti option send output remot syslog server run given port\ndefault port 514 take input stdin log syslog use specif tag everi line log\ndefault name log user",
        "Summary": "Add messages to syslog (/var/log/syslog).",
        "Task-Script": {
            "Log a message to syslog": "logger {{message}}",
            "Log messages with a given priority. Default is `user.notice`. See `man logger` for all priority options": "echo {{log_entry}} | logger --priority {{user.warning}}",
            "Send the output to a remote syslog server running at a given port. Default port is 514": "echo {{log_entry}} | logger --server {{hostname}} --port {{port}}",
            "Take input from `stdin` and log to syslog": "echo {{log_entry}} | logger",
            "Use a specific tag for every line logged. Default is the name of logged in user": "echo {{log_entry}} | logger --tag {{tag}}"
        }
    },
    "linux_login": {
        "Category": "linux",
        "Command": "login",
        "P-Summary": "initi session user",
        "P-Tasks": "login user login user remot host login user preserv environ login user without authent user preauthent",
        "Summary": "Initiates a session for a user.",
        "Task-Script": {
            "Login as a user": "login {{user}}",
            "Login as a user on a remote host": "login -h {{host}} {{user}}",
            "Login as user and preserve environment": "login -p {{user}}",
            "Login as user without authentication if user is preauthenticated": "login -f {{user}}"
        }
    },
    "linux_logsave": {
        "Category": "linux",
        "Command": "logsave",
        "P-Summary": "save output command logfil",
        "P-Tasks": "append output log file instead replac current content execut command specifi argument save output log file show verbos output take input standard input save log file",
        "Summary": "Save the output of a command in a logfile.",
        "Task-Script": {
            "Append the output to a log file, instead of replacing its current contents": "logsave -a {{logfile}} {{command}}",
            "Execute command with specified argument(s) and save its output to log file": "logsave {{path/to/logfile}} {{command}}",
            "Show verbose output": "logsave -v {{logfile}} {{command}}",
            "Take input from standard input and save it in a log file": "logsave {{logfile}} -"
        }
    },
    "linux_logwatch": {
        "Category": "linux",
        "Command": "logwatch",
        "P-Summary": "summar mani differ log common servic e g apach pam_unix sshd etc\nsingl report",
        "P-Tasks": "analyz log rang date certain level detail restrict report includ inform select servic",
        "Summary": "Summarizes many different logs for common services (e.g., apache, pam_unix, sshd, etc.) in a single report.",
        "Task-Script": {
            "Analyze logs for a range of dates at certain level of detail": "logwatch --range {{yesterday|today|all|help}} --detail {{low|medium|others}}'",
            "Restrict report to only include information for a selected service": "logwatch --range {{all}} --service {{apache|pam_unix|etc}}"
        }
    },
    "linux_losetup": {
        "Category": "linux",
        "Command": "losetup",
        "P-Summary": "set control loop devic",
        "P-Tasks": "attach file given loop devic attach file new free loop devic scan devic partit attach file read-onli loop devic detach given loop devic detach loop devic list loop devic detail info",
        "Summary": "Set up and control loop devices.",
        "Task-Script": {
            "Attach a file to a given loop device": "sudo losetup /dev/{{loop}} /{{path/to/file}}",
            "Attach a file to a new free loop device and scan the device for partitions": "sudo losetup --show --partscan -f /{{path/to/file}}",
            "Attach a file to a read-only loop device": "sudo losetup --read-only /dev/{{loop}} /{{path/to/file}}",
            "Detach a given loop device": "sudo losetup -d /dev/{{loop}}",
            "Detach all loop devices": "sudo losetup -D",
            "List loop devices with detailed info": "losetup -a"
        }
    },
    "linux_lrunzip": {
        "Category": "linux",
        "Command": "lrunzip",
        "P-Summary": "larg file decompress program\nsee also lrzip lrztar lrzuntar",
        "P-Tasks": "decompress file decompress file silent overwrit file exist decompress file use specif number processor thread keep broken damag file instead delet decompress specifi output file name path",
        "Summary": "A large file decompression program.\nSee also `lrzip`, `lrztar`, `lrzuntar`.",
        "Task-Script": {
            "Decompress a file": "lrunzip {{filename.lrz}}",
            "Decompress a file and silently overwrite files if they exist": "lrunzip -f {{filename.lrz}}",
            "Decompress a file using a specific number of processor threads": "lrunzip -p {{8}} {{filename.lrz}}",
            "Keep broken or damaged files instead of deleting them when decompressing": "lrunzip -K {{filename.lrz}}",
            "Specify output file name and/or path": "lrunzip -o {{outfilename}} {{filename.lrz}}"
        }
    },
    "linux_lrzip": {
        "Category": "linux",
        "Command": "lrzip",
        "P-Summary": "larg file compress program\nsee also lrunzip lrztar lrzuntar",
        "P-Tasks": "compress file password protect encrypt compress file bzip2 - good middl ground compress speed compress file lzma - slow compress fast decompress compress lzo - light compress extrem fast decompress compress zpaq - extrem compress slow overrid number processor thread use",
        "Summary": "A large file compression program.\nSee also `lrunzip`, `lrztar`, `lrzuntar`.",
        "Task-Script": {
            "Compress a file and password protect/encrypt it": "lrzip -e {{filename}}",
            "Compress a file with BZIP2 - good middle ground for compression/speed": "lrzip -b {{filename}}",
            "Compress a file with LZMA - slow compression, fast decompression": "lrzip {{filename}}",
            "Compress with LZO - light compression, extremely fast decompression": "lrzip -l {{filename}}",
            "Compress with ZPAQ - extreme compression, but very slow": "lrzip -z {{filename}}",
            "Override the number of processor threads to use": "lrzip -p {{8}} {{filename}}"
        }
    },
    "linux_lrztar": {
        "Category": "linux",
        "Command": "lrztar",
        "P-Summary": "wrapper lrzip simplifi compress directori\nsee also : tar lrzuntar lrunzip",
        "P-Tasks": "archiv directori tar compress forc overwrit exist file overrid number processor thread use zpaq - extrem compress slow specifi output file",
        "Summary": "A wrapper for `lrzip` to simplify compression of directories.\nSee also: `tar`, `lrzuntar`, `lrunzip`.",
        "Task-Script": {
            "Archive a directory with `tar`, then compress": "lrztar {{path/to/directory}}",
            "Force overwriting of existing files": "lrztar -f {{path/to/directory}}",
            "Override the number of processor threads to use": "lrztar -p {{8}} {{path/to/directory}}",
            "Same as above, with ZPAQ - extreme compression, but very slow": "lrztar -z {{path/to/directory}}",
            "Specify the output file": "lrztar -o {{path/to/file}} {{path/to/directory}}"
        }
    },
    "linux_lrzuntar": {
        "Category": "linux",
        "Command": "lrzuntar",
        "P-Summary": "wrapper lrunzip simplifi decompress directori\nsee also : lrztar lrzip",
        "P-Tasks": "decompress file current directori decompress file current directori silent overwrit item alreadi exist decompress file current directori use specif number processor thread delet compress file decompress specifi output path",
        "Summary": "A wrapper for `lrunzip` to simplify decompression of directories.\nSee also: `lrztar`, `lrzip`.",
        "Task-Script": {
            "Decompress from a file to the current directory": "lrzuntar {{path/to/archive.tar.lrz}}",
            "Decompress from a file to the current directory and silently overwrite items that already exist": "lrzuntar -f {{archive.tar.lrz}}",
            "Decompress from a file to the current directory using a specific number of processor threads": "lrzuntar -p {{8}} {{path/to/archive.tar.lrz}}",
            "Delete the compressed file after decompression": "lrzuntar -D {{path/to/archive.tar.lrz}}",
            "Specify the output path": "lrzuntar -O {{path/to/directory}} {{archive.tar.lrz}}"
        }
    },
    "linux_lsattr": {
        "Category": "linux",
        "Command": "lsattr",
        "P-Summary": "list file attribut linux filesystem",
        "P-Tasks": "display attribut directori current directori display attribut file current directori list file attribut recurs current subsequ directori list attribut file particular path show attribut file current directori includ hidden one",
        "Summary": "List file attributes on a Linux filesystem.",
        "Task-Script": {
            "Display attributes of directories in the current directory": "lsattr -d",
            "Display the attributes of the files in the current directory": "lsattr",
            "List file attributes recursively in the current and subsequent directories": "lsattr -R",
            "List the attributes of files in a particular path": "lsattr {{path}}",
            "Show attributes of all the files in the current directory, including hidden ones": "lsattr -a"
        }
    },
    "linux_lsb_release": {
        "Category": "linux",
        "Command": "lsb_release",
        "P-Summary": "provid certain lsb linux standard base distribution-specif inform",
        "P-Tasks": "print descript usual full name oper system print avail inform print oper system name id suppress field name print releas number codenam distribut suppress field name",
        "Summary": "Provides certain LSB (Linux Standard Base) and distribution-specific information.",
        "Task-Script": {
            "Print a description (usually the full name) of the operating system": "lsb_release -d",
            "Print all available information": "lsb_release -a",
            "Print only the operating system name (ID), suppressing the field name": "lsb_release -i -s",
            "Print the release number and codename of the distribution, suppressing the field names": "lsb_release -rcs"
        }
    },
    "linux_lsblk": {
        "Category": "linux",
        "Command": "lsblk",
        "P-Summary": "list inform devic",
        "P-Tasks": "also list empti devic exclud devic specifi comma-separ list major devic number list storag devic tree-lik format output info block-devic topolog output info filesystem print size column byte rather human-read format use ascii charact tree format",
        "Summary": "Lists information about devices.",
        "Task-Script": {
            "Also list empty devices": "lsblk -a",
            "Exclude the devices specified by the comma-separated list of major device numbers": "lsblk -e {{1,7}}",
            "List all storage devices in a tree-like format": "lsblk",
            "Output info about block-device topology": "lsblk -t",
            "Output info about filesystems": "lsblk -f",
            "Print the SIZE column in bytes rather than in a human-readable format": "lsblk -b",
            "Use ASCII characters for tree formatting": "lsblk -i"
        }
    },
    "linux_lscpu": {
        "Category": "linux",
        "Command": "lscpu",
        "P-Summary": "display inform cpu architectur",
        "P-Tasks": "display inform cpu display inform tabl display inform offlin cpu tabl",
        "Summary": "Displays information about the CPU architecture.",
        "Task-Script": {
            "Display information about all CPUs": "lscpu",
            "Display information in a table": "lscpu --extended",
            "Display only information about offline CPUs in a table": "lscpu --extended --offline"
        }
    },
    "linux_lshw": {
        "Category": "linux",
        "Command": "lshw",
        "P-Summary": "list detail inform hardwar configur root user",
        "P-Tasks": "launch gui list disk storag control tabular format list hardwar tabular format save network interfac html file",
        "Summary": "List detailed information about hardware configurations as root user.",
        "Task-Script": {
            "Launch the GUI": "sudo lshw -X",
            "List all disks and storage controllers in tabular format": "sudo lshw -class disk -class storage -short",
            "List all hardwares in tabular format": "sudo lshw -short",
            "Save all network interfaces to an HTML file": "sudo lshw -class network -html > {{interfaces.html}}"
        }
    },
    "linux_lslocks": {
        "Category": "linux",
        "Command": "lslocks",
        "P-Summary": "list local system lock",
        "P-Tasks": "list local system lock list lock pid input list lock produc raw output column without column header list lock defin column header list lock json output stdout",
        "Summary": "List local system locks.",
        "Task-Script": {
            "List all local system locks": "lslocks",
            "List locks by PID input": "lslocks --pid {{PID}}",
            "List locks producing a raw output (no columns), and without column headers": "lslocks --raw --noheadings",
            "List locks with defined column headers": "lslocks --output {{PID}},{{COMMAND}},{{PATH}}",
            "List locks with json output to `stdout`": "lslocks --json"
        }
    },
    "linux_lslogins": {
        "Category": "linux",
        "Command": "lslogins",
        "P-Summary": "show inform user linux system",
        "P-Tasks": "display last login display supplementari group display system account display user account display user belong specif group display user system",
        "Summary": "Show information about users on a Linux system.",
        "Task-Script": {
            "Display last logins": "lslogins --last",
            "Display supplementary groups": "lslogins --supp-groups",
            "Display system accounts": "lslogins --system-accs",
            "Display user accounts": "lslogins --user-accs",
            "Display users belonging to a specific group": "lslogins --groups={{groups}}",
            "Display users in the system": "lslogins"
        }
    },
    "linux_lsmod": {
        "Category": "linux",
        "Command": "lsmod",
        "P-Summary": "show statu linux kernel modul\nsee also modprob load kernel modul",
        "P-Tasks": "list current load kernel modul",
        "Summary": "Shows the status of linux kernel modules.\nSee also `modprobe`, which loads kernel modules.",
        "Task-Script": {
            "List all currently loaded kernel modules": "lsmod"
        }
    },
    "linux_lspci": {
        "Category": "linux",
        "Command": "lspci",
        "P-Summary": "list pci devic",
        "P-Tasks": "display addit info display driver modul handl devic dump info readabl form show brief list devic show specif devic",
        "Summary": "List all PCI devices.",
        "Task-Script": {
            "Display additional info": "lspci -v",
            "Display drivers and modules handling each device": "lspci -k",
            "Dump info in a readable form": "lspci -vm",
            "Show a brief list of devices": "lspci",
            "Show a specific device": "lspci -s {{00:18.3}}"
        }
    },
    "linux_lsscsi": {
        "Category": "linux",
        "Command": "lsscsi",
        "P-Summary": "list scsi devic host attribut",
        "P-Tasks": "list scsi devic list scsi devic detail attribut list scsi devic human readabl disk capac",
        "Summary": "List SCSI devices (or hosts) and their attributes.",
        "Task-Script": {
            "List all SCSI devices": "lsscsi",
            "List all SCSI devices with detailed attributes": "lsscsi -L",
            "List all SCSI devices with human readable disk capacity": "lsscsi -s"
        }
    },
    "linux_lsusb": {
        "Category": "linux",
        "Command": "lsusb",
        "P-Summary": "display inform usb buse devic connect",
        "P-Tasks": "list usb devic avail list detail inform usb devic list devic specifi vendor product id list usb hierarchi tree list verbos inform usb devic",
        "Summary": "Display information about USB buses and devices connected to them.",
        "Task-Script": {
            "List all the USB devices available": "lsusb",
            "List detailed information about a USB device": "lsusb -D {{device}}",
            "List devices with a specified vendor and product id only": "lsusb -d {{vendor}}:{{product}}",
            "List the USB hierarchy as a tree": "lsusb -t",
            "List verbose information about USB devices": "lsusb --verbose"
        }
    },
    "linux_ltrace": {
        "Category": "linux",
        "Command": "ltrace",
        "P-Summary": "display dynam librari call process",
        "P-Tasks": "count librari call\nprint handi summari bottom print trace librari call program binari trace call malloc free omit done libc write file instead termin",
        "Summary": "Display dynamic library calls of a process.",
        "Task-Script": {
            "Count library calls. Print a handy summary at the bottom": "ltrace -c {{/path/to/program}}",
            "Print (trace) library calls of a program binary": "ltrace ./{{program}}",
            "Trace calls to malloc and free, omit those done by libc": "ltrace -e malloc+free-@libc.so* {{/path/to/program}}",
            "Write to file instead of terminal": "ltrace -o {{file}} {{/path/to/program}}"
        }
    },
    "linux_lvcreate": {
        "Category": "linux",
        "Command": "lvcreate",
        "P-Summary": "creat logic volum exist volum group\nvolum group collect logic physic volum",
        "P-Tasks": "creat 1500 megabyt linear logic volum name mylv volum group vg1 creat logic volum call mylv use 60 total space volum group vg1 creat logic volum call mylv use unalloc space volum group vg1 creat logic volum 10 gigabyt volum group vg1",
        "Summary": "Creates a logical volume in an existing volume group.\nA volume group is a collection of logical and physical volumes.",
        "Task-Script": {
            "Create a 1500 megabyte linear logical volume named mylv in the volume group vg1": "lvcreate -L {{1500}} -n {{mylv}} {{vg1}}",
            "Create a logical volume called mylv that uses 60% of the total space in volume group vg1": "lvcreate -l {{60%VG}} -n {{mylv}} {{vg1}}",
            "Create a logical volume called mylv that uses all of the unallocated space in the volume group vg1": "lvcreate -l {{100%FREE}} -n {{mylv}} {{vg1}}",
            "Create a logical volume of 10 gigabytes in the volume group vg1": "lvcreate -L {{10G}} {{vg1}}"
        }
    },
    "linux_lvextend": {
        "Category": "linux",
        "Command": "lvextend",
        "P-Summary": "increas size logic volum",
        "P-Tasks": "increas volum size 40gb well underli filesystem increas volum size 100 free phyiscal volum space increas volum size 120gb",
        "Summary": "Increase the size of a logical volume.",
        "Task-Script": {
            "Increase a volume's size by 40GB as well as the underlying filesystem": "lvextend --size +{{40G}} -r {{logical_volume}}",
            "Increase a volume's size to 100% of the free phyiscal volume space": "lvextend --size {{100}}%FREE {{logical_volume}}",
            "Increase a volume's size to 120GB": "lvextend --size {{120G}} {{logical_volume}}"
        }
    },
    "linux_lvreduce": {
        "Category": "linux",
        "Command": "lvreduce",
        "P-Summary": "reduc size logic volum",
        "P-Tasks": "reduc volum size 40gb well underli filesystem reduc volum size 120gb",
        "Summary": "Reduce the size of a logical volume.",
        "Task-Script": {
            "Reduce a volume's size by 40GB as well as the underlying filesystem": "lvreduce --size -{{40G}} -r {{logical_volume}}",
            "Reduce a volume's size to 120GB": "lvreduce --size {{120G}} {{logical_volume}}"
        }
    },
    "linux_lvremove": {
        "Category": "linux",
        "Command": "lvremove",
        "P-Summary": "remov one logic volum",
        "P-Tasks": "remov logic volum volum group remov logic volum volum group",
        "Summary": "Remove one or more logical volumes.",
        "Task-Script": {
            "Remove a logical volume in a volume group": "sudo lvremove {{volume_group}}/{{logical_volume}}",
            "Remove all logical volumes in a volume group": "sudo lvremove {{volume_group}}"
        }
    },
    "linux_lvresize": {
        "Category": "linux",
        "Command": "lvresize",
        "P-Summary": "chang size logic volum",
        "P-Tasks": "chang volum size 120gb increas volum size 100 free phyiscal volum space reduc volum size 120gb well underli filesystem",
        "Summary": "Change the size of a logical volume.",
        "Task-Script": {
            "Change a volume's size to 120GB": "lvresize -L {{120G}} {{logical_volume}}",
            "Increase a volume's size to 100% of the free phyiscal volume space": "lvresize --size {{100}}%FREE {{logical_volume}}",
            "Reduce a volume's size by 120GB as well as the underlying filesystem": "lvresize --size -{{120G}} -r {{logical_volume}}"
        }
    },
    "linux_lvs": {
        "Category": "linux",
        "Command": "lvs",
        "P-Summary": "display inform lvm logic volum",
        "P-Tasks": "append field default display chang default display show detail display logic volum display inform logic volum display specif field suppress head line use separ separ field",
        "Summary": "Display information about LVM logical volumes.",
        "Task-Script": {
            "Append field to default display": "lvs -o +{{field_name}}",
            "Change default display to show more details": "lvs -v",
            "Display all logical volumes": "lvs -a",
            "Display information about logical volumes": "lvs",
            "Display only specific fields": "lvs -o {{field_name_1}},{{field_name_2}}",
            "Suppress heading line": "lvs --noheadings",
            "Use a separator to separate fields": "lvs --separator {{=}}"
        }
    },
    "linux_lxc": {
        "Category": "linux",
        "Command": "lxc",
        "P-Summary": "manag linux contain use lxd rest api\ncontain name pattern prefix name remot server",
        "P-Tasks": "creat new contain imag list imag match string\nomit string list imag list local contain match string\nomit string list local contain show detail info contain start contain stop contain take snapshot contain",
        "Summary": "Manage Linux containers using the lxd REST API.\nAny container names or patterns can be prefixed with the name of a remote server.",
        "Task-Script": {
            "Create a new container from an image": "lxc init [{{remote}}:]{{image}} {{container}}",
            "List images matching a string. Omit the string to list all images": "lxc image list [{{remote}}:]{{match_string}}",
            "List local containers matching a string. Omit the string to list all local containers": "lxc list {{match_string}}",
            "Show detailed info about a container": "lxc info [{{remote}}:]{{container}}",
            "Start a container": "lxc start [{{remote}}:]{{container}}",
            "Stop a container": "lxc stop [{{remote}}:]{{container}}",
            "Take a snapshot of a container": "lxc snapshot [{{remote}}:]{{container}} {{snapshot}}"
        }
    },
    "linux_lynis": {
        "Category": "linux",
        "Command": "lynis",
        "P-Summary": "system secur audit tool",
        "P-Tasks": "check lyni up-to-d run secur audit dockerfil run secur audit system",
        "Summary": "System and security auditing tool.",
        "Task-Script": {
            "Check that Lynis is up-to-date": "sudo lynis update info",
            "Run a security audit of a Dockerfile": "sudo lynis audit dockerfile {{path/to/dockerfile}}",
            "Run a security audit of the system": "sudo lynis audit system"
        }
    },
    "linux_mac2unix": {
        "Category": "linux",
        "Command": "mac2unix",
        "P-Summary": "chang macos-styl line end unix-styl\nreplac lf cr",
        "P-Tasks": "chang line end file creat copi unix-styl line end",
        "Summary": "Change macOS-style line endings to Unix-style.\nReplaces LF with CR.",
        "Task-Script": {
            "Change the line endings of a file": "mac2unix {{filename}}",
            "Create a copy with Unix-style line endings": "mac2unix -n {{filename}} {{new_filename}}"
        }
    },
    "linux_macchanger": {
        "Category": "linux",
        "Command": "macchanger",
        "P-Summary": "command-lin util manipul network interfac mac address",
        "P-Tasks": "reset interfac perman hardwar mac set interfac random mac set interfac specif mac view current perman mac address interfac",
        "Summary": "Command-line utility for manipulating network interface MAC addresses.",
        "Task-Script": {
            "Reset interface to its permanent hardware MAC": "macchanger --permanent {{interface}}",
            "Set interface to a random MAC": "macchanger --random {{interface}}",
            "Set interface to a specific MAC": "macchanger --mac {{XX:XX:XX:XX:XX:XX}} {{interface}}",
            "View the current and permanent MAC addresses of a interface": "macchanger --show {{interface}}"
        }
    },
    "linux_makepkg": {
        "Category": "linux",
        "Command": "makepkg",
        "P-Summary": "creat packag instal pacman packag manag\nrun command pkgbuild file build packag",
        "P-Tasks": "make packag run directori pkgbuild make packag instal depend make packag skip sourc checksum instal packag pacman done",
        "Summary": "Creates a package installable with the `pacman` package manager.\nRuns the commands from a PKGBUILD file to build the package.",
        "Task-Script": {
            "Make a package (run in the same directory as a PKGBUILD)": "makepkg",
            "Make a package and install its dependencies": "makepkg --syncdeps",
            "Make a package, but skip source checksums": "makepkg --skipchecksums",
            "Same as above, but install the package with `pacman` when done": "makepkg --syncdeps --install"
        }
    },
    "linux_mandb": {
        "Category": "linux",
        "Command": "mandb",
        "P-Summary": "manag pre-format manual page databas",
        "P-Tasks": "check valid manual page creat entri scratch instead updat purg obsolet entri process user databas purg process manual page updat singl entri",
        "Summary": "Manage the pre-formatted manual page database.",
        "Task-Script": {
            "Check the validity of manual pages": "mandb --test",
            "Create entries from scratch instead of updating": "mandb --create",
            "Do not purge obsolete entries": "mandb --no-purge",
            "Only process user databases": "mandb --user-db",
            "Purge and process manual pages": "mandb",
            "Update a single entry": "mandb --filename {{path/to/file}}"
        }
    },
    "linux_manpath": {
        "Category": "linux",
        "Command": "manpath",
        "P-Summary": "determin search path manual page",
        "P-Tasks": "display search path use find man page show entir global manpath",
        "Summary": "Determine the search path for manual pages.",
        "Task-Script": {
            "Display the search path used to find man pages": "manpath",
            "Show the entire global manpath": "manpath --global"
        }
    },
    "linux_mcookie": {
        "Category": "linux",
        "Command": "mcookie",
        "P-Summary": "gener random 128 bit hexadecim number",
        "P-Tasks": "gener random number gener random number use specif number byte file seed random gener random number use content file seed random print detail random use origin seed sourc",
        "Summary": "Generates random 128 bit hexadecimal numbers.",
        "Task-Script": {
            "Generate a random number": "mcookie",
            "Generate a random number, using a specific number of bytes from a file as a seed for the randomness": "mcookie --file {{path/to/file}} --max-size {{number_of_bytes}}",
            "Generate a random number, using the contents of a file as a seed for the randomness": "mcookie --file {{path/to/file}}",
            "Print the details of the randomness used, such as the origin and seed for each source": "mcookie --verbose"
        }
    },
    "linux_mdadm": {
        "Category": "linux",
        "Command": "mdadm",
        "P-Summary": "raid manag util",
        "P-Tasks": "add disk array creat array mark disk fail remov disk show raid info stop array",
        "Summary": "RAID management utility.",
        "Task-Script": {
            "Add disk to array": "mdadm {{/path/to/raid_device_file}} -a {{/path/to/disk_device_file}}",
            "Create array": "mdadm --create {{/path/to/raid_device_file}} --level {{raid_level}} --raid-devices {{number_of_disks}} {{/path/to/disk_device_file}}",
            "Mark disk as failed": "mdadm {{/path/to/raid_device_file}} -f {{/path/to/disk_device_file}}",
            "Remove disk": "mdadm {{/path/to/raid_device_file}} -r {{/path/to/disk_device_file}}",
            "Show RAID info": "mdadm -D {{/path/to/raid_device_file}}",
            "Stop array": "mdadm -S {{/path/to/raid_device_file}}"
        }
    },
    "linux_mdbook": {
        "Category": "linux",
        "Command": "mdbook",
        "P-Summary": "creat onlin book write makrdown file",
        "P-Tasks": "clean directori gener book creat mdbook project specif directori creat mdbook project current directori serv book http : localhost:3000 auto build file chang watch set markdown file automat build file chang",
        "Summary": "Create online books by writing makrdown files.",
        "Task-Script": {
            "Clean the directory with the generated book": "mdbook clean",
            "Create a mdbook project in a specific directory": "mdbook init {{path/to/directory}}",
            "Create a mdbook project in the current directory": "mdbook init",
            "Serve a book at `http://localhost:3000`, auto build when file changes": "mdbook serve",
            "Watch a set of markdown files and automatically build when a file is changed": "mdbook watch"
        }
    },
    "linux_microcom": {
        "Category": "linux",
        "Command": "microcom",
        "P-Summary": "minimalist termin program use access remot devic via serial telnet connect consol",
        "P-Tasks": "establish telnet connect specifi host open serial port use specifi baud rate",
        "Summary": "A minimalistic terminal program, used to access remote devices via a serial, CAN or telnet connection from the console.",
        "Task-Script": {
            "Establish a telnet connection to the specified host": "microcom --telnet {{hostname}}:{{port}}",
            "Open a serial port using the specified baud rate": "microcom --port {{path/to/serial_port}} --speed {{baud_rate}}"
        }
    },
    "linux_mimetype": {
        "Category": "linux",
        "Command": "mimetype",
        "P-Summary": "automat determin mime type file",
        "P-Tasks": "determin mime type stdin check filenam display descript mime type display possibl mime type given file confid order display debug inform mime type determin display mime type filenam explicitli specifi 2-letter languag code output print mime type given file",
        "Summary": "Automatically determine the MIME type of a file.",
        "Task-Script": {
            "Determine the MIME type of stdin (does not check a filename)": "{{some_command}} | mimetype --stdin",
            "Display a description of the MIME type": "mimetype --describe {{path/to/file}}",
            "Display all the possible MIME types of a given file in confidence order": "mimetype --all {{path/to/file}}",
            "Display debug information about how the MIME type was determined": "mimetype --debug {{path/to/file}}",
            "Display only the MIME type, and not the filename": "mimetype --brief {{path/to/file}}",
            "Explicitly specify the 2-letter language code of the output": "mimetype --language {{path/to/file}}",
            "Print the MIME type of a given file": "mimetype {{path/to/file}}"
        }
    },
    "linux_mke2fs": {
        "Category": "linux",
        "Command": "mke2fs",
        "P-Summary": "creat linux filesystem insid partit",
        "P-Tasks": "creat ext2 filesystem partit 1 devic b sdb1 creat ext3 filesystem partit 1 devic b sdb1",
        "Summary": "Creates a Linux filesystem inside a partition.",
        "Task-Script": {
            "Create an ext2 filesystem in partition 1 of device b (`sdb1`)": "mkfs.ext2 {{/dev/sdb1}}",
            "Create an ext3 filesystem in partition 1 of device b (`sdb1`)": "mkfs.ext3 {{/dev/sdb1}}"
        }
    },
    "linux_mkfs": {
        "Category": "linux",
        "Command": "mkfs",
        "P-Summary": "build linux filesystem hard disk partit\ncommand deprec favor filesystem specif mkf\ntype util",
        "P-Tasks": "build linux ext2 filesystem partit build filesystem specifi type build filesystem specifi type check bad block",
        "Summary": "Build a Linux filesystem on a hard disk partition.\nThis command is deprecated in favor of filesystem specific mkfs.<type> utils.",
        "Task-Script": {
            "Build a Linux ext2 filesystem on a partition": "mkfs {{path/to/partition}}",
            "Build a filesystem of a specified type": "mkfs -t {{ext4}} {{path/to/partition}}",
            "Build a filesystem of a specified type and check for bad blocks": "mkfs -c -t {{ntfs}} {{path/to/partition}}"
        }
    },
    "linux_mkfs.cramfs": {
        "Category": "linux",
        "Command": "mkfs.cramfs",
        "P-Summary": "creat rom filesystem insid partit",
        "P-Tasks": "creat rom filesystem insid partit 1 devic b sdb1 creat rom filesystem volume-nam",
        "Summary": "Creates a ROM filesystem inside a partition.",
        "Task-Script": {
            "Create a ROM filesystem inside partition 1 on device b (`sdb1`)": "mkfs.cramfs {{/dev/sdb1}}",
            "Create a ROM filesystem with a volume-name": "mkfs.cramfs -n {{volume_name}} {{/dev/sdb1}}"
        }
    },
    "linux_mkfs.exfat": {
        "Category": "linux",
        "Command": "mkfs.exfat",
        "P-Summary": "creat exfat filesystem insid partit",
        "P-Tasks": "creat exfat filesystem insid partit 1 devic b sdb1 creat filesystem volume-id creat filesystem volume-nam",
        "Summary": "Creates an exfat filesystem inside a partition.",
        "Task-Script": {
            "Create an exfat filesystem inside partition 1 on device b (`sdb1`)": "mkfs.exfat {{/dev/sdb1}}",
            "Create filesystem with a volume-id": "mkfs.exfat -i {{volume_id}} {{/dev/sdb1}}",
            "Create filesystem with a volume-name": "mkfs.exfat -n {{volume_name}} {{/dev/sdb1}}"
        }
    },
    "linux_mkfs.ext4": {
        "Category": "linux",
        "Command": "mkfs.ext4",
        "P-Summary": "creat ext4 filesystem insid partit",
        "P-Tasks": "creat ext4 filesystem insid partit 1 devic b sdb1 creat ext4 filesystem volume-label",
        "Summary": "Creates an ext4 filesystem inside a partition.",
        "Task-Script": {
            "Create an ext4 filesystem inside partition 1 on device b (`sdb1`)": "sudo mkfs.ext4 {{/dev/sdb1}}",
            "Create an ext4 filesystem with a volume-label": "sudo mkfs.ext4 -L {{volume_label}} {{/dev/sdb1}}"
        }
    },
    "linux_mkfs.fat": {
        "Category": "linux",
        "Command": "mkfs.fat",
        "P-Summary": "creat ms-do filesystem insid partit",
        "P-Tasks": "creat fat filesystem insid partit 1 devic b sdb1 creat filesystem volume-id creat filesystem volume-nam use 5 instead 2 file alloc tabl",
        "Summary": "Creates an MS-DOS filesystem inside a partition.",
        "Task-Script": {
            "Create a fat filesystem inside partition 1 on device b (`sdb1`)": "mkfs.fat {{/dev/sdb1}}",
            "Create filesystem with a volume-id": "mkfs.fat -i {{volume_id}} {{/dev/sdb1}}",
            "Create filesystem with a volume-name": "mkfs.fat -n {{volume_name}} {{/dev/sdb1}}",
            "Use 5 instead of 2 file allocation tables": "mkfs.fat -f 5 {{/dev/sdb1}}"
        }
    },
    "linux_mkfs.minix": {
        "Category": "linux",
        "Command": "mkfs.minix",
        "P-Summary": "creat minix filesystem insid partit",
        "P-Tasks": "creat minix filesystem insid partit 1 devic b sdb1",
        "Summary": "Creates a Minix filesystem inside a partition.",
        "Task-Script": {
            "Create a Minix filesystem inside partition 1 on device b (`sdb1`)": "mkfs.minix {{/dev/sdb1}}"
        }
    },
    "linux_mkfs.ntfs": {
        "Category": "linux",
        "Command": "mkfs.ntfs",
        "P-Summary": "creat ntf filesystem insid partit",
        "P-Tasks": "creat ntf filesystem insid partit 1 devic b sdb1 creat filesystem volume-label creat filesystem specif uuid",
        "Summary": "Creates a NTFS filesystem inside a partition.",
        "Task-Script": {
            "Create a NTFS filesystem inside partition 1 on device b (`sdb1`)": "mkfs.ntfs {{/dev/sdb1}}",
            "Create filesystem with a volume-label": "mkfs.ntfs -L {{volume_label}} {{/dev/sdb1}}",
            "Create filesystem with specific UUID": "mkfs.ntfs -U {{UUID}} {{/dev/sdb1}}"
        }
    },
    "linux_mkfs.vfat": {
        "Category": "linux",
        "Command": "mkfs.vfat",
        "P-Summary": "creat ms-do filesystem insid partit",
        "P-Tasks": "creat vfat filesystem insid partit 1 devic b sdb1 creat filesystem volume-id creat filesystem volume-nam use 5 instead 2 file alloc tabl",
        "Summary": "Creates an MS-DOS filesystem inside a partition.",
        "Task-Script": {
            "Create a.vfat filesystem inside partition 1 on device b (`sdb1`)": "mkfs.vfat {{/dev/sdb1}}",
            "Create filesystem with a volume-id": "mkfs.vfat -i {{volume_id}} {{/dev/sdb1}}",
            "Create filesystem with a volume-name": "mkfs.vfat -n {{volume_name}} {{/dev/sdb1}}",
            "Use 5 instead of 2 file allocation tables": "mkfs.vfat -f 5 {{/dev/sdb1}}"
        }
    },
    "linux_mkisofs": {
        "Category": "linux",
        "Command": "mkisofs",
        "P-Summary": "creat iso file directori\nalso alias genisoimag",
        "P-Tasks": "creat iso directori set disc label creat iso",
        "Summary": "Create ISO files from directories.\nAlso aliased as `genisoimage`.",
        "Task-Script": {
            "Create an ISO from a directory": "mkisofs -o {{filename.iso}} {{path/to/source_directory}}",
            "Set the disc label when creating an ISO": "mkisofs -o {{filename.iso}} -V \"{{label_name}}\" {{path/to/source_directory}}"
        }
    },
    "linux_mknod": {
        "Category": "linux",
        "Command": "mknod",
        "P-Summary": "creat block charact devic special file",
        "P-Tasks": "creat fifo queue devic creat block devic creat charact devic creat devic file default selinux secur context",
        "Summary": "Create block or character device special files.",
        "Task-Script": {
            "Create a FIFO (queue) device": "sudo mknod {{path/to/device_file}} p",
            "Create a block device": "sudo mknod {{path/to/device_file}} b {{major_device_number}} {{minor_device_number}}",
            "Create a character device": "sudo mknod {{path/to/device_file}} c {{major_device_number}} {{minor_device_number}}",
            "Create a device file with default SELinux security context": "sudo mknod -Z {{path/to/device_file}} {{type}} {{major_device_number}} {{minor_device_number}}"
        }
    },
    "linux_mkswap": {
        "Category": "linux",
        "Command": "mkswap",
        "P-Summary": "set linux swap area devic file",
        "P-Tasks": "check partit bad block creat swap area setup given partit swap area specifi label file allow swapon use label use given file swap area",
        "Summary": "Sets up a Linux swap area on a device or in a file.",
        "Task-Script": {
            "Check a partition for bad blocks before creating the swap area": "sudo mkswap -c {{/dev/sdb7}}",
            "Setup a given partition as swap area": "sudo mkswap {{/dev/sdb7}}",
            "Specify a label for the file (to allow `swapon` to use the label)": "sudo mkswap -L {{swap1}} {{path/to/file}}",
            "Use a given file as swap area": "sudo mkswap {{path/to/file}}"
        }
    },
    "linux_modinfo": {
        "Category": "linux",
        "Command": "modinfo",
        "P-Summary": "extract inform linux kernel modul",
        "P-Tasks": "list attribut kernel modul list specifi attribut",
        "Summary": "Extract information about a Linux kernel module.",
        "Task-Script": {
            "List all attributes of a kernel module": "modinfo {{kernel_module}}",
            "List the specified attribute only": "modinfo -F {{author|description|license|parm|filename}} {{kernel_module}}"
        }
    },
    "linux_modprobe": {
        "Category": "linux",
        "Command": "modprobe",
        "P-Summary": "add remov modul linux kernel",
        "P-Tasks": "load modul kernel pretend load modul kernel actual remov modul depend kernel remov modul kernel show kernel modul depend",
        "Summary": "Add or remove modules from the Linux kernel.",
        "Task-Script": {
            "Load a module into the kernel": "sudo modprobe {{module_name}}",
            "Pretend to load a module into the kernel, but don't actually do it": "sudo modprobe --dry-run {{module_name}}",
            "Remove a module and those that depend on it from the kernel": "sudo modprobe --remove-dependencies {{module_name}}",
            "Remove a module from the kernel": "sudo modprobe --remove {{module_name}}",
            "Show a kernel module's dependencies": "sudo modprobe --show-depends {{module_name}}"
        }
    },
    "linux_module": {
        "Category": "linux",
        "Command": "module",
        "P-Summary": "modifi user environ use modul command",
        "P-Tasks": "display avail modul display load modul load modul search modul name unload specif load modul unload load modul",
        "Summary": "Modify a users' environment using the module command.",
        "Task-Script": {
            "Display available modules": "module avail",
            "Display loaded modules": "module list",
            "Load a module": "module load {{module_name}}",
            "Search for a module by name": "module spider {{module_name}}",
            "Unload a specific loaded module": "module {{module_name}}",
            "Unload all loaded modules": "module purge"
        }
    },
    "linux_mono": {
        "Category": "linux",
        "Command": "mono",
        "P-Summary": "runtim net framework",
        "P-Tasks": "run net assembl run net assembl debug mode",
        "Summary": "Runtime for the .NET Framework.",
        "Task-Script": {
            "Run a .NET assembly": "mono {{path/to/program.exe}}",
            "Run a .NET assembly in debug mode": "mono --debug {{path/to/program.exe}}"
        }
    },
    "linux_mons": {
        "Category": "linux",
        "Command": "mons",
        "P-Summary": "tool quickli manag two display",
        "P-Tasks": "duplic primari monitor onto secondari monitor use resolut primari monitor enabl primari monitor enabl secondari monitor mirror primari monitor onto secondari monitor use resolut secondari monitor",
        "Summary": "A tool to quickly manage two displays.",
        "Task-Script": {
            "Duplicate the primary monitor onto the secondary monitor, using the resolution of the primary monitor": "mons -d",
            "Enable only the primary monitor": "mons -o",
            "Enable only the secondary monitor": "mons -s",
            "Mirror the primary monitor onto the secondary monitor, using the resolution of the secondary monitor": "mons -m"
        }
    },
    "linux_mountpoint": {
        "Category": "linux",
        "Command": "mountpoint",
        "P-Summary": "test directori filesystem mountpoint",
        "P-Tasks": "check directori mountpoint check directori mountpoint without show output show major minor number mountpoint filesystem",
        "Summary": "Test if a directory is a filesystem mountpoint.",
        "Task-Script": {
            "Check if a directory is a mountpoint": "mountpoint {{path/to/directory}}",
            "Check if a directory is a mountpoint without showing any output": "mountpoint -q {{path/to/directory}}",
            "Show major/minor numbers of a mountpoint's filesystem": "mountpoint --fs-devno {{path/to/directory}}"
        }
    },
    "linux_mpstat": {
        "Category": "linux",
        "Command": "mpstat",
        "P-Summary": "report cpu statist",
        "P-Tasks": "display 5 report one one 2 second interv display 5 report one one given processor 2 second interv display cpu statist everi 2 second",
        "Summary": "Report CPU statistics.",
        "Task-Script": {
            "Display 5 reports, one by one, at 2 second intervals": "mpstat {{2}} {{5}}",
            "Display 5 reports, one by one, from a given processor, at 2 second intervals": "mpstat -P {{0}} {{2}} {{5}}",
            "Display CPU statistics every 2 seconds": "mpstat {{2}}"
        }
    },
    "linux_mssh": {
        "Category": "linux",
        "Command": "mssh",
        "P-Summary": "gtk+ base ssh client interact multipl ssh server",
        "P-Tasks": "open new window connect group server predefin mssh_cluster open new window connect multipl ssh server",
        "Summary": "GTK+ based SSH client for interacting with multiple SSH servers at once.",
        "Task-Script": {
            "Open a new window and connect to a group of servers predefined in `~/.mssh_clusters`": "mssh --alias {{alias_name}}",
            "Open a new window and connect to multiple SSH servers": "mssh {{user@host1}} {{user@host2}} {{...}}"
        }
    },
    "linux_mullvad": {
        "Category": "linux",
        "Command": "mullvad",
        "P-Summary": "cli client mullvad vpn",
        "P-Tasks": "check statu vpn tunnel enabl lan access vpn establish vpn tunnel link mullvad account specifi account number",
        "Summary": "CLI client for Mullvad VPN.",
        "Task-Script": {
            "Check status of VPN tunnel": "mullvad status",
            "Enable LAN access while VPN is on": "mullvad lan set allow",
            "Establish the VPN tunnel": "mullvad connect",
            "Link your mullvad account with the specified account number": "mullvad account set {{account_number}}"
        }
    },
    "linux_mycli": {
        "Category": "linux",
        "Command": "mycli",
        "P-Summary": "cli mysql mariadb percona auto-complet syntax highlight",
        "P-Tasks": "connect databas specifi host specifi user connect databas current log user connect databas specifi user",
        "Summary": "A CLI for MySQL, MariaDB, and Percona with auto-completion and syntax highlighting.",
        "Task-Script": {
            "Connect to a database on the specified host with the specified user": "mycli -u {{user}} -h {{host}} {{database_name}}",
            "Connect to a database with the currently logged in user": "mycli {{database_name}}",
            "Connect to a database with the specified user": "mycli -u {{user}} {{database_name}}"
        }
    },
    "linux_n": {
        "Category": "linux",
        "Command": "n",
        "P-Summary": "tool manag multipl node version",
        "P-Tasks": "display instal version interact activ one execut file given version instal given version node\nversion alreadi instal activ output binari path version remov version",
        "Summary": "Tool to manage multiple node versions.",
        "Task-Script": {
            "Display installed versions and interactively activate one of them": "n",
            "Execute a file with a given version": "n use {{version}} {{file.js}}",
            "Install a given version of node. If the version is already installed, it will be activated": "n {{version}}",
            "Output binary path for a version": "n bin {{version}}",
            "Remove a version": "n rm {{version}}"
        }
    },
    "linux_named": {
        "Category": "linux",
        "Command": "named",
        "P-Summary": "execut dn dynam name servic server daemon convert host name ip address vice versa",
        "P-Tasks": "listen queri specif port instead default port 53 read custom configur file read default configur file etc name conf read initi data listen queri run server foreground daemon use ipv4 ipv6 even host machin capabl utilis protocol",
        "Summary": "Execute the DNS (Dynamic Name Service) server daemon that converts host names to IP addresses and vice versa.",
        "Task-Script": {
            "Listen for queries on a specific port instead of the default port `53`": "named -p {{port}}",
            "Read a custom configuration file": "named -c {{path/to/named.conf}}",
            "Read the default configuration file `/etc/named.conf`, read any initial data and listen for queries": "named",
            "Run the server in the foreground and do not daemonize": "named -f",
            "Use IPv4 or IPv6 only, even if the host machine is capable of utilising other protocols": "named {{-4|-6}}"
        }
    },
    "linux_namei": {
        "Category": "linux",
        "Command": "namei",
        "P-Summary": "follow pathnam symbol link termin point found file directori char devic etc\nprogram use find mani level symbol link problem",
        "P-Tasks": "display result long-list format follow symlink resolv resolv pathnam specifi argument paramet show owner group name file show mode bit file type style ls",
        "Summary": "Follows a pathname (which can be a symbolic link) until a terminal point is found (a file/directory/char device etc).\nThis program is useful for finding \"too many levels of symbolic links\" problems.",
        "Task-Script": {
            "Display the results in a long-listing format": "namei --long {{path/to/a}} {{path/to/b}} {{path/to/c}}",
            "Don't follow symlinks while resolving": "namei --nosymlinks {{path/to/a}} {{path/to/b}} {{path/to/c}}",
            "Resolve the pathnames specified as the argument parameters": "namei {{path/to/a}} {{path/to/b}} {{path/to/c}}",
            "Show owner and group name of each file": "namei --owners {{path/to/a}} {{path/to/b}} {{path/to/c}}",
            "Show the mode bits of each file type in the style of `ls`": "namei --modes {{path/to/a}} {{path/to/b}} {{path/to/c}}"
        }
    },
    "linux_ncat": {
        "Category": "linux",
        "Command": "ncat",
        "P-Summary": "use normal cat function network",
        "P-Tasks": "accept multipl connect keep ncat open close listen input specifi port write specifi file write output specifi file specifi host specifi port",
        "Summary": "Use the normal `cat` functionality over networks.",
        "Task-Script": {
            "Accept multiple connections and keep ncat open after they have been closed": "ncat -lk {{port}}",
            "Listen for input on the specified port and write it to the specified file": "ncat -l {{port}} > {{path/to/file}}",
            "Write output of specified file to the specified host on the specified port": "ncat {{address}} {{port}} < {{path/to/file}}"
        }
    },
    "linux_ncdu": {
        "Category": "linux",
        "Command": "ncdu",
        "P-Summary": "disk usag analyz ncurs interfac",
        "P-Tasks": "analyz given directori analyz current work directori exclud file match pattern argument given multipl time add pattern save result file",
        "Summary": "Disk usage analyzer with an ncurses interface.",
        "Task-Script": {
            "Analyze a given directory": "ncdu {{path/to/directory}}",
            "Analyze the current working directory": "ncdu",
            "Exclude files that match a pattern, argument can be given multiple times to add more patterns": "ncdu --exclude '{{*.txt}}'",
            "Save results to a file": "ncdu -o {{path/to/file}}"
        }
    },
    "linux_ndctl": {
        "Category": "linux",
        "Command": "ndctl",
        "P-Summary": "util manag non-volatil dimm",
        "P-Tasks": "chang mode namespac raw check sector mode namespac consist repair need creat fsdax mode namespac list specif namespac includ lot addit inform list namespac region buse includ disabl one remov namespac applic reset initi state run monitor watch smart health event nvdimm acpi nfit bu",
        "Summary": "Utility for managing Non-Volatile DIMMs.",
        "Task-Script": {
            "Change the mode of a namespace to 'raw'": "ndctl create-namespace --reconfigure={{namespaceX.Y}} --mode={{raw}}",
            "Check a sector mode namespace for consistency, and repair if needed": "ndctl check-namespace --repair {{namespaceX.Y}}",
            "Create an 'fsdax' mode namespace": "ndctl create-namespace --mode={{fsdax}}",
            "List a specific namespace and include lots of additional information": "ndctl list -vvv --namespace={{namespaceX.Y}}",
            "List all namespaces, regions, and buses (including disabled ones)": "ndctl list --namespaces --regions --buses --idle",
            "Remove a namespace (when applicable) or reset it to an initial state": "ndctl destroy-namespace --force {{namespaceX.Y}}",
            "Run a monitor to watch for SMART health events for NVDIMMs on the 'ACPI.NFIT' bus": "ndctl monitor --bus={{ACPI.NFIT}}"
        }
    },
    "linux_nemo": {
        "Category": "linux",
        "Command": "nemo",
        "P-Summary": "file manag graphic shell cinnamon",
        "P-Tasks": "close open nemo window open new window show current directori open new window show user home directori",
        "Summary": "File manager and graphical shell for Cinnamon.",
        "Task-Script": {
            "Close all open nemo windows": "nemo --quit",
            "Open a new window showing the current directory": "nemo .",
            "Open a new window showing the user's home directory": "nemo"
        }
    },
    "linux_nethogs": {
        "Category": "linux",
        "Command": "nethogs",
        "P-Summary": "monitor bandwidth usag per process",
        "P-Tasks": "monitor bandwidth multipl devic monitor bandwidth specif devic specifi refresh rate start nethog root default devic eth0",
        "Summary": "Monitor bandwidth usage per process.",
        "Task-Script": {
            "Monitor bandwidth on multiple devices": "sudo nethogs {{device1}} {{device2}}",
            "Monitor bandwidth on specific device": "sudo nethogs {{device}}",
            "Specify refresh rate": "sudo nethogs -t {{seconds}}",
            "Start nethogs as root (default device is eth0)": "sudo nethogs"
        }
    },
    "linux_netselect": {
        "Category": "linux",
        "Command": "netselect",
        "P-Summary": "speed test choos fast network server",
        "P-Tasks": "choos server lowest latenc defin maximum ttl time live display nameserv resolut statist list avail option print fastest n server among host",
        "Summary": "Speed test for choosing a fast network server.",
        "Task-Script": {
            "Choose the server with the lowest latency": "sudo netselect {{host_1}} {{host_2}}",
            "Define maximum TTL (time to live)": "sudo netselect -m {{10}} {{host_1}} {{host_2}}",
            "Display nameserver resolution and statistics": "sudo netselect -vv {{host_1}} {{host_2}}",
            "List available options": "netselect",
            "Print fastest N servers among the hosts": "sudo netselect -s {{N}} {{host_1}} {{host_2}} {{host_3}}"
        }
    },
    "linux_netselect-apt": {
        "Category": "linux",
        "Command": "netselect-apt",
        "P-Summary": "creat sourc list file debian mirror lowest latenc",
        "P-Tasks": "creat sourc list use lowest latenc server includ non-fre section specifi debian branch stabl use default specifi countri mirror list lookup",
        "Summary": "Create a `sources.list` file for a Debian mirror with the lowest latency.",
        "Task-Script": {
            "Create `sources.list` using the lowest latency server": "sudo netselect-apt",
            "Include non-free section": "sudo netselect-apt --non-free",
            "Specify Debian branch, stable is used by default": "sudo netselect-apt {{testing}}",
            "Specify a country for the mirror list lookup": "sudo netselect-apt -c {{India}}"
        }
    },
    "linux_netstat": {
        "Category": "linux",
        "Command": "netstat",
        "P-Summary": "display network-rel inform open connect open socket port etc",
        "P-Tasks": "display pid program name list listen port list port list inform continu list listen tcp udp port + user process root list listen tcp port list rout resolv ip hostnam print rout tabl",
        "Summary": "Displays network-related information such as open connections, open socket ports, etc.",
        "Task-Script": {
            "Display PID and program names": "netstat -p",
            "List all listening ports": "netstat -l",
            "List all ports": "netstat -a",
            "List information continuously": "netstat -c",
            "List listening TCP and UDP ports (+ user and process if you're root)": "netstat -lepunt",
            "List listening TCP ports": "netstat -t",
            "List routes and do not resolve IP to hostname": "netstat -rn",
            "Print the routing table": "netstat -nr"
        }
    },
    "linux_newgrp": {
        "Category": "linux",
        "Command": "newgrp",
        "P-Summary": "switch primari group membership",
        "P-Tasks": "chang user primari group membership reset primari group membership user default group etc passwd",
        "Summary": "Switch primary group membership.",
        "Task-Script": {
            "Change user's primary group membership": "newgrp {{group_name}}",
            "Reset primary group membership to user's default group in /etc/passwd": "newgrp"
        }
    },
    "linux_nft": {
        "Category": "linux",
        "Command": "nft",
        "P-Summary": "allow configur tabl chain rule provid linux kernel firewal\nnftabl replac iptabl",
        "P-Tasks": "add new chain accept inbound traffic add new rule accept sever tcp port add new tabl famili inet tabl filter delet rule save current configur show rule handl view current configur",
        "Summary": "Allows configuration of tables, chains and rules provided by the Linux kernel firewall.\nNftables replaces iptables.",
        "Task-Script": {
            "Add a new chain to accept all inbound traffic": "sudo nft add chain {{inet}} {{filter}} {{input}} \\{ type {{filter}} hook {{input}} priority {{0}} \\; policy {{accept}} \\}",
            "Add a new rule to accept several TCP ports": "sudo nft add rule {{inet}} {{filter}} {{input}} {{tcp}} {{dport \\{ telnet, ssh, http, https \\} accept}}",
            "Add a new table with family \"inet\" and table \"filter\"": "sudo nft add table {{inet}} {{filter}}",
            "Delete a rule": "sudo nft delete rule {{inet}} {{filter}} {{input}} handle {{3}}",
            "Save current configuration": "sudo nft list ruleset > {{/etc/nftables.conf}}",
            "Show rule handles": "sudo nft --handle --numeric list chain {{family}} {{table}} {{chain}}",
            "View current configuration": "sudo nft list ruleset"
        }
    },
    "linux_nixos-rebuild": {
        "Category": "linux",
        "Command": "nixos-rebuild",
        "P-Summary": "reconfigur nixo machin",
        "P-Tasks": "build activ new configur make boot entri test purpos build switch new configur make boot default build switch new configur make boot default instal updat build switch new configur make boot default name boot entri build configur open virtual machin build new configur make boot default without switch rollback chang configur switch previou gener",
        "Summary": "Reconfigure a NixOS machine.",
        "Task-Script": {
            "Build and activate the new configuration, but don't make a boot entry (for testing purposes)": "sudo nixos-rebuild test",
            "Build and switch to the new configuration, making it the boot default": "sudo nixos-rebuild switch",
            "Build and switch to the new configuration, making it the boot default and installing updates": "sudo nixos-rebuild switch --upgrade",
            "Build and switch to the new configuration, making it the boot default and naming the boot entry": "sudo nixos-rebuild switch -p {{name}}",
            "Build the configuration and open it in a virtual machine": "sudo nixos-rebuild build-vm",
            "Build the new configuration and make it the boot default without switching to it": "sudo nixos-rebuild boot",
            "Rollback changes to the configuration, switching to the previous generation": "sudo nixos-rebuild switch --rollback"
        }
    },
    "linux_nm": {
        "Category": "linux",
        "Command": "nm",
        "P-Summary": "list symbol name object file",
        "P-Tasks": "demangl c++ symbol make readabl list symbol even debug symbol list global extern function file prefix list undefin symbol file",
        "Summary": "List symbol names in object files.",
        "Task-Script": {
            "Demangle C++ symbols (make them readable)": "nm --demangle {{file.o}}",
            "List all symbols, even debugging symbols": "nm -a {{file.o}}",
            "List global (extern) functions in a file (prefixed with T)": "nm -g {{file.o}}",
            "List only undefined symbols in a file": "nm -u {{file.o}}"
        }
    },
    "linux_nmcli": {
        "Category": "linux",
        "Command": "nmcli",
        "P-Summary": "command line tool control networkmanag",
        "P-Tasks": "call gener help call help command check nmcli version execut nmcli command",
        "Summary": "A command line tool for controlling NetworkManager.",
        "Task-Script": {
            "Call general help": "nmcli --help",
            "Call help on a command": "nmcli {{command}} --help",
            "Check the nmcli version": "nmcli --version",
            "Execute an `nmcli` command": "nmcli {{command}}"
        }
    },
    "linux_nmcli connection": {
        "Category": "linux",
        "Command": "nmcli connection",
        "P-Summary": "connect manag networkmanag",
        "P-Tasks": "activ connect specifi uuid creat static ipv4-onli connect creat static ipv6-onli connect creat auto-configur dual stack connect deactiv connect list networkmanag connect show name uuid type devic",
        "Summary": "Connection management with NetworkManager.",
        "Task-Script": {
            "Activate a connection by specifying an uuid": "nmcli connection up uuid {{uuid}}",
            "Create a static IPv4-only connection": "nmcli connection add ifname {{interface_name}} type {{ethernet}} ip4 {{10.0.0.7/8}} gw4 {{10.0.0.1}} ipv4.dns {{10.0.0.1}} ipv6.method {{ignore}}",
            "Create a static IPv6-only connection": "nmcli connection add ifname {{interface_name}} type {{ethernet}} ip6 {{2001:db8::2/64}} gw6 {{2001:db8::1}} ipv6.dns {{2001:db8::1}} ipv4.method {{ignore}}",
            "Create an auto-configured dual stack connection": "nmcli connection add ifname {{interface_name}} type {{ethernet}} ipv4.method {{auto}} ipv6.method {{auto}}",
            "Deactivate a connection": "nmcli connection down uuid {{uuid}}",
            "List all NetworkManager connections (shows name, uuid, type and device)": "nmcli connection"
        }
    },
    "linux_nmcli device": {
        "Category": "linux",
        "Command": "nmcli device",
        "P-Summary": "hardwar devic manag networkmanag",
        "P-Tasks": "connect wi-fi network specifi name password print avail wi-fi access point print status network interfac",
        "Summary": "Hardware device management with NetworkManager.",
        "Task-Script": {
            "Connect to the Wi-Fi network with a specified name and password": "nmcli device wifi connect {{ssid}} password {{password}}",
            "Print the available Wi-Fi access points": "nmcli device wifi",
            "Print the statuses of all network interfaces": "nmcli device status"
        }
    },
    "linux_nmon": {
        "Category": "linux",
        "Command": "nmon",
        "P-Summary": "system administr tuner benchmark tool",
        "P-Tasks": "save record file -s 300 -c 288 default save record file total 240 measur take 30 second measur start nmon",
        "Summary": "A system administrator, tuner, and benchmark tool.",
        "Task-Script": {
            "Save records to file (\"-s 300 -c 288\" by default)": "nmon -f",
            "Save records to file with a total of 240 measurements, by taking 30 seconds between each measurement": "nmon -f -s {{30}} -c {{240}}",
            "Start nmon": "nmon"
        }
    },
    "linux_nmtui": {
        "Category": "linux",
        "Command": "nmtui",
        "P-Summary": "text user interfac control networkmanag\nuse arrow key navig enter select option",
        "P-Tasks": "connect given network edit add delet given network open user interfac set system hostnam show list avail connect option activ deactiv",
        "Summary": "Text user interface for controlling NetworkManager.\nUse arrow keys to navigate, enter to select an option.",
        "Task-Script": {
            "Connect to a given network": "nmtui connect {{name|uuid|device|SSID}}",
            "Edit/Add/Delete a given network": "nmtui edit {{name|id}}",
            "Open the user interface": "nmtui",
            "Set the system hostname": "nmtui hostname",
            "Show a list of available connections, with the option to activate or deactivate them": "nmtui connect"
        }
    },
    "linux_nologin": {
        "Category": "linux",
        "Command": "nologin",
        "P-Summary": "altern shell prevent user log",
        "P-Tasks": "custom messag user login shell nologin set user login shell nologin prevent user log",
        "Summary": "Alternative shell that prevents a user from logging in.",
        "Task-Script": {
            "Customize message for users with the login shell of `nologin`": "echo \"{{declined_login_message}}\" > /etc/nologin.txt",
            "Set a user's login shell to `nologin` to prevent the user from logging in": "chsh -s {{user}} nologin"
        }
    },
    "linux_notify-send": {
        "Category": "linux",
        "Command": "notify-send",
        "P-Summary": "use current desktop environ notif system creat notif",
        "P-Tasks": "show notif 5 second show notif custom icon show notif app icon show notif titl test content test",
        "Summary": "Uses the current desktop environment's notification system to create a notification.",
        "Task-Script": {
            "Show a notification for 5 seconds": "notify-send -t 5000 \"{{Test}}\" \"{{This is a test}}\"",
            "Show a notification with a custom icon": "notify-send -i {{icon.png}} \"{{Test}}\" \"{{This is a test}}\"",
            "Show a notification with an app's icon": "notify-send \"{{Test}}\" --icon={{google-chrome}}",
            "Show a notification with the title \"Test\" and the content \"This is a test\"": "notify-send \"{{Test}}\" \"{{This is a test}}\""
        }
    },
    "linux_nsenter": {
        "Category": "linux",
        "Command": "nsenter",
        "P-Summary": "run new command run process namespac\nparticularli use docker imag chroot jail",
        "P-Tasks": "run new command exist process ps-tabl namespac run command exist process ipc namespac run command exist process network namespac",
        "Summary": "Run a new command in a running process' namespace.\nParticularly useful for docker images or chroot jails.",
        "Task-Script": {
            "Run a new command in an existing processes ps-table namespace": "nsenter -t {{pid}} -p {{command}} {{command_arguments}}",
            "Run command in existing processes IPC namespace": "nsenter -t {{pid}} -i {{command}} {{command_arguments}}",
            "Run command in existing processes network namespace": "nsenter -t {{pid}} -n {{command}} {{command_arguments}}"
        }
    },
    "linux_ntfsfix": {
        "Category": "linux",
        "Command": "ntfsfix",
        "P-Summary": "fix common problem ntf partit",
        "P-Tasks": "fix given ntf partit",
        "Summary": "Fix common problems on an NTFS partition.",
        "Task-Script": {
            "Fix a given NTFS partition": "sudo ntfsfix {{/dev/sdXN}}"
        }
    },
    "linux_numlockx": {
        "Category": "linux",
        "Command": "numlockx",
        "P-Summary": "control number lock key statu x11 session",
        "P-Tasks": "show current number lock statu toggl current state turn number lock turn number lock",
        "Summary": "Control the number lock key status in X11 sessions.",
        "Task-Script": {
            "Show the current number lock status": "numlockx status",
            "Toggle the current state": "numlockx toggle",
            "Turn the number lock off": "numlockx off",
            "Turn the number lock on": "numlockx on"
        }
    },
    "linux_openrc": {
        "Category": "linux",
        "Command": "openrc",
        "P-Summary": "openrc servic manag\nsee also rc-statu rc-updat rc-servic",
        "P-Tasks": "chang specif runlevel chang specif runlevel stop exist servic",
        "Summary": "The OpenRC service manager.\nSee also `rc-status`, `rc-update`, and `rc-service`.",
        "Task-Script": {
            "Change to a specific runlevel": "sudo openrc {{runlevel_name}}",
            "Change to a specific runlevel, but don't stop any existing services": "sudo openrc --no-stop {{runlevel_name}}"
        }
    },
    "linux_opkg": {
        "Category": "linux",
        "Command": "opkg",
        "P-Summary": "lightweight packag manag use instal openwrt packag",
        "P-Tasks": "display inform specif packag instal packag list avail packag remov packag updat list avail packag upgrad instal packag upgrad one specif packag",
        "Summary": "A lightweight package manager used to install OpenWrt packages.",
        "Task-Script": {
            "Display informations for a specific package": "opkg info {{package}}",
            "Install a package": "opkg install {{package}}",
            "List all the available packages": "opkg list",
            "Remove a package": "opkg remove {{package}}",
            "Update the list of available packages": "opkg update",
            "Upgrade all the installed packages": "opkg upgrade",
            "Upgrade one or more specific package(s)": "opkg upgrade {{package(s)}}"
        }
    },
    "linux_pacaur": {
        "Category": "linux",
        "Command": "pacaur",
        "P-Summary": "util arch linux build instal packag arch user repositori",
        "P-Tasks": "instal new packag includ aur list current instal packag includ aur packag remov packag depend includ aur packag search packag databas keyword includ aur synchron updat packag includ aur synchron updat aur packag",
        "Summary": "A utility for Arch Linux to build and install packages from the Arch User Repository.",
        "Task-Script": {
            "Install a new package (includes AUR)": "pacaur -S {{package_name}}",
            "List all currently installed packages (includes AUR packages)": "pacaur -Qs",
            "Remove a package and its dependencies (includes AUR packages)": "pacaur -Rs {{package_name}}",
            "Search the package database for a keyword (includes AUR)": "pacaur -Ss {{keyword}}",
            "Synchronize and update all packages (includes AUR)": "pacaur -Syu",
            "Synchronize and update only AUR packages": "pacaur -Syua"
        }
    },
    "linux_paccache": {
        "Category": "linux",
        "Command": "paccache",
        "P-Summary": "pacman cach clean util",
        "P-Tasks": "move candid packag directori instead delet perform dry-run show number candid packag delet remov 3 recent packag version pacman cach set number packag version keep",
        "Summary": "A pacman cache cleaning utility.",
        "Task-Script": {
            "Move candidate packages to a directory instead of deleting them": "paccache -m {{path/to/directory}}",
            "Perform a dry-run and show the number of candidate packages for deletion": "paccache -d",
            "Remove all but the 3 most recent package versions from the pacman cache": "paccache -r",
            "Set the number of package versions to keep": "paccache -rk {{num_versions}}"
        }
    },
    "linux_pacman": {
        "Category": "linux",
        "Command": "pacman",
        "P-Summary": "arch linux packag manag util",
        "P-Tasks": "empti packag cach free space find packag own certain file instal new packag list instal packag version list explicitli instal packag version remov packag depend search packag databas regular express keyword synchron updat packag",
        "Summary": "Arch Linux package manager utility.",
        "Task-Script": {
            "Empty package cache to free up space": "pacman -Scc",
            "Find which package owns a certain file": "pacman -Qo {{filename}}",
            "Install a new package": "pacman -S {{package_name}}",
            "List installed packages and versions": "pacman -Q",
            "List only the explicitly installed packages and versions": "pacman -Qe",
            "Remove a package and its dependencies": "pacman -Rs {{package_name}}",
            "Search the package database for a regular expression or keyword": "pacman -Ss \"{{search_pattern}}\"",
            "Synchronize and update all packages": "pacman -Syu"
        }
    },
    "linux_pacman4console": {
        "Category": "linux",
        "Command": "pacman4console",
        "P-Summary": "text-bas consol game inspir origin pacman",
        "P-Tasks": "play custom level start game level 1 start game certain level nine offici level start pacman4consol level editor save specifi text file",
        "Summary": "A text-based console game inspired by the original Pacman.",
        "Task-Script": {
            "Play a custom level": "pacman4console --level={{path/to/level_file}}",
            "Start a game at Level 1": "pacman4console",
            "Start a game on a certain level (there are nine official levels)": "pacman4console --level={{level_number}}",
            "Start the pacman4console level editor, saving to a specified text file": "pacman4consoleedit {{path/to/level_file}}"
        }
    },
    "linux_pamac": {
        "Category": "linux",
        "Command": "pamac",
        "P-Summary": "command line util gui packag manag pamac",
        "P-Tasks": "check packag updat instal new packag list instal packag remov packag longer requir depend orphan search packag databas packag",
        "Summary": "A command line utility for the GUI package manager pamac.",
        "Task-Script": {
            "Check for package updates": "pamac checkupdates",
            "Install a new package": "pamac install {{package_name}}",
            "List installed packages": "pamac list -i",
            "Remove a package and its no longer required dependencies (orphans)": "pamac remove -o {{package_name}}",
            "Search the package database for a package": "pamac search {{package_name}}"
        }
    },
    "linux_pasuspender": {
        "Category": "linux",
        "Command": "pasuspender",
        "P-Summary": "temporarili suspend pulseaudio anoth command run allow access alsa",
        "P-Tasks": "suspend pulseaudio run jackd",
        "Summary": "Temporarily suspends `pulseaudio` while another command is running to allow access to alsa.",
        "Task-Script": {
            "Suspend pulseaudio while running `jackd`": "pasuspender -- {{jackd -d alsa --device hw:0}}"
        }
    },
    "linux_pdfgrep": {
        "Category": "linux",
        "Command": "pdfgrep",
        "P-Summary": "search text pdf file",
        "P-Tasks": "case insensit search line begin foo return first 3 match find line match pattern pdf find pattern file pdf extens current directori recurs find pattern file match specif glob current directori recurs includ file name page number match line",
        "Summary": "Search text in PDF files.",
        "Task-Script": {
            "Do a case insensitive search for lines that begin with \"foo\" and return the first 3 matches": "pdfgrep --max-count {{3}} --ignore-case {{'^foo'}} {{file.pdf}}",
            "Find lines that match pattern in a PDF": "pdfgrep {{pattern}} {{file.pdf}}",
            "Find pattern in files with a .pdf extension in the current directory recursively": "pdfgrep --recursive {{pattern}}",
            "Find pattern on files that match a specific glob in the current directory recursively": "pdfgrep --recursive --include {{'*book.pdf'}} {{pattern}}",
            "Include file name and page number for each matched line": "pdfgrep --with-filename --page-number {{pattern}} {{file.pdf}}"
        }
    },
    "linux_perf": {
        "Category": "linux",
        "Command": "perf",
        "P-Summary": "framework linux perform counter measur",
        "P-Tasks": "display basic perform counter stat command display system-wid real time perform counter profil read perf data creat perf record display profil run command record profil perf data",
        "Summary": "Framework for linux performance counter measurements.",
        "Task-Script": {
            "Display basic performance counter stats for a command": "perf stat {{gcc hello.c}}",
            "Display system-wide real time performance counter profile": "sudo perf top",
            "Read \"perf.data\" (created by `perf record`) and display the profile": "sudo perf report",
            "Run a command and record its profile into \"perf.data\"": "sudo perf record {{command}}"
        }
    },
    "linux_phar": {
        "Category": "linux",
        "Command": "phar",
        "P-Summary": "creat updat extract php archiv phar",
        "P-Tasks": "add space-separ file directori phar file compress uncompress file directori phar file delet specifi file directori phar file display full usag inform avail hash compress algorithm display content phar file get inform phar file sign phar file specif hash algorithm sign phar file openssl privat key",
        "Summary": "Create, update or extract PHP archives (PHAR).",
        "Task-Script": {
            "Add space-separated files or directories to a Phar file": "phar add -f {{path/to/phar_file}} {{files_or_directories}}",
            "Compress or uncompress files and directories in a Phar file": "phar compress -f {{path/to/phar_file}} -c {{algorithm}}",
            "Delete the specified file or directory from a Phar file": "phar delete -f {{path/to/phar_file}} -e {{file_or_directory}}",
            "Display full usage information and available hashing/compression algorithms": "phar help",
            "Display the contents of a Phar file": "phar list -f {{path/to/phar_file}}",
            "Get information about a Phar file": "phar info -f {{path/to/phar_file}}",
            "Sign a Phar file with a specific hash algorithm": "phar sign -f {{path/to/phar_file}} -h {{algorithm}}",
            "Sign a Phar file with an OpenSSL private key": "phar sign -f {{path/to/phar_file}} -h openssl -y {{path/to/private_key}}"
        }
    },
    "linux_photorec": {
        "Category": "linux",
        "Command": "photorec",
        "P-Summary": "delet file recoveri tool\nrecommend write recov file disk separ one recov",
        "P-Tasks": "run photorec disk imag imag dd run photorec specif devic",
        "Summary": "Deleted file recovery tool.\nIt is recommended to write recovered files to a disk separate to the one being recovered from.",
        "Task-Script": {
            "Run PhotoRec on a disk image (image.dd)": "sudo photorec {{path/to/image.dd}}",
            "Run PhotoRec on a specific device": "sudo photorec {{/dev/sdb}}"
        }
    },
    "linux_phpdismod": {
        "Category": "linux",
        "Command": "phpdismod",
        "P-Summary": "disabl php extens debian-bas ose",
        "P-Tasks": "disabl json extens php 7 3 cli sapi disabl json extens everi sapi everi php version",
        "Summary": "Disable PHP extensions on Debian-based OSes.",
        "Task-Script": {
            "Disable the json extension for PHP 7.3 with the cli SAPI": "sudo phpdismod -v {{7.3}} -s {{cli}} {{json}}",
            "Disable the json extension for every SAPI of every PHP version": "sudo phpdismod {{json}}"
        }
    },
    "linux_phpenmod": {
        "Category": "linux",
        "Command": "phpenmod",
        "P-Summary": "enabl php extens debian-bas ose",
        "P-Tasks": "enabl json extens php 7 3 cli sapi enabl json extens everi sapi everi php version",
        "Summary": "Enable PHP extensions on Debian-based OSes.",
        "Task-Script": {
            "Enable the json extension for PHP 7.3 with the cli SAPI": "sudo phpenmod -v {{7.3}} -s {{cli}} {{json}}",
            "Enable the json extension for every SAPI of every PHP version": "sudo phpenmod {{json}}"
        }
    },
    "linux_phpquery": {
        "Category": "linux",
        "Command": "phpquery",
        "P-Summary": "php extens manag debian-bas ose",
        "P-Tasks": "check json extens enabl php 7 3 apache2 sapi list avail php version list avail sapi php 7 3 list enabl extens php 7 3 cli sapi",
        "Summary": "PHP extension manager for Debian-based OSes.",
        "Task-Script": {
            "Check if the json extension is enabled for PHP 7.3 with the apache2 SAPI": "sudo phpquery -v {{7.3}} -s {{apache2}} -m {{json}}",
            "List available PHP versions": "sudo phpquery -V",
            "List available SAPIs for PHP 7.3": "sudo phpquery -v {{7.3}} -S",
            "List enabled extensions for PHP 7.3 with the cli SAPI": "sudo phpquery -v {{7.3}} -s {{cli}} -M"
        }
    },
    "linux_physlock": {
        "Category": "linux",
        "Command": "physlock",
        "P-Summary": "lock consol virtual termin",
        "P-Tasks": "disabl sysrq mechan lock display messag password prompt fork detach physlock use suspend hibern script lock everi consol requir current user root unlock mute kernel messag consol lock",
        "Summary": "Lock all consoles and virtual terminals.",
        "Task-Script": {
            "Disable SysRq mechanism while locked": "physlock -s",
            "Display a message before the password prompt": "physlock -p \"{{Locked!}}\"",
            "Fork and detach physlock (useful for suspend or hibernate scripts)": "physlock -d",
            "Lock every console (require current user or root to unlock)": "physlock",
            "Mute kernel messages on console while locked": "physlock -m"
        }
    },
    "linux_pi": {
        "Category": "linux",
        "Command": "pi",
        "P-Summary": "comput decim archimed constant pi command line",
        "P-Tasks": "display 100 decim digit archimed constant pi display specifi number decim digit archimed constant pi display help display recommend read display version",
        "Summary": "Compute decimal Archimedes' constant Pi on the command line.",
        "Task-Script": {
            "Display 100 decimal digits of Archimedes' constant Pi": "pi",
            "Display a specified number of decimal digits of Archimedes' constant Pi": "pi {{number}}",
            "Display help": "pi --help",
            "Display recommended readings": "pi --bibliography",
            "Display version": "pi --version"
        }
    },
    "linux_pidof": {
        "Category": "linux",
        "Command": "pidof",
        "P-Summary": "get id process use name",
        "P-Tasks": "kill process given name list singl process id given name list process id given name list process id includ script given name",
        "Summary": "Gets the ID of a process using its name.",
        "Task-Script": {
            "Kill all processes with given name": "kill \"$(pidof {{name}})\"",
            "List a single process ID with given name": "pidof -s {{bash}}",
            "List all process IDs with given name": "pidof {{bash}}",
            "List process IDs including scripts with given name": "pidof -x {{script.py}}"
        }
    },
    "linux_pidstat": {
        "Category": "linux",
        "Command": "pidstat",
        "P-Summary": "show system resourc usag includ cpu memori io etc",
        "P-Tasks": "show cpu statist 2 second interv 10 time show inform specif pid show input output usag per process id show memori statist process whose command name includ fox bird show page fault memori util",
        "Summary": "Show system resource usage, including CPU, memory, IO etc.",
        "Task-Script": {
            "Show CPU statistics at a 2 second interval for 10 times": "pidstat {{2}} {{10}}",
            "Show information on a specific PID": "pidstat -p {{PID}}",
            "Show input/output usage per process id": "pidstat -d",
            "Show memory statistics for all processes whose command name include \"fox\" or \"bird\"": "pidstat -C \"{{fox|bird}}\" -r -p ALL",
            "Show page faults and memory utilization": "pidstat -r"
        }
    },
    "linux_pihole": {
        "Category": "linux",
        "Command": "pihole",
        "P-Summary": "termin interfac pi-hol ad-block dn server",
        "P-Tasks": "check pi-hol daemon statu monitor detail system statu restart daemon server search list domain start stop daemon whitelist blacklist domain",
        "Summary": "Terminal interface for the Pi-Hole ad-blocking DNS server.",
        "Task-Script": {
            "Check the Pi-hole daemon's status": "pihole status",
            "Monitor detailed system status": "pihole chronometer",
            "Restart the daemon (not the server itself)": "pihole restartdns",
            "Search the lists for a domain": "pihole query {{example.com}}",
            "Start or stop the daemon": "pihole {{enable|disable}}",
            "Whitelist or blacklist a domain": "pihole {{whitelist|blacklist}} {{example.com}}"
        }
    },
    "linux_pivpn": {
        "Category": "linux",
        "Command": "pivpn",
        "P-Summary": "easi security-harden openvpn setup manag\norigin design raspberri pi work linux devic",
        "P-Tasks": "add new client devic list client devic list current connect devic statist revok previous authent devic uninstal pivpn",
        "Summary": "Easy security-hardened OpenVPN setup and manager.\nOriginally designed for the Raspberry Pi, but works on other Linux devices too.",
        "Task-Script": {
            "Add a new client device": "sudo pivpn add",
            "List all client devices": "sudo pivpn list",
            "List currently connected devices and their statistics": "sudo pivpn clients",
            "Revoke a previously authenticated device": "sudo pivpn revoke",
            "Uninstall PiVPN": "sudo pivpn uninstall"
        }
    },
    "linux_pkg-config": {
        "Category": "linux",
        "Command": "pkg-config",
        "P-Summary": "provid detail instal librari compil applic",
        "P-Tasks": "compil code libgtk-3 libwebkit2gtk-4 0 depend get list librari depend get list librari depend proper cflag gcc",
        "Summary": "Provide the details of installed libraries for compiling applications.",
        "Task-Script": {
            "Compile your code with libgtk-3, libwebkit2gtk-4.0 and all their dependencies": "c++ example.cpp $(pkg-config --cflags --libs gtk+-3.0 webkit2gtk-4.0) -o example",
            "Get the list of libraries and their dependencies": "pkg-config --libs {{library1 library2 ...}}",
            "Get the list of libraries, their dependencies, and proper cflags for gcc": "pkg-config --cflags --libs {{library1 library2 ...}}"
        }
    },
    "linux_pkgadd": {
        "Category": "linux",
        "Command": "pkgadd",
        "P-Summary": "add packag crux system",
        "P-Tasks": "instal local softwar packag updat alreadi instal packag local packag",
        "Summary": "Add a package to a CRUX system.",
        "Task-Script": {
            "Install a local software package": "pkgadd {{package_name}}",
            "Update an already installed package from a local package": "pkgadd -u {{package_name}}"
        }
    },
    "linux_pkginfo": {
        "Category": "linux",
        "Command": "pkginfo",
        "P-Summary": "queri packag databas crux system",
        "P-Tasks": "list file own packag list instal packag version list owner file match pattern print footprint file",
        "Summary": "Query the package database on a CRUX system.",
        "Task-Script": {
            "List files owned by a package": "pkginfo -l {{package_name}}",
            "List installed packages and their versions": "pkginfo -i",
            "List the owner(s) of files matching a pattern": "pkginfo -o {{pattern}}",
            "Print the footprint of a file": "pkginfo -f {{file}}"
        }
    },
    "linux_pkgmk": {
        "Category": "linux",
        "Command": "pkgmk",
        "P-Summary": "make binari packag use pkgadd crux",
        "P-Tasks": "ignor md5 sum make packag ignor footprint make packag instal packag make make download packag updat packag footprint upgrad packag make",
        "Summary": "Make a binary package for use with pkgadd on CRUX.",
        "Task-Script": {
            "Ignore the MD5 sum when making a package": "pkgmk -d -im",
            "Ignore the footprint when making a package": "pkgmk -d -if",
            "Install the package after making it": "pkgmk -d -i",
            "Make and download a package": "pkgmk -d",
            "Update the package's footprint": "pkgmk -uf",
            "Upgrade the package after making it": "pkgmk -d -u"
        }
    },
    "linux_pkgrm": {
        "Category": "linux",
        "Command": "pkgrm",
        "P-Summary": "remov packag crux system",
        "P-Tasks": "remov instal packag",
        "Summary": "Remove a package from a CRUX system.",
        "Task-Script": {
            "Remove an installed package": "pkgrm {{package_name}}"
        }
    },
    "linux_playerctl": {
        "Category": "linux",
        "Command": "playerctl",
        "P-Summary": "util control differ media player",
        "P-Tasks": "list player next media previou media send command specif player send command player show play toggl play",
        "Summary": "Utility to control different media players.",
        "Task-Script": {
            "List all players": "playerctl --list-all",
            "Next media": "playerctl next",
            "Previous media": "playerctl previous",
            "Send a command to a specific player": "playerctl --player={{player_name}} {{command}}",
            "Send a command to all players": "playerctl --all-players {{command}}",
            "Show now playing": "playerctl metadata --format \"Now playing: {{artist}} - {{album}} - {{title}}\"",
            "Toggle play": "playerctl play-pause"
        }
    },
    "linux_popd": {
        "Category": "linux",
        "Command": "popd",
        "P-Summary": "remov directori place directori stack pushd command",
        "P-Tasks": "remov nth directori start zero left list print dir remov nth directori start zero right list print dir remov top directori stack cd",
        "Summary": "Remove a directory placed on the directory stack by the `pushd` command.",
        "Task-Script": {
            "Remove the Nth directory (starting from zero to the left from the list printed with `dirs`)": "popd +N",
            "Remove the Nth directory (starting from zero to the right from the list printed with `dirs`)": "popd -N",
            "Remove the top directory from the stack and cd to it": "popd"
        }
    },
    "linux_ports": {
        "Category": "linux",
        "Command": "ports",
        "P-Summary": "updat list port tree crux system",
        "P-Tasks": "check differ instal packag port tree list port current tree updat port tree",
        "Summary": "Update/list the ports tree on a CRUX system.",
        "Task-Script": {
            "Check the differences between installed packages and the ports tree": "ports -d",
            "List the ports in the current tree": "ports -l",
            "Update the ports tree": "ports -u"
        }
    },
    "linux_postfix": {
        "Category": "linux",
        "Command": "postfix",
        "P-Summary": "postfix mail transfer agent mta control program\nsee also dovecot mail deliveri agent mda integr postfix",
        "P-Tasks": "check configur check statu postfix daemon flush mail queue grace stop postfix reload configur file start postfix",
        "Summary": "Postfix mail transfer agent (MTA) control program.\nSee also `dovecot`, a mail delivery agent (MDA) that integrates with Postfix.",
        "Task-Script": {
            "Check the configuration": "sudo postfix check",
            "Check the status of the Postfix daemon": "sudo postfix status",
            "Flush the mail queue": "sudo postfix flush",
            "Gracefully stop Postfix": "sudo postfix stop",
            "Reload the configuration files": "sudo postfix reload",
            "Start Postfix": "sudo postfix start"
        }
    },
    "linux_poweroff": {
        "Category": "linux",
        "Command": "poweroff",
        "P-Summary": "shutdown system",
        "P-Tasks": "poweroff system",
        "Summary": "Shutdown the system.",
        "Task-Script": {
            "Poweroff the system": "sudo poweroff"
        }
    },
    "linux_powertop": {
        "Category": "linux",
        "Command": "powertop",
        "P-Summary": "optim batteri power usag",
        "P-Tasks": "calibr power usag measur gener html power usag report current directori tune optim set",
        "Summary": "Optimize battery power usage.",
        "Task-Script": {
            "Calibrate power usage measurements": "sudo powertop --calibrate",
            "Generate HTML power usage report in the current directory": "sudo powertop --html={{power_report.html}}",
            "Tune to optimal settings": "sudo powertop --auto-tune"
        }
    },
    "linux_print": {
        "Category": "linux",
        "Command": "print",
        "P-Summary": "alia run-mailcap action print\norigin run-mailcap use process mime-typ file",
        "P-Tasks": "print action use print file default run-mailcap tool run-mailcap",
        "Summary": "An alias to a `run-mailcap`'s action print.\nOriginally `run-mailcap` is used to process mime-type/file.",
        "Task-Script": {
            "Print action can be used to print any file on default run-mailcap tool": "print {{filename}}",
            "With `run-mailcap`": "run-mailcap --action=print {{filename}}"
        }
    },
    "linux_progress": {
        "Category": "linux",
        "Command": "progress",
        "P-Summary": "display monitor progress run coreutil",
        "P-Tasks": "launch monitor singl long-run command show progress run coreutil show progress run coreutil quiet mode",
        "Summary": "Display/Monitor the progress of running coreutils.",
        "Task-Script": {
            "Launch and monitor a single long-running command": "{{command}} & progress -mp $!",
            "Show the progress of running coreutils": "progress",
            "Show the progress of running coreutils in quiet mode": "progress -q"
        }
    },
    "linux_protontricks": {
        "Category": "linux",
        "Command": "protontricks",
        "P-Summary": "simpl wrapper winetrick thing proton enabl game requir winetrick",
        "P-Tasks": "run command within game instal directori run protontrick gui run winetrick specif game show protontrick help messag",
        "Summary": "A simple wrapper that does winetricks things for Proton enabled games, requires Winetricks.",
        "Task-Script": {
            "Run a command within a games installation directory": "protontricks -c {{command}} {{appid}}",
            "Run the protontricks GUI": "protontricks --gui",
            "Run winetricks for a specific game": "protontricks {{appid}} {{winetricks_args}}",
            "Show the protontricks help message": "protontricks"
        }
    },
    "linux_prt-get": {
        "Category": "linux",
        "Command": "prt-get",
        "P-Summary": "crux packag manag",
        "P-Tasks": "instal packag instal packag depend handl remov packag search file packag search port tree updat packag manual upgrad system local port tree",
        "Summary": "The CRUX package manager.",
        "Task-Script": {
            "Install a package": "prt-get install {{package_name}}",
            "Install a package with dependency handling": "prt-get depinst {{package_name}}",
            "Remove a package": "prt-get remove {{package_name}}",
            "Search for a file in a package": "prt-get fsearch {{file}}",
            "Search the ports tree": "prt-get search {{package_name}}",
            "Update a package manually": "prt-get upgrade {{package_name}}",
            "Upgrade the system from the local ports tree": "prt-get sysup"
        }
    },
    "linux_pstree": {
        "Category": "linux",
        "Command": "pstree",
        "P-Summary": "conveni tool show run process tree",
        "P-Tasks": "display tree process display tree process pid display process tree root process own specifi user",
        "Summary": "A convenient tool to show running processes as a tree.",
        "Task-Script": {
            "Display a tree of processes": "pstree",
            "Display a tree of processes with PIDs": "pstree -p",
            "Display all process trees rooted at processes owned by specified user": "pstree {{user}}"
        }
    },
    "linux_ptx": {
        "Category": "linux",
        "Command": "ptx",
        "P-Summary": "gener permut index word one text file",
        "P-Tasks": "gener permut index first field line index refer gener permut index sysv-styl behavior gener permut index fix width gener permut index list filter word gener permut index automat gener index refer",
        "Summary": "Generate a permuted index of words from one or more text files.",
        "Task-Script": {
            "Generate a permuted index where the first field of each line is an index reference": "ptx --references {{path/to/file}}",
            "Generate a permuted index with SYSV-style behaviors": "ptx --traditional {{path/to/file}}",
            "Generate a permuted index with a fixed width": "ptx --width={{width_in_columns}} {{path/to/file}}",
            "Generate a permuted index with a list of filtered words": "ptx --only-file={{path/to/filter}} {{path/to/file}}",
            "Generate a permuted index with automatically generated index references": "ptx --auto-reference {{path/to/file}}"
        }
    },
    "linux_pulseaudio": {
        "Category": "linux",
        "Command": "pulseaudio",
        "P-Summary": "pulseaudio sound system daemon manag",
        "P-Tasks": "check pulseaudio run non-zero exit code mean run kill run pulseaudio daemon list avail modul load modul current run daemon specifi argument start pulseaudio daemon background",
        "Summary": "The pulseaudio sound system daemon and manager.",
        "Task-Script": {
            "Check if pulseaudio is running (a non-zero exit code means it is not running)": "pulseaudio --check",
            "Kill the running pulseaudio daemon": "pulseaudio --kill",
            "List available modules": "pulseaudio --dump-modules",
            "Load a module into the currently running daemon with the specified arguments": "pulseaudio --load=\"{{module_name}} {{arguments}}\"",
            "Start the pulseaudio daemon in the background": "pulseaudio --start"
        }
    },
    "linux_pushd": {
        "Category": "linux",
        "Command": "pushd",
        "P-Summary": "place directori stack access later\nsee also popd switch back origin directori",
        "P-Tasks": "rotat stack make 5th element top stack switch first second directori stack switch directori push stack",
        "Summary": "Place a directory on a stack so it can be accessed later.\nSee also `popd` to switch back to original directory.",
        "Task-Script": {
            "Rotate stack by making the 5th element the top of the stack": "pushd +4",
            "Switch first and second directories on the stack": "pushd",
            "Switch to directory and push it on the stack": "pushd < {{directory}}"
        }
    },
    "linux_pvcreate": {
        "Category": "linux",
        "Command": "pvcreate",
        "P-Summary": "initi physic volum disk partit use logic volum manag lvm",
        "P-Tasks": "forc creation without confirm prompt initi dev sda1 volum use lvm",
        "Summary": "Initialize a physical volume (disk or partition) for use by the Logical Volume Manager (LVM).",
        "Task-Script": {
            "Force the creation without any confirmation prompts": "pvcreate --force {{/dev/sda1}}",
            "Initialize the `/dev/sda1` volume for use by LVM": "pvcreate {{/dev/sda1}}"
        }
    },
    "linux_pvs": {
        "Category": "linux",
        "Command": "pvs",
        "P-Summary": "display inform lvm physic volum",
        "P-Tasks": "append field default display chang default display show detail display inform physic volum display non-phys volum display specif field suppress head line use separ separ field",
        "Summary": "Display information about LVM physical volumes.",
        "Task-Script": {
            "Append field to default display": "pvs -o +{{field_name}}",
            "Change default display to show more details": "pvs -v",
            "Display information about physical volumes": "pvs",
            "Display non-physical volumes": "pvs -a",
            "Display only specific fields": "pvs -o {{field_name_1}},{{field_name_2}}",
            "Suppress heading line": "pvs --noheadings",
            "Use separator to separate fields": "pvs --separator {{special_character}}"
        }
    },
    "linux_pwdx": {
        "Category": "linux",
        "Command": "pwdx",
        "P-Summary": "print work directori process",
        "P-Tasks": "print current work directori process",
        "Summary": "Print working directory of a process.",
        "Task-Script": {
            "Print current working directory of a process": "pwdx {{process_id}}"
        }
    },
    "linux_pwgen": {
        "Category": "linux",
        "Command": "pwgen",
        "P-Summary": "gener pronounc password",
        "P-Tasks": "gener password least one capit letter gener random password mbol gener secur hard-to-memor password",
        "Summary": "Generate pronounceable passwords.",
        "Task-Script": {
            "Generate password with at least one capital letter in them": "pwgen -c {{length}}",
            "Generate random password with s[y]mbols": "pwgen -y {{length}}",
            "Generate secure, hard-to-memorize passwords": "pwgen -s {{length}}"
        }
    },
    "linux_qsub": {
        "Category": "linux",
        "Command": "qsub",
        "P-Summary": "submit script queue manag system torqu",
        "P-Tasks": "submit script execut 2 node use 4 core per node submit script specif queue\nnote differ queue differ maximum minimum runtim limit submit script specifi wallclock runtim limit 1 hour 2 minut 3 second submit script default set depend torqu set",
        "Summary": "Submits a script to the queue management system TORQUE.",
        "Task-Script": {
            "Submit a script that is executed on 2 nodes using 4 cores per node": "qsub -l nodes={{2}}:ppn={{4}} {{script.sh}}",
            "Submit a script to a specific queue. Note that different queues can have different maximum and minimum runtime limits": "qsub -q {{queue_name}} {{script.sh}}",
            "Submit a script with a specified wallclock runtime limit of 1 hour, 2 minutes and 3 seconds": "qsub -l walltime={{1}}:{{2}}:{{3}} {{script.sh}}",
            "Submit a script with default settings (depends on TORQUE settings)": "qsub {{script.sh}}"
        }
    },
    "linux_quotacheck": {
        "Category": "linux",
        "Command": "quotacheck",
        "P-Summary": "scan filesystem disk usag creat check repair quota file\nbest run quota check quota turn prevent damag loss quota file",
        "P-Tasks": "check group quota check quota given filesystem debug mode check quota given filesystem display progress check quota mount non-nf filesystem check user quota forc check even quota enabl caus damag loss quota file",
        "Summary": "Scan a filesystem for disk usage; create, check and repair quota files.\nIt is best to run quota check with quotas turned off to prevent damage or loss to quota files.",
        "Task-Script": {
            "Check group quotas": "sudo quotacheck --group {{group}} {{mountpoint}}",
            "Check quotas on a given filesystem in debug mode": "sudo quotacheck --debug {{mountpoint}}",
            "Check quotas on a given filesystem, displaying the progress": "sudo quotacheck --verbose {{mountpoint}}",
            "Check quotas on all mounted non-NFS filesystems": "sudo quotacheck --all",
            "Check user quotas": "sudo quotacheck --user {{user}} {{mountpoint}}",
            "Force check even if quotas are enabled (this can cause damage or loss to quota files)": "sudo quotacheck --force {{mountpoint}}"
        }
    },
    "linux_radeontop": {
        "Category": "linux",
        "Command": "radeontop",
        "P-Summary": "show utilis amd gpu",
        "P-Tasks": "enabl colouris output select specif gpu bu number first number output lspci show utilis default amd gpu specifi display refresh rate higher mean gpu overhead",
        "Summary": "Show utilisation of AMD GPUs.",
        "Task-Script": {
            "Enable colourised output": "sudo radeontop --colour",
            "Select a specific GPU (the bus number is the first number in the output of `lspci`)": "sudo radeontop --bus {{bus_number}}",
            "Show the utilisation of the default AMD GPU": "sudo radeontop",
            "Specify the display refresh rate (higher means more GPU overhead)": "sudo radeontop --ticks {{samples_per_second}}"
        }
    },
    "linux_rc-service": {
        "Category": "linux",
        "Command": "rc-service",
        "P-Summary": "locat run openrc servic argument\nsee also openrc",
        "P-Tasks": "actual run servic custom command resolv locat servic definit disk restart servic show servic statu simul run servic custom command start servic stop servic",
        "Summary": "Locate and run OpenRC services with arguments.\nSee also `openrc`.",
        "Task-Script": {
            "Actually run a service's custom command": "sudo rc-service {{service_name}} {{command_name}}",
            "Resolve the location of a service definition on disk": "sudo rc-service --resolve {{service_name}}",
            "Restart a service": "sudo rc-service {{service_name}} restart",
            "Show a service's status": "rc-service {{service_name}} status",
            "Simulate running a service's custom command": "sudo rc-service --dry-run {{service_name}} {{command_name}}",
            "Start a service": "sudo rc-service {{service_name}} start",
            "Stop a service": "sudo rc-servie {{service_name}} stop"
        }
    },
    "linux_rc-status": {
        "Category": "linux",
        "Command": "rc-status",
        "P-Summary": "show statu info runlevel\nsee also openrc",
        "P-Tasks": "get current runlevel includ servic runlevel summari list runlevel list manual start servic list servic crash list supervis servic show summari servic statu",
        "Summary": "Show status info about runlevels.\nSee also `openrc`.",
        "Task-Script": {
            "Get the current runlevel": "rc-status --runlevel",
            "Include services in all runlevels in the summary": "rc-status --all",
            "List all runlevels": "rc-status --list",
            "List manually started services": "rc-status --manual",
            "List services that have crashed": "rc-status --crashed",
            "List supervised services": "rc-status --supervised",
            "Show a summary of services and their status": "rc-status"
        }
    },
    "linux_rc-update": {
        "Category": "linux",
        "Command": "rc-update",
        "P-Summary": "add remov openrc servic runlevel\nsee also openrc",
        "P-Tasks": "add servic runlevel delet servic runlevel delet servic runlevel list servic runlevel ad",
        "Summary": "Add and remove OpenRC services to and from runlevels.\nSee also `openrc`.",
        "Task-Script": {
            "Add a service to a runlevel": "sudo rc-update add {{service_name}} {{runlevel}}",
            "Delete a service from a runlevel": "sudo rc-update delete {{service_name}} {{runlevel}}",
            "Delete a service from all runlevels": "sudo rc-update --all delete {{service_name}}",
            "List all services and the runlevels they are added to": "rc-update show"
        }
    },
    "linux_rdesktop": {
        "Category": "linux",
        "Command": "rdesktop",
        "P-Summary": "remot desktop protocol client\nuse connect remot comput use rdp protocol",
        "P-Tasks": "connect remot comput default port 3389 connect remot comput use domain user connect remot comput full screen press ctrl + alt + enter exist simpl exampl use 16 bit color speed use custom resolut use letter x number",
        "Summary": "Remote Desktop Protocol client.\nIt can be used to connect the remote computer using the RDP protocol.",
        "Task-Script": {
            "Connect to a remote computer (default port is 3389)": "rdesktop -u {{username}} -p {{password}} {{host:port}}",
            "Connect to a remote computer using domain user": "rdesktop -u {{username}} -p {{password}} -d {{domainname}} {{host:port}}",
            "Connect to a remote computer with full screen (press `Ctrl + Alt + Enter` to exist)": "rdesktop -u {{username}} -p {{password}} -f {{host:port}}",
            "Simple Examples": "rdesktop -u Administrator -p passwd123 192.168.1.111:3389",
            "Use the 16 bit color (speed up)": "rdesktop -u {{username}} -p {{password}} -a 16 {{host:port}}",
            "Use the customed resolution (use the letter 'x' between the number)": "rdesktop -u {{username}} -p {{password}} -g 1366x768 {{host:port}}"
        }
    },
    "linux_readelf": {
        "Category": "linux",
        "Command": "readelf",
        "P-Summary": "display inform elf file",
        "P-Tasks": "display inform elf file display header present elf file display entri symbol tabl section elf file one display inform contain elf header start file",
        "Summary": "Displays information about ELF files.",
        "Task-Script": {
            "Display all information about the ELF file": "readelf -all {{path/to/binary}}",
            "Display all the headers present in the ELF file": "readelf --headers {{path/to/binary}}",
            "Display the entries in symbol table section of the ELF file, if it has one": "readelf --symbols {{path/to/binary}}",
            "Display the information contained in the ELF header at the start of the file": "readelf --file-header {{path/to/binary}}"
        }
    },
    "linux_reboot": {
        "Category": "linux",
        "Command": "reboot",
        "P-Summary": "reboot system",
        "P-Tasks": "reboot immedi reboot immedi without grace shut",
        "Summary": "Reboot the system.",
        "Task-Script": {
            "Reboot immediately": "reboot",
            "Reboot immediately without gracefully shutting down": "reboot -f"
        }
    },
    "linux_reflector": {
        "Category": "linux",
        "Command": "reflector",
        "P-Summary": "arch script fetch sort mirrorlist",
        "P-Tasks": "get mirror sort download speed save get german http mirror get 10 recent sync mirror",
        "Summary": "Arch script to fetch and sort mirrorlists.",
        "Task-Script": {
            "Get all mirrors, sort for download speed and save them": "sudo reflector --sort {{rate}} --save {{/etc/pacman.d/mirrorlist}}",
            "Only get German HTTPS mirrors": "reflector --country {{Germany}} --protocol {{https}}",
            "Only get the 10 recently sync'd mirrors": "reflector --latest {{10}}"
        }
    },
    "linux_rename": {
        "Category": "linux",
        "Command": "rename",
        "P-Summary": "renam multipl file\nnote : page refer command util-linux packag\nperl version see file-renam perl-renam\nwarn : command safeguard overwrit file without prompt",
        "P-Tasks": "chang file extens overwrit exist file dry-run - display renam would occur without perform prepend foo filenam current directori renam group increasingli number file zero-pad number 3 digit renam file use simpl substitut substitut foo bar wherev found",
        "Summary": "Rename multiple files.\nNOTE: this page refers to the command from the `util-linux` package.\nFor the Perl version, see `file-rename` or `perl-rename`.\nWarning: This command has no safeguards and will overwrite files without prompting.",
        "Task-Script": {
            "Change file extensions": "rename {{.ext}} {{.bak}} {{*.ext}}",
            "Do not overwrite existing files": "rename -o {{foo}} {{bar}} {{*}}",
            "Dry-run - display which renames would occur without performing them": "rename -vn {{foo}} {{bar}} {{*}}",
            "Prepend \"foo\" to all filenames in the current directory": "rename {{''}} {{'foo'}} {{*}}",
            "Rename a group of increasingly numbered files zero-padding the numbers up to 3 digits": "rename {{foo}} {{foo00}} {{foo?}} && rename {{foo}} {{foo0}} {{foo??}}",
            "Rename files using simple substitutions (substitute 'foo' with 'bar' wherever found)": "rename {{foo}} {{bar}} {{*}}"
        }
    },
    "linux_reportbug": {
        "Category": "linux",
        "Command": "reportbug",
        "P-Summary": "bug report tool debian distribut",
        "P-Tasks": "gener bug report specif packag send e-mail report bug specif packag gener problem infrastructur etc\nwrite bug report file instead send e-mail",
        "Summary": "Bug report tool of Debian distribution.",
        "Task-Script": {
            "Generate a bug report about a specific package, then send it by e-mail": "reportbug {{package}}",
            "Report a bug that is not about a specific package (general problem, infrastructure, etc.)": "reportbug other",
            "Write the bug report to a file instead of sending it by e-mail": "reportbug -o {{filename}} {{package}}"
        }
    },
    "linux_repquota": {
        "Category": "linux",
        "Command": "repquota",
        "P-Summary": "display summari exist file quota filesystem",
        "P-Tasks": "report quota user group human-read format report quota group report quota user report use quota limit human-read format report quota stat user even use quota report stat quota use",
        "Summary": "Display a summary of existing file quotas for a filesystem.",
        "Task-Script": {
            "Report on all quotas for users and groups in a human-readable format": "sudo repquota -augs",
            "Report on quotas for groups only": "sudo repquota --group {{filesystem}}",
            "Report on quotas for users only": "repquota --user {{filesystem}}",
            "Report on used quota and limits in a human-readable format": "sudo repquota --human-readable {{filesystem}}",
            "Report quota stats for all users, even those who aren't using any of their quota": "sudo repquota -v {{filesystem}}",
            "Report stats for all quotas in use": "sudo repquota -all"
        }
    },
    "linux_reset": {
        "Category": "linux",
        "Command": "reset",
        "P-Summary": "reinitialis current termin\nclear entir termin screen",
        "P-Tasks": "display termin type instead reinitialis current termin",
        "Summary": "Reinitialises the current terminal. Clears the entire terminal screen.",
        "Task-Script": {
            "Display the terminal type instead": "reset -q",
            "Reinitialise the current terminal": "reset"
        }
    },
    "linux_resize2fs": {
        "Category": "linux",
        "Command": "resize2fs",
        "P-Summary": "resiz ext2 ext3 ext4 filesystem\nresiz underli partit filesystem must unmount",
        "P-Tasks": "automat resiz filesystem resiz filesystem size 40g display progress bar shrink filesystem minimum possibl size",
        "Summary": "Resize an ext2, ext3 or ext4 filesystem.\nDoes not resize the underlying partition, and the filesystem must be unmounted.",
        "Task-Script": {
            "Automatically resize a filesystem": "resize2fs {{/dev/sdXN}}",
            "Resize the filesystem to a size of 40G, displaying a progress bar": "resize2fs -p {{/dev/sdXN}} {{40G}}",
            "Shrink the filesystem to its minimum possible size": "resize2fs -M {{/dev/sdXN}}"
        }
    },
    "linux_rfkill": {
        "Category": "linux",
        "Command": "rfkill",
        "P-Summary": "enabl disabl wireless devic",
        "P-Tasks": "block devic type e g\nbluetooth wlan filter column list devic output json format unblock devic type e g\nbluetooth wlan",
        "Summary": "Enable and disable wireless devices.",
        "Task-Script": {
            "Block devices by type (e.g. bluetooth, wlan)": "rfkill block {{bluetooth}}",
            "Filter by columns": "rfkill -o {{ID,TYPE,DEVICE}}",
            "List devices": "rfkill",
            "Output in JSON format": "rfkill -J",
            "Unblock devices by type (e.g. bluetooth, wlan)": "rfkill unblock {{wlan}}"
        }
    },
    "linux_rig": {
        "Category": "linux",
        "Command": "rig",
        "P-Summary": "util piec togeth random first name last name street number address along geograph consist ie match area citi state zip code area code",
        "P-Tasks": "display ale f emal random name address display random name male femal address display specif number femal ident display specif number ident use data file specif directori default usr share rig",
        "Summary": "Utility to piece together a random first name, last name, street number and address, along with a geographically consistent (ie, they all match the same area) city, state, ZIP code, and area code.",
        "Task-Script": {
            "Display a [m]ale (or [f]emale) random name and address": "rig -{{m|f}}",
            "Display a random name (male or female) and address": "rig",
            "Display a specific number of female identities": "rig -f -c {{number}}",
            "Display a specific number of identities": "rig -c {{number}}",
            "Use data files from a specific directory (default is `/usr/share/rig`)": "rig -d {{path/to/directory}}"
        }
    },
    "linux_rofi": {
        "Category": "linux",
        "Command": "rofi",
        "P-Summary": "applic launcher window switcher\ninform : http : github com davatorium rofi",
        "P-Tasks": "pipe list item stdin print select item stdout show list command show list app switch window",
        "Summary": "An application launcher and window switcher.\nMore Information: <https://github.com/davatorium/rofi>.",
        "Task-Script": {
            "Pipe a list of items to stdin and print the selected item to stdout": "printf \"{{Choice1\\nChoice2\\nChoice3}}\" | rofi -dmenu",
            "Show the list of all commands": "rofi -show run",
            "Show the list of apps": "rofi -show drun",
            "Switch between windows": "rofi -show window"
        }
    },
    "linux_rpcclient": {
        "Category": "linux",
        "Command": "rpcclient",
        "P-Summary": "ms-rpc client tool part samba suit",
        "P-Tasks": "connect remot host connect remot host domain without password connect remot host pass password hash creat new user domain display domain user display inform specif user display privileg execut shell command remot host",
        "Summary": "MS-RPC client tool (part of the samba suite).",
        "Task-Script": {
            "Connect to a remote host": "rpcclient --user {{domain}}\\{{username}}%{{password}} {{ip}}",
            "Connect to a remote host on a domain without a password": "rpcclient --user {{username}} --workgroup {{domain}} --no-pass {{ip}}",
            "Connect to a remote host, passing the password hash": "rpcclient --user {{domain}}\\{{username}} --pw-nt-hash {{ip}}",
            "Create a new user in the domain": "rpcclient $> createdomuser {{username}}",
            "Display domain users": "rpcclient $> enumdomusers",
            "Display information about a specific user": "rpcclient $> queryuser {{username|rid}}",
            "Display privileges": "rpcclient $> enumprivs",
            "Execute shell commands on a remote host": "rpcclient --user {{domain}}\\{{username}}%{{password}} --command {{semicolon_separated_commands}} {{ip}}"
        }
    },
    "linux_rpcinfo": {
        "Category": "linux",
        "Command": "rpcinfo",
        "P-Summary": "make rpc call rpc server report find",
        "P-Tasks": "delet registr version 1 mountd servic transport display list entri given servic name mountd version number 2 remot nf share display tabl statist rpcbind oper localhost show concis tabl rpc servic regist localhost show full tabl rpc servic regist localhost",
        "Summary": "Makes an RPC call to an RPC server and reports what it finds.",
        "Task-Script": {
            "Delete the registration for version 1 of the mountd service for all transports": "rpcinfo -d {{mountd}} {{1}}",
            "Display list of entries of given service name (mountd) and version number (2) on a remote nfs share": "rpcinfo -l {{remote_nfs_server_ip}} {{mountd}} {{2}}",
            "Display table of statistics of rpcbind operations on localhost": "rpcinfo -m",
            "Show concise table of all RPC services registered on localhost": "rpcinfo -s {{localhost}}",
            "Show full table of all RPC services registered on localhost": "rpcinfo"
        }
    },
    "linux_rpm": {
        "Category": "linux",
        "Command": "rpm",
        "P-Summary": "rpm packag manag",
        "P-Tasks": "forcibl instal packag regardless current instal version identifi owner file show version packag list package-own file list version match packag show chang miss incorrectli instal file match packag show scriptlet rpm file show version httpd packag",
        "Summary": "RPM Package Manager.",
        "Task-Script": {
            "Forcibly install a package regardless of currently installed versions": "rpm -U {{package_name.rpm}} --force",
            "Identify owner of a file and show version of the package": "rpm -qf {{/etc/postfix/main.cf}}",
            "List package-owned files": "rpm -ql {{kernel}}",
            "List versions of all matching packages": "rpm -qa '{{mariadb*}}'",
            "Show changed, missing and/or incorrectly installed files of matching packages": "rpm -Va '{{php-*}}'",
            "Show scriptlets from an RPM file": "rpm -qp --scripts {{package_name.rpm}}",
            "Show version of httpd package": "rpm -q {{httpd}}"
        }
    },
    "linux_rspamc": {
        "Category": "linux",
        "Command": "rspamc",
        "P-Summary": "command line client rspamd server",
        "P-Tasks": "gener manual report email show server statist train bayesian filter recognis email ham train bayesian filter recognis email spam",
        "Summary": "Command line client for rspamd servers.",
        "Task-Script": {
            "Generate a manual report on an email": "rspamc symbols {{path/to/email_file}}",
            "Show server statistics": "rspamc stat",
            "Train the bayesian filter to recognise an email as ham": "rspamc learn_ham {{path/to/email_file}}",
            "Train the bayesian filter to recognise an email as spam": "rspamc learn_spam {{path/to/email_file}}"
        }
    },
    "linux_rtcwake": {
        "Category": "linux",
        "Command": "rtcwake",
        "P-Summary": "enter system sleep state specifi wakeup time rel bio clock",
        "P-Tasks": "disabl previous set alarm freez system effici suspend-to-ram linux 3 9 requir wakeup given date time perform dri run wakup comput given time\npress ctrl + c abort show whether alarm set suspend disk higher power save wakeup 15 minut later suspend ram wakeup 10 second",
        "Summary": "Enter a system sleep state until specified wakeup time relative to your bios clock.",
        "Task-Script": {
            "Disable a previously set alarm": "sudo rtcwake -m disable",
            "Freeze the system (more efficient than suspend-to-ram but linux > 3.9 required) and wakeup at a given date and time": "sudo rtcwake -m freeze --date {{YYYYMMDDhhmm}}",
            "Perform a dry run to wakup the computer at a given time. (Press Ctrl + C to abort)": "sudo rtcwake -m on --date {{hh:ss}}",
            "Show whether an alarm is set or not": "sudo rtcwake -m show -v",
            "Suspend to disk (higher power saving) and wakeup 15 minutes later": "sudo rtcwake -m disk --date +{{15}}min",
            "Suspend to ram and wakeup after 10 seconds": "sudo rtcwake -m mem -s {{10}}"
        }
    },
    "linux_rtorrent": {
        "Category": "linux",
        "Command": "rtorrent",
        "P-Summary": "download torrent command line",
        "P-Tasks": "add torrent file magnet download close rtorrent safe start download view detail download torrent",
        "Summary": "Download torrents over the command line.",
        "Task-Script": {
            "Add a torrent file or magnet to be downloaded": "rtorrent {{torrent_or_magnet}}",
            "Close rtorrent safely": "<Ctrl>Q",
            "Start the download": "<Ctrl>S",
            "View details about downloading torrent": "->"
        }
    },
    "linux_run-mailcap": {
        "Category": "linux",
        "Command": "run-mailcap",
        "P-Summary": "run mailcap program\nrun mailcap view see edit compos print - execut program via entri mailcap file alias use given action process mime-typ file",
        "P-Tasks": "display found command without actual execut ignor copiousoutput direct forward output standard output simpl languag individu action program run-mailcap invok action flag turn extra inform",
        "Summary": "Run MailCap Programs.\nRun mailcap view, see, edit, compose, print - execute programs via entries in the mailcap file (or any of its aliases) will use the given action to process each mime-type/file.",
        "Task-Script": {
            "Display the found command without actually executing it": "run-mailcap --action=ACTION --norun {{filename}}",
            "Ignore any \"copiousoutput\" directive and forward output to standard output": "run-mailcap --action=ACTION --nopager {{filename}}",
            "In simple language": "run-mailcap --action=ACTION {{filename}}",
            "Individual actions/programs on run-mailcap can be invoked with action flag": "run-mailcap --action=ACTION [--option[=value]]",
            "Turn on extra information": "run-mailcap --action=ACTION --debug {{filename}}"
        }
    },
    "linux_runcon": {
        "Category": "linux",
        "Command": "runcon",
        "P-Summary": "run program differ selinux secur context\nneither context command print current secur context",
        "P-Tasks": "determin current domain specifi context role run command specifi domain run command specifi full context run command",
        "Summary": "Run a program in a different SELinux security context.\nWith neither context nor command, print the current security context.",
        "Task-Script": {
            "Determine the current domain": "runcon",
            "Specify the context role to run a command with": "runcon -r {{role}}_r {{command}}",
            "Specify the domain to run a command in": "runcon -t {{domain}}_t {{command}}",
            "Specify the full context to run a command with": "runcon {{user}}_u:{{role}}_r:{{domain}}_t {{command}}"
        }
    },
    "linux_runit": {
        "Category": "linux",
        "Command": "runit",
        "P-Summary": "3-stage init system",
        "P-Tasks": "shut runit start runit 3-stage init scheme",
        "Summary": "3-stage init system.",
        "Task-Script": {
            "Shut down runit": "kill --CONT {{runit_pid}}",
            "Start runit's 3-stage init scheme": "runit"
        }
    },
    "linux_runsv": {
        "Category": "linux",
        "Command": "runsv",
        "P-Summary": "start manag runit servic",
        "P-Tasks": "start runit servic root start runit servic current user",
        "Summary": "Start and manage a runit service.",
        "Task-Script": {
            "Start a runit service as root": "sudo runsv {{path/to/service}}",
            "Start a runit service as the current user": "runsv {{path/to/service}}"
        }
    },
    "linux_runsvchdir": {
        "Category": "linux",
        "Command": "runsvchdir",
        "P-Summary": "chang directori runsvdir use default",
        "P-Tasks": "switch runsvdir directori",
        "Summary": "Change the directory `runsvdir` uses by default.",
        "Task-Script": {
            "Switch `runsvdir` directories": "sudo runsvchdir {{/path/to/directory}}"
        }
    },
    "linux_runsvdir": {
        "Category": "linux",
        "Command": "runsvdir",
        "P-Summary": "run entir directori servic",
        "P-Tasks": "start manag servic directori root start manag servic directori current user start servic separ session",
        "Summary": "Run an entire directory of services.",
        "Task-Script": {
            "Start and manage all services in a directory as root": "sudo runsvdir {{path/to/services}}",
            "Start and manage all services in a directory as the current user": "runsvdir {{path/to/services}}",
            "Start services in separate sessions": "runsvdir -P {{path/to/services}}"
        }
    },
    "linux_runuser": {
        "Category": "linux",
        "Command": "runuser",
        "P-Summary": "run command specif user group without ask password need root privileg",
        "P-Tasks": "preserv entir environ root -- login specifi run command differ user run command differ user group specifi shell run instead default shell also work login start login shell specif user",
        "Summary": "Run commands as a specific user and group without asking for password (needs root privileges).",
        "Task-Script": {
            "Preserve the entire environment of root (only if `--login` is not specified)": "runuser {{user}} --preserve-environment -c '{{command}}'",
            "Run command as a different user": "runuser {{user}} -c '{{command}}'",
            "Run command as a different user and group": "runuser {{user}} -g {{group}} -c '{{command}}'",
            "Specify a shell for running instead of the default shell (also works for login)": "runuser {{user}} -s {{/bin/sh}}",
            "Start a login shell as a specific user": "runuser {{user}} -l"
        }
    },
    "linux_sa": {
        "Category": "linux",
        "Command": "sa",
        "P-Summary": "summar account inform\npart acct packag\nshow command call user includ basic info cpu time spent process rate",
        "P-Tasks": "display execut invoc per user usernam display display execut invoc per user show respons usernam list resourc use recent per user",
        "Summary": "Summarizes accounting information. Part of the acct package.\nShows commands called by users, including basic info on CPU time spent processing and I/O rates.",
        "Task-Script": {
            "Display executable invocations per user (username not displayed)": "sudo sa",
            "Display executable invocations per user, showing responsible usernames": "sudo sa --print-users",
            "List resources used recently per user": "sudo sa --user-summary"
        }
    },
    "linux_sacct": {
        "Category": "linux",
        "Command": "sacct",
        "P-Summary": "display account data slurm servic",
        "P-Tasks": "display elaps time job name number request cpu memori request job display job id job name partit account number alloc cpu job state job exit code recent job display job id job state job exit code recent job display alloc job",
        "Summary": "Display accounting data from the Slurm service.",
        "Task-Script": {
            "Display elapsed time, job name, number of requested CPUs, and memory requested of a job": "sacct --jobs {{job_id}} --format={{elapsed}},{{jobname}},{{reqcpus}},{{reqmem}}",
            "Display job id, job name, partition, account, number of allocated cpus, job state, and job exit codes for recent jobs": "sacct",
            "Display job id, job state, job exit code for recent jobs": "sacct --brief",
            "Display the allocations of a job": "sacct --jobs {{job_id}} --allocations"
        }
    },
    "linux_sacctmgr": {
        "Category": "linux",
        "Command": "sacctmgr",
        "P-Summary": "view setup manag slurm account",
        "P-Tasks": "add cluster slurm databas add account slurm databas show current configur show detail user associ cluster account",
        "Summary": "View, setup, and manage Slurm accounts.",
        "Task-Script": {
            "Add a cluster to the slurm database": "sacctmgr add cluster {{cluster_name}}",
            "Add an account to the slurm database": "sacctmgr add account {{account_name}} cluster={{cluster_of_account}}",
            "Show current configuration": "sacctmgr show configuration",
            "Show details of user/association/cluster/account": "sacctmgr show {{user/association/cluster/account}}"
        }
    },
    "linux_sam": {
        "Category": "linux",
        "Command": "sam",
        "P-Summary": "aw serverless applic model sam cli",
        "P-Tasks": "build lambda function code deploy aw sam applic initi serverless applic initi serverless applic specif runtim packag sam applic run serverless applic local",
        "Summary": "AWS Serverless Application Model (SAM) CLI.",
        "Task-Script": {
            "Build your Lambda function code": "sam build",
            "Deploy an AWS SAM application": "sam deploy",
            "Initialize a serverless application": "sam init",
            "Initialize a serverless application with a specific runtime": "sam init --runtime {{python3.7}}",
            "Package a SAM application": "sam package",
            "Run your serverless application locally": "sam local start-api"
        }
    },
    "linux_sar": {
        "Category": "linux",
        "Command": "sar",
        "P-Summary": "monitor perform variou linux subsystem",
        "P-Tasks": "report cpu util one per 2 second report transfer rate issu physic devic one per second press ctrl+c quit report total 10 network devic statist one per 2 second report total 20 memori util statist one per second report page statist one per 5 second report run queue length load averag one per second",
        "Summary": "Monitor performance of various Linux subsystems.",
        "Task-Script": {
            "Report CPU utilization, one per 2 seconds": "sar -u ALL {{2}}",
            "Report I/O and transfer rate issued to physical devices, one per second (press CTRL+C to quit)": "sar -b {{1}}",
            "Report a total of 10 network device statistics, one per 2 seconds": "sar -n DEV {{2}} {{10}}",
            "Report a total of 20 memory utilization statistics, one per second": "sar -r ALL {{1}} {{20}}",
            "Report paging statistics, one per 5 seconds": "sar -B {{5}}",
            "Report the run queue length and load averages, one per second": "sar -q {{1}}"
        }
    },
    "linux_sbatch": {
        "Category": "linux",
        "Command": "sbatch",
        "P-Summary": "submit batch job slurm schedul",
        "P-Tasks": "submit batch job submit batch job custom name submit batch job time limit 30 minut submit job request multipl node",
        "Summary": "Submit a batch job to the SLURM scheduler.",
        "Task-Script": {
            "Submit a batch job": "sbatch {{path/to/job.sh}}",
            "Submit a batch job with a custom name": "sbatch --job-name={{myjob}} {{path/to/job.sh}}",
            "Submit a batch job with a time limit of 30 minutes": "sbatch --time={{00:30:00}} {{path/to/job.sh}}",
            "Submit a job and request multiple nodes": "sbatch --nodes={{3}} {{path/to/job.sh}}"
        }
    },
    "linux_scancel": {
        "Category": "linux",
        "Command": "scancel",
        "P-Summary": "cancel slurm job",
        "P-Tasks": "cancel job use id cancel job user",
        "Summary": "Cancel a Slurm job.",
        "Task-Script": {
            "Cancel a job using its ID": "scancel {{job_id}}",
            "Cancel all jobs from a user": "scancel {{user_name}}"
        }
    },
    "linux_scanimage": {
        "Category": "linux",
        "Command": "scanimage",
        "P-Summary": "scan imag scanner access easi api",
        "P-Tasks": "list avail scanner ensur target devic connect recogn scan imag save file",
        "Summary": "Scan images with the Scanner Access Now Easy API.",
        "Task-Script": {
            "List available scanners to ensure the target device is connected and recognized": "scanimage -L",
            "Scan an image and save it to a file": "scanimage --format={{pnm|tiff|png|jpeg}} > {{path/to/new_image}}"
        }
    },
    "linux_scontrol": {
        "Category": "linux",
        "Command": "scontrol",
        "P-Summary": "view inform modifi job",
        "P-Tasks": "hold comma-separ list queu job use releas command permit job schedul releas comma-separ list suspend job resum comma-separ list suspend job show inform job suspend comma-separ list run job",
        "Summary": "View information about and modify jobs.",
        "Task-Script": {
            "Hold a comma-separated list of queued jobs (Use `release` command to permit the jobs to be scheduled)": "scontrol hold {{job_id}}",
            "Release a comma-separated list of suspended job": "scontrol release {{job_id}}",
            "Resume a comma-separated list of suspended jobs": "scontrol resume {{job_id}}",
            "Show information for job": "scontrol show job {{job_id}}",
            "Suspend a comma-separated list of running jobs": "scontrol suspend {{job_id}}"
        }
    },
    "linux_script": {
        "Category": "linux",
        "Command": "script",
        "P-Summary": "record termin output file",
        "P-Tasks": "record new session custom filepath record new session file name typescript current directori record new session append exist file record time inform data output standard error",
        "Summary": "Record all terminal output to file.",
        "Task-Script": {
            "Record a new session to a custom filepath": "script {{path/to/session.out}}",
            "Record a new session to a file named `typescript` in the current directory": "script",
            "Record a new session, appending to an existing file": "script -a {{path/to/session.out}}",
            "Record timing information (data is outputted to the standard error)": "script -t 2> {{path/to/timingfile}}"
        }
    },
    "linux_scriptreplay": {
        "Category": "linux",
        "Command": "scriptreplay",
        "P-Summary": "replay typescript creat script command standard output",
        "P-Tasks": "replay typescript doubl origin speed replay typescript half origin speed replay typescript speed record",
        "Summary": "Replay a typescript created by the `script` command to the standard output.",
        "Task-Script": {
            "Replay a typescript at double the original speed": "scriptreplay {{path/to/timingfile}} {{path/to/typescript}} 2",
            "Replay a typescript at half the original speed": "scriptreplay {{path/to/timingfile}} {{path/to/typescript}} 0.5",
            "Replay a typescript at the speed it was recorded": "scriptreplay {{path/to/timing_file}} {{path/to/typescript}}"
        }
    },
    "linux_scrot": {
        "Category": "linux",
        "Command": "scrot",
        "P-Summary": "screen captur util",
        "P-Tasks": "captur screenshot save captur png captur screenshot save current directori current date filenam captur screenshot current focus window captur screenshot interact",
        "Summary": "Screen capture utility.",
        "Task-Script": {
            "Capture a screenshot and save it as \"capture.png\"": "scrot {{capture.png}}",
            "Capture a screenshot and save it to the current directory with the current date as the filename": "scrot",
            "Capture a screenshot from the currently focused window": "scrot --focused",
            "Capture a screenshot interactively": "scrot --select"
        }
    },
    "linux_see": {
        "Category": "linux",
        "Command": "see",
        "P-Summary": "alia run-mailcap view\nalia run-mailcap action print",
        "P-Tasks": "see action use view file usual imag default mailcap explor use run-mailcap",
        "Summary": "Alias to `run-mailcap`'s view.\nAn alias to a `run-mailcap`'s action print.",
        "Task-Script": {
            "See action can be used to view any file (usually image) on default mailcap explorer": "see {{filename}}",
            "Using with `run-mailcap`": "run-mailcap --action=view {{filename}}"
        }
    },
    "linux_semanage": {
        "Category": "linux",
        "Command": "semanage",
        "P-Summary": "selinux polici manag tool",
        "P-Tasks": "disabl enabl dontaudit rule polici manag boolean\nboolean allow administr modifi confin process base current configur manag polici modul output local custom take set command specifi file load singl transact",
        "Summary": "SELinux Policy Management tool.",
        "Task-Script": {
            "Disable/Enable dontaudit rules in policy": "semanage dontaudit -S {{store}} {{on|off}}",
            "Manage booleans. Booleans allow the administrator to modify the confinement of processes based on the current configuration": "semanage boolean -S {{store}} {{--delete|--modify|--list|--noheading|--deleteall}} {{-on|-off}} -F {{boolean|boolean_file}}",
            "Manage policy modules": "semanage module -S {{store}} {{--add|--delete|--list|--modify}} {{--enable|--disable}} {{module_name}}",
            "Output local customizations": "semanage -S {{store}} -o {{path/to/output_file}}",
            "Take a set of commands from a specified file and load them in a single transaction": "semanage -S {{store}} -i {{path/to/input_file}}"
        }
    },
    "linux_sensible-browser": {
        "Category": "linux",
        "Command": "sensible-browser",
        "P-Summary": "open default browser",
        "P-Tasks": "open new window default browser open url default browser",
        "Summary": "Open the default browser.",
        "Task-Script": {
            "Open a new window of the default browser": "sensible-browser",
            "Open a url in the default browser": "sensible-browser {{url}}"
        }
    },
    "linux_sensible-editor": {
        "Category": "linux",
        "Command": "sensible-editor",
        "P-Summary": "open default editor",
        "P-Tasks": "open 3 file vertic split editor window time open file default editor open file default editor cursor begin line 10 open file default editor cursor end file",
        "Summary": "Open the default editor.",
        "Task-Script": {
            "Open 3 files in vertically split editor windows at the same time": "sensible-editor -O3 {{file_1}} {{file_2}} {{file_3}}",
            "Open a file in the default editor": "sensible-editor {{file}}",
            "Open a file in the default editor, with the cursor at the beginning of line 10": "sensible-editor +10 {{file}}",
            "Open a file in the default editor, with the cursor at the end of the file": "sensible-editor + {{file}}"
        }
    },
    "linux_sensors": {
        "Category": "linux",
        "Command": "sensors",
        "P-Summary": "report sensor inform",
        "P-Tasks": "show temperatur degre fahrenheit show current read sensor chip",
        "Summary": "Report sensors information.",
        "Task-Script": {
            "Show temperatures in degrees Fahrenheit": "sensors --fahrenheit",
            "Show the current readings of all sensor chips": "sensors"
        }
    },
    "linux_service": {
        "Category": "linux",
        "Command": "service",
        "P-Summary": "manag servic run init script\nfull script path omit etc init assum",
        "P-Tasks": "full restart run script twice start stop list name statu servic show current statu servic start stop restart reload servic start stop alway avail",
        "Summary": "Manage services by running init scripts.\nThe full script path should be omitted (/etc/init.d/ is assumed).",
        "Task-Script": {
            "Do a full restart (runs script twice with start and stop)": "service {{service_name}} --full-restart",
            "List the name and status of all services": "service --status-all",
            "Show the current status of a service": "service {{service_name}} status",
            "Start/Stop/Restart/Reload service (start/stop should always be available)": "service {{service_name}} {{start|stop|restart|reload}}"
        }
    },
    "linux_setfacl": {
        "Category": "linux",
        "Command": "setfacl",
        "P-Summary": "set file access control list acl",
        "P-Tasks": "modifi acl file user read write access modifi default acl file user remov acl file user remov acl entri file",
        "Summary": "Set file access control lists (ACL).",
        "Task-Script": {
            "Modify ACL of a file for user with read and write access": "setfacl -m u:{{username}}:rw {{file}}",
            "Modify default ACL of a file for all users": "setfacl -d -m u::rw {{file}}",
            "Remove ACL of a file for an user": "setfacl -x u:{{username}} {{file}}",
            "Remove all ACL entries of a file": "setfacl -b {{file}}"
        }
    },
    "linux_setxkbmap": {
        "Category": "linux",
        "Command": "setxkbmap",
        "P-Summary": "set keyboard use x keyboard extens",
        "P-Tasks": "get help list layout list avail switch option list variant layout set multipl keyboard layout variant switch option set keyboard french azerti",
        "Summary": "Set the keyboard using the X Keyboard Extension.",
        "Task-Script": {
            "Get help": "setxkbmap -help",
            "List all layouts": "localectl list-x11-keymap-layouts",
            "List available switching options": "localectl list-x11-keymap-options | grep grp:",
            "List variants for the layout": "localectl list-x11-keymap-variants {{de}}",
            "Set multiple keyboard layouts, their variants and switching option": "setxkbmap -layout {{us,de}} -variant {{,qwerty}} -option {{'grp:alt_caps_toggle'}}",
            "Set the keyboard in French AZERTY": "setxkbmap {{fr}}"
        }
    },
    "linux_shutdown": {
        "Category": "linux",
        "Command": "shutdown",
        "P-Summary": "shutdown reboot system",
        "P-Tasks": "cancel pend shutdown reboot oper power halt immedi reboot immedi reboot 5 minut shutdown 1:00 pm use 24h clock",
        "Summary": "Shutdown and reboot the system.",
        "Task-Script": {
            "Cancel a pending shutdown/reboot operation": "shutdown -c",
            "Power off (halt) immediately": "shutdown -h now",
            "Reboot immediately": "shutdown -r now",
            "Reboot in 5 minutes": "shutdown -r +{{5}} &",
            "Shutdown at 1:00 pm (Uses 24h clock)": "shutdown -h 13:00"
        }
    },
    "linux_silentcast": {
        "Category": "linux",
        "Command": "silentcast",
        "P-Summary": "silent screencast creator\nsave mkv anim gif format",
        "P-Tasks": "launch silentcast launch silentcast specif display",
        "Summary": "Silent screencast creator. Saves in `.mkv` and animated gif formats.",
        "Task-Script": {
            "Launch silentcast": "silentcast",
            "Launch silentcast on a specific display": "silentcast --display={{display}}"
        }
    },
    "linux_sinfo": {
        "Category": "linux",
        "Command": "sinfo",
        "P-Summary": "view inform slurm node partit\nsee also squeue sbatch also part slurm workload manag",
        "P-Tasks": "list dead node reason show quick summari overview cluster summaris dead node view inform idl node view detail statu specif partit view detail statu partit across entir cluster",
        "Summary": "View information about Slurm nodes and partitions.\nSee also `squeue` and `sbatch`, which are also part of the Slurm workload manager.",
        "Task-Script": {
            "List dead nodes and the reasons why": "sinfo --list-reasons",
            "Show a quick summary overview of the cluster": "sinfo --summarize",
            "Summarise dead nodes": "sinfo --dead",
            "View information about idle nodes": "sinfo --states {{idle}}",
            "View the detailed status of a specific partition": "sinfo --partition {{partition_name}}",
            "View the detailed status of all partitions across the entire cluster": "sinfo"
        }
    },
    "linux_slapt-get": {
        "Category": "linux",
        "Command": "slapt-get",
        "P-Summary": "apt like system slackwar packag manag\npackag sourc need configur slapt-getrc file",
        "P-Tasks": "instal packag updat latest avail version locat packag interest packag name disk set version remov packag show inform packag updat list avail packag version upgrad instal packag latest avail version",
        "Summary": "An apt like system for Slackware package management.\nPackage sources need to be configured in the slapt-getrc file.",
        "Task-Script": {
            "Install a package, or update it to the latest available version": "slapt-get --install {{package_name}}",
            "Locate packages of interest by the package name, disk set, or version": "slapt-get --search {{package_name}}",
            "Remove a package": "slapt-get --remove {{package_name}}",
            "Show information about a package": "slapt-get --show {{package_name}}",
            "Update the list of available packages and versions": "slapt-get --update",
            "Upgrade all installed packages to their latest available versions": "slapt-get --upgrade {{package_name}}"
        }
    },
    "linux_sm": {
        "Category": "linux",
        "Command": "sm",
        "P-Summary": "display short messag fullscreen",
        "P-Tasks": "display messag full-screen display messag rotat 3 time step 90 degre counterclockwis display messag use output anoth command display messag custom background color display messag custom foreground color display messag invert color",
        "Summary": "Displays a short message fullscreen.",
        "Task-Script": {
            "Display a message in full-screen": "sm \"{{Hello World!}}\"",
            "Display a message rotated 3 times (in steps of 90 degrees, counterclockwise)": "sm -r {{3}} \"{{Hello World!}}\"",
            "Display a message using the output from another command": "{{echo \"Hello World!\"}} | sm -",
            "Display a message with a custom background color": "sm -b {{#008888}} \"{{Hello World!}}\"",
            "Display a message with a custom foreground color": "sm -f {{blue}} \"{{Hello World!}}\"",
            "Display a message with inverted colors": "sm -i \"{{Hello World!}}\""
        }
    },
    "linux_smbclient": {
        "Category": "linux",
        "Command": "smbclient",
        "P-Summary": "ftp-like client access smb cif resourc server",
        "P-Tasks": "connect share user prompt password exit quit session connect differ usernam connect differ workgroup connect usernam password download file server upload file server",
        "Summary": "FTP-like client to access SMB/CIFS resources on servers.",
        "Task-Script": {
            "Connect to a share (user will be prompted for password; `exit` to quit the session)": "smbclient {{//server/share}}",
            "Connect with a different username": "smbclient {{//server/share}} --user {{username}}",
            "Connect with a different workgroup": "smbclient {{//server/share}} --workgroup {{domain}} --user {{username}}",
            "Connect with a username and password": "smbclient {{//server/share}} --user {{username%password}}",
            "Download a file from the server": "smbclient {{//server/share}} --directory {{path/to/directory}} --command \"get {{file.txt}}\"",
            "Upload a file to the server": "smbclient {{//server/share}} --directory {{path/to/directory}} --command \"put {{file.txt}}\""
        }
    },
    "linux_smbmap": {
        "Category": "linux",
        "Command": "smbmap",
        "P-Summary": "smb enumer tool",
        "P-Tasks": "display smb share list singl level directori file display smb share permiss host prompt user password ntlm hash display smb share permiss host specifi domain pass password ntlm hash display smb share recurs list defin number level directori file display smb share recurs list directori file download file match regular express display smb share recurs list directori file search file content match regular express execut shell command remot system upload file remot system",
        "Summary": "SMB enumeration tool.",
        "Task-Script": {
            "Display SMB shares and list a single level of directories and files": "smbmap -u {{username}} --prompt -H {{ip}} -r",
            "Display SMB shares and permissions on a host, prompting for user's password or NTLM hash": "smbmap -u {{username}} --prompt -H {{ip}}",
            "Display SMB shares and permissions on a host, specifying the domain and passing the password NTLM hash": "smbmap -u {{username}} --prompt -d {{domain}} -H {{ip}}",
            "Display SMB shares and recursively list a defined number of levels of directories and files": "smbmap -u {{username}} --prompt -H {{ip}} -R --depth {{3}}",
            "Display SMB shares and recursively list directories and files, downloading the files matching a regular expression": "smbmap -u {{username}} --prompt -H {{ip}} -R -A {{pattern}}",
            "Display SMB shares and recursively list directories and files, searching for file content matching a regular expression": "smbmap -u {{username}} --prompt -H {{ip}} -R -F {{pattern}}",
            "Execute a shell command on a remote system": "smbmap -u {{username}} --prompt -H {{ip}} -x {{command}}",
            "Upload a file to a remote system": "smbmap -u {{username}} --prompt -H {{ip}} --upload {{source}} {{destination}}"
        }
    },
    "linux_smbpasswd": {
        "Category": "linux",
        "Command": "smbpasswd",
        "P-Summary": "chang user smb password\nsamba user must also local unix account",
        "P-Tasks": "add specifi user samba set password user alreadi exist system chang current user smb password delet samba user modifi exist samba user password",
        "Summary": "Change a user's SMB password.\nSamba users must also have a local Unix account.",
        "Task-Script": {
            "Add a specified user to Samba and set password(user should already exist in system)": "smbpasswd -a {{username}}",
            "Change the current user's SMB password": "smbpasswd",
            "Delete a Samba user": "smbpasswd -x {{username}}",
            "Modify an existing Samba user's password": "smbpasswd {{username}}"
        }
    },
    "linux_snap": {
        "Category": "linux",
        "Command": "snap",
        "P-Summary": "tool manag snap self-contain softwar packag\nsimilar apt deb",
        "P-Tasks": "check recent snap chang system display basic inform instal snap softwar instal packag search packag uninstal packag updat packag updat packag",
        "Summary": "Tool for managing the \"snap\" self-contained software packages.\nSimilar to what `apt` is for \".deb\".",
        "Task-Script": {
            "Check for recent snap changes in the system": "snap changes",
            "Display basic information about installed snap software": "snap list",
            "Install a package": "snap install {{package_name}}",
            "Search for a package": "snap find {{package_name}}",
            "Uninstall a package": "snap remove {{package_name}}",
            "Update a package": "snap refresh {{package_name}}",
            "Update all packages": "snap refresh"
        }
    },
    "linux_snapper": {
        "Category": "linux",
        "Command": "snapper",
        "P-Summary": "filesystem snapshot manag tool",
        "P-Tasks": "creat snapshot descript creat snapper config delet rang snapshot delet snapshot list snapshot config list snapshot config",
        "Summary": "Filesystem snapshot management tool.",
        "Task-Script": {
            "Create a snapshot with a description": "snapper -c {{config}} create -d \"{{snapshot_description}}\"",
            "Create snapper config": "snapper -c {{config}} create-config {{path/to/directory}}",
            "Delete a range of snapshots": "snapper -c {{config}} delete {{snapshot_X}}-{{snapshot_Y}}",
            "Delete a snapshot": "snapper -c {{config}} delete {{snapshot_number}}",
            "List snapshot configs": "snapper list-configs",
            "List snapshots for a config": "snapper -c {{config}} list"
        }
    },
    "linux_snmpwalk": {
        "Category": "linux",
        "Command": "snmpwalk",
        "P-Summary": "snmp queri tool",
        "P-Tasks": "queri specif system inform remot host oid use snmpv2 specifi port queri specif system inform remot host oid use snmpv3 authent without encrypt queri specif system inform remot host oid use snmpv3 without authent encrypt queri specif system inform remot host oid use snmpv3 authent encrypt queri system inform remot host use snmpv1 commun string",
        "Summary": "SNMP query tool.",
        "Task-Script": {
            "Query specific system information on a remote host by OID using SNMPv2 on a specified port": "snmpwalk -v2c -c {{community}} {{ip}}:{{port}} {{oid}}",
            "Query specific system information on a remote host by OID using SNMPv3 and authentication without encryption": "snmpwalk -v3 -l {{authNoPriv}} -u {{username}} -a {{MD5|SHA}} -A {{passphrase}} {{ip}} {{oid}}",
            "Query specific system information on a remote host by OID using SNMPv3 without authentication or encryption": "snmpwalk -v3 -l {{noAuthNoPriv}} -u {{username}} {{ip}} {{oid}}",
            "Query specific system information on a remote host by OID using SNMPv3, authentication, and encryption": "snmpwalk -v3 -l {{authPriv}} -u {{username}} -a {{MD5|SHA}} -A {{auth_passphrase}} -x {{DES|AES}} -X {{enc_passphrase}} {{ip}} {{oid}}",
            "Query the system information of a remote host using SNMPv1 and a community string": "snmpwalk -v1 -c {{community}} {{ip}}"
        }
    },
    "linux_speedometer": {
        "Category": "linux",
        "Command": "speedometer",
        "P-Summary": "python script show network traffic graph termin",
        "P-Tasks": "show graph specif interfac",
        "Summary": "Python script that shows a network traffic graph in the terminal.",
        "Task-Script": {
            "Show graph for a specific interface": "speedometer -r {{eth0}} -t {{eth0}}"
        }
    },
    "linux_squeue": {
        "Category": "linux",
        "Command": "squeue",
        "P-Summary": "view job queu slurm schedul",
        "P-Tasks": "view job queu specif user view queue view queue refresh everi 5 second view queue expect start time",
        "Summary": "View the jobs queued in the SLURM scheduler.",
        "Task-Script": {
            "View jobs queued by a specific user": "squeue -u {{username}}",
            "View the queue": "squeue",
            "View the queue and refresh every 5 seconds": "squeue -i {{5}}",
            "View the queue with expected start times": "squeue --start"
        }
    },
    "linux_sreport": {
        "Category": "linux",
        "Command": "sreport",
        "P-Summary": "gener report job user cluster account data",
        "P-Tasks": "show number job run show pipe delimit cluster util data show user highest cpu time use",
        "Summary": "Generate reports on jobs, users, and clusters from accounting data.",
        "Task-Script": {
            "Show number of jobs run": "sreport job sizes printjobcount",
            "Show pipe delimited cluster utilization data": "sreport --parsable cluster utilization",
            "Show users with highest cpu time use": "sreport user topuser"
        }
    },
    "linux_srun": {
        "Category": "linux",
        "Command": "srun",
        "P-Summary": "creat interact slurm job connect exist job",
        "P-Tasks": "connect worker node job run submit basic interact job submit interact job differ attribut",
        "Summary": "Create an interactive slurm job or connect to an existing job.",
        "Task-Script": {
            "Connect to a worker node with a job running": "srun --jobid={{job_id}} --pty /bin/bash",
            "Submit a basic interactive job": "srun --pty /bin/bash",
            "Submit an interactive job with different attributes": "srun --ntasks-per-node={{num_cores}} --mem-per-cpu={{memory_MB}} --pty /bin/bash"
        }
    },
    "linux_ss": {
        "Category": "linux",
        "Command": "ss",
        "P-Summary": "util investig socket",
        "P-Tasks": "filter tcp socket state exclud show tcp ipv4 socket local connect subnet 192 168 0 0 16 show tcp socket along process connect remot ssh port show tcp socket connect local http port 443 show tcp socket listen local 8080 port show tcp udp raw unix socket show udp socket connect specif sourc destin port",
        "Summary": "Utility to investigate sockets.",
        "Task-Script": {
            "Filter TCP sockets by states, only/exclude": "ss {{state/exclude}} {{bucket/big/connected/synchronized/...}}",
            "Show all TCP IPv4 sockets locally connected on the subnet 192.168.0.0/16": "ss -4t src {{192.168/16}}",
            "Show all TCP sockets along with processes connected to a remote ssh port": "ss -pt dst :{{ssh}}",
            "Show all TCP sockets connected to the local HTTPS port (443)": "ss -t src :{{443}}",
            "Show all TCP sockets listening on the local 8080 port": "ss -lt src :{{8080}}",
            "Show all TCP/UDP/RAW/UNIX sockets": "ss -a {{-t|-u|-w|-x}}",
            "Show all UDP sockets connected on specific source and destination ports": "ss -u 'sport == :{{source_port}} and dport == :{{destination_port}}'"
        }
    },
    "linux_ssh-add": {
        "Category": "linux",
        "Command": "ssh-add",
        "P-Summary": "manag load ssh key ssh-agent\nensur ssh-agent run key load",
        "P-Tasks": "add specif key ssh-agent add default ssh key ssh ssh-agent delet key ssh-agent delet current load key ssh-agent list fingerprint current load key",
        "Summary": "Manage loaded ssh keys in the ssh-agent.\nEnsure that ssh-agent is up and running for the keys to be loaded in it.",
        "Task-Script": {
            "Add a specific key to the ssh-agent": "ssh-add {{path/to/private_key}}",
            "Add the default ssh keys in \"~/.ssh\" to the ssh-agent": "ssh-add",
            "Delete a key from the ssh-agent": "ssh-add -d {{path/to/private_key}}",
            "Delete all currently loaded keys from the ssh-agent": "ssh-add -D",
            "List fingerprints of currently loaded keys": "ssh-add -l"
        }
    },
    "linux_sshuttle": {
        "Category": "linux",
        "Command": "sshuttle",
        "P-Summary": "transpar proxi server tunnel traffic ssh connect\nrequir root special setup remot ssh server though root access local machin prompt",
        "P-Tasks": "also forward dn traffic server default dn resolv forward ipv4 tcp traffic via remot ssh server forward traffic except bound specif subnet use tproxi method forward ipv4 ipv6 traffic",
        "Summary": "Transparent proxy server that tunnels traffic over an SSH connection.\nDoesn't require root or any special setup on the remote SSH server, though root access on the local machine is prompted for.",
        "Task-Script": {
            "Also forward all DNS traffic to the server's default DNS resolver": "sshuttle --dns --remote={{username}}@{{sshserver}} {{0.0.0.0/0}}",
            "Forward all IPv4 TCP traffic via a remote SSH server": "sshuttle --remote={{username}}@{{sshserver}} {{0.0.0.0/0}}",
            "Forward all traffic except that which is bound for a specific subnet": "sshuttle --remote={{username}}@{{sshserver}} {{0.0.0.0/0}} --exclude {{192.168.0.1/24}}",
            "Use the tproxy method to forward all IPv4 and IPv6 traffic": "sshuttle --method=tproxy --remote={{username}}@{{sshserver}} {{0.0.0.0/0}} {{::/0}} --exclude={{your_local_ip_address}} --exclude={{ssh_server_ip_address}}"
        }
    },
    "linux_sstat": {
        "Category": "linux",
        "Command": "sstat",
        "P-Summary": "view inform run job",
        "P-Tasks": "display job id averag cpu averag virtual memori size comma-separ list job pipe column delimit display list field avail display statu inform comma-separ list job",
        "Summary": "View information about running jobs.",
        "Task-Script": {
            "Display job ID, average CPU and average virtual memory size of a comma-separated list of jobs, with pipes as column delimiters": "sstat --parsable --jobs={{job_id}} --format={{JobID}},{{AveCPU}},{{AveVMSize}}",
            "Display list of fields available": "sstat --helpformat",
            "Display status information of a comma-separated list of jobs": "sstat --jobs={{job_id}}"
        }
    },
    "linux_steghide": {
        "Category": "linux",
        "Command": "steghide",
        "P-Summary": "steganographi tool jpeg bmp wav au file format",
        "P-Tasks": "display file inform tri detect embed file emb data jpeg imag use maximum compress emb data png imag prompt passphras emb encrypt data jpeg imag e g\nblowfish cbc mode extract data wav audio file get list support encrypt algorithm mode",
        "Summary": "Steganography tool for JPEG, BMP, WAV and AU file formats.",
        "Task-Script": {
            "Display file information, trying to detect an embedded file": "steghide info {{path/to/file.jpg}}",
            "Embed data in a JPEG image, using maximum compression": "steghide embed --coverfile {{path/to/image.jpg}} --embedfile {{path/to/data.txt}} --compress {{9}}",
            "Embed data in a PNG image, prompting for a passphrase": "steghide embed --coverfile {{path/to/image.png}} --embedfile {{path/to/data.txt}}",
            "Embed encrypted data in a JPEG image, e.g. with Blowfish in CBC mode": "steghide embed --coverfile {{path/to/image.jpg}} --embedfile {{path/to/data.txt}} --encryption {{blowfish|...}} {{cbc|...}}",
            "Extract data from a WAV audio file": "steghide extract --stegofile {{path/to/sound.wav}}",
            "Get the list of supported encryption algorithms and modes": "steghide encinfo"
        }
    },
    "linux_strace": {
        "Category": "linux",
        "Command": "strace",
        "P-Summary": "troubleshoot tool trace system call",
        "P-Tasks": "count time call error system call report summari program exit show time spent everi system call start trace program execut start trace specif process pid start trace file oper program trace process filter output system call",
        "Summary": "Troubleshooting tool for tracing system calls.",
        "Task-Script": {
            "Count time, calls, and errors for each system call and report a summary on program exit": "strace -p {{pid}} -c",
            "Show the time spent in every system call": "strace -p {{pid}} -T",
            "Start tracing a program by executing it": "strace {{program}}",
            "Start tracing a specific process by its PID": "strace -p {{pid}}",
            "Start tracing file operations of a program": "strace -e trace=file {{program}}",
            "Trace a process and filter output by system call": "strace -p {{pid}} -e {{system_call_name}}"
        }
    },
    "linux_stress": {
        "Category": "linux",
        "Command": "stress",
        "P-Summary": "tool stress test cpu memori io linux system",
        "P-Tasks": "spawn 2 worker spin write unlink worker write 1g byte spawn 2 worker stress test io timeout 5 second spawn 2 worker stress test memori worker alloc 256m byte spawn 4 worker stress test cpu",
        "Summary": "A tool to stress test CPU, memory, and IO on a Linux system.",
        "Task-Script": {
            "Spawn 2 workers spinning on write()/unlink() (each worker writes 1G bytes)": "stress -d {{2}} --hdd-bytes {{1GB}}",
            "Spawn 2 workers to stress test IO and timeout after 5 seconds": "stress -i {{2}} -t {{5}}",
            "Spawn 2 workers to stress test memory (each worker allocates 256M bytes)": "stress -m {{2}} --vm-bytes {{256M}}",
            "Spawn 4 workers to stress test CPU": "stress -c {{4}}"
        }
    },
    "linux_sv": {
        "Category": "linux",
        "Command": "sv",
        "P-Summary": "control run runsv servic",
        "P-Tasks": "get servic statu start servic stop servic",
        "Summary": "Control a running runsv service.",
        "Task-Script": {
            "Get service status": "sudo sv status {{path/to/service}}",
            "Start a service": "sudo sv up {{path/to/service}}",
            "Stop a service": "sudo sv down {{path/to/service}}"
        }
    },
    "linux_swapoff": {
        "Category": "linux",
        "Command": "swapoff",
        "P-Summary": "disabl devic file swap",
        "P-Tasks": "disabl given swap file disabl given swap partit disabl swap area disabl swap label devic file",
        "Summary": "Disables device or file for swapping.",
        "Task-Script": {
            "Disable a given swap file": "swapoff {{path/to/file}}",
            "Disable a given swap partition": "swapoff {{/dev/sdb7}}",
            "Disable all swap areas": "swapoff -a",
            "Disable swap by label of a device or file": "swapoff -L {{swap1}}"
        }
    },
    "linux_swapon": {
        "Category": "linux",
        "Command": "swapon",
        "P-Summary": "enabl devic file swap",
        "P-Tasks": "enabl given swap file enabl given swap partit enabl swap area enabl swap label devic file get swap inform",
        "Summary": "Enables device or file for swapping.",
        "Task-Script": {
            "Enable a given swap file": "swapon {{path/to/file}}",
            "Enable a given swap partition": "swapon {{/dev/sdb7}}",
            "Enable all swap areas": "swapon -a",
            "Enable swap by label of a device or file": "swapon -L {{swap1}}",
            "Get swap information": "swapon -s"
        }
    },
    "linux_swupd": {
        "Category": "linux",
        "Command": "swupd",
        "P-Summary": "packag manag util clear linux",
        "P-Tasks": "correct broken miss file instal new bundl list instal bundl locat bundl want packag exist remov bundl show current version check whether newer one exist updat latest version",
        "Summary": "Package management utility for Clear Linux.",
        "Task-Script": {
            "Correct broken or missing files": "sudo swupd verify",
            "Install a new bundle": "sudo swupd bundle-add {{bundle}}",
            "List installed bundles": "swupd bundle-list",
            "Locate the bundle where a wanted package exists": "swupd search -b {{package}}",
            "Remove a bundle": "sudo swupd bundle-remove {{bundle}}",
            "Show current version, and check whether a newer one exists": "swupd check-update",
            "Update to latest version": "sudo swupd update"
        }
    },
    "linux_sxiv": {
        "Category": "linux",
        "Command": "sxiv",
        "P-Summary": "simpl x imag viewer",
        "P-Tasks": "open newline-separ list imag read filenam standard input open space-separ list imag slideshow open space-separ list imag thumbnail mode open imag open imag fullscreen mode",
        "Summary": "Simple X Image Viewer.",
        "Task-Script": {
            "Open a newline-separated list of images, reading filenames from standard input": "echo {{path/to/file}} | sxiv -i",
            "Open a space-separated list of images as a slideshow": "sxiv -S {{seconds}} {{path/to/file}}",
            "Open a space-separated list of images in thumbnail mode": "sxiv -t {{path/to/file}}",
            "Open an image": "sxiv {{path/to/file}}",
            "Open an image in fullscreen mode": "sxiv -f {{path/to/file}}"
        }
    },
    "linux_sysctl": {
        "Category": "linux",
        "Command": "sysctl",
        "P-Summary": "list chang kernel runtim variabl",
        "P-Tasks": "appli chang etc sysctl conf get current open file handler get limit simultan open file set changeabl kernel state variabl show avail variabl valu",
        "Summary": "List and change kernel runtime variables.",
        "Task-Script": {
            "Apply changes from /etc/sysctl.conf": "sysctl -p",
            "Get currently open file handlers": "sysctl fs.file-nr",
            "Get limit for simultaneous open files": "sysctl fs.file-max",
            "Set a changeable kernel state variable": "sysctl -w {{section.tunable}}={{value}}",
            "Show all available variables and their values": "sysctl -a"
        }
    },
    "linux_systemctl": {
        "Category": "linux",
        "Command": "systemctl",
        "P-Summary": "control systemd system servic manag",
        "P-Tasks": "check unit activ check unit enabl enabl disabl unit start bootup list fail unit mask unmask unit prevent start bootup reload systemd scan new chang unit show statu unit start stop restart reload servic",
        "Summary": "Control the systemd system and service manager.",
        "Task-Script": {
            "Check if a unit is active": "systemctl is-active {{unit}}",
            "Check if a unit is enabled": "systemctl is-enabled {{unit}}",
            "Enable/Disable a unit to be started on bootup": "systemctl enable/disable {{unit}}",
            "List failed units": "systemctl --failed",
            "Mask/Unmask a unit, prevent it to be started on bootup": "systemctl mask/unmask {{unit}}",
            "Reload systemd, scanning for new or changed units": "systemctl daemon-reload",
            "Show the status of a unit": "systemctl status {{unit}}",
            "Start/Stop/Restart/Reload a service": "systemctl start/stop/restart/reload {{unit}}"
        }
    },
    "linux_systemd-analyze": {
        "Category": "linux",
        "Command": "systemd-analyze",
        "P-Summary": "show time detail boot process unit servic mount point devic socket",
        "P-Tasks": "list time unit start print tree time critic chain unit",
        "Summary": "Show timing details about the boot process of units (services, mount points, devices, sockets).",
        "Task-Script": {
            "List time of each unit to start up": "systemd-analyze blame",
            "Print a tree of the time critical chain of units": "systemd-analyze critical-chain"
        }
    },
    "linux_taskset": {
        "Category": "linux",
        "Command": "taskset",
        "P-Summary": "get set process cpu affin start new process defin cpu affin",
        "P-Tasks": "get run process cpu affin pid set run process cpu affin pid start new process affin cpu 1 4 start new process affin singl cpu start new process affin multipl non-sequenti cpu",
        "Summary": "Get or set a process' CPU affinity or start a new process with a defined CPU affinity.",
        "Task-Script": {
            "Get a running process' CPU affinity by PID": "taskset --pid --cpu-list {{pid}}",
            "Set a running process' CPU affinity by PID": "taskset --pid --cpu-list {{cpu_id}} {{pid}}",
            "Start a new process with affinity for CPUs 1 through 4": "taskset --cpu-list {{cpu_id_1}},{{cpu_id_4}}",
            "Start a new process with affinity for a single CPU": "taskset --cpu-list {{cpu_id}} {{command}}",
            "Start a new process with affinity for multiple non-sequential CPUs": "taskset --cpu-list {{cpu_id_1}} {{cpu_id_2}} {{cpu_id_3}}"
        }
    },
    "linux_tcpflow": {
        "Category": "linux",
        "Command": "tcpflow",
        "P-Summary": "captur tcp traffic debug analysi",
        "P-Tasks": "show data given interfac port",
        "Summary": "Capture TCP traffic for debugging and analysis.",
        "Task-Script": {
            "Show all data on the given interface and port": "tcpflow -c -i {{eth0}} port {{80}}"
        }
    },
    "linux_tcpkill": {
        "Category": "linux",
        "Command": "tcpkill",
        "P-Summary": "kill specifi in-progress tcp connect",
        "P-Tasks": "kill in-progress connect specifi interfac host port",
        "Summary": "Kills specified in-progress TCP connections.",
        "Task-Script": {
            "Kill in-progress connections at a specified interface, host and port": "tcpkill -i {{eth1}} host {{192.95.4.27}} and port {{2266}}"
        }
    },
    "linux_tcptraceroute": {
        "Category": "linux",
        "Command": "tcptraceroute",
        "P-Summary": "tracerout implement use tcp packet",
        "P-Tasks": "set first maximum ttl specifi destin port packet length byte specifi interfac specifi local sourc port sourc address specifi wait time number queri per hop trace rout host",
        "Summary": "A traceroute implementation using TCP packets.",
        "Task-Script": {
            "Set the first and maximum TTL": "tcptraceroute {{host}} -f {{first_ttl} -m {{max_ttl}}",
            "Specify the destination port and packet length in bytes": "tcptraceroute {{host}} {{destination_port}} {{packet_length}}",
            "Specify the interface": "tcptraceroute {{host}} -i {{interface}}",
            "Specify the local source port and source address": "tcptraceroute {{host}} -p {{source_port}} -s {{source_address}}",
            "Specify the wait time and number of queries per hop": "tcptraceroute {{host}} -w {{wait_time}} -q {{number_of_queries}}",
            "Trace the route to a host": "tcptraceroute {{host}}"
        }
    },
    "linux_terminator": {
        "Category": "linux",
        "Command": "terminator",
        "P-Summary": "arrang multipl gnome termin one window",
        "P-Tasks": "open new tab split termin horizont split termin vertic start termin window start fullscreen window",
        "Summary": "Arrange multiple GNOME terminals in one window.",
        "Task-Script": {
            "Open new tab": "Ctrl + Shift + T",
            "Split terminals horizontally": "Ctrl + Shift + O",
            "Split terminals vertically": "Ctrl + Shift + E",
            "Start terminator window": "terminator",
            "Start with a fullscreen window": "terminator -f"
        }
    },
    "linux_thunar": {
        "Category": "linux",
        "Command": "thunar",
        "P-Summary": "graphic file manag xfce desktop environ",
        "P-Tasks": "close open thunar window open new window show current directori open bulk renam util",
        "Summary": "Graphical file manager for XFCE desktop environments.",
        "Task-Script": {
            "Close all open thunar windows": "thunar --quit",
            "Open a new window showing the current directory": "thunar",
            "Open the bulk rename utility": "thunar --bulk-rename"
        }
    },
    "linux_tic": {
        "Category": "linux",
        "Command": "tic",
        "P-Summary": "compil terminfo instal ncurs",
        "P-Tasks": "check terminfo file error compil instal terminfo termin print databas locat",
        "Summary": "Compile terminfo and install for ncurses.",
        "Task-Script": {
            "Check terminfo file for errors": "tic -c {{path/to/terminal.info}}",
            "Compile and install terminfo for a terminal": "tic -xe {{terminal}} {{path/to/terminal.info}}",
            "Print database locations": "tic -D"
        }
    },
    "linux_timedatectl": {
        "Category": "linux",
        "Command": "timedatectl",
        "P-Summary": "control system time date",
        "P-Tasks": "check current system clock time enabl network time protocol ntp synchron list avail timezon set local time system clock directli set system timezon",
        "Summary": "Control the system time and date.",
        "Task-Script": {
            "Check the current system clock time": "timedatectl",
            "Enable Network Time Protocol (NTP) synchronization": "timedatectl set-ntp on",
            "List available timezones": "timedatectl list-timezones",
            "Set the local time of the system clock directly": "timedatectl set-time \"{{yyyy-MM-dd hh:mm:ss}}\"",
            "Set the system timezone": "timedatectl set-timezone {{timezone}}"
        }
    },
    "linux_timeshift": {
        "Category": "linux",
        "Command": "timeshift",
        "P-Summary": "system restor util",
        "P-Tasks": "creat new snapshot even schedul creat new snapshot schedul delet specif snapshot list snapshot restor snapshot select snapshot restor interact restor specif snapshot",
        "Summary": "System restore utility.",
        "Task-Script": {
            "Create a new snapshot (even if not scheduled)": "sudo timeshift --create",
            "Create a new snapshot (if scheduled)": "sudo timeshift --check",
            "Delete a specific snapshot": "sudo timeshift --delete --snapshot '{{snapshot}}'",
            "List snapshots": "sudo timeshift --list",
            "Restore a snapshot (selecting which snapshot to restore interactively)": "sudo timeshift --restore",
            "Restore a specific snapshot": "sudo timeshift --restore --snapshot '{{snapshot}}'"
        }
    },
    "linux_tlp": {
        "Category": "linux",
        "Command": "tlp",
        "P-Summary": "advanc power manag linux\nsee tlp-stat page addit inform",
        "P-Tasks": "appli ac set ignor actual power sourc appli batteri set ignor actual power sourc appli set accord actual power sourc",
        "Summary": "Advanced power management for Linux. See `tlp-stat` page for additional information.",
        "Task-Script": {
            "Apply AC settings (ignoring the actual power source)": "sudo tlp ac",
            "Apply battery settings (ignoring the actual power source)": "sudo tlp bat",
            "Apply settings (according to the actual power source)": "sudo tlp start"
        }
    },
    "linux_tlp-stat": {
        "Category": "linux",
        "Command": "tlp-stat",
        "P-Summary": "tool gener tlp statu report\nsee also tlp",
        "P-Tasks": "gener statu report configur activ set show batteri inform show configur",
        "Summary": "A tool to generate TLP status reports. See also `tlp`.",
        "Task-Script": {
            "Generate status report with configuration and all active settings": "sudo tlp-stat",
            "Show battery information": "sudo tlp-stat -b",
            "Show configuration": "sudo tlp-stat -c"
        }
    },
    "linux_toilet": {
        "Category": "linux",
        "Command": "toilet",
        "P-Summary": "tool display ascii-art font",
        "P-Tasks": "gener ascii art given text gener ascii art use custom font file gener ascii art use filter show avail toilet filter",
        "Summary": "A tool to display ASCII-art fonts.",
        "Task-Script": {
            "Generate ASCII art for a given text": "toilet {{input_text}}",
            "Generate ASCII art using a custom font file": "toilet {{input_text}} -f {{font_filename}}",
            "Generate ASCII art using a filter": "toilet {{input_text}} --filter {{filter_name}}",
            "Show available toilet filters": "toilet --filter list"
        }
    },
    "linux_tomb": {
        "Category": "linux",
        "Command": "tomb",
        "P-Summary": "manag encrypt storag directori safe transport hidden filesystem",
        "P-Tasks": "close tomb fail tomb use process creat new key file use lock tomb user prompt password key creat new tomb initi size 100mb forc close open tomb kill applic use initi lock empti tomb use key made forg list open tomb mount tomb default media use key make usabl regular filesystem directori",
        "Summary": "Manage encrypted storage directories that can be safely transported and hidden in a filesystem.",
        "Task-Script": {
            "Close a tomb (fails if the tomb is being used by a process)": "tomb close {{encrypted_directory.tomb}}",
            "Create a new key file that can be used to lock a tomb; user will be prompted for a password for the key": "tomb forge {{encrypted_directory.tomb.key}}",
            "Create a new tomb with an initial size of 100MB": "tomb dig -s {{100}} {{encrypted_directory.tomb}}",
            "Forcefully close all open tombs, killing any applications using them": "tomb slam all",
            "Initialize and lock an empty tomb using a key made with `forge`": "tomb lock {{encrypted_directory.tomb}} -k {{encrypted_directory.tomb.key}}",
            "List all open tombs": "tomb list",
            "Mount a tomb (by default in /media) using its key, making it usable as a regular filesystem directory": "tomb open {{encrypted_directory.tomb}} -k {{encrypted_directory.tomb.key}}"
        }
    },
    "linux_top": {
        "Category": "linux",
        "Command": "top",
        "P-Summary": "display dynam real-tim inform run process",
        "P-Tasks": "show idl zombi process get help interact command show process own given user show process given pid pass comma-separ list\nnormal know pid hand\nexampl pick pid process name show individu thread given process sort process field start top",
        "Summary": "Display dynamic real-time information about running processes.",
        "Task-Script": {
            "Do not show any idle or zombie processes": "top -i",
            "Get help about interactive commands": "?",
            "Show only processes owned by given user": "top -u {{username}}",
            "Show only the processes with the given PID(s), passed as a comma-separated list. (Normally you wouldn't know PIDs off hand. This example picks the PIDs from the process name)": "top -p $(pgrep -d ',' {{process_name}})",
            "Show the individual threads of a given process": "top -Hp {{process_id}}",
            "Sort processes by a field": "top -o {{field_name}}",
            "Start top": "top"
        }
    },
    "linux_trap": {
        "Category": "linux",
        "Command": "trap",
        "P-Summary": "automat execut command receiv signal process oper system\nuse perform cleanup interrupt user action",
        "P-Tasks": "list activ trap current shell list avail signal set trap remov activ trap set trap execut command one signal detect",
        "Summary": "Automatically execute commands after receiving signals by processes or the operating system.\nCan be used to perform cleanups for interruptions by the user or other actions.",
        "Task-Script": {
            "List active traps for the current shell": "trap -p",
            "List available signals to set traps for": "trap -l",
            "Remove active traps": "trap - {{SIGHUP}} {{SIGINT}}",
            "Set a trap to execute commands when one or more signals are detected": "trap 'echo \"Caught signal {{SIGHUP}}\"' {{SIGHUP}}"
        }
    },
    "linux_trash": {
        "Category": "linux",
        "Command": "trash",
        "P-Summary": "cli manag trashcan recycl bin",
        "P-Tasks": "delet file send trash empti trash empti trash keep file trash less 10 day ago list file trash remov file name foo trash remov file given origin locat restor file trash",
        "Summary": "A CLI for managing your trashcan / recycling bin.",
        "Task-Script": {
            "Delete a file (send to trash)": "trash {{path/to/file}}",
            "Empty trash": "trash-empty",
            "Empty trash, keeping files trashed less than {{10}} days ago": "trash-empty {{10}}",
            "List files in trash": "trash-list",
            "Remove all files named 'foo' from the trash": "trash-rm foo",
            "Remove all files with a given original location": "trash-rm {{/absolute/path/to/file_or_directory}}",
            "Restore file from trash": "trash-restore"
        }
    },
    "linux_tree": {
        "Category": "linux",
        "Command": "tree",
        "P-Summary": "show content current directori tree",
        "P-Tasks": "print directori print directori within tree hierarchi use wildcard glob pattern prune directori ancestor want one print file directori num level depth 1 mean current directori print file within tree hierarchi use wildcard glob pattern prune directori contain match file print hidden file color print size file cumul size directori human-read format print tree ignor given directori print tree without indent line show full path instead use -n escap whitespac special charact",
        "Summary": "Show the contents of the current directory as a tree.",
        "Task-Script": {
            "Print directories only": "tree -d",
            "Print directories within the tree hierarchy, using the wildcard (glob) pattern, and pruning out directories that aren't ancestors of the wanted one": "tree -P {{directory_name}} --matchdirs --prune",
            "Print files and directories up to 'num' levels of depth (where 1 means the current directory)": "tree -L {{num}}",
            "Print files within the tree hierarchy, using a wildcard (glob) pattern, and pruning out directories that don't contain matching files": "tree -P '{{*.txt}}' --prune",
            "Print hidden files too with colorization on": "tree -a -C",
            "Print the size of each file and the cumulative size of each directory, in human-readable format": "tree -s -h --du",
            "Print the tree ignoring the given directories": "tree -I '{{directory_name1|directory_name2}}'",
            "Print the tree without indentation lines, showing the full path instead (use `-N` to not escape whitespace and special characters)": "tree -i -f"
        }
    },
    "linux_trizen": {
        "Category": "linux",
        "Command": "trizen",
        "P-Summary": "arch linux util build packag arch user repositori aur",
        "P-Tasks": "instal new packag list instal packag version remov packag depend search packag databas keyword show inform packag synchron updat aur packag",
        "Summary": "Arch Linux utility for building packages from the Arch User Repository (AUR).",
        "Task-Script": {
            "Install a new package": "trizen -S {{package}}",
            "List installed packages and versions": "trizen -Qe",
            "Remove a package and its dependencies": "trizen -Rs {{package}}",
            "Search the package database for a keyword": "trizen -Ss {{keyword}}",
            "Show information about a package": "trizen -Si {{package}}",
            "Synchronize and update all AUR packages": "trizen -Syua"
        }
    },
    "linux_tshark": {
        "Category": "linux",
        "Command": "tshark",
        "P-Summary": "packet analysi tool cli version wireshark",
        "P-Tasks": "analyz packet file decod tcp port use specif protocol e g\nhttp monitor everyth localhost captur packet match specif captur filter show packet match specif output filter select specif field output specifi format captur output write captur packet file",
        "Summary": "Packet analysis tool, CLI version of wireshark.",
        "Task-Script": {
            "Analyze packets from a file": "tshark -r {{filename}}.pcap",
            "Decode a TCP port using a specific protocol (e.g. HTTP)": "tshark -d tcp.port=={{8888}},{{http}}",
            "Monitor everything on localhost": "tshark",
            "Only capture packets matching a specific capture filter": "tshark -f '{{udp port 53}}'",
            "Only show packets matching a specific output filter": "tshark -Y '{{http.request.method == \"GET\"}}'",
            "Select specific fields to output": "tshark -T {{fields|ek|json|pdml}} -e {{http.request.method}} -e {{ip.src}}",
            "Specify the format of captured output": "tshark -T {{json|text|ps|…}}",
            "Write captured packet to a file": "tshark -w {{path/to/file}}"
        }
    },
    "linux_tune2fs": {
        "Category": "linux",
        "Command": "tune2fs",
        "P-Summary": "adjust paramet ext2 ext3 ext4 filesystem\nmay use mount filesystem",
        "P-Tasks": "enabl discard user-specifi extend attribut filesystem enabl journal filesystem set filesystem label my_label set max number count filesystem check 2",
        "Summary": "Adjust parameters of an ext2, ext3 or ext4 filesystem.\nMay be used on mounted filesystems.",
        "Task-Script": {
            "Enable discard and user-specified extended attributes for a filesystem": "tune2fs -o {{discard,user_xattr}} {{/dev/sdXN}}",
            "Enable journaling for a filesystem": "tune2fs -o^{{nobarrier}} {{/dev/sdXN}}",
            "Set the filesystem label to MY_LABEL": "tune2fs -L {{'MY_LABEL'}} {{/dev/sdXN}}",
            "Set the max number of counts before a filesystem is checked to 2": "tune2fs -c {{2}} {{/dev/sdXN}}"
        }
    },
    "linux_ufw": {
        "Category": "linux",
        "Command": "ufw",
        "P-Summary": "uncompl firewal\nfrontend iptabl aim make configur firewal easier",
        "P-Tasks": "allow incom traffic port 5432 host comment identifi servic allow tcp traffic 192 168 0 4 address host port 22 delet particular rule\nrule number retriev ufw statu number command deni udp traffic port 22 deni traffic port 80 host disabl ufw enabl ufw show ufw rule along number",
        "Summary": "Uncomplicated Firewall.\nFrontend for iptables aiming to make configuration of a firewall easier.",
        "Task-Script": {
            "Allow incoming traffic on port 5432 on this host with a comment identifying the service": "ufw allow {{5432}} comment \"{{Service}}\"",
            "Allow only TCP traffic from 192.168.0.4 to any address on this host, on port 22": "ufw allow proto {{tcp}} from {{192.168.0.4}} to {{any}} port {{22}}",
            "Delete a particular rule. The rule number can be retrieved from the `ufw status numbered` command": "ufw delete {{rule_number}}",
            "Deny all UDP traffic to port 22": "ufw deny proto {{udp}} from {{any}} to {{any}} port {{22}}",
            "Deny traffic on port 80 on this host": "ufw deny {{80}}",
            "Disable ufw": "ufw disable",
            "Enable ufw": "ufw enable",
            "Show ufw rules, along with their numbers": "ufw status numbered"
        }
    },
    "linux_ul": {
        "Category": "linux",
        "Command": "ul",
        "P-Summary": "perform underlin text\ncharact given string must underlin separ",
        "P-Tasks": "display content file underlin made dash - display content file underlin applic",
        "Summary": "Performs the underlining of a text.\nEach character in a given string must be underlined separately.",
        "Task-Script": {
            "Display the contents of the file with underlines made of dashes `-`": "ul -i {{file.txt}}",
            "Display the contents of the file with underlines where applicable": "ul {{file.txt}}"
        }
    },
    "linux_units": {
        "Category": "linux",
        "Command": "units",
        "P-Summary": "provid convers two unit measur\ntype search text prompt display list unit contain text",
        "P-Tasks": "convert unit quantiti run interact mode show convers two compound unit show convers two simpl unit show convers unit differ dimens",
        "Summary": "Provide the conversion between two units of measure.\nTyping 'search {{text}}' in the prompt will display a list of all of the units containing {{text}}.",
        "Task-Script": {
            "Convert between units with quantities": "units {{15 pounds}} {{kilograms}}",
            "Run in interactive mode": "units",
            "Show the conversion between two compound units": "units \"{{meters / second}}\" \"{{inches / hour}}\"",
            "Show the conversion between two simple units": "units {{quarts}} {{tablespoons}}",
            "Show the conversion between units with different dimensions": "units \"{{acres}}\" \"{{ft^2}}\""
        }
    },
    "linux_unix2dos": {
        "Category": "linux",
        "Command": "unix2dos",
        "P-Summary": "chang unix-styl line end dos-styl\nreplac cr crlf",
        "P-Tasks": "chang line end file creat copi dos-styl line end",
        "Summary": "Change Unix-style line endings to DOS-style.\nReplaces CR with CRLF.",
        "Task-Script": {
            "Change the line endings of a file": "unix2dos {{filename}}",
            "Create a copy with DOS-style line endings": "unix2dos -n {{filename}} {{new_filename}}"
        }
    },
    "linux_unix2mac": {
        "Category": "linux",
        "Command": "unix2mac",
        "P-Summary": "chang unix-styl line end macos-styl\nreplac cr lf",
        "P-Tasks": "chang line end file creat copi macos-styl line end",
        "Summary": "Change Unix-style line endings to macOS-style.\nReplaces CR with LF.",
        "Task-Script": {
            "Change the line endings of a file": "unix2mac {{filename}}",
            "Create a copy with macOS-style line endings": "unix2mac -n {{filename}} {{new_filename}}"
        }
    },
    "linux_unset": {
        "Category": "linux",
        "Command": "unset",
        "P-Summary": "remov shell variabl function",
        "P-Tasks": "remov function my_func remov variabl foo variabl exist remov function foo remov variabl foo bar",
        "Summary": "Remove shell variables or functions.",
        "Task-Script": {
            "Remove the function my_func": "unset -f {{my_func}}",
            "Remove the variable `foo`, or if the variable doesn't exist, remove the function `foo`": "unset {{foo}}",
            "Remove the variables foo and bar": "unset -v {{foo}} {{bar}}"
        }
    },
    "linux_unshadow": {
        "Category": "linux",
        "Command": "unshadow",
        "P-Summary": "util provid john ripper project obtain tradit unix password file system use shadow password",
        "P-Tasks": "combin etc shadow etc passwd current system combin two arbitrari shadow password file",
        "Summary": "Utility provided by the John the Ripper project to obtain the traditional Unix password file if the system uses shadow passwords.",
        "Task-Script": {
            "Combine the /etc/shadow and /etc/passwd of the current system": "sudo unshadow /etc/passwd /etc/shadow",
            "Combine two arbitrary shadow and password files": "sudo unshadow {{/path/to/passwd}} {{/path/to/shadow}}"
        }
    },
    "linux_update-alternatives": {
        "Category": "linux",
        "Command": "update-alternatives",
        "P-Summary": "conveni tool maintain symbol link determin default command",
        "P-Tasks": "add symbol link configur symbol link java display command current select display inform specifi command remov symbol link",
        "Summary": "A convenient tool for maintaining symbolic links to determine default commands.",
        "Task-Script": {
            "Add a symbolic link": "sudo update-alternatives --install {{path/to/symlink}} {{command_name}} {{path/to/command_binary}} {{priority}}",
            "Configure a symbolic link for \"java\"": "sudo update-alternatives --config {{java}}",
            "Display all commands and their current selection": "update-alternatives --get-selections",
            "Display information about a specified command": "update-alternatives --display {{java}}",
            "Remove a symbolic link": "sudo update-alternatives --remove {{java}} {{/opt/java/jdk1.8.0_102/bin/java}}"
        }
    },
    "linux_update-rc.d": {
        "Category": "linux",
        "Command": "update-rc.d",
        "P-Summary": "instal remov servic system-v style init script link\ninit script etc init",
        "P-Tasks": "disabl servic enabl servic forcibl remov servic instal servic",
        "Summary": "Install and remove services which are System-V style init script links.\nInit scripts are in the /etc/init.d/.",
        "Task-Script": {
            "Disable a service": "update-rc.d {{mysql}} disable",
            "Enable a service": "update-rc.d {{mysql}} enable",
            "Forcibly remove a service": "update-rc.d -f {{mysql}} remove",
            "Install a service": "update-rc.d {{mysql}} defaults"
        }
    },
    "linux_updatedb": {
        "Category": "linux",
        "Command": "updatedb",
        "P-Summary": "creat updat databas use locat\nusual run daili cron",
        "P-Tasks": "display file name soon found refresh databas content",
        "Summary": "Create or update the database used by `locate`.\nIt is usually run daily by cron.",
        "Task-Script": {
            "Display file names as soon as they are found": "sudo updatedb --verbose",
            "Refresh database content": "sudo updatedb"
        }
    },
    "linux_uprecords": {
        "Category": "linux",
        "Command": "uprecords",
        "P-Summary": "display summari histor uptim record",
        "P-Tasks": "display summari top 10 histor uptim record display downtim reboot instead kernel version display top 25 record truncat inform show recent reboot",
        "Summary": "Displays a summary of historical uptime records.",
        "Task-Script": {
            "Display a summary of the top 10 historical uptime records": "uprecords",
            "Display the downtime between reboots instead of the kernel version": "uprecords -d",
            "Display the top 25 records": "uprecords -m {{25}}",
            "Don't truncate information": "uprecords -w",
            "Show the most recent reboots": "uprecords -B"
        }
    },
    "linux_urxvt": {
        "Category": "linux",
        "Command": "urxvt",
        "P-Summary": "rxvt-unicod\ncustomiz termin emul",
        "P-Tasks": "open new urxvt window run command keep window open run command new urxvt window run command within sh shell run specif directori",
        "Summary": "Rxvt-unicode.\nA customizable terminal emulator.",
        "Task-Script": {
            "Open a new urxvt window": "urxvt",
            "Run a command and keep the window open": "urxvt --hold -e {{command}}",
            "Run a command in a new urxvt window": "urxvt -e {{command}}",
            "Run a command within the \"sh\" shell": "urxvt -e {{sh}} -c {{command}}",
            "Run in a specific directory": "urxvt -cd {{path/to/directory}}"
        }
    },
    "linux_useradd": {
        "Category": "linux",
        "Command": "useradd",
        "P-Summary": "creat new user",
        "P-Tasks": "creat new system user without home directori creat new user creat new user belong addit group mind lack whitespac creat new user default home directori creat new user specifi shell",
        "Summary": "Create a new user.",
        "Task-Script": {
            "Create new system user without a home directory": "useradd --no-create-home --system {{name}}",
            "Create new user": "useradd {{name}}",
            "Create new user belonging to additional groups (mind the lack of whitespace)": "useradd --groups {{group1,group2}} {{name}}",
            "Create new user with a default home directory": "useradd --create-home {{name}}",
            "Create new user with specified shell": "useradd --shell {{/path/to/shell}} {{name}}"
        }
    },
    "linux_userdel": {
        "Category": "linux",
        "Command": "userdel",
        "P-Summary": "remov user",
        "P-Tasks": "remov user home directori",
        "Summary": "Remove a user.",
        "Task-Script": {
            "Remove a user and their home directory": "userdel -r {{name}}"
        }
    },
    "linux_usermod": {
        "Category": "linux",
        "Command": "usermod",
        "P-Summary": "modifi user account",
        "P-Tasks": "add user supplementari group mind whitespac chang user name creat new home directori user move file",
        "Summary": "Modifies a user account.",
        "Task-Script": {
            "Add user to supplementary groups (mind the whitespace)": "usermod -a -G {{group1,group2}} {{user}}",
            "Change a user's name": "usermod -l {{newname}} {{user}}",
            "Create a new home directory for a user and move their files to it": "usermod -m -d {{/path/to/home}} {{user}}"
        }
    },
    "linux_utmpdump": {
        "Category": "linux",
        "Command": "utmpdump",
        "P-Summary": "dump load btmp utmp wtmp account file",
        "P-Tasks": "dump var log wtmp file standard output plain text load previous dump file var log wtmp",
        "Summary": "Dump and load btmp, utmp and wtmp accounting files.",
        "Task-Script": {
            "Dump the `/var/log/wtmp` file to the standard output as plain text": "utmpdump {{/var/log/wtmp}}",
            "Load a previously dumped file into `/var/log/wtmp`": "utmpdump -r {{dumpfile}} > {{/var/log/wtmp}}"
        }
    },
    "linux_uuidgen": {
        "Category": "linux",
        "Command": "uuidgen",
        "P-Summary": "gener uniqu identifi uuid",
        "P-Tasks": "creat uuid base current time creat uuid base hash url creat random uuid",
        "Summary": "Generate unique identifiers (UUIDs).",
        "Task-Script": {
            "Create a UUID based on the current time": "uuidgen --time",
            "Create a UUID based on the hash of a URL": "uuidgen --sha1 --namespace {{@url}} --name {{object_name}}",
            "Create a random UUID": "uuidgen --random"
        }
    },
    "linux_uvcdynctrl": {
        "Category": "linux",
        "Command": "uvcdynctrl",
        "P-Summary": "libwebcam command line tool manag dynam control uvcvideo",
        "P-Tasks": "get current control valu list avail camera list avail control load state control file save state current control file set new control valu neg valu add -- -valu specifi devic use default video0",
        "Summary": "A libwebcam command line tool to manage dynamic controls in uvcvideo.",
        "Task-Script": {
            "Get the current control value": "uvcdynctrl -g {{control_name}}",
            "List all available cameras": "uvcdynctrl -l",
            "List available controls": "uvcdynctrl -c",
            "Load the state of the controls from a file": "uvcdynctrl -L {{filename}}",
            "Save the state of the current controls to a file": "uvcdynctrl -W {{filename}}",
            "Set a new control value (for negative values, add -- before {{-value}})": "uvcdynctrl -s {{control_name}} {{value}}",
            "Specify the device to use (defaults to `video0`)": "uvcdynctrl -d {{device_name}}"
        }
    },
    "linux_vgcreate": {
        "Category": "linux",
        "Command": "vgcreate",
        "P-Summary": "creat volum group combin multipl mass-storag devic",
        "P-Tasks": "creat new volum group call vg1 use multipl devic creat new volum group call vg1 use dev sda1 devic",
        "Summary": "Create volume groups combining multiple mass-storage devices.",
        "Task-Script": {
            "Create a new volume group called vg1 using multiple devices": "vgcreate {{vg1}} {{/dev/sda1}} {{/dev/sdb1}} {{/dev/sdc1}}",
            "Create a new volume group called vg1 using the `/dev/sda1` device": "vgcreate {{vg1}} {{/dev/sda1}}"
        }
    },
    "linux_vgs": {
        "Category": "linux",
        "Command": "vgs",
        "P-Summary": "display inform lvm volum group",
        "P-Tasks": "append field default display chang default display show detail display volum group display inform volum group display specif field suppress head line use separ separ field",
        "Summary": "Display information about LVM volume groups.",
        "Task-Script": {
            "Append field to default display": "vgs -o +{{field_name}}",
            "Change default display to show more details": "vgs -v",
            "Display all volume groups": "vgs -a",
            "Display information about volume groups": "vgs",
            "Display only specific fields": "vgs -o {{field_name_1}},{{field_name_2}}",
            "Suppress heading line": "vgs --noheadings",
            "Use separator to separate fields": "vgs --separator ="
        }
    },
    "linux_viewnior": {
        "Category": "linux",
        "Command": "viewnior",
        "P-Summary": "simpl eleg imag viewer",
        "P-Tasks": "view imag view fullscreen slideshow mode view fullscreen mode",
        "Summary": "Simple and elegant image viewer.",
        "Task-Script": {
            "View an image": "viewnior {{path/to/image.ext}}",
            "View fullscreen in slideshow mode": "viewnior --slideshow {{path/to/image.ext}}",
            "View in fullscreen mode": "viewnior --fullscreen {{path/to/image.ext}}"
        }
    },
    "linux_vipw": {
        "Category": "linux",
        "Command": "vipw",
        "P-Summary": "edit password file",
        "P-Tasks": "display current verson vipw edit password file",
        "Summary": "Edit the password file.",
        "Task-Script": {
            "Display the current verson of `vipw`": "vipw --version",
            "Edit the password file": "vipw"
        }
    },
    "linux_vmstat": {
        "Category": "linux",
        "Command": "vmstat",
        "P-Summary": "report inform process memori page block io trap disk cpu activ",
        "P-Tasks": "display report everi 2 second 5 time display virtual memori statist",
        "Summary": "Report information about processes, memory, paging, block IO, traps, disks and CPU activity.",
        "Task-Script": {
            "Display reports every 2 seconds for 5 times": "vmstat {{2}} {{5}}",
            "Display virtual memory statistics": "vmstat"
        }
    },
    "linux_vmware-checkvm": {
        "Category": "linux",
        "Command": "vmware-checkvm",
        "P-Summary": "check see current host vmware vm",
        "P-Tasks": "return vmware hardwar version return current vmware softwar version exit statu determin whether system vm",
        "Summary": "Checks to see if the current host is a VMWare VM or not.",
        "Task-Script": {
            "Return the VMWare hardware version": "vmware-checkvm -h",
            "Return the current VMWare software version (exit status determines whether the system is a VM or not)": "vmware-checkvm"
        }
    },
    "linux_vncserver": {
        "Category": "linux",
        "Command": "vncserver",
        "P-Summary": "launch vnc virtual network comput desktop",
        "P-Tasks": "kill instanc vnc server run specif display launch vnc server next avail display launch vnc server specif screen geometri",
        "Summary": "Launches a VNC (Virtual Network Computing) desktop.",
        "Task-Script": {
            "Kill an instance of VNC Server running on a specific display": "vncserver --kill :{{display_number}}",
            "Launch a VNC Server on next available display": "vncserver",
            "Launch a VNC Server with specific screen geometry": "vncserver --geometry {{width}}x{{height}}"
        }
    },
    "linux_vncviewer": {
        "Category": "linux",
        "Command": "vncviewer",
        "P-Summary": "launch vnc virtual network comput client",
        "P-Tasks": "launch vnc client connect host given display launch vnc client connect host given port launch vnc client specif screen geometri launch full-screen mode",
        "Summary": "Launches a VNC (Virtual Network Computing) client.",
        "Task-Script": {
            "Launch a VNC client which connects to a host on a given display": "vncviewer {{host}}:{{display_number}}",
            "Launch a VNC client which connects to a host on a given port": "vncviewer {{host}}::{{port}}",
            "Launch a VNC client with a specific screen geometry": "vncviewer --geometry {{width}}x{{height}} {{host}}:{{display_number}}",
            "Launch in full-screen mode": "vncviewer -FullScreen {{host}}:{{display_number}}"
        }
    },
    "linux_vpnc": {
        "Category": "linux",
        "Command": "vpnc",
        "P-Summary": "vpn client cisco 3000 vpn concentr",
        "P-Tasks": "connect defin configur file termin previous creat connect",
        "Summary": "A VPN client for the Cisco 3000 VPN Concentrator.",
        "Task-Script": {
            "Connect with a defined configuration file": "sudo vpnc {{config_file}}",
            "Terminate the previously created connection": "sudo vpnc-disconnect"
        }
    },
    "linux_vrms": {
        "Category": "linux",
        "Command": "vrms",
        "P-Summary": "report non-fre packag instal debian-bas ose",
        "P-Tasks": "list non-fre contrib packag descript output packag name",
        "Summary": "Report non-free packages installed on Debian-based OSes.",
        "Task-Script": {
            "List non-free and contrib packages (and their description)": "vrms",
            "Only output the package names": "vrms --sparse"
        }
    },
    "linux_w": {
        "Category": "linux",
        "Command": "w",
        "P-Summary": "display log process",
        "P-Tasks": "display inform specif user display inform user current log display inform without includ header display inform without includ login jcpu pcpu column",
        "Summary": "Display who is logged in and their processes.",
        "Task-Script": {
            "Display information about a specific user": "w {{user}}",
            "Display information about all users who are currently logged in": "w",
            "Display information without including the header": "w --no-header",
            "Display information without including the login, JCPU and PCPU columns": "w --short"
        }
    },
    "linux_wall": {
        "Category": "linux",
        "Command": "wall",
        "P-Summary": "write messag termin user current log",
        "P-Tasks": "send messag send messag file send messag timeout default 300",
        "Summary": "Write a message on the terminals of users currently logged in.",
        "Task-Script": {
            "Send a message": "echo \"{{message}}\" | wall",
            "Send a message from a file": "wall {{file}}",
            "Send a message with timeout (default 300)": "wall -t {{seconds}} {{file}}"
        }
    },
    "linux_watch": {
        "Category": "linux",
        "Command": "watch",
        "P-Summary": "execut command repeatedli monitor output full-screen mode",
        "P-Tasks": "monitor node process refresh everi 3 second monitor disk space highlight chang monitor file current directori",
        "Summary": "Execute a command repeatedly, and monitor the output in full-screen mode.",
        "Task-Script": {
            "Monitor \"node\" processes, refreshing every 3 seconds": "watch -n {{3}} \"{{ps aux | grep node}}\"",
            "Monitor disk space and highlight the changes": "watch -d {{df}}",
            "Monitor files in the current directory": "watch {{ls}}"
        }
    },
    "linux_whatis": {
        "Category": "linux",
        "Command": "whatis",
        "P-Summary": "display one-lin descript manual page",
        "P-Tasks": "display descript man page display descript command match glob cut descript end line search man page descript regular express",
        "Summary": "Display one-line descriptions from manual pages.",
        "Task-Script": {
            "Display a description from a man page": "whatis {{command}}",
            "Display descriptions for all commands matching a glob": "whatis --wildcard {{net*}}",
            "Don't cut the description off at the end of the line": "whatis --long {{command}}",
            "Search man page descriptions with a regular expression": "whatis --regex '{{wish[0-9]\\.[0-9]}}'"
        }
    },
    "linux_whereis": {
        "Category": "linux",
        "Command": "whereis",
        "P-Summary": "locat binari sourc manual page file command",
        "P-Tasks": "locat binari gcc usr bin locat binari unusu manual entri binari less one manual instal locat binari man page ls locat binari sourc man page ssh locat sourc gcc man page git locat unusu binari less one binari system",
        "Summary": "Locate the binary, source, and manual page files for a command.",
        "Task-Script": {
            "Locate binaries for gcc in /usr/bin/ only": "whereis -b -B {{/usr/bin/}} -f {{gcc}}",
            "Locate binaries that have unusual manual entries (binaries that have more or less than one manual installed)": "whereis -u -m *",
            "Locate binary and man pages for ls": "whereis -bm {{ls}}",
            "Locate binary, source and man pages for ssh": "whereis {{ssh}}",
            "Locate source of gcc and man pages for git": "whereis -s {{gcc}} -m {{git}}",
            "Locate unusual binaries (those that have more or less than one binary on the system)": "whereis -u *"
        }
    },
    "linux_whiptail": {
        "Category": "linux",
        "Command": "whiptail",
        "P-Summary": "display text-bas dialog box shell script",
        "P-Tasks": "customis text ye button display boolean choic return result exit code display multiple-choic menu display password input box display simpl messag display text input box",
        "Summary": "Display text-based dialog boxes from shell scripts.",
        "Task-Script": {
            "Customise the text on the yes / no buttons": "whiptail --title \"{{title}}\" --yes-button \"{{text}}\" --no-button \"{{text}}\" --yesno \"{{message}}\" {{height_in_chars}} {{width_in_chars}}",
            "Display a boolean choice, returning the result through the exit code": "whiptail --title \"{{title}}\" --yesno \"{{message}}\" {{height_in_chars}} {{width_in_chars}}",
            "Display a multiple-choice menu": "{{result_variable_name}}=$(whiptail --title \"{{title}}\" --menu \"{{message}}\" {{height_in_chars}} {{width_in_chars}} {{menu_display_height}} \"{{value_1}}\" \"{{display_text_1}}\" \"{{value_n}}\" \"{{display_text_n}}\" ..... 3>&1 1>&2 2>&3)",
            "Display a password input box": "{{result_variable_name}}=\"$(whiptail --title \"{{title}}\" --passwordbox \"{{message}}\" {{height_in_chars}} {{width_in_chars}} 3>&1 1>&2 2>&3)\"",
            "Display a simple message": "whiptail --title \"{{title}}\" --msgbox \"{{message}}\" {{height_in_chars}} {{width_in_chars}}",
            "Display a text input box": "{{result_variable_name}}=\"$(whiptail --title \"{{title}}\" --inputbox \"{{message}}\" {{height_in_chars}} {{width_in_chars}} {{default_text}} 3>&1 1>&2 2>&3)\""
        }
    },
    "linux_wine": {
        "Category": "linux",
        "Command": "wine",
        "P-Summary": "run window program unix",
        "P-Tasks": "instal msi packag run windows-lik packag manag run cmd exe background run ipconfig exe program",
        "Summary": "Run Windows programs on Unix.",
        "Task-Script": {
            "Install MSI packages": "wine msiexec /i {{package}}",
            "Run Windows-like Package Manager": "wine uninstaller",
            "Run cmd.exe in background": "wine start {{cmd}}",
            "Run ipconfig.exe program": "wine {{ipconfig}} {{/all}}"
        }
    },
    "linux_wipefs": {
        "Category": "linux",
        "Command": "wipefs",
        "P-Summary": "wipe filesystem raid partition-t signatur devic",
        "P-Tasks": "display signatur specifi devic forc wipe even filesystem mount perform dri run wipe avail signatur specifi devic",
        "Summary": "Wipe filesystem, raid, or partition-table signatures from a device.",
        "Task-Script": {
            "Display signatures for specified device": "sudo wipefs {{/dev/sda}}",
            "Force wipe, even if the filesystem is mounted": "sudo wipefs --all --force {{/dev/sda}}",
            "Perform dry run": "sudo wipefs --all --no-act {{/dev/sda}}",
            "Wipe all available signatures for specified device": "sudo wipefs --all {{/dev/sda}}"
        }
    },
    "linux_wmctrl": {
        "Category": "linux",
        "Command": "wmctrl",
        "P-Summary": "cli x window manag",
        "P-Tasks": "list window manag window manag move window current workspac rais give focu select window move workspac select window toggl fullscreen switch workspac switch first window whose partial titl match",
        "Summary": "CLI for X Window Manager.",
        "Task-Script": {
            "List all windows, managed by the window manager": "wmctrl -l",
            "Move a window to the current workspace, raise it and give it focus": "wmctrl -R {{window_title}}",
            "Select a window a move it to a workspace": "wmctrl -r {{window_title}} -t {{workspace_number}}",
            "Select a window and toggle fullscreen": "wmctrl -r {{window_title}} -b toggle,fullscreen",
            "Switch to a workspace": "wmctrl -s {{workspace_number}}",
            "Switch to the first window whose (partial) title matches": "wmctrl -a {{window_title}}"
        }
    },
    "linux_wodim": {
        "Category": "linux",
        "Command": "wodim",
        "P-Summary": "command alias cdrecord system record data cd dvd\ninvoc wodim caus destruct action eras data disc",
        "P-Tasks": "burn file disc eject disc done record requir burn file disc optic drive potenti write multipl disc success display optic drive avail wodim record burn audio-onli disc",
        "Summary": "Command (aliased as `cdrecord` on some systems) for recording data to CDs or DVDs.\nSome invocations of wodim can cause destructive actions, such as erasing all the data on a disc.",
        "Task-Script": {
            "Burn a file to a disc, ejecting the disc once done (some recorders require this)": "wodim -eject dev=/dev/{{optical_drive}} -data {{file.iso}}",
            "Burn a file to the disc in an optical drive, potentially writing to multiple discs in succession": "wodim -tao dev=/dev/{{optical_drive}} -data {{file.iso}}",
            "Display optical drives available to `wodim`": "wodim --devices",
            "Record (\"burn\") an audio-only disc": "wodim dev=/dev/{{optical_drive}} -audio {{track*.cdaudio}}"
        }
    },
    "linux_wpa_cli": {
        "Category": "linux",
        "Command": "wpa_cli",
        "P-Summary": "add configur wlan interfac",
        "P-Tasks": "add network enabl network save config scan avail network set network ssid show scan result",
        "Summary": "Add and configure wlan interfaces.",
        "Task-Script": {
            "Add a network": "wpa_cli add_network {{number}}",
            "Enable network": "wpa_cli enable_network {{number}}",
            "Save config": "wpa_cli save_config",
            "Scan for available networks": "wpa_cli scan",
            "Set a network's SSID": "wpa_cli set_network {{number}} ssid \"{{SSID}}\"",
            "Show scan results": "wpa_cli scan_results"
        }
    },
    "linux_wpa_passphrase": {
        "Category": "linux",
        "Command": "wpa_passphrase",
        "P-Summary": "gener wpa-psk key ascii passphras given ssid",
        "P-Tasks": "comput display wpa-psk key given ssid specifi passphras argument comput display wpa-psk key given ssid read passphras stdin",
        "Summary": "Generate a WPA-PSK key from an ASCII passphrase for a given SSID.",
        "Task-Script": {
            "Compute and display WPA-PSK key for a given SSID specifying the passphrase as an argument": "wpa_passphrase {{SSID}} {{passphrase}}",
            "Compute and display the WPA-PSK key for a given SSID reading the passphrase from stdin": "wpa_passphrase {{SSID}}"
        }
    },
    "linux_wtf": {
        "Category": "linux",
        "Command": "wtf",
        "P-Summary": "show expans acronym",
        "P-Tasks": "expand given acronym specifi comput relat search type",
        "Summary": "Show the expansions of acronyms.",
        "Task-Script": {
            "Expand a given acronym": "wtf {{IMO}}",
            "Specify a computer related search type": "wtf -t {{comp}} {{WWW}}"
        }
    },
    "linux_x11vnc": {
        "Category": "linux",
        "Command": "x11vnc",
        "P-Summary": "vnc server enabl vnc exist display ser\ndefault server automat termin client disconnect",
        "P-Tasks": "launch vnc server view-onli mode termin last client disconnect launch vnc server specif display screen start index zero launch vnc server first display second screen launch vnc server third display default screen launch vnc server allow multipl client connect",
        "Summary": "A VNC server that will enable VNC on an existing display ser.\nBy default, the server will automatically terminate once all clients disconnect from it.",
        "Task-Script": {
            "Launch a VNC server in view-only mode, and which won't terminate once the last client disconnects": "x11vnc -forever -viewonly",
            "Launch a VNC server on a specific display and screen (both starting at index zero)": "x11vnc -display :{{display}}.{{screen}}",
            "Launch a VNC server on the first display's second screen": "x11vnc -display :{{0}}.{{1}}",
            "Launch a VNC server on the third display's default screen": "x11vnc -display :{{2}}",
            "Launch a VNC server that allows multiple clients to connect": "x11vnc -shared"
        }
    },
    "linux_xar": {
        "Category": "linux",
        "Command": "xar",
        "P-Summary": "manag xar archiv",
        "P-Tasks": "creat xar archiv file given directori extract content given xar archiv current directori list content given xar archiv",
        "Summary": "Manage .xar archives.",
        "Task-Script": {
            "Create a xar archive of all files in a given directory": "xar -cf {{archive.xar}} {{path/to/directory}}",
            "Extract the contents of a given xar archive to the current directory": "xar -xf {{archive.xar}}",
            "List the contents of a given xar archive": "xar -tf {{archive.xar}}"
        }
    },
    "linux_xbacklight": {
        "Category": "linux",
        "Command": "xbacklight",
        "P-Summary": "util adjust backlight bright use randr extens",
        "P-Tasks": "decreas current bright 75 get current screen bright percentag increas backlight 100 60 second valu given ms use 60 step increas current bright 25 set screen bright 40",
        "Summary": "Utility to adjust backlight brightness using the RandR extension.",
        "Task-Script": {
            "Decrease current brightness by 75%": "xbacklight -dec {{75}}",
            "Get the current screen brightness as a percentage": "xbacklight",
            "Increase backlight to 100%, over 60 seconds (value given in ms), using 60 steps": "xbacklight -set {{100}} -time {{60000}} -steps {{60}}",
            "Increase current brightness by 25%": "xbacklight -inc {{25}}",
            "Set the screen brightness to 40%": "xbacklight -set {{40}}"
        }
    },
    "linux_xbps": {
        "Category": "linux",
        "Command": "xbps",
        "P-Summary": "x binari packag system xbp binari packag system use void linux",
        "P-Tasks": "instal packag synchron remot repositori remov packag depend recurs requir packag remov packag leav depend instal remov obsolet packag cach remov packag instal depend current need search packag remot repositori synchron repositori databas updat system depend",
        "Summary": "The X Binary Package System (or xbps) is the binary package system used by Void Linux.",
        "Task-Script": {
            "Install packages and synchronize them with the remote repository": "xbps-install --synchronize {{package_name1}} {{package_name2}}",
            "Remove a package and all of its dependencies recursively that are not required by other packages": "xbps-remove --recursive {{package_name}}",
            "Remove a package, leaving all of its dependencies installed": "xbps-remove {{package_name}}",
            "Remove obsolete packages from the cache": "xbps-remove --clean-cache",
            "Remove packages that were installed as dependencies and aren't currently needed": "xbps-remove --remove-orphans",
            "Search for a package in the remote repository": "xbps-query --repository -s {{package_name}}",
            "Synchronize your repository databases and update your system and dependencies": "xbps-install --synchronize -u"
        }
    },
    "linux_xclip": {
        "Category": "linux",
        "Command": "xclip",
        "P-Summary": "x11 clipboard manipul tool similar xsel\nhandl x primari secondari select plu system clipboard ctrl + c ctrl + v",
        "P-Tasks": "copi content png imag system clipboard past program correctli copi content file system clipboard copi content file system clipboard use short notat copi output command given x11 select area copi output command x11 primari select area clipboard past content x11 primari select area consol past content system clipboard file past content system clipboard consol",
        "Summary": "X11 clipboard manipulation tool, similar to `xsel`.\nHandles the X primary and secondary selections, plus the system clipboard (`Ctrl + C`/`Ctrl + V`).",
        "Task-Script": {
            "Copy the contents of a PNG image into the system clipboard (can be pasted in other programs correctly)": "xclip -sel clip -t image/png {{input_file.png}}",
            "Copy the contents of a file into the system clipboard": "xclip -sel clip {{input_file.txt}}",
            "Copy the contents of a file to the system clipboard, using short notation": "echo 123 | xclip -sel clip",
            "Copy the output from a command to a given X11 selection area": "echo 123 | xclip -selection {{primary|secondary|clipboard}}",
            "Copy the output from a command to the X11 primary selection area (clipboard)": "echo 123 | xclip",
            "Paste the contents of the X11 primary selection area to the console": "xclip -o",
            "Paste the contents of the system clipboard into a file": "xclip -o -sel clip > {{output_file.txt}}",
            "Paste the contents of the system clipboard to the console": "xclip -o -sel clip"
        }
    },
    "linux_xclock": {
        "Category": "linux",
        "Command": "xclock",
        "P-Summary": "display time analog digit form",
        "P-Tasks": "display 12-hour digit clock hour minut field display 24-hour digit clock hour minut field display 24-hour digit clock hour minut second field updat everi second display digit clock use strftime format string see strftime 3 display analog clock",
        "Summary": "Display the time in analog or digital form.",
        "Task-Script": {
            "Display a 12-hour digital clock with the hour and minute fields only": "xclock -digital -twelve -brief",
            "Display a 24-hour digital clock with the hour and minute fields only": "xclock -digital -brief",
            "Display a 24-hour digital clock with the hour, minute and second fields that updates every second": "xclock -digital -strftime '%H:%M:%S' -update 1",
            "Display a digital clock using an strftime format string (see strftime(3))": "xclock -digital -strftime {{format}}",
            "Display an analog clock": "xclock"
        }
    },
    "linux_xdotool": {
        "Category": "linux",
        "Command": "xdotool",
        "P-Summary": "command line autom x11",
        "P-Tasks": "click right mous button focu window id 12345 get id current activ window press enter key retriev x-window window id run firefox window type messag 500m delay letter",
        "Summary": "Command line automation for X11.",
        "Task-Script": {
            "Click the right mouse button": "xdotool click {{3}}",
            "Focus on the window with id of 12345": "xdotool windowfocus --sync {{12345}}",
            "Get the id of the currently active window": "xdotool getactivewindow",
            "Press the enter key": "xdotool key {{KP_Enter}}",
            "Retrieve the X-Windows window ID of the running Firefox window(s)": "xdotool search --onlyvisible --name {{firefox}}",
            "Type a message, with a 500ms delay for each letter": "xdotool type --delay {{500}} \"Hello world\""
        }
    },
    "linux_xeyes": {
        "Category": "linux",
        "Command": "xeyes",
        "P-Summary": "display eye screen follow mous cursor",
        "P-Tasks": "launch xey remot machin display 0 screen 0 launch xey local machin default display",
        "Summary": "Display eyes on the screen that follow the mouse cursor.",
        "Task-Script": {
            "Launch xeyes on a remote machine's display 0, screen 0": "xeyes -display {{remote_host}}:{{0}}.{{0}}",
            "Launch xeyes on the local machine's default display": "xeyes"
        }
    },
    "linux_xfce4-screenshooter": {
        "Category": "linux",
        "Command": "xfce4-screenshooter",
        "P-Summary": "xfce4 screenshot tool",
        "P-Tasks": "launch screenshoot gui take screenshot region screen select use mous take screenshot activ window copi clipboard take screenshot activ window open chosen program take screenshot entir screen launch gui ask proceed take screenshot entir screen save specifi directori wait time take screenshot",
        "Summary": "The XFCE4 screenshot tool.",
        "Task-Script": {
            "Launch the screenshooter GUI": "xfce4-screenshooter",
            "Take a screenshot of a region of the screen (select using the mouse)": "xfce4-screenshooter --region",
            "Take a screenshot of the active window, and copy it to the clipboard": "xfce4-screenshooter --window --clipboard",
            "Take a screenshot of the active window, and open it with a chosen program": "xfce4-screenshooter --window --open {{gimp}}",
            "Take a screenshot of the entire screen and launch the GUI to ask how to proceed": "xfce4-screenshooter --fullscreen",
            "Take a screenshot of the entire screen and save it in the specified directory": "xfce4-screenshooter --fullscreen --save {{path/to/directory}}",
            "Wait some time before taking the screenshot": "xfce4-screenshooter --delay {{seconds}}"
        }
    },
    "linux_xfce4-terminal": {
        "Category": "linux",
        "Command": "xfce4-terminal",
        "P-Summary": "xfce4 termin emul",
        "P-Tasks": "execut command new termin window keep termin around execut command finish execut open new tab current termin window open new termin window open multipl new tab execut command set initi titl",
        "Summary": "The XFCE4 terminal emulator.",
        "Task-Script": {
            "Execute a command in a new terminal window": "xfce4-terminal --command \"{{command_with_args}}\"",
            "Keep the terminal around after the executed command finishes executing": "xfce4-terminal --command \"{{command_with_args}}\" --hold",
            "Open a new tab in the current terminal window": "xfce4-terminal --tab",
            "Open a new terminal window": "xfce4-terminal",
            "Open multiple new tabs, executing a command in each": "xfce4-terminal --tab --command \"{{command_a}}\" --tab --command \"{{command_b}}\"",
            "Set the initial title": "xfce4-terminal --initial-title \"{{initial_title}}\""
        }
    },
    "linux_xinput": {
        "Category": "linux",
        "Command": "xinput",
        "P-Summary": "list avail input devic queri inform devic chang input devic set",
        "P-Tasks": "disabl input disconnect input master enabl input list input devic reattach input slave master",
        "Summary": "List available input devices, query information about a device and change input device settings.",
        "Task-Script": {
            "Disable an input": "xinput disable {{id}}",
            "Disconnect an input from its master": "xinput float {{id}}",
            "Enable an input": "xinput enable {{id}}",
            "List all input devices": "xinput list",
            "Reattach an input as slave to a master": "xinput reattach {{id}} {{master_id}}"
        }
    },
    "linux_xman": {
        "Category": "linux",
        "Command": "xman",
        "P-Summary": "manual page viewer x window system",
        "P-Tasks": "open manual page output store given file show manual page directori start xman three-button window",
        "Summary": "Manual page viewer for X Window System.",
        "Task-Script": {
            "Open the manual page output stored in a given file": "xman -helpfile {{filename}}",
            "Show both manual page and directory": "xman -bothshown",
            "Start xman in three-button window": "xman"
        }
    },
    "linux_xrandr": {
        "Category": "linux",
        "Command": "xrandr",
        "P-Summary": "set size orient reflect output screen",
        "P-Tasks": "chang resolut updat frequenc displayport 1 1920x1080 60hz disabl disconnect output enabl connect one default set disabl vga1 output display current state system known screen resolut see display hardwar inform set bright lvds1 50 set resolut hdmi2 1280x1024 put right dp1",
        "Summary": "Set the size, orientation and/or reflection of the outputs for a screen.",
        "Task-Script": {
            "Change the resolution and update frequency of DisplayPort 1 to 1920x1080, 60Hz": "xrandr --output {{DP1}} --mode {{1920x1080}} --rate {{60}}",
            "Disable disconnected outputs and enable connected ones with default settings": "xrandr --auto",
            "Disable the VGA1 output": "xrandr --output {{VGA1}} --off",
            "Display the current state of the system (known screens, resolutions, ...)": "xrandr --query",
            "See display hardware information": "xrandr -q",
            "Set brightness for LVDS1 to 50%": "xrandr --output {{LVDS1}} --brightness {{0.5}}",
            "Set the resolution of HDMI2 to 1280x1024 and put it on the right of DP1": "xrandr --output {{HDMI2}} --mode {{1280x1024}} --right-of {{DP1}}"
        }
    },
    "linux_xsel": {
        "Category": "linux",
        "Command": "xsel",
        "P-Summary": "x11 select clipboard manipul tool",
        "P-Tasks": "clear clipboard output x11 primari select content termin equival mous middle-click output clipboard content file output clipboard content termin equival ctrl + v use command output input clip b oard equival ctrl + c use content file input clipboard",
        "Summary": "X11 selection and clipboard manipulation tool.",
        "Task-Script": {
            "Clear the clipboard": "xsel -cb",
            "Output the X11 primary selection's contents into the terminal (equivalent to a mouse middle-click)": "xsel -op",
            "Output the clipboard's contents into a file": "xsel -ob > {{file}}",
            "Output the clipboard's contents into the terminal (equivalent to `Ctrl + V`)": "xsel -ob",
            "Use a command's output as input of the clip[b]oard (equivalent to `Ctrl + C`)": "echo 123 | xsel -ib",
            "Use the contents of a file as input of the clipboard": "cat {{file}} | xsel -ib"
        }
    },
    "linux_xsetwacom": {
        "Category": "linux",
        "Command": "xsetwacom",
        "P-Summary": "command line tool chang set wacom pen tablet runtim",
        "P-Tasks": "list avail wacom devic\ndevic name first column rotat input use tablet-pc rotat screen 0 90 180 270 degre natur rotat set wacom area specif screen\nget name screen xrandr set button work tip pen touch tablet set mode rel like mous absolut like pen mode",
        "Summary": "Command line tool to change settings for Wacom pen tablets at runtime.",
        "Task-Script": {
            "List all the available wacom devices. The device name is in the first column": "xsetwacom list",
            "Rotate the input (useful for tablet-PC when rotating screen) by 0|90|180|270 degrees from \"natural\" rotation": "xsetwacom set \"{{device_name}}\" Rotate {{none|half|cw|ccw}}",
            "Set Wacom area to specific screen. Get name of the screen with `xrandr`": "xsetwacom set \"{{device_name}}\" MapToOutput {{screen}}",
            "Set button to only work when the tip of the pen is touching the tablet": "xsetwacom set \"{{device_name}}\" TabletPCButton \"on\"",
            "Set mode to relative (like a mouse) or absolute (like a pen) mode": "xsetwacom set \"{{device_name}}\" Mode \"{{Relative|Absolute}}\""
        }
    },
    "linux_xterm": {
        "Category": "linux",
        "Command": "xterm",
        "P-Summary": "termin emul x window system",
        "P-Tasks": "open termin fullscreen mode open termin use serif font font size equal 20 open termin 100 charact per line 35 line screen posit x 200px 20px open termin dark blue background yellow foreground font color open termin titl exampl",
        "Summary": "A terminal emulator for the X Window System.",
        "Task-Script": {
            "Open the terminal in fullscreen mode": "xterm -fullscreen",
            "Open the terminal using a Serif font and a font size equal to 20": "xterm -fa {{'Serif'}} -fs {{20}}",
            "Open the terminal with 100 characters per line and 35 lines, in screen position x=200px, y=20px": "xterm -geometry {{100}}x{{35}}+{{200}}+{{20}}",
            "Open the terminal with a dark blue background and yellow foreground (font color)": "xterm -bg {{darkblue}} -fg {{yellow}}",
            "Open the terminal with a title of `Example`": "xterm -T {{Example}}"
        }
    },
    "linux_xtrlock": {
        "Category": "linux",
        "Command": "xtrlock",
        "P-Summary": "lock x display user suppli password",
        "P-Tasks": "display blank screen well padlock cursor fork xtrlock process return immedi lock display show padlock instead cursor",
        "Summary": "Lock the X display until the user supplies their password.",
        "Task-Script": {
            "Display a blank screen as well as the padlock cursor": "xtrlock -b",
            "Fork the xtrlock process and return immediately": "xtrlock -f",
            "Lock the display and show a padlock instead of the cursor": "xtrlock"
        }
    },
    "linux_xvfb-run": {
        "Category": "linux",
        "Command": "xvfb-run",
        "P-Summary": "run command virtual x server environ",
        "P-Tasks": "pass argument xvfb server run specifi command virtual x server tri get free server number default 99 avail",
        "Summary": "Run a command in a virtual X server environment.",
        "Task-Script": {
            "Pass arguments to the Xvfb server": "xvfb-run --server-args \"{{-screen 0 1024x768x24}}\" {{command}}",
            "Run the specified command in a virtual X server": "xvfb-run {{command}}",
            "Try to get a free server number, if the default (99) is not available": "xvfb-run --auto-servernum {{command}}"
        }
    },
    "linux_yank": {
        "Category": "linux",
        "Command": "yank",
        "P-Summary": "read input stdin display select interfac allow field select copi clipboard",
        "P-Tasks": "yank field match specif pattern yank entir line yank use specif delimit yank use default delimit f n r",
        "Summary": "Read input from `stdin` and display a selection interface that allows a field to be selected and copied to the clipboard.",
        "Task-Script": {
            "Only yank fields matching a specific pattern": "{{ps ux}} | yank -g \"{{[0-9]+}}\"",
            "Yank an entire line": "{{sudo dmesg}} | yank -l",
            "Yank using a specific delimiter": "{{echo hello=world}} | yank -d {{=}}",
            "Yank using the default delimiters (\\f, \\n, \\r, \\s, \\t)": "{{sudo dmesg}} | yank"
        }
    },
    "linux_yaourt": {
        "Category": "linux",
        "Command": "yaourt",
        "P-Summary": "arch linux util build packag arch user repositori",
        "P-Tasks": "instal new packag includ aur list instal packag version repositori aur packag list repositori name local remov packag depend includ aur packag search packag databas keyword includ aur synchron updat packag includ aur",
        "Summary": "Arch Linux utility for building packages from the Arch User Repository.",
        "Task-Script": {
            "Install a new package (includes AUR)": "yaourt -S {{package_name}}",
            "List installed packages, versions, and repositories (AUR packages will be listed under the repository name 'local')": "yaourt -Q",
            "Remove a package and its dependencies (includes AUR packages)": "yaourt -Rs {{package_name}}",
            "Search the package database for a keyword (including AUR)": "yaourt -Ss {{package_name}}",
            "Synchronize and update all packages (including AUR)": "yaourt -Syua"
        }
    },
    "linux_yay": {
        "Category": "linux",
        "Command": "yay",
        "P-Summary": "yet anoth yogurt : util arch linux build instal packag arch user repositori\nalso see pacman",
        "P-Tasks": "instal new packag repo aur interact search instal packag repo aur search packag databas keyword repo aur show statist instal packag system health synchron updat packag repo aur synchron updat aur packag",
        "Summary": "Yet Another Yogurt: A utility for Arch Linux to build and install packages from the Arch User Repository.\nAlso see `pacman`.",
        "Task-Script": {
            "Install a new package from the repos and AUR": "yay -S {{package_name}}",
            "Interactively search and install packages from the repos and AUR": "yay {{package_name|search_term}}",
            "Search the package database for a keyword from the repos and AUR": "yay -Ss {{keyword}}",
            "Show statistics for installed packages and system health": "yay -Ps",
            "Synchronize and update all packages from the repos and AUR": "yay",
            "Synchronize and update only AUR packages": "yay -Sua"
        }
    },
    "linux_yum": {
        "Category": "linux",
        "Command": "yum",
        "P-Summary": "packag manag util rhel fedora cento older version",
        "P-Tasks": "display avail updat instal packag find packag provid particular command instal new packag instal new packag assum ye question also work updat great autom updat remov packag upgrad instal packag newest avail version",
        "Summary": "Package management utility for RHEL, Fedora, and CentOS (for older versions).",
        "Task-Script": {
            "Display available updates for installed packages": "yum check-update",
            "Find the package that provides a particular command": "yum provides {{command}}",
            "Install a new package": "yum install {{package}}",
            "Install a new package and assume yes to all questions (also works with update, great for automated updates)": "yum -y install {{package}}",
            "Remove a package": "yum remove {{package}}",
            "Upgrade installed packages to newest available versions": "yum upgrade"
        }
    },
    "linux_zenity": {
        "Category": "linux",
        "Command": "zenity",
        "P-Summary": "display dialog command line shell script\nreturn user-insert valu 1 error",
        "P-Tasks": "display file select form user select directori display name password form output data separ display progress bar updat messag everi second show progress percent display info dialog display text hello\ndisplay default question dialog",
        "Summary": "Display dialogs from the command line/shell scripts.\nReturn user-inserted values or 1 if error.",
        "Task-Script": {
            "Display a file selection form in which the user can only select directories": "zenity --file-selection --directory",
            "Display a name/password form and output the data separated by \";\"": "zenity --forms --add-entry=\"{{Name}}\" --add-password=\"{{Password}}\" --separator=\"{{;}}\"",
            "Display a progress bar which updates its message every second and show a progress percent": "{{(echo \"#1\"; sleep 1; echo \"50\"; echo \"#2\"; sleep 1; echo \"100\")}} | zenity --progress",
            "Display an info dialog displaying the text \"Hello!\"": "zenity --info --text=\"{{Hello!}}\"",
            "Display the default question dialog": "zenity --question"
        }
    },
    "linux_zgrep": {
        "Category": "linux",
        "Command": "zgrep",
        "P-Summary": "grep text pattern file within compress file equival grep -z",
        "P-Tasks": "display line pattern present invert search function grep compress file multipl pattern grep pattern compress file case-insensit grep pattern compress file case-sensit output count line contain match pattern compress file print 3 line c ontext around b efor fter match use extend regular express support\n+",
        "Summary": "Grep text patterns from files within compressed file (equivalent to grep -Z).",
        "Task-Script": {
            "Display the lines which don’t have the pattern present (Invert the search function)": "zgrep -v {{pattern}} {{path/to/compressed/file}}",
            "Grep a compressed file for multiple patterns": "zgrep -e \"{{pattern_1}}\" -e \"{{pattern_2}}\" {{path/to/compressed/file}}",
            "Grep a pattern in a compressed file (case-insensitive)": "zgrep -i {{pattern}} {{path/to/compressed/file}}",
            "Grep a pattern in a compressed file (case-sensitive)": "zgrep {{pattern}} {{path/to/compressed/file}}",
            "Output count of lines containing matched pattern in a compressed file": "zgrep -c {{pattern}} {{path/to/compressed/file}}",
            "Print 3 lines of [C]ontext around, [B]efore, or [A]fter each match": "zgrep -{{C|B|A}} {{3}} {{pattern}} {{path/to/compressed/file}}",
            "Use extended regular expressions (supporting `?`, `+`, `{}`, `()` and `|`)": "zgrep -E {{^regex$}} {{path/to/file}}"
        }
    },
    "linux_zile": {
        "Category": "linux",
        "Command": "zile",
        "P-Summary": "zile lightweight clone emac text editor",
        "P-Tasks": "open file open file specifi line number quit save file start buffer temporari note save undo chang",
        "Summary": "Zile is a lightweight clone of the Emacs text editor.",
        "Task-Script": {
            "Open a file": "zile {{path/to/file}}",
            "Open a file at a specified line number": "zile +{{line_number}} {{path/to/file}}",
            "Quit": "Ctrl + X, Ctrl + C",
            "Save a file": "Ctrl + X, Ctrl + S",
            "Start a buffer for temporary notes, which won't be saved": "zile",
            "Undo changes": "Ctrl + X, U"
        }
    },
    "linux_zramctl": {
        "Category": "linux",
        "Command": "zramctl",
        "P-Summary": "setup control zram devic\nuse mkf mkswap format zram devic partit",
        "P-Tasks": "check zram enabl enabl zram dynam number devic use zramctl configur devic enabl zram exactli 2 devic find initialis next free zram devic 2gb virtual drive use lz4 compress list current initialis devic",
        "Summary": "Setup and control zram devices.\nUse `mkfs` or `mkswap` to format zram devices to partitions.",
        "Task-Script": {
            "Check if zram is enabled": "lsmod | grep -i zram",
            "Enable zram with a dynamic number of devices (use `zramctl` to configure devices further)": "sudo modprobe zram",
            "Enable zram with exactly 2 devices": "sudo modprobe zram num_devices={{2}}",
            "Find and initialise the next free zram device to a 2GB virtual drive using LZ4 compression": "sudo zramctl --find --size {{2GB}} --algorithm {{lz4}}",
            "List currently initialised devices": "zramctl"
        }
    },
    "linux_zypper": {
        "Category": "linux",
        "Command": "zypper",
        "P-Summary": "suse opensus packag manag util",
        "P-Tasks": "instal new packag remov packag search packag via keyword synchron list packag version avail upgrad instal packag newest avail version",
        "Summary": "SUSE & openSUSE package management utility.",
        "Task-Script": {
            "Install a new package": "zypper install {{package}}",
            "Remove a package": "zypper remove {{package}}",
            "Search package via keyword": "zypper search {{keyword}}",
            "Synchronize list of packages and versions available": "zypper refresh",
            "Upgrade installed packages to newest available versions": "zypper update"
        }
    }
}